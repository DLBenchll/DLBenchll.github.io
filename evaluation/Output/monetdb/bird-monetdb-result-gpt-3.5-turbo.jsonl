{"model": "gpt-3.5-turbo", "message": "SELECT movie_title, movie_release_year FROM movies ORDER BY CHAR_LENGTH(movie_popularity::STRING) DESC LIMIT 1", "sql_id": 1}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.movie_title FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE CAST(SUBSTRING(T1.rating_timestamp_utc FROM 1 FOR 4) AS INTEGER) = 2020 AND CAST(SUBSTRING(T1.rating_timestamp_utc FROM 6 FOR 2) AS INTEGER) > 4", "sql_id": 2}
{"model": "gpt-3.5-turbo", "message": "SELECT user_id FROM lists_users WHERE user_subscriber = 1 GROUP BY user_id HAVING MAX(SUBSTRING(list_creation_date_utc, 1, 4)::INT) - MIN(SUBSTRING(list_creation_date_utc, 1, 4)::INT) >= 10", "sql_id": 3}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM lists WHERE CAST(SUBSTRING(list_update_timestamp_utc FROM 1 FOR 4) AS INTEGER) - CAST(SUBSTRING(list_creation_timestamp_utc FROM 1 FOR 4) AS INTEGER) > 10", "sql_id": 4}
{"model": "gpt-3.5-turbo", "message": "SELECT list_title FROM lists WHERE EXTRACT(YEAR FROM list_update_timestamp_utc) = 2016 ORDER BY list_update_timestamp_utc DESC LIMIT 1", "sql_id": 5}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.title\nFROM sales AS T1\nINNER JOIN titles AS T2 ON T1.title_id = T2.title_id\nWHERE YEAR(T1.ord_date) = 1992\nORDER BY T1.qty DESC\nLIMIT 1", "sql_id": 9}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.title, T1.notes, T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE EXTRACT(YEAR FROM T1.pubdate) = 1991", "sql_id": 10}
{"model": "gpt-3.5-turbo", "message": "SELECT fname, lname FROM employee WHERE EXTRACT(YEAR FROM hire_date) < 1990", "sql_id": 11}
{"model": "gpt-3.5-turbo", "message": "SELECT DATE_PART('year', hire_date) FROM employee GROUP BY DATE_PART('year', hire_date) ORDER BY COUNT(emp_id) DESC LIMIT 1", "sql_id": 12}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.pub_name \nFROM titles AS T1 \nINNER JOIN publishers AS T2 \nON T1.pub_id = T2.pub_id \nWHERE EXTRACT(YEAR FROM T1.pubdate) = 1991 \nGROUP BY T1.pub_id, T2.pub_name \nORDER BY COUNT(T1.title_id) DESC \nLIMIT 1", "sql_id": 13}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.notes FROM titles AS T1 INNER JOIN sales AS T2 ON T1.title_id = T2.title_id WHERE DATE(T2.ord_date) = '1994-09-14'", "sql_id": 14}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T1.type \nFROM titles AS T1 \nINNER JOIN sales AS T2 \nON T1.title_id = T2.title_id \nWHERE DATE_TRUNC('day', T2.ord_date) = '1993-05-29';", "sql_id": 15}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.city = 'Fremont' THEN qty END) - SUM(CASE WHEN T2.city = 'Portland' THEN qty END) AS DOUBLE) * 100 / SUM(CASE WHEN T2.city = 'Fremont' THEN qty END) FROM sales AS T1 INNER JOIN stores AS T2 ON T1.stor_id = T2.stor_id WHERE YEAR(T1.ord_date) = 1993", "sql_id": 16}
{"model": "gpt-3.5-turbo", "message": "SELECT fname, minit, lname FROM employee WHERE EXTRACT(YEAR FROM hire_date) BETWEEN 1990 AND 1995 ORDER BY job_lvl DESC", "sql_id": 17}
{"model": "gpt-3.5-turbo", "message": "SELECT 365 * (EXTRACT(YEAR FROM T2.\"Date sent to company\") - EXTRACT(YEAR FROM T2.\"Date received\")) + 30 * (EXTRACT(MONTH FROM T2.\"Date sent to company\") - EXTRACT(MONTH FROM T2.\"Date received\")) + (EXTRACT(DAY FROM T2.\"Date sent to company\") - EXTRACT(DAY FROM T2.\"Date received\")) FROM \"client\" AS T1 INNER JOIN \"events\" AS T2 ON T1.client_id = T2.Client_ID WHERE T1._first = 'Matthew' AND T1._last = 'Pierce' AND T2.\"Date received\" = '2016-10-28'", "sql_id": 18}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE EXTRACT(YEAR FROM T2.Date_received) = 2016 AND T1.sex = 'Male' AND T2.Product = 'Credit card';", "sql_id": 19}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(COUNT(T2.\"Complaint ID\") AS REAL) / 3 AS average FROM \"client\" AS T1 INNER JOIN \"events\" AS T2 ON T1.client_id = T2.Client_ID WHERE YEAR(T2.\"Date received\") BETWEEN 2015 AND 2017 AND T1.city = 'New York City' AND T2.Product = 'Credit card';", "sql_id": 20}
{"model": "gpt-3.5-turbo", "message": "SELECT 100.0 * (SUM(CASE WHEN EXTRACT(YEAR FROM T2.\"Date_received\") = 2017 THEN 1 ELSE 0 END) - SUM(CASE WHEN EXTRACT(YEAR FROM T2.\"Date_received\") = 2016 THEN 1 ELSE 0 END)) / SUM(CASE WHEN EXTRACT(YEAR FROM T2.\"Date_received\") = 2016 THEN 1 ELSE 0 END) FROM \"client\" AS T1 INNER JOIN \"events\" AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'New York City';", "sql_id": 21}
{"model": "gpt-3.5-turbo", "message": "SELECT 365 * (EXTRACT(YEAR FROM T2.\"Date sent to company\") - EXTRACT(YEAR FROM T2.\"Date received\")) + 30 * (EXTRACT(MONTH FROM T2.\"Date sent to company\") - EXTRACT(MONTH FROM T2.\"Date received\")) + (EXTRACT(DAY FROM T2.\"Date sent to company\") - EXTRACT(DAY FROM T2.\"Date received\")) AS days\nFROM \"client\" AS T1\nINNER JOIN \"events\" AS T2 ON T1.client_id = T2.Client_ID\nWHERE T2.\"Date received\" = '2012-05-18' AND T1.sex = 'Male' AND T1._first = 'Brantley' AND T1.middle = 'Julian' AND T1._last = 'Stanley';", "sql_id": 22}
{"model": "gpt-3.5-turbo", "message": "SELECT \"Complaint ID\" FROM events WHERE EXTRACT(DAY FROM \"Date_sent_to_company\") - EXTRACT(DAY FROM \"Date_received\") = (SELECT MAX(EXTRACT(DAY FROM \"Date_sent_to_company\") - EXTRACT(DAY FROM \"Date_received\")) FROM events WHERE \"Date_sent_to_company\" = '2014-09-25') AND \"Date_sent_to_company\" = '2014-09-25';", "sql_id": 24}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(ser_time) FROM callcenterlogs WHERE EXTRACT(MINUTE FROM ser_time) > 15", "sql_id": 25}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.age > 13 AND T1.age <= 19 THEN 60 * EXTRACT(HOUR FROM ser_time) + EXTRACT(MINUTE FROM ser_time) + EXTRACT(SECOND FROM ser_time) / 60 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 13 AND T1.age <= 19 THEN 1 ELSE 0 END) AS teenagerAverageMins, \nCAST(SUM(CASE WHEN T1.age > 19 AND T1.age <= 65 THEN 60 * EXTRACT(HOUR FROM ser_time) + EXTRACT(MINUTE FROM ser_time) + EXTRACT(SECOND FROM ser_time) / 60 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 19 AND T1.age <= 65 THEN 1 ELSE 0 END) AS adultAverageMins, \nCAST(SUM(CASE WHEN T1.age > 65 THEN 60 * EXTRACT(HOUR FROM ser_time) + EXTRACT(MINUTE FROM ser_time) + EXTRACT(SECOND FROM ser_time) / 60 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END) AS elderAverageMins \nFROM client AS T1 \nINNER JOIN callcenterlogs AS T2 ON T1.client_id = T2.rand_client;", "sql_id": 26}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.Issue FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint_ID\" = T2.\"Complaint_ID\" WHERE EXTRACT(MINUTE FROM T1.ser_time) < 10", "sql_id": 28}
{"model": "gpt-3.5-turbo", "message": "SELECT \"Complaint_ID\", call_id, phonefinal FROM callcenterlogs WHERE EXTRACT(YEAR FROM \"Date_received\") = 2014 AND server = 'AVIDAN';", "sql_id": 29}
{"model": "gpt-3.5-turbo", "message": "SELECT AVG(CAST(SUBSTRING(ser_time FROM 4 FOR 2) AS REAL)) FROM callcenterlogs WHERE \"Date_received\" BETWEEN '2017-01-01' AND '2017-04-01';", "sql_id": 30}
{"model": "gpt-3.5-turbo", "message": "SELECT EXTRACT(YEAR FROM \"Date_received\"), COUNT(\"Date_received\") FROM \"events\" WHERE \"Product\" = 'Credit card' AND \"Issue\" = 'Overlimit fee' GROUP BY EXTRACT(YEAR FROM \"Date_received\") HAVING COUNT(\"Date_received\")", "sql_id": 31}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.priority = 2 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.\"Complaint_ID\") FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint_ID\" = T2.\"Complaint_ID\" WHERE YEAR(T1.\"Date_received\") = 2017", "sql_id": 33}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'Omaha' AND YEAR(T2.Date_received) = 2012 AND T2.Product = 'Credit card';", "sql_id": 34}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE YEAR(T2.Date_received) BETWEEN 2012 AND 2015 AND T2.Submitted_via = 'Email' AND T1.sex = 'Male';", "sql_id": 35}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST((SUM(CASE WHEN EXTRACT(DAY FROM T2.\"Date_sent_to_company\") - EXTRACT(DAY FROM T2.\"Date_received\") > 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM \"client\" AS T1 INNER JOIN \"events\" AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'Houston' AND EXTRACT(YEAR FROM T2.\"Date_received\") = 2014;", "sql_id": 36}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(\"Submitted via\") FROM events WHERE YEAR(\"Date_received\") = 2012 AND \"Submitted via\" = 'Email';", "sql_id": 37}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.\"Complaint_ID\") FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint_ID\" = T2.\"Complaint_ID\" WHERE YEAR(T1.\"Date_received\") = 2015 AND T2.\"Timely_response_\" = 'Yes' AND T2.\"Company_response_to_consumer\" = 'Closed with explanation';", "sql_id": 38}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T2.\"Complaint_ID\") FROM callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Complaint_ID\" = T2.\"Complaint_ID\" WHERE T2.\"Submitted_via\" = 'Phone' AND EXTRACT(YEAR FROM T1.\"Date_received\") = 2014;", "sql_id": 39}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Quentin Tarantino' AND CAST(EXTRACT(YEAR FROM T1.release_date) AS INT) = 1995", "sql_id": 40}
{"model": "gpt-3.5-turbo", "message": "SELECT AVG(T1.revenue) FROM movie AS T1 INNER JOIN production_country AS T2 ON T1.movie_id = T2.movie_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id WHERE T3.country_name = 'United States of America' AND CAST(EXTRACT(YEAR FROM T1.release_date) AS INT) = 2006", "sql_id": 41}
{"model": "gpt-3.5-turbo", "message": "SELECT AVG(CASE WHEN T3.country_name = 'United States of America' THEN T1.revenue ELSE NULL END) - AVG(CASE WHEN T3.country_name = 'India' THEN T1.revenue ELSE NULL END) AS CALCULATE FROM movie AS T1 INNER JOIN production_country AS T2 ON T1.movie_id = T2.movie_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id WHERE CAST(EXTRACT(YEAR FROM T1.release_date) AS INT) = 2016", "sql_id": 42}
{"model": "gpt-3.5-turbo", "message": "SELECT title FROM movie WHERE CAST(EXTRACT(YEAR FROM release_date) AS INT) < 2000 LIMIT 5", "sql_id": 43}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.company_id FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE CAST(EXTRACT(YEAR FROM T1.release_date) AS INT) = 1916", "sql_id": 44}
{"model": "gpt-3.5-turbo", "message": "SELECT title FROM movie WHERE CAST(EXTRACT(YEAR FROM release_date) AS INT) = 1945", "sql_id": 45}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T3.genre_name = 'Adventure' AND CAST(EXTRACT(YEAR FROM T1.release_date) AS INT) = 2000", "sql_id": 46}
{"model": "gpt-3.5-turbo", "message": "SELECT T3.title \nFROM production_company AS T1 \nINNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id \nINNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id \nWHERE T1.company_name = 'Paramount Pictures' \nAND CAST(EXTRACT(YEAR FROM T3.release_date) AS INT) = 2000;", "sql_id": 47}
{"model": "gpt-3.5-turbo", "message": "SELECT SUBSTRING(SUBSTRING(Name, POSITION('.' IN Name) + 1), 1, POSITION('.' IN SUBSTRING(Name, POSITION('.' IN Name) + 1)) - 1) AS task FROM Method WHERE NameTokenized = 'online median filter test median window filling';", "sql_id": 48}
{"model": "gpt-3.5-turbo", "message": "SELECT SUBSTRING(SUBSTRING(Name, POSITION('.' IN Name) + 1), 1, POSITION('.' IN SUBSTRING(Name, POSITION('.' IN Name) + 1)) - 1) AS task FROM Method WHERE NameTokenized = 'html parser feed';", "sql_id": 49}
{"model": "gpt-3.5-turbo", "message": "SELECT SUBSTRING(SUBSTRING(Name, POSITION('.' IN Name) + 1), 1, POSITION('.' IN SUBSTRING(Name, POSITION('.' IN Name) + 1)) - 1) AS task FROM Method WHERE Id = 2", "sql_id": 50}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT SUBSTRING(SUBSTRING(Name, POSITION('.' IN Name) + 1), 1, POSITION('.' IN SUBSTRING(Name, POSITION('.' IN Name) + 1)) - 1) AS task FROM Method WHERE Lang = 'cs';", "sql_id": 51}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT SUBSTRING(SUBSTRING(\"Name\", POSITION('.' IN \"Name\") + 1), 1, POSITION('.' IN SUBSTRING(\"Name\", POSITION('.' IN \"Name\") + 1)) - 1) AS task FROM \"Method\" WHERE \"NameTokenized\" = 'string extensions to pascal case';", "sql_id": 52}
{"model": "gpt-3.5-turbo", "message": "SELECT ((MAX(CAST(SUBSTRING(T2.screentime, 3, 2) AS DOUBLE PRECISION)) - MIN(CAST(SUBSTRING(T2.screentime, 3, 2) AS DOUBLE PRECISION))) * 100 / MIN(CAST(SUBSTRING(T2.screentime, 3, 2) AS DOUBLE PRECISION)) FROM movie AS T1 INNER JOIN characters AS T2 ON T1.\"MovieID\" = T2.\"MovieID\" WHERE T1.\"Title\" = 'Batman';", "sql_id": 53}
{"model": "gpt-3.5-turbo", "message": "SELECT T3.age \nFROM app_events AS T1 \nINNER JOIN events_relevant AS T2 ON T1.event_id = T2.event_id \nINNER JOIN gender_age AS T3 ON T2.device_id = T3.device_id \nWHERE T1.is_active = 1 \nAND T2.longitude = 121 \nAND T2.latitude = 31 \nAND SUBSTRING(T2._timestamp, 1, 10) = '2016-05-06' \nORDER BY T3.age DESC \nLIMIT 1", "sql_id": 54}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) * 100 / COUNT(T2.device_id) AS perFemale,\n       SUM(CASE WHEN T2.gender = 'M' THEN 1 ELSE 0 END) * 100 / COUNT(T2.device_id) AS perMale\nFROM phone_brand_device_model2 AS T1\nINNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id\nWHERE T1.phone_brand = 'OPPO';", "sql_id": 55}
{"model": "gpt-3.5-turbo", "message": "SELECT longitude, latitude FROM events WHERE SUBSTRING(_timestamp FROM 1 FOR 10) = '2016-05-08';", "sql_id": 56}
{"model": "gpt-3.5-turbo", "message": "SELECT app_id , CASE WHEN is_installed = 1 THEN 'YES' ELSE 'NO' END AS status FROM app_events WHERE event_id = 844", "sql_id": 57}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(event_id) FROM events WHERE SUBSTRING(\"_timestamp\" FROM 1 FOR 10) = '2016-04-30';", "sql_id": 58}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN gender = 'M' AND \"group\" = 'M27-28' THEN 1 ELSE 0 END) AS DOUBLE) / CAST(SUM(CASE WHEN gender = 'F' AND \"group\" = 'F27-28' THEN 1 ELSE 0 END) AS DOUBLE) AS r FROM gender_age;", "sql_id": 59}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T2.event_id) FROM gender_age AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T1.gender = 'M' AND SUBSTRING(T2._timestamp, 1, 10) = '2016-05-04' AND T1.age = 88", "sql_id": 60}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN T1.category = 'Industry tag' THEN 1 ELSE 0 END) * 100 / COUNT(T2.app_id) AS per FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T2.label_id = T1.label_id", "sql_id": 61}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN T1.device_model = 'Nexus 5' THEN 1 ELSE 0 END) * 100 / COUNT(T1.device_id) AS per, \nSUM(CASE WHEN T1.device_model = 'Nexus 5' AND T2.gender = 'M' THEN 1 ELSE 0 END) / \nSUM(CASE WHEN T1.device_model = 'Nexus 5' AND T2.gender = 'F' THEN 1 ELSE 0 END) AS r \nFROM phone_brand_device_model2 AS T1 \nINNER JOIN gender_age AS T2 ON T2.device_id = T1.device_id \nWHERE T1.phone_brand = 'LG';", "sql_id": 62}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(event_id) FROM events WHERE EXTRACT(YEAR FROM _timestamp) = 2016;", "sql_id": 63}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(event_id) FROM events WHERE EXTRACT(YEAR FROM _timestamp) = 2016 AND device_id = 29182687948017100", "sql_id": 64}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.event_id) FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.event_id = T2.device_id WHERE EXTRACT(YEAR FROM T1._timestamp) = 2016 AND T2.phone_brand = 'vivo';", "sql_id": 65}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN T1.\"group\" = 'M23-26' THEN 1.0 ELSE 0 END) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo';", "sql_id": 66}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.phone_brand = 'vivo' THEN 1 ELSE 0 END) AS DOUBLE) / COUNT(T1.device_id) AS per FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.event_id = T2.device_id WHERE T1.event_id = '2'", "sql_id": 67}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.category = '80s Japanese comic' THEN 1 ELSE 0 END) AS DOUBLE) / COUNT(T1.label_id) AS J8,\n       CAST(SUM(CASE WHEN T1.category = '90s Japanese comic' THEN 1 ELSE 0 END) AS DOUBLE) / COUNT(T1.label_id) AS J9\nFROM label_categories AS T1\nINNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id", "sql_id": 68}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(event_id) FROM events WHERE SUBSTRING(\"_timestamp\" FROM 1 FOR 10) = '2016-05-06';", "sql_id": 70}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T3.device_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id INNER JOIN gender_age AS T3 ON T2.device_id = T3.device_id WHERE SUBSTRING(\"timestamp\" FROM 1 FOR 10) = '2016-05-02' AND T1.is_active = 1 AND T3.age = '30';", "sql_id": 71}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.event_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE SUBSTRING(T2._timestamp, 1, 10) = '2016-05-06' AND T1.is_installed = '1'", "sql_id": 72}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.app_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id INNER JOIN gender_age AS T3 ON T2.event_id = T3.device_id WHERE SUBSTRING(T2._timestamp, 1, 10) = '2016-05-07' AND T1.is_active = '1' AND T3.group = 'F29-32';", "sql_id": 73}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN \"T1\".\"_timestamp\" = '2016-05-02 7:50:28' THEN 1 ELSE 0 END) AS DOUBLE) / CAST(SUM(CASE WHEN \"T1\".\"_timestamp\" = '2016-05-02 7:41:03' THEN 1 ELSE 0 END) AS DOUBLE) AS num\nFROM \"events\" AS T1\nINNER JOIN \"app_events\" AS T2 ON \"T1\".\"event_id\" = \"T2\".\"event_id\"\nWHERE \"T2\".\"is_active\" = 1;", "sql_id": 74}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN phone_brand = 'vivo' THEN 1 ELSE 0 END) - SUM(CASE WHEN phone_brand = 'LG' THEN 1 ELSE 0 END) AS num FROM phone_brand_device_model2;", "sql_id": 75}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.device_id WHERE EXTRACT(YEAR FROM T2._timestamp) = 2016 AND T1.\"group\" = 'M23-26';", "sql_id": 76}
{"model": "gpt-3.5-turbo", "message": "SELECT CASE WHEN SUM(CASE WHEN T2.category = 'Securities' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.category = 'Finance' THEN 1 ELSE 0 END) > 0 THEN 'Securities' ELSE 'Finance' END AS diff FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id", "sql_id": 77}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS DOUBLE) / CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS DOUBLE) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo'", "sql_id": 78}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.category = 'Securities' THEN 1 ELSE 0 END) AS DOUBLE) / CAST(SUM(CASE WHEN T2.category = 'Finance' THEN 1 ELSE 0 END) AS DOUBLE) AS per FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id", "sql_id": 79}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN is_active = 1 THEN 1 ELSE 0 END) AS DOUBLE) / CAST(SUM(CASE WHEN is_active = 0 THEN 1 ELSE 0 END) AS DOUBLE) AS per FROM app_events WHERE event_id = 58", "sql_id": 80}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) AS DOUBLE) / COUNT(device_id) AS per FROM gender_age;", "sql_id": 81}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.device_id) FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'OPPO' AND DATE_TRUNC('day', T1.\"_timestamp\") = '2016-05-01'", "sql_id": 82}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS FLOAT) / CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS FLOAT) AS per\nFROM gender_age AS T1\nINNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id\nWHERE T2.phone_brand = 'vivo' AND T2.device_model = 'X5Pro';", "sql_id": 83}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' AND T1.age > 80 THEN 1 ELSE 0 END) AS DOUBLE) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'HTC';", "sql_id": 84}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.age < 50 THEN 1 ELSE 0 END) AS DOUBLE) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'OPPO';", "sql_id": 85}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.age > 20 THEN 1 ELSE 0 END) AS DOUBLE) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'SUGAR'", "sql_id": 86}
{"model": "gpt-3.5-turbo", "message": "SELECT longitude, latitude FROM events WHERE DATE(_timestamp) = '2016-04-30';", "sql_id": 87}
{"model": "gpt-3.5-turbo", "message": "SELECT T.gender\nFROM (\n    SELECT T1.gender, COUNT(T1.device_id) AS num\n    FROM gender_age AS T1\n    INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id\n    WHERE T2._timestamp::DATE BETWEEN '2016-05-01' AND '2016-05-10'\n    GROUP BY T1.gender\n) AS T\nORDER BY T.num DESC\nLIMIT 1;", "sql_id": 88}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS DOUBLE) / CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS DOUBLE) AS per\nFROM gender_age AS T1\nINNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id\nINNER JOIN app_events_relevant AS T3 ON T2.event_id = T3.event_id\nWHERE T3.is_installed = 0", "sql_id": 89}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN latitude != 0 AND longitude != 0 THEN 1 ELSE 0 END) - SUM(CASE WHEN latitude = 0 AND longitude = 0 THEN 1 ELSE 0 END) AS diff FROM events WHERE device_id = '-922956879900150000';", "sql_id": 90}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN is_installed = 1 AND is_active = 0 THEN 1 ELSE 0 END) AS DOUBLE) / COUNT(app_id) AS perrcent FROM app_events WHERE event_id = 6", "sql_id": 91}
{"model": "gpt-3.5-turbo", "message": "SELECT CASE WHEN SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) > 0 THEN 'M' ELSE 'F' END AS gender\nFROM gender_age AS T1\nINNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id\nWHERE T2.device_model = 'Galaxy Note 2';", "sql_id": 92}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN T1.category = 'Academic Information' THEN 1.0 ELSE 0 END) / COUNT(T2.app_id) AS per FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id", "sql_id": 93}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.\"group\" = 'F27-28' THEN 1 ELSE 0 END) AS DOUBLE) / COUNT(T1.device_id) AS per\nFROM gender_age AS T1\nINNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id\nWHERE SUBSTRING(T2.\"_timestamp\" FROM 1 FOR 10) = '2016-05-03';", "sql_id": 94}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.gender IS NULL AND T1.age IS NULL AND T1.\"group\" IS NULL THEN 1 ELSE 0 END) AS FLOAT) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo';", "sql_id": 95}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE EXTRACT(YEAR FROM T1.air_date) = 1998 AND T2.organization = 'International Monitor Awards' AND T2.result = 'Winner';", "sql_id": 96}
{"model": "gpt-3.5-turbo", "message": "SELECT t3.years, t3.episode_id\nFROM (\n    SELECT DISTINCT T2._year AS years, T2.episode_id, row_number() OVER (PARTITION BY T2.episode_id ORDER BY T2._year) AS rm\n    FROM Person AS T1\n    INNER JOIN Award AS T2 ON T1.person_id = T2.person_id\n    WHERE T2.award = 'Television' AND T2.award_category = 'Silver Gavel Award' AND T1.name = 'Constantine Makris' AND T2.result = 'Winner' AND T2.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'\n) AS T3\nGROUP BY t3.episode_id\nHAVING COUNT(t3.years - t3.rm) >= 2", "sql_id": 97}
{"model": "gpt-3.5-turbo", "message": "SELECT t3.name\nFROM (\n    SELECT DISTINCT T2._year AS years, T1.name, row_number() OVER (PARTITION BY T1.name ORDER BY T2._year) AS rm\n    FROM Person AS T1\n    INNER JOIN Award AS T2 ON T1.person_id = T2.person_id\n    WHERE T2.award = 'Television'\n    AND T2.award_category = 'Silver Gavel Award'\n    AND T2.series = 'Law and Order'\n    AND T2.result = 'Winner'\n    AND T2.organization = 'American Bar Association Silver Gavel Awards for Media and the Arts'\n) AS T3\nGROUP BY t3.name\nHAVING COUNT(t3.years - t3.rm) >= 2", "sql_id": 98}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN EXTRACT(YEAR FROM T2._DATE) = 2009 THEN T2.VALUE ELSE 0 END) - SUM(CASE WHEN EXTRACT(YEAR FROM T2._DATE) = 2008 THEN T2.VALUE ELSE 0 END) AS increase, T2.UNITS\nFROM patients AS T1\nINNER JOIN observations AS T2 ON T1.patient = T2.PATIENT\nWHERE T1._first = 'Elly' AND T1._last = 'Koss' AND T2.DESCRIPTION = 'Body Height';", "sql_id": 99}
{"model": "gpt-3.5-turbo", "message": "SELECT DATEDIFF('day', T2.\"START\", T2.\"STOP\") AS days FROM patients AS T1 INNER JOIN medications AS T2 ON T1.\"patient\" = T2.\"PATIENT\" WHERE T1.\"_first\" = 'Elly' AND T1.\"_last\" = 'Koss' AND T2.\"DESCRIPTION\" LIKE 'Acetaminophen%';", "sql_id": 100}
{"model": "gpt-3.5-turbo", "message": "SELECT DATEDIFF('day', T2.\"START\", T2.\"STOP\") AS days\nFROM patients AS T1\nINNER JOIN conditions AS T2 ON T1.\"patient\" = T2.\"PATIENT\"\nWHERE T1.\"_first\" = 'Elly' AND T1.\"_last\" = 'Koss' AND T2.\"DESCRIPTION\" = 'Cystitis';", "sql_id": 101}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(DATEDIFF('day', T2.START, T2.STOP)::REAL) / COUNT(T1.patient) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Mr.' AND T1._first = 'Wesley' AND T1._last = 'Lemke';", "sql_id": 102}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(PATIENT) FROM conditions WHERE DESCRIPTION = 'Diabetes' AND EXTRACT(YEAR FROM START) = 1988", "sql_id": 105}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Ibuprofen 200 MG Oral Tablet' AND T1.ethnicity = 'dominican' AND YEAR(T2.START) = 2016 AND MONTH(T2.STOP) - MONTH(T2.START) = 1", "sql_id": 106}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE DESCRIPTION = 'Pneumonia' AND EXTRACT(YEAR FROM T1.birthdate) LIKE '192%';", "sql_id": 107}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T1._first, T1._last, T1.suffix \nFROM patients AS T1 \nINNER JOIN medications AS T2 \nON T1.patient = T2.PATIENT \nWHERE T2.DESCRIPTION = 'Yaz 28 Day Pack' \nAND YEAR(T2.START) = 2011;", "sql_id": 108}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE T1.race = 'black' AND T2.DESCRIPTION = 'DTaP' AND EXTRACT(YEAR FROM T2._DATE) = 2013", "sql_id": 109}
{"model": "gpt-3.5-turbo", "message": "SELECT EXTRACT(YEAR FROM T2.deathdate) - EXTRACT(YEAR FROM T2.birthdate) AS age FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2._first = 'Giovanni' AND T2._last = 'Russel' AND T1.DESCRIPTION = 'Hypertension';", "sql_id": 110}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.DESCRIPTION FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.deathdate IS NOT NULL ORDER BY EXTRACT(YEAR FROM T2.deathdate) - EXTRACT(YEAR FROM T2.birthdate) DESC LIMIT 1", "sql_id": 111}
{"model": "gpt-3.5-turbo", "message": "SELECT T2._first, T2._last, CASE WHEN T2.deathdate IS NULL THEN EXTRACT(YEAR FROM T1._DATE) - EXTRACT(YEAR FROM T2.birthdate) ELSE EXTRACT(YEAR FROM T2.deathdate) - EXTRACT(YEAR FROM T2.birthdate) END AS age\nFROM observations AS T1\nINNER JOIN patients AS T2 ON T1.PATIENT = T2.patient\nWHERE T1.DESCRIPTION = 'Systolic Blood Pressure' AND T1.VALUE = 200 AND T1.UNITS = 'mmHg' AND EXTRACT(YEAR FROM T1._DATE) = 2011;", "sql_id": 113}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.DESCRIPTION = 'Influenza seasonal injectable preservative free' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient), SUM(CASE WHEN T1.ethnicity = 'english' THEN 1 ELSE 0 END) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE EXTRACT(YEAR FROM T2._DATE) = 2017;", "sql_id": 114}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.deathdate IS NULL THEN EXTRACT(YEAR FROM T2.STOP) - EXTRACT(YEAR FROM T1.birthdate) ELSE EXTRACT(YEAR FROM T1.deathdate) - EXTRACT(YEAR FROM T1.birthdate) END) AS DOUBLE) / COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T2.REASONDESCRIPTION = 'Prediabetes';", "sql_id": 115}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T1._first, T1._last \nFROM patients AS T1 \nINNER JOIN careplans AS T2 \nON T1.patient = T2.PATIENT \nWHERE T1.marital = 'M' \nAND days(T2.STOP) - days(T2.START) > 60;", "sql_id": 117}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T1.marital = 'S' AND T2.REASONDESCRIPTION = 'Cystitis' AND T2.DESCRIPTION = 'Nitrofurantoin 5 MG/ML [Furadantin]' AND YEAR(T2.START) = 2010;", "sql_id": 119}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.REASONDESCRIPTION, T2.DESCRIPTION , EXTRACT(DAY FROM T2.STOP - T2.START) AS days , CASE WHEN T1.deathdate IS NULL THEN 'alive' ELSE 'dead' END FROM patients AS T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT WHERE T2.ENCOUNTER = '23c293ec-dbae-4a22-896e-f12cf3c8bac3';", "sql_id": 120}
{"model": "gpt-3.5-turbo", "message": "SELECT T1._first, T1._last \nFROM patients AS T1 \nINNER JOIN allergies AS T2 \nON T1.patient = T2.PATIENT \nWHERE T2.DESCRIPTION = 'Shellfish allergy' \nAND EXTRACT(DAY FROM T1.deathdate - T1.birthdate) / 365.0 < 12", "sql_id": 121}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1._first = 'Elly' AND T1._last = 'Koss' AND YEAR(T2.START) = 2013", "sql_id": 123}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(COUNT(PATIENT) AS DOUBLE) / COUNT(DISTINCT EXTRACT(YEAR FROM \"_DATE\")) FROM procedures WHERE DESCRIPTION = 'Combined chemotherapy and radiation therapy (procedure)'", "sql_id": 126}
{"model": "gpt-3.5-turbo", "message": "SELECT DATEDIFF('day', T2.START, T2.STOP) AS timeFrame, T2.DESCRIPTION\nFROM patients AS T1\nINNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT\nWHERE T1._first = 'Jacquelyn' AND T1._last = 'Shanahan'\nORDER BY T2.START DESC\nLIMIT 1", "sql_id": 127}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1._first = 'Joye' AND T1._last = 'Homenick' AND YEAR(T2.START) = 2017;", "sql_id": 128}
{"model": "gpt-3.5-turbo", "message": "SELECT DATEDIFF('day', T2.\"START\", T2.\"STOP\") AS days FROM patients AS T1 INNER JOIN medications AS T2 ON T1.\"patient\" = T2.\"PATIENT\" WHERE T1.\"_first\" = 'Elly' AND T1.\"_last\" = 'Koss' AND T2.\"DESCRIPTION\" = 'Acetaminophen 160 MG';", "sql_id": 129}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.PATIENT) FROM encounters AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE YEAR(T1._DATE) = 2010 AND T1.REASONDESCRIPTION = 'Contact dermatitis';", "sql_id": 130}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.patient) , SUM(CASE WHEN T2.DESCRIPTION = 'Prenatal visit' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.patient) FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1._first = 'Lorri' AND T1._last = 'Simonis' AND EXTRACT(YEAR FROM T2._DATE) BETWEEN 2010 AND 2017", "sql_id": 131}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.race = 'hispanic' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.PATIENT) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE YEAR(T1.stop) = 2011", "sql_id": 132}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.PATIENT) AS percentage FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE EXTRACT(YEAR FROM T1.START) = '2010'", "sql_id": 133}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T2.patient) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.race = 'black' AND YEAR(T1.STOP) = 2017", "sql_id": 134}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T1._first, T1._last \nFROM patients AS T1 \nINNER JOIN medications AS T2 \nON T1.patient = T2.PATIENT \nWHERE T2.DESCRIPTION = 'Penicillin V Potassium 250 MG' \nAND YEAR(T2.START) >= 1948;", "sql_id": 135}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.patient WHERE YEAR(T1.birthdate) = 1935 AND T1.race = 'white' AND T2.DESCRIPTION = 'Stroke';", "sql_id": 136}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T3.lastName, T3.firstName \nFROM payments AS T1 \nINNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber \nINNER JOIN employees AS T3 ON T2.salesRepEmployeeNumber = T3.employeeNumber \nWHERE YEAR(T1.paymentDate) = 2004 \nORDER BY T1.amount DESC \nLIMIT 1", "sql_id": 139}
{"model": "gpt-3.5-turbo", "message": "SELECT T3.priceEach * T3.quantityOrdered \nFROM customers AS T1 \nINNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber \nINNER JOIN orderdetails AS T3 ON T2.orderNumber = T3.orderNumber \nWHERE T1.customerName = 'Rovelli Gifts' \nAND T2._status = 'Shipped' \nAND EXTRACT(YEAR FROM T2.shippedDate) = 2003;", "sql_id": 140}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.checkNumber) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE customerName = 'Euro+ Shopping Channel' AND EXTRACT(YEAR FROM T1.paymentDate) = 2004", "sql_id": 141}
{"model": "gpt-3.5-turbo", "message": "SELECT ( SELECT COUNT(customerNumber) FROM customers WHERE creditLimit <= 100000 AND customerNumber IN ( SELECT customerNumber FROM payments WHERE YEAR(paymentDate) = 2004 ) ), T1.customerName FROM customers T1 INNER JOIN payments T2 ON T1.customerNumber = T2.customerNumber WHERE T1.creditLimit <= 100000 AND YEAR(T2.paymentDate) = 2004 GROUP BY T1.customerNumber, T1.customerName ORDER BY SUM(T2.amount) DESC LIMIT 1", "sql_id": 142}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T1.orderNumber) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.quantityOrdered < 30 AND YEAR(T2.orderDate) = 2003", "sql_id": 143}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(T2.quantityOrdered * T2.priceEach) / COUNT(T3.orderNumber) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber WHERE T1.productVendor = 'Exoto Designs' AND YEAR(T3.orderDate) = 2005;", "sql_id": 144}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(amount) FROM payments WHERE EXTRACT(YEAR FROM paymentDate) = 2003 AND customerNumber IN (SELECT customerNumber FROM customers WHERE creditLimit = 0)", "sql_id": 145}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(customernumber) FROM ( SELECT customernumber FROM payments WHERE EXTRACT(YEAR FROM paymentDate) >= 2003 AND EXTRACT(YEAR FROM paymentDate) <= 2004 GROUP BY customernumber HAVING COUNT(customernumber) > 3 ) T", "sql_id": 146}
{"model": "gpt-3.5-turbo", "message": "SELECT T3.addressLine1, T3.addressLine2, T3.phone \nFROM orderdetails AS T1 \nINNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber \nINNER JOIN customers AS T3 ON T2.customerNumber = T3.customerNumber \nINNER JOIN employees AS T4 ON T3.salesRepEmployeeNumber = T4.employeeNumber \nINNER JOIN offices AS T5 ON T4.officeCode = T5.officeCode \nWHERE EXTRACT(YEAR FROM T2.orderDate) = 2005 \nAND T4.jobTitle = 'Sales Rep' \nORDER BY T1.quantityOrdered DESC \nLIMIT 1", "sql_id": 147}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.orderDate \nFROM orderdetails AS T1 \nINNER JOIN orders AS T2 \nON T1.orderNumber = T2.orderNumber \nWHERE DATE(T2.orderDate) = '2005-04-08' OR DATE(T2.orderDate) = '2005-04-10' \nORDER BY T1.quantityOrdered * T1.priceEach DESC \nLIMIT 1", "sql_id": 148}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(CASE WHEN DAYS(t1.shippeddate) - DAYS(t1.requireddate) > 3 THEN t1.customerNumber ELSE NULL END) FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber WHERE t1._status = 'Shipped';", "sql_id": 149}
{"model": "gpt-3.5-turbo", "message": "SELECT t2.customerName \nFROM payments AS t1 \nINNER JOIN customers AS t2 \nON t1.customerNumber = t2.customerNumber \nWHERE YEAR(t1.paymentDate) = 2005 \nGROUP BY t2.customerNumber, t2.customerName \nORDER BY SUM(t1.amount) DESC \nLIMIT 1", "sql_id": 150}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN t1.customerName = 'Atelier graphique' THEN t2.amount ELSE 0 END) * 100 / SUM(t2.amount) FROM customers AS t1 INNER JOIN payments AS t2 ON t1.customerNumber = t2.customerNumber WHERE YEAR(t2.paymentDate) = 2004", "sql_id": 151}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(t2.quantityOrdered) FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN products AS t3 ON t2.productCode = t3.productCode WHERE t3.productLine = 'motorcycles' AND EXTRACT(YEAR FROM t1.orderDate) = 2004;", "sql_id": 152}
{"model": "gpt-3.5-turbo", "message": "SELECT EXTRACT(YEAR FROM t1.paymentDate), COUNT(t1.customerNumber) FROM payments AS t1 WHERE t1.amount < 10000 GROUP BY EXTRACT(YEAR FROM t1.paymentDate);", "sql_id": 153}
{"model": "gpt-3.5-turbo", "message": "SELECT t3.productName, SUM(t2.quantityOrdered) FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN products AS t3 ON t2.productCode = t3.productCode WHERE YEAR(t1.orderDate) = 2003 GROUP BY t3.productName ORDER BY SUM(t2.quantityOrdered) DESC LIMIT 3", "sql_id": 154}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.food_type = 'mexican' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 INNER JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.county = 'monterey county'", "sql_id": 155}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.street_name = '11th st' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN geographic AS T2 ON T1.city = T2.city WHERE T2.county = 'alameda county';", "sql_id": 156}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN food_type = 'american food' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(id_restaurant) FROM generalinfo WHERE city = 'dublin';", "sql_id": 157}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.review > 4 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 RIGHT JOIN generalinfo AS T2 ON T1.city = T2.city WHERE T1.region = 'bay area'", "sql_id": 158}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.region = 'bay area' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id_restaurant) FROM geographic AS T1 INNER JOIN location AS T2 ON T1.city = T2.city", "sql_id": 159}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN region = 'Napa Valley' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(region) FROM geographic;", "sql_id": 160}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.food_type = 'afghani' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE 1000 <= T1.street_num AND T1.street_num <= 2000", "sql_id": 161}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(Match_Id) FROM \"Match\" WHERE SUBSTRING(Match_Date FROM 1 FOR 4) = '2008' AND SUBSTRING(Match_Date FROM 7 FOR 1) = '5';", "sql_id": 163}
{"model": "gpt-3.5-turbo", "message": "SELECT Match_Id FROM \"Match\" WHERE SUBSTRING(Match_Date FROM 1 FOR 4) = '2008';", "sql_id": 164}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN SUBSTRING(Match_Date, 7, 1) = '5' THEN 1 ELSE 0 END) FROM \"Match\" WHERE SUBSTRING(Match_Date, 1, 4) = '2008';", "sql_id": 167}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN Team_1 = 10 OR Team_2 = 10 THEN 1 ELSE 0 END) FROM \"Match\" WHERE SUBSTRING(Match_Date, 1, 4) = '2012';", "sql_id": 168}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(COUNT(CASE WHEN \"Win_Margin\" > 100 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(\"Match_Id\") FROM \"Match\"", "sql_id": 169}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.Bowling_skill = ' Legbreak' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Bowling_Style AS T2 ON T1.Bowling_skill = T2.Bowling_Id", "sql_id": 171}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(COUNT(CASE WHEN T1.Team_1 = T1.Match_Winner AND T1.Team_1 = T1.Toss_Winner THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.Team_1) FROM \"Match\" AS T1 INNER JOIN \"Win_By\" AS T2 ON T1.Win_Type = T2.Win_Id INNER JOIN \"Toss_Decision\" AS T3 ON T1.Toss_Decide = T3.Toss_Id WHERE T3.Toss_Name = 'field' AND T2.Win_Type = 'runs'", "sql_id": 172}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(COUNT(CASE WHEN T2.Win_Margin < 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Venue_Id) FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Venue_Name = 'Dr DY Patil Sports Academy';", "sql_id": 173}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.Player_Name \nFROM Player AS T1 \nINNER JOIN Season AS T2 \nON T1.Player_Id = T2.Purple_Cap \nORDER BY T2.Season_Year - CAST(SUBSTRING(T1.DOB, 1, 4) AS INTEGER) \nLIMIT 1", "sql_id": 174}
{"model": "gpt-3.5-turbo", "message": "SELECT 2022 - CAST(SUBSTRING(DOB FROM 1 FOR 4) AS INTEGER) FROM Player WHERE Player_Name = 'Ishan Kishan';", "sql_id": 175}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.Player_Name \nFROM Player AS T1 \nJOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id \nJOIN Match AS T3 ON T2.Match_Id = T3.Match_Id \nWHERE SUBSTRING(T3.Match_Date FROM 1 FOR 4) = '2014' \nAND SUBSTRING(T3.Match_Date FROM 7 FOR 1) = '6' \nLIMIT 2;", "sql_id": 176}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.Team_Name \nFROM Team AS T1 \nJOIN Match AS T2 ON T1.Team_Id = T2.Team_1 OR T1.Team_Id = T2.Team_2 \nJOIN Win_By AS T3 ON T2.Win_Type = T3.Win_Id \nWHERE EXTRACT(YEAR FROM T2.Match_Date) = 2015 AND T3.Win_Type = 'Tie' \nLIMIT 1;", "sql_id": 177}
{"model": "gpt-3.5-turbo", "message": "SELECT 2008 - EXTRACT(YEAR FROM DOB) FROM Player WHERE Player_Name = 'SC Ganguly';", "sql_id": 178}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.Country_Name = 'India' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id WHERE YEAR(T1.DOB) BETWEEN 1975 AND 1985", "sql_id": 179}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(Player_Id) FROM Player WHERE EXTRACT(YEAR FROM DOB) BETWEEN 1970 AND 1975", "sql_id": 180}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.u_gender = 'F' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T2.userid) FROM u2base AS T1 INNER JOIN _users AS T2 ON T1.userid = T2.userid WHERE T1.rating = '2'", "sql_id": 181}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T3.a_quality >= 3 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T1.country = 'UK'", "sql_id": 183}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.avg_revenue > T2.d_quality THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.movieid) FROM movies2directors AS T1 INNER JOIN directors AS T2 ON T1.directorid = T2.directorid WHERE T1.genre = 'Action';", "sql_id": 184}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.rating = '1' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.movieid) FROM u2base AS T1 INNER JOIN movies AS T2 ON T1.movieid = T2.movieid WHERE T2.country = 'USA'", "sql_id": 185}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T3.a_gender = 'M' THEN 1 ELSE 0 END) AS DOUBLE) / SUM(CASE WHEN T3.a_gender = 'F' THEN 1 ELSE 0 END) FROM movies AS T1 INNER JOIN movies2actors AS T2 ON T1.movieid = T2.movieid INNER JOIN actors AS T3 ON T2.actorid = T3.actorid WHERE T1.country = 'UK';", "sql_id": 186}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.cast_num = 2 AND T1.a_quality = 2 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.actorid) FROM actors AS T1 INNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid WHERE T2.movieid = 1672580 AND T1.a_gender = 'F'", "sql_id": 187}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN a_gender = 'M' THEN 1 ELSE 0 END) AS DOUBLE) / SUM(CASE WHEN a_gender = 'F' THEN 1 ELSE 0 END) FROM actors WHERE a_quality = 0", "sql_id": 188}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN T1.a_gender = 'F' THEN 1 ELSE 0 END), T3.country, T3.runningtime\nFROM actors AS T1\nINNER JOIN movies2actors AS T2 ON T1.actorid = T2.actorid\nINNER JOIN movies AS T3 ON T2.movieid = T3.movieid\nWHERE T2.movieid = 2312852\nGROUP BY T3.country, T3.runningtime;", "sql_id": 189}
{"model": "gpt-3.5-turbo", "message": "SELECT (CAST(SUM(CASE WHEN T1.isEnglish = 'T' THEN 1 ELSE 0 END) AS REAL) - CAST(SUM(CASE WHEN T1.isEnglish = 'F' THEN 1 ELSE 0 END) AS REAL)) * 100 / COUNT(T1.movieid) FROM movies AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.country = 'other' AND T1._year = 3", "sql_id": 190}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN a_gender = 'M' THEN 1 ELSE 0 END) , \n       SUM(CASE WHEN a_gender = 'F' THEN 1 ELSE 0 END) , \n       CAST(SUM(CASE WHEN a_quality = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) , \n       CAST(SUM(CASE WHEN a_quality = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*), \n       (SELECT directorid FROM movies2directors WHERE movieid = 1684910) , \n       (SELECT genre FROM movies2directors WHERE movieid = 1684910) \nFROM actors \nWHERE actorid IN (SELECT actorid FROM movies2actors WHERE movieid = 1684910)", "sql_id": 191}
{"model": "gpt-3.5-turbo", "message": "SELECT MAX(DAYS(T2.\"Ship_Date\") - DAYS(T2.\"Order_Date\")) AS longestTimeDays\nFROM people AS T1\nINNER JOIN central_superstore AS T2 ON T1.\"Customer_ID\" = T2.\"Customer_ID\"\nWHERE T1.\"Customer_Name\" = 'Aimee Bixby';", "sql_id": 192}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T3.\"Product Name\" \nFROM people AS T1 \nINNER JOIN central_superstore AS T2 ON T1.\"Customer_ID\" = T2.\"Customer_ID\" \nINNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product_ID\" \nWHERE T1.\"Customer_Name\" = 'Aimee Bixby' \nAND YEAR(T2.\"Ship_Date\") = 2016;", "sql_id": 193}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T1.\"Product_ID\") FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product_ID\" = T2.\"Product_ID\" WHERE T2.\"Sub_Category\" = 'Art' AND T1.Region = 'East' AND EXTRACT(YEAR FROM T1.\"Order_Date\") = 2013", "sql_id": 194}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T1.\"Order_ID\") FROM east_superstore AS T1 INNER JOIN people AS T2 ON T1.\"Customer_ID\" = T2.\"Customer_ID\" WHERE T2.\"Customer_Name\" = 'Maxwell Schwartz' AND EXTRACT(YEAR FROM T1.\"Order_Date\") = 2015", "sql_id": 195}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T3.\"Product Name\" \nFROM west_superstore AS T1 \nINNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\" \nINNER JOIN product AS T3 ON T3.\"Product ID\" = T1.\"Product ID\" \nWHERE T2.\"Customer Name\" = 'Matt Abelman' \nAND EXTRACT(YEAR FROM T1.\"Order Date\") = 2013;", "sql_id": 196}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM((T1.Sales / (1 - T1.Discount)) * T1.Quantity - T1.Profit) AS cost\nFROM east_superstore AS T1\nINNER JOIN people AS T2 ON T1.\"Customer_ID\" = T2.\"Customer_ID\"\nINNER JOIN product AS T3 ON T1.\"Product_ID\" = T3.\"Product_ID\" AND T1.\"Region\" = T3.\"Region\"\nWHERE T1.\"Region\" = 'East' AND T2.\"Customer_Name\" = 'Brad Thomas' AND EXTRACT(YEAR FROM T1.\"Order_Date\") = 2016;", "sql_id": 197}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(T1.Sales) FROM east_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product_ID\" = T2.\"Product_ID\" WHERE EXTRACT(YEAR FROM T1.\"Order_Date\") = 2016 AND T2.Category = 'Furniture';", "sql_id": 198}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T2.\"Customer Name\"\nFROM south_superstore AS T1\nINNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\"\nWHERE EXTRACT(YEAR FROM T1.\"Order Date\") = 2015\nGROUP BY T2.\"Customer Name\"\nHAVING COUNT(T2.\"Customer Name\") > 3;", "sql_id": 199}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T2.\"Customer_ID\") FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer_ID\" = T2.\"Customer_ID\" WHERE T1.\"Customer_Name\" = 'Corey Roper' AND EXTRACT(YEAR FROM T2.\"Ship_Date\") = 2015", "sql_id": 200}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.\"Customer Name\"\nFROM east_superstore AS T1\nINNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer ID\"\nWHERE T2.Segment = 'Corporate' AND T2.State = 'Rhode Island' AND T2.Region = 'East' AND EXTRACT(YEAR FROM T1.\"Order Date\") = 2016\nGROUP BY T2.\"Customer Name\"\nORDER BY COUNT(T2.\"Customer Name\") DESC\nLIMIT 1", "sql_id": 201}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT EXTRACT(DAY FROM \"Ship_Date\" - \"Order_Date\") AS duration FROM central_superstore WHERE \"Order_ID\" = 'CA-2011-134103';", "sql_id": 202}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE DATE_FORMAT(T1.\"Ship Date\", '%Y-%m') = '2013-03';", "sql_id": 203}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T2.\"Order_ID\") FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.\"Customer_ID\" = T2.\"Customer_ID\" WHERE T1.\"Customer_Name\" = 'Alan Barnes' AND EXTRACT(YEAR FROM T2.\"Order_Date\") = 2015", "sql_id": 204}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.\"Ship_Mode\" = 'First Class' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(*) FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product_ID\" = T2.\"Product_ID\" WHERE T2.Category = 'Furniture' AND YEAR(T1.\"Ship_Date\") = 2013;", "sql_id": 205}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.\"Product Name\" FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID\" WHERE T2.Region = 'Central' AND EXTRACT(YEAR FROM T1.\"Order Date\") = 2016 ORDER BY T1.Profit ASC LIMIT 1", "sql_id": 206}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN race = 'W' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(case_number) FROM officers WHERE gender = 'M';", "sql_id": 207}
{"model": "gpt-3.5-turbo", "message": "SELECT EXTRACT(YEAR FROM _date) FROM incidents WHERE subject_weapon = 'Handgun' GROUP BY EXTRACT(YEAR FROM _date) ORDER BY COUNT(case_number) DESC LIMIT 1", "sql_id": 209}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN EXTRACT(YEAR FROM _date) = 2007 THEN 1 ELSE 0 END) - SUM(CASE WHEN EXTRACT(YEAR FROM _date) = 2008 THEN 1 ELSE 0 END) FROM incidents WHERE subject_weapon = 'Vehicle';", "sql_id": 210}
{"model": "gpt-3.5-turbo", "message": "SELECT case_number FROM incidents WHERE YEAR(date) > 2011 AND subject_statuses = 'Deceased';", "sql_id": 211}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.Chromosome > 10 AND T3.Chromosome > 10 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.GeneID) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 INNER JOIN Genes AS T3 ON T3.GeneID = T2.GeneID2 WHERE T2.Expression_Corr > 0;", "sql_id": 212}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.Expression_Corr > 0 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T2.GeneID1) FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Phenotype = 'Nucleic acid metabolism defects' AND T1.Motif = 'PS00107'", "sql_id": 213}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN SUBSTRING('Last Updated', -4) > '2018' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(App) AS PER FROM playstore WHERE Type = 'Free' AND Rating >= 4.5", "sql_id": 216}
{"model": "gpt-3.5-turbo", "message": "SELECT T FROM ( SELECT CASE WHEN \"Customer_Names\" LIKE '%Group%' THEN \"Customer_Names\" ELSE NULL END AS T FROM Customers ) WHERE T IS NOT NULL", "sql_id": 217}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T1.\"Customer_Names\"\nFROM Customers AS T1\nINNER JOIN Sales_Orders AS T2 ON T2.\"_CustomerID\" = T1.\"CustomerID\"\nINNER JOIN Products AS T3 ON T3.\"ProductID\" = T2.\"_ProductID\"\nWHERE T3.\"Product_Name\" = 'Cocktail Glasses'\nAND SUBSTRING(T2.\"OrderDate\" FROM CHAR_LENGTH(T2.\"OrderDate\") - 1 + 1) = '20'\nAND T2.\"Discount_Applied\" = (\n    SELECT T2.\"Discount_Applied\"\n    FROM Customers AS T1\n    INNER JOIN Sales_Orders AS T2 ON T2.\"_CustomerID\" = T1.\"CustomerID\"\n    INNER JOIN Products AS T3 ON T3.\"ProductID\" = T2.\"_ProductID\"\n    WHERE T3.\"Product_Name\" = 'Cocktail Glasses'\n    AND T2.\"OrderDate\" LIKE '%/%/20'\n    ORDER BY T2.\"Discount_Applied\" DESC\n    LIMIT 1\n)", "sql_id": 218}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN \"OrderDate\" = '5/31/18' THEN 1 ELSE 0 END) FROM \"Sales_Orders\"", "sql_id": 219}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T FROM ( SELECT CASE WHEN DeliveryDate = '6/13/18' THEN OrderNumber ELSE NULL END AS T FROM \"Sales_Orders\" ) WHERE T IS NOT NULL", "sql_id": 220}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN \"Order_Quantity\" > 5 THEN 1 ELSE 0 END) FROM \"Sales_Orders\"", "sql_id": 221}
{"model": "gpt-3.5-turbo", "message": "SELECT T FROM ( SELECT CASE WHEN StateCode = 'GA' THEN State ELSE NULL END AS T FROM Regions ) WHERE T IS NOT NULL", "sql_id": 222}
{"model": "gpt-3.5-turbo", "message": "SELECT T FROM ( SELECT DISTINCT CASE WHEN T1.\"Unit Cost\" = 781.22 THEN T2.\"Product Name\" ELSE NULL END AS T FROM \"Sales_Orders\" T1 INNER JOIN Products T2 ON T2.ProductID = T1.\"_ProductID\" ) WHERE T IS NOT NULL", "sql_id": 223}
{"model": "gpt-3.5-turbo", "message": "SELECT T FROM ( SELECT DISTINCT CASE WHEN T2.\"Product Name\" = 'Cookware' THEN T1.DeliveryDate ELSE NULL END AS T FROM \"Sales_Orders\" T1 INNER JOIN Products T2 ON T2.ProductID = T1.\"_ProductID\" ) WHERE T IS NOT NULL", "sql_id": 224}
{"model": "gpt-3.5-turbo", "message": "SELECT T FROM ( SELECT DISTINCT CASE WHEN T1.\"Discount_Applied\" = 0.1 THEN T2.\"Product_Name\" ELSE NULL END AS T FROM \"Sales_Orders\" T1 INNER JOIN Products T2 ON T2.ProductID = T1.\"_ProductID\" ) WHERE T IS NOT NULL", "sql_id": 225}
{"model": "gpt-3.5-turbo", "message": "SELECT SUBSTRING(T1.OrderDate, LENGTH(T1.OrderDate) - 1, 2) FROM \"Sales_Orders\" AS T1 INNER JOIN \"Sales_Team\" AS T2 ON T2.SalesTeamID = T1.\"_SalesTeamID\" WHERE T2.\"Sales_Team\" = 'George Lewis' GROUP BY SUBSTRING(T1.OrderDate, LENGTH(T1.OrderDate) - 1, 2) ORDER BY COUNT(T1.OrderNumber) DESC LIMIT 1", "sql_id": 226}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T FROM ( SELECT CASE WHEN OrderNumber = 'SO - 000103' THEN \"Unit Cost\" ELSE NULL END AS T FROM \"Sales_Orders\" ) WHERE T IS NOT NULL", "sql_id": 227}
{"model": "gpt-3.5-turbo", "message": "SELECT CASE WHEN COUNT(T2.CustomerID) > 3 THEN T2.\"Customer Names\" ELSE NULL END FROM \"Sales_Orders\" AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1.\"_CustomerID\" WHERE T1.OrderDate LIKE '%/%/18' GROUP BY T1.\"_CustomerID\" HAVING COUNT(T2.CustomerID) > 0", "sql_id": 228}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN SUBSTRING(T1.OrderDate, -2) IN ('18', '19', '20') AND T2.\"Customer_Names\" = 'Medsep Group' THEN 1 ELSE 0 END) FROM \"Sales_Orders\" AS T1 INNER JOIN Customers AS T2 ON T2.CustomerID = T1.\"_CustomerID\"", "sql_id": 229}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN WarehouseCode = 'WARE-MKL1006' THEN 1 ELSE 0 END) - SUM(CASE WHEN WarehouseCode = 'WARE-NBV1002' THEN 1 ELSE 0 END) AS difference FROM \"Sales_Orders\";", "sql_id": 230}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T FROM ( SELECT CASE WHEN _CustomerID = 11 THEN ProcuredDate ELSE NULL END AS T FROM \"Sales_Orders\" ) WHERE T IS NOT NULL", "sql_id": 232}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN ShipDate LIKE '6/%/18' AND \"Sales_Channel\" = 'Online' THEN 1 ELSE 0 END) FROM \"Sales_Orders\";", "sql_id": 233}
{"model": "gpt-3.5-turbo", "message": "SELECT draftYear - EXTRACT(YEAR FROM birthDate) FROM draft AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.firstName = 'Alexis' AND T1.lastName = 'Ajinca' AND draftRound = 1", "sql_id": 234}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.firstName, T1.middleName, T1.lastName, 2003 - EXTRACT(YEAR FROM T1.birthDate) FROM awards_players AS T2 JOIN players AS T1 ON T2.playerID = T1.playerID WHERE T2.award = 'Finals MVP' AND T2._year = 2003", "sql_id": 235}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.steals IS NOT NULL AND T1.tmID = 'LAL' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.tmID) FROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID AND T1._year = T2._year", "sql_id": 237}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN T2.Act = 1 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Act = 5 THEN 1 ELSE 0 END) AS more FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night'", "sql_id": 238}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.GenreType = 'Tragedy' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.Scene) FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T2._Date = '1594'", "sql_id": 239}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN T4.CharName = 'Romeo' THEN 1 ELSE 0 END), \n       SUM(CASE WHEN T4.CharName = 'Juliet' THEN 1 ELSE 0 END), \n       CAST(SUM(CASE WHEN T4.CharName = 'Romeo' THEN 1 ELSE 0 END) + SUM(CASE WHEN T4.CharName = 'Juliet' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.id)\nFROM works AS T1 \nINNER JOIN chapters AS T2 ON T1.id = T2.work_id \nINNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id \nINNER JOIN characters AS T4 ON T3.character_id = T4.id;", "sql_id": 240}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.Title = 'All''s Well That Ends Well' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T3.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id", "sql_id": 241}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN GenreType = 'Comedy' THEN 1 ELSE 0 END) - SUM(CASE WHEN GenreType = 'History' THEN 1 ELSE 0 END) FROM works WHERE \"_Date\" > 1593", "sql_id": 242}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.act = 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.act) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Titus Andronicus';", "sql_id": 243}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.LongTitle FROM works AS T1 RIGHT JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Description = 'Mytilene. A street before the brothel.'", "sql_id": 244}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.Description FROM works AS T1 RIGHT JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Venus and Adonis' ORDER BY T2.Scene DESC LIMIT 1", "sql_id": 245}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T4.CharName = 'antonio' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.id) FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id INNER JOIN paragraphs AS T3 ON T2.id = T3.chapter_id INNER JOIN characters AS T4 ON T3.character_id = T4.id WHERE T1.GenreType = 'Comedy';", "sql_id": 246}
{"model": "gpt-3.5-turbo", "message": "SELECT teacher_ny_teaching_fellow FROM projects WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973';", "sql_id": 247}
{"model": "gpt-3.5-turbo", "message": "SELECT game_name FROM game ORDER BY LENGTH(game_name) DESC LIMIT 1;", "sql_id": 248}
{"model": "gpt-3.5-turbo", "message": "SELECT FullName FROM Conference ORDER BY CHAR_LENGTH(FullName) DESC LIMIT 1", "sql_id": 249}
{"model": "gpt-3.5-turbo", "message": "SELECT CASE WHEN SUM(CASE WHEN T2.gender = 'F' THEN T2.grad_150 ELSE 0 END) > SUM(CASE WHEN T2.gender = 'M' THEN T2.grad_150 ELSE 0 END) THEN 'female White students' ELSE 'male White students' END FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Central Alabama Community College' AND T2._year = 2011 AND T2.race = 'W';", "sql_id": 250}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.business_id) , EXTRACT(YEAR FROM CURRENT_DATE) - T2.user_yelping_since_year FROM Reviews AS T1 INNER JOIN _Users AS T2 ON T1.user_id = T2.user_id WHERE T1.user_id = 3", "sql_id": 251}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUBSTRING(T1.closing_time, 1, 2) AS INTEGER) + 12 - CAST(SUBSTRING(T1.opening_time, 1, 2) AS INTEGER) AS YYSJ\nFROM Business_Hours AS T1\nINNER JOIN Days AS T2 ON T1.day_id = T2.day_id\nWHERE T2.day_of_week = 'Monday' AND T1.business_id = 15098;", "sql_id": 253}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.business_id \nFROM Business_Hours AS T1 \nINNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id \nINNER JOIN Categories AS T3 ON T2.category_id = T3.category_id \nWHERE T3.category_name = 'Accessories' \nAND CAST(SUBSTRING(T1.opening_time, LENGTH(T1.opening_time) - 3, 2) AS INTEGER) < 7 \nAND T1.opening_time LIKE '%AM';", "sql_id": 254}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(name) FROM Person WHERE birth_region = 'New York' AND CAST(SUBSTRING(birthdate FROM 1 FOR 4) AS INTEGER) > 1970;", "sql_id": 255}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.rating \nFROM Award AS T1 \nINNER JOIN Episode AS T2 \nON T1.episode_id = T2.episode_id \nWHERE T1.award = 'Outstanding Voice-Over Performance' \nAND SUBSTRING(CAST(T1._year AS VARCHAR), 1, 4) = '2009' \nAND T1.person = 'Dan Castellaneta';", "sql_id": 256}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTRING(T1.air_date, 1, 4) = '2009' AND T2.stars = 10 AND T2.percent > 15;", "sql_id": 257}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.title \nFROM Award AS T1 \nINNER JOIN Episode AS T2 \nON T1.episode_id = T2.episode_id \nWHERE SUBSTRING(CAST(T1._year AS VARCHAR), 1, 4) = '2017' \nAND T1.award = 'Best International TV Series' \nAND T1.result = 'Winner';", "sql_id": 259}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTRING(T1.air_date FROM 6 FOR 2) BETWEEN '10' AND '11';", "sql_id": 260}
{"model": "gpt-3.5-turbo", "message": "SELECT T2._year - CAST(SUBSTRING(T1.birthdate, 1, 4) AS INT) AS age\nFROM Person AS T1\nINNER JOIN Award AS T2 ON T1.name = T2.person\nWHERE T2.award = 'Outstanding Voice-Over Performance'\nAND T2.organization = 'Primetime Emmy Awards'\nAND T2.result = 'Winner';", "sql_id": 261}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.episode_id) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTRING(CAST(T1._year AS VARCHAR), 1, 4) = '2009' AND T2.air_date LIKE '2009-04%';", "sql_id": 262}
{"model": "gpt-3.5-turbo", "message": "SELECT award, person FROM Award WHERE result = 'Winner' AND SUBSTRING(CAST(_year AS STRING), 1, 4) = '2009';", "sql_id": 263}
{"model": "gpt-3.5-turbo", "message": "SELECT episode, title, rating FROM Episode WHERE SUBSTRING(air_date FROM 1 FOR 7) LIKE '2008-10%';", "sql_id": 264}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.title, T2.episode_image, T1.award, T1.person \nFROM Award AS T1 \nINNER JOIN Episode AS T2 \nON T1.episode_id = T2.episode_id \nWHERE T2.rating BETWEEN 7 AND 10 \nAND SUBSTRING(T2.air_date FROM 1 FOR 4) = '2008' \nAND T1.result = 'Nominee';", "sql_id": 265}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.name, T1.birth_place, T2.role, 2022 - CAST(SUBSTRING(T1.birthdate, 1, 4) AS INT) AS age \nFROM Person AS T1 \nINNER JOIN Credit AS T2 ON T1.name = T2.person \nWHERE T1.birthdate IS NOT NULL \nORDER BY T1.birthdate \nLIMIT 1;", "sql_id": 266}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(award_id) FROM \"Award\" WHERE person = 'Billy Kimball' AND SUBSTRING(CAST(_year AS VARCHAR), 1, 4) = '2010' AND result = 'Nominee';", "sql_id": 268}
{"model": "gpt-3.5-turbo", "message": "SELECT name FROM Person WHERE CAST(SUBSTRING(birthdate FROM 1 FOR 4) AS INTEGER) < 1970;", "sql_id": 269}
{"model": "gpt-3.5-turbo", "message": "SELECT name FROM Person WHERE SUBSTRING(birthdate FROM 1 FOR 4) = '1958' AND birth_place = 'California' AND birth_country = 'USA';", "sql_id": 270}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.person FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTRING(CAST(T1._year AS VARCHAR), 1, 4) = '2009' AND T1.role = 'writer' AND T2.votes > 5;", "sql_id": 271}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.episode_id FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTRING(CAST(T1._year AS VARCHAR), 1, 4) = '2009' AND T1.person = 'Al Jean' AND T1.award_category = 'Primetime Emmy';", "sql_id": 272}
{"model": "gpt-3.5-turbo", "message": "SELECT name FROM Person WHERE SUBSTRING(birthdate FROM 1 FOR 4) = '1962' AND birth_region = 'California';", "sql_id": 273}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.episode_id \nFROM Episode AS T1 \nINNER JOIN Vote AS T2 \nON T2.episode_id = T1.episode_id \nWHERE SUBSTRING(T1.air_date FROM 1 FOR 4) = '2008' \nORDER BY T2.votes DESC \nLIMIT 1;", "sql_id": 274}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTRING(CAST(T1._year AS VARCHAR), 1, 4) = '2010' AND T1.person = 'Joel H. Cohen';", "sql_id": 275}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN birth_region = 'California' AND SUBSTRING(birthdate, 1, 4) > '1970' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(birthdate) FROM Person;", "sql_id": 276}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM Person AS T1 INNER JOIN Credit AS T2 ON T1.name = T2.person WHERE PARSEDATE(T1.birthdate) > '1970' AND T2.role = 'animation executive producer';", "sql_id": 277}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.title FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Best International TV Series' AND SUBSTRING(CAST(T1._year AS VARCHAR), 1, 4) = '2017';", "sql_id": 278}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(award_id) FROM \"Award\" WHERE SUBSTRING(CAST(_year AS STRING), 1, 4) = '2009';", "sql_id": 279}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T2.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE YEAR(T1.air_date) = 2008 AND T2.stars > 5;", "sql_id": 280}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTRING(T1.air_date FROM 1 FOR 4) = '2008';", "sql_id": 281}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T2.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE YEAR(T1.air_date) = 2009 AND T2.stars < 8;", "sql_id": 282}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(award_id) FROM Award WHERE SUBSTRING(CAST(_year AS VARCHAR), 1, 4) = '2009' AND result = 'Winner';", "sql_id": 283}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T1.episode_id \nFROM Episode AS T1 \nINNER JOIN Vote AS T2 \nON T2.episode_id = T1.episode_id \nWHERE SUBSTRING(T1.air_date FROM 1 FOR 4) = '2008' \nAND T2.stars < 5;", "sql_id": 284}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.percent \nFROM Episode AS T1 \nINNER JOIN Vote AS T2 \nON T2.episode_id = T1.episode_id \nWHERE SUBSTRING(T1.air_date FROM 1 FOR 4) = '2008' \nAND T1.votes BETWEEN 950 AND 960;", "sql_id": 285}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.stars FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTRING(T1.air_date, 1, 7) = '2008-11';", "sql_id": 286}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.credited = 'true' AND T2.person = 'Sam Im' AND SUBSTRING(T1.air_date FROM 1 FOR 4) = '2009' AND T2.role = 'additional timer';", "sql_id": 287}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.bool = 'pos' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / SUM(CASE WHEN T1.bool = 'neg' THEN 1 ELSE 0 END) FROM no_payment_due AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'foreign_legion'", "sql_id": 288}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.school = 'occ' THEN 1.0 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.name) FROM enrolled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'navy'", "sql_id": 289}
{"model": "gpt-3.5-turbo", "message": "SELECT CASE WHEN T2.name IS NULL THEN 'female' ELSE 'male' END FROM male AS T1 LEFT JOIN disabled AS T2 ON T1.name = T2.name WHERE T1.name = 'student124';", "sql_id": 290}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.name IS NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.name) FROM disabled AS T1 LEFT JOIN male AS T2 ON T1.name = T2.name", "sql_id": 291}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1._month > 5 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1._month) FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name", "sql_id": 292}
{"model": "gpt-3.5-turbo", "message": "SELECT CASE WHEN T.result = 0 THEN 'female' ELSE 'male' END AS re FROM ( SELECT COUNT(name) AS result FROM male WHERE name = 'studenT1000' ) T", "sql_id": 293}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T3.name IS NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.name) FROM disabled AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name WHERE T2.organ = 'foreign_legion'", "sql_id": 294}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.name IS NULL THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.name), CAST(SUM(CASE WHEN T2.name IS NOT NULL THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.name) FROM enlist AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name WHERE T1.organ = 'fire_department';", "sql_id": 295}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN _month = 0 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(name) FROM longest_absense_from_school;", "sql_id": 296}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN \"bool\" = 'pos' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN \"bool\" = 'neg' THEN 1 ELSE 0 END) FROM no_payment_due;", "sql_id": 297}
{"model": "gpt-3.5-turbo", "message": "SELECT CASE WHEN T2.name IS NULL THEN 'female' ELSE 'male' END AS gen, T1.school\nFROM enrolled AS T1\nLEFT JOIN male AS T2 ON T2.name = T1.name\nWHERE T1.name = 'student995';", "sql_id": 298}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.name IS NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.name) FROM person AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name", "sql_id": 299}
{"model": "gpt-3.5-turbo", "message": "SELECT CASE WHEN T2.name IS NULL THEN 'female' ELSE 'male' END AS gender FROM enlist AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name GROUP BY T1.organ;", "sql_id": 300}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(((SUM(CASE WHEN _month = 0 THEN 1 ELSE 0 END) - SUM(CASE WHEN _month = 9 THEN 1 ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN _month = 0 THEN 1 ELSE 0 END) FROM longest_absense_from_school;", "sql_id": 301}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T2.name) - SUM(CASE WHEN T2.name IS NULL THEN 1 ELSE 0 END) AS num FROM filed_for_bankrupcy AS T1 LEFT JOIN male AS T2 ON T2.name = T1.name", "sql_id": 302}
{"model": "gpt-3.5-turbo", "message": "SELECT (CAST((SUM(CASE WHEN T2.name IS NOT NULL AND T1._month = 0 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.name IS NULL AND T1._month = 0 THEN 1 ELSE 0 END)) AS DOUBLE) * 100 / COUNT(T1.name)), CASE WHEN SUM(CASE WHEN T2.name IS NOT NULL AND T1._month = 0 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.name IS NULL AND T1._month = 0 THEN 1 ELSE 0 END) > 0 THEN 'YES' ELSE 'NO' END AS isHigh FROM longest_absense_from_school AS T1 LEFT JOIN disabled AS T2 ON T2.name = T1.name", "sql_id": 303}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2._month = 0 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.name) FROM unemployed AS T1 INNER JOIN longest_absense_from_school AS T2 ON T2.name = T1.name", "sql_id": 304}
{"model": "gpt-3.5-turbo", "message": "SELECT 100 * SUM(CASE WHEN T2._month = 0 THEN 1 ELSE 0 END) AS num FROM disabled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name", "sql_id": 305}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.school , CASE WHEN T3.name IS NULL THEN 'female' ELSE 'male' END AS gender FROM enrolled AS T1 INNER JOIN person AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name WHERE T2.name = 'student34';", "sql_id": 306}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN T3.name IS NULL THEN 1 ELSE 0 END) AS \"result\" FROM enlist AS T1 INNER JOIN person AS T2 ON T1.name = T2.name LEFT JOIN male AS T3 ON T2.name = T3.name WHERE T1.organ = 'army';", "sql_id": 308}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.movie_title) FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE SUBSTRING(release_date, POSITION('-' IN release_date) + 1, 3) = 'Dec' AND T2.director = 'Wolfgang Reitherman';", "sql_id": 309}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.song \nFROM movies_total_gross AS T1 \nINNER JOIN characters AS T2 \nON T1.movie_title = T2.movie_title \nWHERE CAST(SUBSTRING(T1.release_date, POSITION(',' IN T1.release_date) + 2) AS INT) BETWEEN 1970 AND 1979 \nORDER BY CAST(REPLACE(SUBSTRING(T1.total_gross, 2), ',', '') AS FLOAT) DESC \nLIMIT 1", "sql_id": 311}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.movie_title \nFROM movies_total_gross AS T1 \nINNER JOIN director AS T2 \nON T1.movie_title = T2.name \nWHERE T2.director = 'Wolfgang Reitherman' \nORDER BY CAST(REPLACE(SUBSTRING(inflation_adjusted_gross, 2), ',', '') AS REAL) DESC \nLIMIT 1", "sql_id": 312}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.movie_title \nFROM movies_total_gross AS T1 \nINNER JOIN characters AS T2 \nON T1.movie_title = T2.movie_title \nWHERE T2.hero = 'Donald Duck' \nORDER BY CAST(REPLACE(SUBSTRING(total_gross, 2), ',', '') AS REAL) DESC \nLIMIT 1", "sql_id": 313}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(movie_title) FROM movies_total_gross WHERE MPAA_rating = 'R' AND genre = 'Horror' AND CAST(SUBSTRING(release_date, POSITION(',' IN release_date) + 2) AS INTEGER) BETWEEN 1990 AND 2015", "sql_id": 314}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.name \nFROM movies_total_gross AS T1 \nINNER JOIN director AS T2 \nON T2.name = T1.movie_title \nWHERE T2.director = 'Ron Clements' \nORDER BY CAST(REPLACE(SUBSTRING(total_gross, 2), ',', '') AS INT) DESC \nLIMIT 1", "sql_id": 315}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.director \nFROM movies_total_gross AS T1 \nINNER JOIN director AS T2 \nON T1.movie_title = T2.name \nAND CAST(SUBSTRING(release_date, POSITION(',' IN release_date) + 2) AS INTEGER) BETWEEN 1990 AND 2000 \nGROUP BY T2.director", "sql_id": 316}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.movie_title \nFROM movies_total_gross AS T1 \nINNER JOIN characters AS T2 \nON T2.movie_title = T1.movie_title \nWHERE T2.song IS NULL \nORDER BY CAST(REPLACE(TRIM(T1.total_gross, '$'), ',', '') AS REAL) DESC \nLIMIT 1", "sql_id": 317}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.movie_title \nFROM voice_actors AS T1 \nINNER JOIN movies_total_gross AS T2 \nON T2.movie_title = T1.movie \nWHERE T1.voice_actor = 'Jim Cummings' \nORDER BY CAST(REPLACE(TRIM(T2.total_gross, '$'), ',', '') AS REAL) DESC \nLIMIT 1", "sql_id": 318}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.movie_title \nFROM director AS T1 \nINNER JOIN movies_total_gross AS T2 \nON T1.name = T2.movie_title \nWHERE T1.director = 'Ron Clements' \nORDER BY CAST(REPLACE(TRIM(T2.total_gross, '$'), ',', '') AS REAL) DESC \nLIMIT 1", "sql_id": 319}
{"model": "gpt-3.5-turbo", "message": "SELECT movie_title, genre FROM movies_total_gross WHERE SUBSTRING(release_date, CHAR_LENGTH(release_date) - 3, CHAR_LENGTH(release_date)) = '2016';", "sql_id": 321}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.movie_title, T2.hero, T2.song \nFROM movies_total_gross AS T1 \nJOIN characters AS T2 ON T1.movie_title = T2.movie_title \nJOIN director AS T3 ON T1.movie_title = T3.name \nWHERE T3.director = 'Wolfgang Reitherman' \nAND SUBSTRING(T1.release_date, CHAR_LENGTH(T1.release_date) - 3, CHAR_LENGTH(T1.release_date)) = '1977';", "sql_id": 323}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.movie_title, T1.total_gross \nFROM movies_total_gross AS T1 \nINNER JOIN voice_actors AS T2 \nON T1.movie_title = T2.movie \nWHERE T2.voice_actor = 'Frank Welker' \nAND CAST(REPLACE(TRIM(REPLACE(T1.inflation_adjusted_gross, '$', '')), ',', '') AS REAL) * 1.0 / CAST(REPLACE(TRIM(REPLACE(T1.total_gross, '$', '')), ',', '') AS REAL) * 1.0 < 2", "sql_id": 324}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.director\nFROM movies_total_gross AS T1\nINNER JOIN director AS T2 ON T1.movie_title = T2.name\nORDER BY CAST(REPLACE(TRIM(T1.total_gross, '$'), ',', '') AS REAL) DESC\nLIMIT 1", "sql_id": 325}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.director, T1.MPAA_rating \nFROM movies_total_gross AS T1 \nINNER JOIN director AS T2 \nON T1.movie_title = T2.name \nWHERE T1.genre = 'Musical' \nAND SUBSTRING(T1.release_date, CHAR_LENGTH(T1.release_date) - 3, CHAR_LENGTH(T1.release_date)) = '1993';", "sql_id": 326}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.name, T2.director \nFROM movies_total_gross AS T1 \nJOIN director AS T2 ON T1.movie_title = T2.name \nWHERE SUBSTRING(T1.release_date, CHAR_LENGTH(T1.release_date) - 3, CHAR_LENGTH(T1.release_date)) BETWEEN '2001' AND '2005' \nAND CAST(REPLACE(TRIM(T1.total_gross, '$'), ',', '') AS REAL) / \n( \n    SELECT SUM(CAST(REPLACE(TRIM(T3.total_gross, '$'), ',', '') AS REAL)) / COUNT(T3.movie_title) AS avg_gross \n    FROM movies_total_gross AS T3 \n    JOIN director AS T4 ON T3.movie_title = T4.name \n    WHERE SUBSTRING(T3.release_date, CHAR_LENGTH(T3.release_date) - 3, CHAR_LENGTH(T3.release_date)) BETWEEN '2001' AND '2005' \n) - 1 > 1", "sql_id": 328}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(movie_title) FROM characters WHERE CAST(SUBSTRING(release_date, CHAR_LENGTH(release_date) - 1, CHAR_LENGTH(release_date)) AS INTEGER) BETWEEN 37 AND 50", "sql_id": 329}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.movie_title \nFROM characters AS T1 \nINNER JOIN director AS T2 \nON T1.movie_title = T2.name \nWHERE T2.director = 'Jack Kinney' \nAND CAST(SUBSTRING(T1.release_date, LENGTH(T1.release_date) - 1, LENGTH(T1.release_date)) AS INTEGER) < 47", "sql_id": 330}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T2.name FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name INNER JOIN movies_total_gross AS T3 ON T1.movie_title = T3.movie_title WHERE CAST(REPLACE(TRIM(REPLACE(T3.total_gross, '$', ''), ',')) AS REAL) > 100000000", "sql_id": 331}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.song \nFROM movies_total_gross AS T1 \nINNER JOIN characters AS T2 \nON T1.movie_title = T2.movie_title \nORDER BY CAST(REPLACE(TRIM(T1.total_gross, '$'), ',', '') AS REAL) DESC \nLIMIT 1", "sql_id": 332}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.director\nFROM characters AS T1\nJOIN director AS T2 ON T1.movie_title = T2.name\nJOIN movies_total_gross AS T3 ON T3.movie_title = T1.movie_title\nWHERE SUBSTRING(T3.release_date, CHAR_LENGTH(T3.release_date) - 3, CHAR_LENGTH(T3.release_date)) BETWEEN '1937' AND '1990'\nORDER BY CAST(REPLACE(TRIM(T3.total_gross, '$'), ',', '') AS REAL) DESC\nLIMIT 1", "sql_id": 333}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(COUNT(DISTINCT CASE WHEN CAST(REPLACE(TRIM(T1.total_gross, '$'), ',', '') AS REAL) > 100000000 THEN T3.director ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T3.director) FROM movies_total_gross AS T1 INNER JOIN characters AS T2 ON T1.movie_title = T2.movie_title INNER JOIN director AS T3 ON T1.movie_title = T3.name;", "sql_id": 334}
{"model": "gpt-3.5-turbo", "message": "SELECT movie_title FROM characters ORDER BY SUBSTRING(release_date, CHAR_LENGTH(release_date) - 1, CHAR_LENGTH(release_date)) ASC LIMIT 1", "sql_id": 335}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(movie_title) FROM characters WHERE SUBSTRING(release_date, CHAR_LENGTH(release_date) - 1, CHAR_LENGTH(release_date)) BETWEEN '10' AND '16';", "sql_id": 336}
{"model": "gpt-3.5-turbo", "message": "SELECT villian FROM characters ORDER BY SUBSTRING(release_date, CHAR_LENGTH(release_date) - 1, CHAR_LENGTH(release_date)) DESC LIMIT 1", "sql_id": 337}
{"model": "gpt-3.5-turbo", "message": "SELECT movie_title FROM movies_total_gross WHERE genre = 'Action' ORDER BY CAST(REPLACE(TRIM(total_gross, '$'), ',', '') AS REAL) DESC LIMIT 1;", "sql_id": 338}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.hero \nFROM movies_total_gross AS T1 \nINNER JOIN characters AS T2 \nON T1.movie_title = T2.movie_title \nWHERE T1.genre = 'Adventure' \nORDER BY CAST(REPLACE(TRIM(T1.inflation_adjusted_gross, '$'), ',', '') AS REAL) DESC \nLIMIT 1", "sql_id": 339}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.director\nFROM movies_total_gross AS T1\nINNER JOIN director AS T2 ON T1.movie_title = T2.name\nORDER BY CAST(REPLACE(TRIM(T1.total_gross, '$'), ',', '') AS REAL) ASC\nLIMIT 1", "sql_id": 340}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CAST(REPLACE(TRIM(inflation_adjusted_gross, '$'), ',', '') AS REAL)) / SUM(CAST(REPLACE(TRIM(total_gross, '$'), ',', '') AS REAL)) FROM movies_total_gross WHERE SUBSTRING(release_date, CHAR_LENGTH(release_date) - 3, CHAR_LENGTH(release_date)) = '1995' GROUP BY SUBSTRING(release_date, CHAR_LENGTH(release_date) - 3, CHAR_LENGTH(release_date)) = '1995';", "sql_id": 342}
{"model": "gpt-3.5-turbo", "message": "SELECT (SUM(CASE WHEN CAST(REPLACE(TRIM(inflation_adjusted_gross, '$'), ',', '') AS REAL) > 1236035515 THEN CAST(REPLACE(TRIM(inflation_adjusted_gross, '$'), ',', '') AS REAL) ELSE 0 END) * 100) / SUM(CAST(REPLACE(TRIM(inflation_adjusted_gross, '$'), ',', '') AS REAL)) FROM movies_total_gross;", "sql_id": 344}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(COUNT(CASE WHEN CAST(REPLACE(TRIM(T1.total_gross, '$'), ',', '') AS REAL) > 100000000 THEN T1.movie_title ELSE NULL END) AS REAL) * 100 / COUNT(T1.movie_title) FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Gary Trousdale';", "sql_id": 345}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.first_name, T1.last_name \nFROM current AS T1 \nINNER JOIN \"current_terms\" AS T2 ON T1.bioguide_id = T2.bioguide \nWHERE T2.party = 'Republican' AND T1.gender_bio = 'F' AND T2.\"_end\" > CURRENT_DATE \nGROUP BY T1.bioguide_id;", "sql_id": 346}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN T2.type = 'sen' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.type = 'rep' THEN 1 ELSE 0 END) FROM historical AS T1 INNER JOIN historical_terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' AND SUBSTRING(T1.birthday_bio FROM 1 FOR 4) BETWEEN '1930' AND '1970';", "sql_id": 348}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.party = 'Independent' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.party) FROM current AS T1 INNER JOIN current_terms AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'M' AND EXTRACT(YEAR FROM T1.birthday_bio) BETWEEN 1955 AND 1965", "sql_id": 349}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM current AS T1 INNER JOIN \"current_terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE YEAR(T2.start) = 2015 AND T2.state = 'CA' AND T1.gender_bio = 'F';", "sql_id": 350}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN EXTRACT(YEAR FROM T2.start) BETWEEN 2000 AND 2017 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.bioguide_id) FROM current AS T1 INNER JOIN current_terms AS T2 ON T1.bioguide_id = T2.bioguide;", "sql_id": 351}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.official_full_name \nFROM current AS T1 \nINNER JOIN \"current_terms\" AS T2 \nON T1.bioguide_id = T2.bioguide \nWHERE T2.party = 'Independent' \nAND SUBSTRING(T2.start, 1, 4) >= '2011' \nAND T2.type = 'sen' \nAND T2.caucus = 'Democrat';", "sql_id": 352}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT CASE WHEN SUM(CAST(EXTRACT(YEAR FROM T2.\"end\") AS INT) - CAST(EXTRACT(YEAR FROM T2.start) AS INT)) = 26 THEN T1.official_full_name END\nFROM \"current\" AS T1\nINNER JOIN \"current_terms\" AS T2 ON T1.bioguide_id = T2.bioguide\nGROUP BY T1.official_full_name, T2.district\nHAVING COUNT(T1.official_full_name) = 13;", "sql_id": 353}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(T3.result) FROM ( SELECT CASE WHEN SUM(CAST(EXTRACT(YEAR FROM T2.\"end\") AS INT) - CAST(EXTRACT(YEAR FROM T2.start) AS INT)) > 10 THEN 1 ELSE 0 END AS result FROM \"current\" AS T1 INNER JOIN \"current_terms\" AS T2 ON T1.bioguide_id = T2.bioguide WHERE T1.gender_bio = 'F' AND T2.state = 'CA' AND T2.type = 'rep' ) AS T3;", "sql_id": 354}
{"model": "gpt-3.5-turbo", "message": "SELECT CASE WHEN SUM(CAST(EXTRACT(YEAR FROM T2.\"end\") AS INT) - CAST(EXTRACT(YEAR FROM T2.\"start\") AS INT)) = 14 THEN T1.\"official_full_name\" END \nFROM \"current\" AS T1 \nINNER JOIN \"current_terms\" AS T2 ON T1.\"bioguide_id\" = T2.\"bioguide\" \nWHERE T1.\"religion_bio\" = 'Lutheran' AND T2.\"state\" = 'OH' AND T2.\"type\" = 'rep';", "sql_id": 355}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM current WHERE EXTRACT(YEAR FROM birthday_bio) > 1960 AND google_entity_id_id IS NULL", "sql_id": 356}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.\"CustomerID\") FROM \"customers\" AS T1 INNER JOIN \"_transaction\" AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"_First\" = 'Frank-Paul' AND T1.\"_Last\" = 'Santangelo' AND DATE_FORMAT(T2.\"TransactionDate\", '%Y-%m') = '2014-07'", "sql_id": 357}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN \"_transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Gender = 'M' AND DATE_FORMAT(T2.TransactionDate, '%Y-%m') = '2014-07';", "sql_id": 358}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN \"_transaction\" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'TRUE' AND T2.CreditCardType = 'Visa' AND DATE_FORMAT(T2.TransactionDate, '%Y-%m') = '2014-07'", "sql_id": 359}
{"model": "gpt-3.5-turbo", "message": "SELECT T1._First, T1._Last \nFROM customers AS T1 \nINNER JOIN \"_transaction\" AS T2 ON T1.CustomerID = T2.CustomerID \nWHERE DATE_FORMAT(T2.TransactionDate, '%Y-%m') = '2014-08' \nGROUP BY T1.CustomerID \nORDER BY COUNT(T2.CustomerID) DESC \nLIMIT 1", "sql_id": 360}
{"model": "gpt-3.5-turbo", "message": "SELECT T3.BrandName\nFROM rootbeer AS T1\nINNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID\nINNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID\nWHERE T2.StarRating = 5 AND YEAR(T2.ReviewDate) = 2012\nGROUP BY T1.BrandID\nORDER BY COUNT(T2.BrandID) DESC\nLIMIT 1", "sql_id": 361}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.SalesID \nFROM Sales AS T1 \nINNER JOIN Employees AS T2 \nON T1.SalesPersonID = T2.EmployeeID \nWHERE SUBSTRING(T2.FirstName FROM 1 FOR 1) = 's';", "sql_id": 363}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN T2.FirstName = 'Morningstar' THEN 1 ELSE 0 END) + SUM(CASE WHEN T2.FirstName = 'Heather' THEN 1 ELSE 0 END) + SUM(CASE WHEN T2.FirstName = 'Dean' THEN 1 ELSE 0 END) AS num FROM Sales AS T1 INNER JOIN Employees AS T2 ON T1.SalesPersonID = T2.EmployeeID", "sql_id": 364}
{"model": "gpt-3.5-turbo", "message": "SELECT CASE WHEN T1.ProductID = 498 THEN 'YES' ELSE 'NO' END FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Alex'", "sql_id": 365}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE SUBSTRING(T1.Name FROM 1 FOR 1) = 'C';", "sql_id": 366}
{"model": "gpt-3.5-turbo", "message": "SELECT CASE WHEN SUM(CASE WHEN T1.Name = 'HL Mountain Frame - Silver, 42' THEN T2.SalesID ELSE 0 END) - SUM(CASE WHEN T1.Name = 'HL Mountain Frame - Black, 42' THEN T2.SalesID ELSE 0 END) > 0 THEN 'Silver' ELSE 'Black' END FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID", "sql_id": 367}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T3.FirstName = 'Albert' AND T3.MiddleInitial = 'I' AND T3.LastName = 'Ringer' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T2.CustomerID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T1.Name = 'ML Bottom Bracket'", "sql_id": 368}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.Price = 0 THEN T2.Quantity ELSE 0 END) AS DOUBLE) * 100 / SUM(T2.Quantity)\nFROM Products AS T1\nINNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID", "sql_id": 369}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.Name = 'Blade' THEN T2.Quantity ELSE 0 END) AS DOUBLE) * 100 / SUM(T2.Quantity) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID", "sql_id": 370}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.Price BETWEEN 200 AND 300 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T2.Price) FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.SalesID BETWEEN 1 AND 200", "sql_id": 371}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.name FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON T2.id = T1.dish_id WHERE SUBSTRING(T1.created_at FROM 7 FOR 1) = '4';", "sql_id": 372}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE SUBSTRING(T2.created_at FROM 1 FOR 4) = '2011' AND SUBSTRING(T2.created_at FROM 7 FOR 1) = '4' AND T1.highest_price IS NULL", "sql_id": 373}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM \"Menu\" WHERE call_number IS NULL AND EXTRACT(YEAR FROM \"_date\") < '1950';", "sql_id": 374}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T2.ship_id) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc' AND EXTRACT(YEAR FROM T2.ship_date) = 2017", "sql_id": 375}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(COUNTCUSID) FROM ( SELECT COUNT(T1.cust_id) AS COUNTCUSID FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE YEAR(T2.ship_date) = 2017 AND T1.annual_revenue > 30000000 GROUP BY T1.cust_id HAVING COUNT(T2.ship_id) >= 1 ) AS T3", "sql_id": 376}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE EXTRACT(YEAR FROM T1.ship_date) = 2017 AND T2.first_name = 'Sue' AND T2.last_name = 'Newell';", "sql_id": 377}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE EXTRACT(YEAR FROM T1.ship_date) = 2017 AND T2.state = 'New Jersey';", "sql_id": 379}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN customer AS T3 ON T3.cust_id = T1.cust_id WHERE T2.city_name = 'Downey' AND EXTRACT(YEAR FROM T1.ship_date) = 2016 AND T3.state = 'CA';", "sql_id": 380}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(T1.weight) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.city_name = 'San Mateo' AND EXTRACT(YEAR FROM T1.ship_date) = 2016", "sql_id": 381}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id WHERE T3.first_name = 'Andrea' AND T3.last_name = 'Simons' AND T2.city_name = 'Huntsville' AND EXTRACT(YEAR FROM T1.ship_date) = 2016", "sql_id": 383}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.weight >= 10000 THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(*) FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.cust_name = 'Sunguard Window Tinting & Truck Accessories' AND YEAR(T1.ship_date) = 2017", "sql_id": 384}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM city AS T1 INNER JOIN shipment AS T2 ON T1.city_id = T2.city_id WHERE T1.population > 50000 AND YEAR(TO_DATE(T2.ship_date, 'YYYY-MM-DD')) = 2017", "sql_id": 385}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) AS per FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE YEAR(T2.ship_date) = 2016 AND T1.state = 'CA';", "sql_id": 386}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM city AS T1 INNER JOIN shipment AS T2 ON T1.city_id = T2.city_id INNER JOIN driver AS T3 ON T3.driver_id = T2.driver_id WHERE T3.first_name = 'Zachery' AND T3.last_name = 'Hicks' AND T1.city_name = 'New York' AND EXTRACT(YEAR FROM T2.ship_date) = 2016;", "sql_id": 387}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.first_name = 'Zachery' AND T2.last_name = 'Hicks' THEN T1.weight ELSE 0 END) AS DOUBLE) * 100 / SUM(T1.weight) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE YEAR(T1.ship_date) = 2016", "sql_id": 389}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Maria' AND T2.last_name = 'Craft' AND YEAR(T1.ship_date) = 2017", "sql_id": 390}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN EXTRACT(YEAR FROM T1.ship_date) = 2017 THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(*) FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.state = 'TX'", "sql_id": 391}
{"model": "gpt-3.5-turbo", "message": "SELECT title, words FROM pages WHERE title = ( SELECT MAX(CHARACTER_LENGTH(title)) FROM pages )", "sql_id": 392}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(occurrences) FROM words WHERE CHAR_LENGTH(word) = 3;", "sql_id": 393}
{"model": "gpt-3.5-turbo", "message": "SELECT title FROM book WHERE EXTRACT(YEAR FROM publication_date) = 1900 ORDER BY publication_date LIMIT 1", "sql_id": 394}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id INNER JOIN cust_order AS T3 ON T3.dest_address_id = T2.address_id WHERE T1.country_name = 'Iran' AND EXTRACT(YEAR FROM T3.order_date) = 2022", "sql_id": 395}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Delivered' AND EXTRACT(YEAR FROM T2.status_date) = 2021;", "sql_id": 396}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(T3.cost) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T1.first_name = 'Page' AND T1.last_name = 'Holsey' AND EXTRACT(YEAR FROM T2.order_date) = 2022;", "sql_id": 397}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN EXTRACT(YEAR FROM T1.publication_date) = 1992 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(*) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Abraham Lincoln';", "sql_id": 398}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.title, T2.publisher_name \nFROM book AS T1 \nJOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id \nWHERE EXTRACT(YEAR FROM T1.publication_date) = 2004 \nAND T1.num_pages * 100 > (SELECT AVG(num_pages) FROM book) * 70", "sql_id": 399}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.title \nFROM book AS T1 \nINNER JOIN book_author AS T2 ON T1.book_id = T2.book_id \nINNER JOIN author AS T3 ON T3.author_id = T2.author_id \nWHERE T3.author_name = 'Orson Scott Card' \nAND EXTRACT(YEAR FROM T1.publication_date) = 2001;", "sql_id": 400}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM cust_order AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Daisey' AND T2.last_name = 'Lamball' AND EXTRACT(YEAR FROM T1.order_date) = 2021", "sql_id": 401}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Delivered' AND EXTRACT(YEAR FROM T2.status_date) = 2019", "sql_id": 402}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.method_name = 'International' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(*) FROM cust_order AS T1 INNER JOIN shipping_method AS T2 ON T1.shipping_method_id = T2.method_id WHERE YEAR(T1.order_date) = 2020", "sql_id": 403}
{"model": "gpt-3.5-turbo", "message": "SELECT EXTRACT(YEAR FROM order_date) FROM cust_order GROUP BY EXTRACT(YEAR FROM order_date) ORDER BY COUNT(EXTRACT(YEAR FROM order_date)) DESC LIMIT 1", "sql_id": 404}
{"model": "gpt-3.5-turbo", "message": "SELECT title FROM book WHERE EXTRACT(YEAR FROM publication_date) = 1995", "sql_id": 405}
{"model": "gpt-3.5-turbo", "message": "SELECT SUBSTRING(email FROM POSITION('@' IN email) + 1 FOR LENGTH(email) - POSITION('@' IN email)) AS ym FROM customer GROUP BY SUBSTRING(email FROM POSITION('@' IN email) + 1 FOR LENGTH(email) - POSITION('@' IN email)) ORDER BY COUNT(*) DESC LIMIT 1", "sql_id": 406}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Returned' AND EXTRACT(YEAR FROM T2.status_date) = 2020", "sql_id": 407}
{"model": "gpt-3.5-turbo", "message": "SELECT EXTRACT(DAY FROM T2.status_date) - EXTRACT(DAY FROM T1.order_date) FROM cust_order AS T1 INNER JOIN order_history AS T2 ON T1.order_id = T2.order_id WHERE T1.order_id = 2398", "sql_id": 408}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T1.first_name = 'Marcelia' AND T1.last_name = 'Goering' AND EXTRACT(YEAR FROM T2.order_date) = 2021 AND T3.method_name = 'Priority';", "sql_id": 409}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Cancelled' AND EXTRACT(YEAR FROM T2.status_date) = 2022", "sql_id": 410}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM book WHERE EXTRACT(YEAR FROM publication_date) = 2017", "sql_id": 411}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.status_value = 'Returned' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE YEAR(T2.status_date) = 2022", "sql_id": 412}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.title \nFROM book AS T1 \nINNER JOIN publisher AS T2 \nON T1.publisher_id = T2.publisher_id \nWHERE T2.publisher_name = 'Free Press' \nAND EXTRACT(YEAR FROM T1.publication_date) BETWEEN 1990 AND 2000 \nORDER BY T1.num_pages DESC \nLIMIT 1", "sql_id": 413}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.price \nFROM book AS T1 \nINNER JOIN order_line AS T2 \nON T1.book_id = T2.book_id \nWHERE T1.title = 'The Servant Leader' \nAND EXTRACT(YEAR FROM T1.publication_date) = 2003;", "sql_id": 414}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Returned' AND EXTRACT(YEAR FROM T2.status_date) = 2022", "sql_id": 415}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) \nFROM book AS T1 \nINNER JOIN publisher AS T2 \nON T1.publisher_id = T2.publisher_id \nWHERE T2.publisher_name = 'Birlinn' \nAND EXTRACT(YEAR FROM T1.publication_date) = 2008 \nAND T1.num_pages BETWEEN 600 AND 700", "sql_id": 416}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Brava' AND EXTRACT(YEAR FROM T1.publication_date) = 2006", "sql_id": 417}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T1.first_name, T1.last_name \nFROM employee AS T1 \nINNER JOIN inspection AS T2 \nON T1.employee_id = T2.employee_id \nWHERE T2.inspection_date BETWEEN '2010-05-01' AND '2010-05-31' \nAND T1.title = 'Sanitarian';", "sql_id": 418}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T2.inspection_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE YEAR(T2.inspection_date) = 2010 AND T1.first_name = 'Joshua' AND T1.last_name = 'Rosa';", "sql_id": 419}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T1.license_no) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE EXTRACT(YEAR FROM T1.inspection_date) = 2010 AND T2.facility_type = 'Restaurant';", "sql_id": 420}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T1.license_no) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE EXTRACT(YEAR FROM T1.inspection_date) = 2010 AND T2.ward = 42", "sql_id": 421}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T2.dba_name FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T1.results = 'Fail' AND EXTRACT(YEAR FROM T1.inspection_date) = 2010;", "sql_id": 422}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T2.license_no) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE YEAR(T1.inspection_date) = 2010 AND T2.risk_level = 3", "sql_id": 423}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T2.address = '5000 N Wolcott Ave' AND T2.title = 'Sanitarian' AND EXTRACT(YEAR_MONTH FROM T1.inspection_date) = 201105", "sql_id": 424}
{"model": "gpt-3.5-turbo", "message": "SELECT T3.first_name, T3.last_name\nFROM (SELECT T1.employee_id, COUNT(T1.inspection_id)\n      FROM inspection AS T1\n      WHERE T1.inspection_date >= '2016-03-01' AND T1.inspection_date < '2016-04-01'\n      GROUP BY T1.employee_id\n      ORDER BY COUNT(T1.inspection_id) DESC\n      LIMIT 1) AS T2\nINNER JOIN employee AS T3 ON T2.employee_id = T3.employee_id;", "sql_id": 425}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T2.dba_name \nFROM inspection AS T1 \nINNER JOIN establishment AS T2 \nON T1.license_no = T2.license_no \nWHERE EXTRACT(YEAR FROM T1.inspection_date) || '-' || LPAD(EXTRACT(MONTH FROM T1.inspection_date), 2, '0') = '2012-05' \nAND T1.results = 'Pass w/ Conditions';", "sql_id": 426}
{"model": "gpt-3.5-turbo", "message": "SELECT T.dba_name\nFROM (\n    SELECT T1.dba_name, SUM(T3.fine)\n    FROM establishment AS T1\n    INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no\n    INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id\n    WHERE YEAR(T2.inspection_date) = 2014\n    GROUP BY T1.dba_name\n    ORDER BY SUM(T3.fine) DESC\n    LIMIT 1\n) AS T;", "sql_id": 427}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(T3.fine) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE EXTRACT(YEAR_MONTH FROM T2.inspection_date) = 201402 AND T1.dba_name = 'RON OF JAPAN INC';", "sql_id": 428}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T1.address FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE EXTRACT(YEAR FROM T2.inspection_date) || '-' || LPAD(EXTRACT(MONTH FROM T2.inspection_date), 2, '0') = '2010-03' AND T2.results = 'Pass' AND T1.facility_type = 'School';", "sql_id": 429}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(inspection_id) FROM inspection WHERE EXTRACT(YEAR FROM inspection_date) || '-' || LPAD(EXTRACT(MONTH FROM inspection_date), 2, '0') = '2011-01'", "sql_id": 430}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(inspection_id) FROM inspection WHERE YEAR(inspection_date) = 2014 AND results = 'Fail';", "sql_id": 431}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(COUNT(CASE WHEN T1.first_name = 'Jessica' AND T1.last_name = 'Anthony' THEN T2.inspection_id ELSE 0 END) AS DOUBLE) / 8 FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE YEAR(T2.inspection_date) BETWEEN 2010 AND 2017", "sql_id": 433}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T2.inspection_id) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE EXTRACT(YEAR FROM T2.inspection_date) = 2010 AND T1.risk_level = 3", "sql_id": 434}
{"model": "gpt-3.5-turbo", "message": "SELECT MIN(T2.inspection_date) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'JOHN SCHALLER' AND EXTRACT(YEAR FROM T2.inspection_date) = 2010", "sql_id": 435}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T1.dba_name\nFROM establishment AS T1\nINNER JOIN inspection AS T2 ON T1.license_no = T2.license_no\nWHERE YEAR(T2.inspection_date) = 2010\nAND T2.results = 'Pass'\nAND T1.facility_type = 'Liquor';", "sql_id": 436}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE EXTRACT(YEAR FROM T2.inspection_date) || '-' || LPAD(EXTRACT(MONTH FROM T2.inspection_date), 2, '0') = '2010-07' AND T2.results = 'Fail' AND T1.facility_type = 'Restaurant';", "sql_id": 437}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T3.dba_name, T2.results \nFROM employee AS T1 \nJOIN inspection AS T2 ON T1.employee_id = T2.employee_id \nJOIN establishment AS T3 ON T2.license_no = T3.license_no \nWHERE T1.first_name = 'Bob' AND T1.last_name = 'Benson' AND YEAR(T2.inspection_date) = 2010;", "sql_id": 438}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE EXTRACT(YEAR FROM T2.inspection_date) || '-' || LPAD(EXTRACT(MONTH FROM T2.inspection_date), 2, '0') = '2010-04' AND T1.facility_type = 'Restaurant' AND T2.results = 'Fail';", "sql_id": 439}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T1.dba_name\nFROM establishment AS T1\nINNER JOIN inspection AS T2 ON T1.license_no = T2.license_no\nINNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id\nWHERE EXTRACT(YEAR_MONTH FROM T2.inspection_date) = 201001\nAND T2.results = 'Fail'\nAND T1.facility_type = 'TAVERN';", "sql_id": 440}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T1.employee_id \nFROM employee AS T1 \nINNER JOIN inspection AS T2 \nON T1.employee_id = T2.employee_id \nWHERE T2.results = 'Fail' \nAND EXTRACT(YEAR FROM T2.inspection_date) || '-' || EXTRACT(MONTH FROM T2.inspection_date) = '2010-02' \nAND T1.salary > 0.7 * ( SELECT AVG(salary) FROM employee );", "sql_id": 441}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.name \nFROM coins AS T1 \nINNER JOIN historical AS T2 \nON T1.id = T2.coin_id \nWHERE T2._date LIKE '2018%' \nAND T2.market_cap = ( \n    SELECT MAX(market_cap) \n    FROM historical \n    WHERE YEAR(_date) = 2018 \n)", "sql_id": 442}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.time_high, T2.time_low, T2._date FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'WARP' AND DATE_FORMAT(T2._date, '%Y-%m') = '2016-08';", "sql_id": 443}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(T2.circulating_supply) / 12.0 FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Frozen' AND EXTRACT(YEAR FROM T2._date) = 2014", "sql_id": 444}
{"model": "gpt-3.5-turbo", "message": "SELECT AVG(T2.price) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' AND YEAR(T2.date) = 2016;", "sql_id": 445}
{"model": "gpt-3.5-turbo", "message": "SELECT AVG(T2.price) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE YEAR(T2.date) = 2013 AND T1.name = 'Bitcoin';", "sql_id": 446}
{"model": "gpt-3.5-turbo", "message": "SELECT name FROM coins WHERE LENGTH(tag_names) - LENGTH(REPLACE(tag_names, ',', '')) = 2;", "sql_id": 448}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.name \nFROM coins AS T1 \nINNER JOIN historical AS T2 \nON T1.id = T2.coin_id \nWHERE DATE_FORMAT(T2.date, '%Y-%m') = '2013-05' \nAND T2.open IS NULL;", "sql_id": 449}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T2.coin_id) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bytecoin' AND DATE_FORMAT(T2.date, '%Y-%m') = '2013-06';", "sql_id": 450}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.CustomerID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE YEAR(T2.OrderDate) = 1996 AND T1.Country = 'UK'", "sql_id": 453}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T2.CustomerID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE EXTRACT(YEAR FROM T2.OrderDate) = 1996 GROUP BY T1.Country;", "sql_id": 455}
{"model": "gpt-3.5-turbo", "message": "SELECT T4.ProductName \nFROM Customers AS T1 \nINNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID \nINNER JOIN OrderDetails AS T3 ON T2.OrderID = T3.OrderID \nINNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID \nWHERE T1.Country = 'Norway' \nAND YEAR(T2.OrderDate) = 1996;", "sql_id": 463}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.n_name = 'GERMANY' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey", "sql_id": 471}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.r_name = 'EUROPE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.n_name) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey", "sql_id": 473}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.n_name = 'JAPAN' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.s_name) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0", "sql_id": 474}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(l_orderkey) FROM lineitem WHERE EXTRACT(YEAR FROM l_shipdate) = 1998", "sql_id": 475}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_returnflag = 'R' AND l_shipmode = 'AIR' AND EXTRACT(YEAR FROM l_shipdate) = 1994", "sql_id": 476}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T2.o_orderkey) FROM lineitem AS T1 INNER JOIN orders AS T2 ON T2.o_orderkey = T1.l_orderkey WHERE DATEDIFF('day', T1.l_shipdate, T2.o_orderdate) = 1 AND T2.o_orderpriority = '1-URGENT';", "sql_id": 477}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN c_acctbal < 0 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(c_custkey) FROM customer", "sql_id": 478}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN p_mfgr = 'Manufacturer#3' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(p_partkey) FROM part;", "sql_id": 479}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'AIR' AND T1.o_orderpriority = '1-URGENT' AND SUBSTRING(T2.l_shipdate FROM 1 FOR 7) = '1998-11';", "sql_id": 480}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.n_name = 'GERMANY' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0", "sql_id": 481}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(l_orderkey) FROM lineitem WHERE EXTRACT(YEAR FROM l_shipdate) = 1994", "sql_id": 482}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.n_name = 'United States' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal < 4000", "sql_id": 483}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN ps_supplycost > 500 THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(ps_suppkey) FROM partsupp", "sql_id": 484}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.c_mktsegment = 'AUTOMOBILE' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.c_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'FRANCE';", "sql_id": 485}
{"model": "gpt-3.5-turbo", "message": "SELECT (CAST(SUM(CASE WHEN T2.r_name = 'AFRICA' THEN 1 ELSE 0 END) AS DOUBLE) * 100) / COUNT(T1.n_nationkey)\nFROM nation AS T1\nINNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey\nINNER JOIN customer AS T3 ON T1.n_nationkey = T3.c_nationkey\nWHERE T3.c_mktsegment = 'HOUSEHOLD';", "sql_id": 486}
{"model": "gpt-3.5-turbo", "message": "SELECT (CAST(SUM(CASE WHEN T3.l_shipmode = 'SHIP' THEN T1.p_retailprice ELSE 0 END) AS DOUBLE PRECISION) / SUM(CASE WHEN T3.l_shipmode = 'SHIP' THEN 1 ELSE 0 END)) - (CAST(SUM(CASE WHEN T3.l_shipmode = 'AIR' THEN T1.p_retailprice ELSE 0 END) AS DOUBLE PRECISION) / SUM(CASE WHEN T3.l_shipmode = 'AIR' THEN 1 ELSE 0 END)) FROM \"part\" AS T1 INNER JOIN \"partsupp\" AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN \"lineitem\" AS T3 ON T2.ps_suppkey = T3.l_suppkey;", "sql_id": 487}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T3.s_acctbal < (SELECT AVG(s_acctbal) FROM supplier) THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN supplier AS T3 ON T1.n_nationkey = T3.s_nationkey WHERE T2.r_name = 'EUROPE';", "sql_id": 488}
{"model": "gpt-3.5-turbo", "message": "SELECT (CAST(SUM(CASE WHEN EXTRACT(YEAR FROM T2.l_shipdate) = 1995 THEN 1 ELSE 0 END) AS DOUBLE) / 12) - (CAST(SUM(CASE WHEN EXTRACT(YEAR FROM T2.l_shipdate) = 1996 THEN 1 ELSE 0 END) AS DOUBLE) / 12) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderpriority = '5-LOW' AND T2.l_shipmode = 'TRUCK';", "sql_id": 489}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.n_name = 'IRAN' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T2.n_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD'", "sql_id": 490}
{"model": "gpt-3.5-turbo", "message": "SELECT CASE WHEN SUM(CASE WHEN l_shipmode = 'RAIL' THEN 1 ELSE 0 END) - SUM(CASE WHEN l_shipmode = 'MAIL' THEN 1 ELSE 0 END) <> 0 THEN 'RAIL' ELSE 'MAIL' END AS result FROM lineitem WHERE l_shipinstruct = 'DELIVER IN PERSON';", "sql_id": 491}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(o_orderkey) AS countorders FROM orders WHERE EXTRACT(YEAR FROM o_orderdate) = 1998 AND o_totalprice < 950", "sql_id": 492}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN l_returnflag = 'A' THEN 1 ELSE 0 END) - SUM(CASE WHEN l_returnflag = 'N' THEN 1 ELSE 0 END) AS diff FROM lineitem WHERE l_extendedprice < 16947.7;", "sql_id": 493}
{"model": "gpt-3.5-turbo", "message": "SELECT DATEDIFF('day', T2.l_commitdate, T2.l_receiptdate), T1.o_clerk FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderkey = 6", "sql_id": 494}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.r_name = 'ASIA' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.r_regionkey) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey", "sql_id": 495}
{"model": "gpt-3.5-turbo", "message": "SELECT l_linenumber FROM lineitem WHERE YEAR(l_shipdate) < 1997 AND l_shipmode = 'truck';", "sql_id": 496}
{"model": "gpt-3.5-turbo", "message": "SELECT l_linenumber FROM lineitem WHERE YEAR(l_shipdate) < 1997 AND l_shipmode = 'TRUCK';", "sql_id": 497}
{"model": "gpt-3.5-turbo", "message": "SELECT T3.c_name \nFROM orders AS T1 \nINNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey \nINNER JOIN customer AS T3 ON T1.o_custkey = T3.c_custkey \nWHERE T2.l_discount = 0.1 \nAND EXTRACT(YEAR FROM T1.o_orderdate) BETWEEN 1994 AND 1995", "sql_id": 498}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.r_name = 'America' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T2.n_name) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey", "sql_id": 499}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.c_mktsegment = 'HOUSEHOLD' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.c_mktsegment) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'INDONESIA'", "sql_id": 500}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(l_orderkey) FROM lineitem WHERE EXTRACT(YEAR FROM l_shipdate) = 1997 AND l_shipmode = 'MAIL';", "sql_id": 501}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(l_orderkey) FROM lineitem WHERE EXTRACT(YEAR FROM l_shipdate) = 1994 AND l_returnflag = 'R' AND l_shipmode = 'TRUCK';", "sql_id": 502}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(o_orderkey) FROM orders WHERE EXTRACT(YEAR FROM o_orderdate) = 1997 AND o_clerk = 'Clerk#000000001' AND o_orderpriority = '1-URGENT';", "sql_id": 503}
{"model": "gpt-3.5-turbo", "message": "SELECT T3.c_name \nFROM orders AS T1 \nINNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey \nINNER JOIN customer AS T3 ON T1.o_custkey = T3.c_custkey \nORDER BY (JULIANDAY(T2.l_receiptdate) - JULIANDAY(T2.l_commitdate)) DESC \nLIMIT 1;", "sql_id": 504}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height WHERE T1.height_in_cm > 182 AND EXTRACT(YEAR FROM T2.birthdate) = '1982';", "sql_id": 505}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T2.ELITEID) FROM weight_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.weight_id = T2.weight WHERE T1.weight_in_lbs = 185 AND EXTRACT(YEAR FROM T2.birthdate) = '1980';", "sql_id": 506}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT COUNT(CASE WHEN T1.nation = 'Sweden' THEN T1.ELITEID ELSE NULL END) * 100.0 / COUNT(T1.ELITEID) OVER (PARTITION BY T2.SEASON) FROM PlayerInfo AS T1 INNER JOIN SeasonStatus AS T2 ON T1.ELITEID = T2.ELITEID WHERE T2.SEASON IN ('1997-1998', '1998-1999', '1999-2000');", "sql_id": 507}
{"model": "gpt-3.5-turbo", "message": "SELECT DATEDIFF('day', StartDate, EndDate) FROM BillOfMaterials ORDER BY DATEDIFF('day', StartDate, EndDate) DESC LIMIT 1", "sql_id": 508}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN MaritalStatus = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(BusinessEntityID) FROM Employee WHERE SUBSTRING(HireDate, 1, 4) = '2009' AND Gender = 'M';", "sql_id": 510}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.\"CreditRating\" FROM \"ProductVendor\" AS T1 INNER JOIN \"Vendor\" AS T2 ON T1.\"BusinessEntityID\" = T2.\"BusinessEntityID\" WHERE T1.\"StandardPrice\" = 18.9900 AND T1.\"AverageLeadTime\" = 16 AND DATE_TRUNC('day', T1.\"LastReceiptDate\")::DATE = '2011-08-27';", "sql_id": 511}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.ShipMethodID = 5 THEN T3.OrderQty ELSE 0 END) AS DOUBLE) / COUNT(T3.ProductID) FROM ShipMethod AS T1 INNER JOIN PurchaseOrderHeader AS T2 ON T1.ShipMethodID = T2.ShipMethodID INNER JOIN PurchaseOrderDetail AS T3 ON T2.PurchaseOrderID = T3.PurchaseOrderID;", "sql_id": 512}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN T1.city = 'Bothell' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.city = 'Kenmore' THEN 1 ELSE 0 END) , stateprovincecode FROM Address AS T1 INNER JOIN StateProvince AS T2 ON T1.stateprovinceid = T2.stateprovinceid GROUP BY stateprovincecode", "sql_id": 513}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.ListPrice FROM Product AS T1 INNER JOIN ProductListPriceHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ListPrice - T1.StandardCost > 21.9037 AND T2.StartDate::DATE >= '2012-10-01'", "sql_id": 514}
{"model": "gpt-3.5-turbo", "message": "SELECT LENGTH(T2.\"PasswordHash\") FROM \"Person\" AS T1 INNER JOIN \"Password\" AS T2 ON T1.\"BusinessEntityID\" = T2.\"BusinessEntityID\" WHERE T1.\"FirstName\" = 'Catherine' AND T1.\"LastName\" = 'Ward';", "sql_id": 515}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.TransactionType \nFROM TransactionHistory AS T1 \nINNER JOIN Product AS T2 \nON T1.ProductID = T2.ProductID \nWHERE T2.Name = 'HL Road Frame - Black, 48' \nAND DATE(T1.TransactionDate) = '2013-07-31';", "sql_id": 516}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.TransactionType \nFROM TransactionHistoryArchive AS T1 \nINNER JOIN Product AS T2 \nON T1.ProductID = T2.ProductID \nWHERE T2.Name = 'LL Road Handlebars' \nAND DATE(T1.TransactionDate) = '2012-11-03';", "sql_id": 517}
{"model": "gpt-3.5-turbo", "message": "SELECT BusinessEntityID \nFROM SalesPerson \nWHERE BusinessEntityID IN \n    (SELECT BusinessEntityID \n     FROM SalesPersonQuotaHistory \n     WHERE YEAR(QuotaDate) = 2013) \nORDER BY CAST(SalesLastYear AS DOUBLE PRECISION) / SalesQuota DESC \nLIMIT 1", "sql_id": 518}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP' AND CAST(SUBSTRING(T1.HireDate, 1, 4) AS INTEGER) < 2010", "sql_id": 519}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.BusinessEntityID, SUM(T1.SalesQuota) FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE YEAR(T2.QuotaDate) = 2011 GROUP BY T1.BusinessEntityID ORDER BY SUM(T1.SalesYTD) DESC LIMIT 1", "sql_id": 520}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T1.BusinessEntityID\nFROM SalesPerson AS T1\nINNER JOIN SalesPersonQuotaHistory AS T2\nON T1.BusinessEntityID = T2.BusinessEntityID\nWHERE T1.TerritoryID = 1\nAND YEAR(QuotaDate) = 2013;", "sql_id": 521}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(T1.SalesQuota) FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.BusinessEntityID = 275 AND YEAR(QuotaDate) = 2013", "sql_id": 522}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T1.\"BusinessEntityID\"\nFROM \"SalesPerson\" AS T1\nINNER JOIN \"SalesPersonQuotaHistory\" AS T2 ON T1.\"BusinessEntityID\" = T2.\"BusinessEntityID\"\nWHERE EXTRACT(YEAR FROM T2.\"QuotaDate\") = 2013\nAND T1.\"SalesQuota\" < T1.\"SalesLastYear\"", "sql_id": 523}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(T1.Bonus) , CAST(SUM(T1.Bonus) AS DOUBLE PRECISION) * 100 / SUM(T1.SalesQuota) FROM SalesPerson AS T1 INNER JOIN SalesPersonQuotaHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE YEAR(T2.QuotaDate) = 2013", "sql_id": 524}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.Rate FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE EXTRACT(YEAR FROM T1.HireDate) - EXTRACT(YEAR FROM T1.BirthDate) = 20", "sql_id": 525}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(BusinessEntityID) FROM Employee WHERE MaritalStatus = 'M' AND EXTRACT(YEAR FROM BirthDate) < 1960 AND Gender = 'M';", "sql_id": 526}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T3.Name) FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T1.FirstName = 'Sheela' AND T1.LastName = 'Word' AND YEAR(T3.ModifiedDate) BETWEEN 2011 AND 2012", "sql_id": 528}
{"model": "gpt-3.5-turbo", "message": "SELECT AVG(2009 - YEAR(T2.BirthDate)) FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'SP';", "sql_id": 529}
{"model": "gpt-3.5-turbo", "message": "SELECT 2015 - EXTRACT(YEAR FROM T1.BirthDate), T2.Rate FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle = 'Marketing Specialist' ORDER BY 2015 - EXTRACT(YEAR FROM T1.BirthDate) DESC LIMIT 1", "sql_id": 530}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.\"BusinessEntityID\", EXTRACT(YEAR FROM T2.\"HireDate\") - EXTRACT(YEAR FROM T2.\"BirthDate\") FROM \"PurchaseOrderHeader\" AS T1 INNER JOIN \"Employee\" AS T2 ON T1.\"EmployeeID\" = T2.\"BusinessEntityID\" ORDER BY T1.\"TotalDue\" DESC LIMIT 1", "sql_id": 531}
{"model": "gpt-3.5-turbo", "message": "SELECT 2011 - EXTRACT(YEAR FROM T2.HireDate) FROM Document AS T1 INNER JOIN Employee AS T2 ON T1.Owner = T2.BusinessEntityID WHERE T1._Status = 1", "sql_id": 532}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.FirstName, T2.MiddleName, T2.LastName\nFROM Employee AS T1\nINNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID\nORDER BY YEAR(T1.HireDate) - YEAR(T1.BirthDate) DESC\nLIMIT 1 OFFSET 1", "sql_id": 533}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.FirstName, T1.LastName \nFROM Person AS T1 \nINNER JOIN Employee AS T2 \nON T1.BusinessEntityID = T2.BusinessEntityID \nWHERE YEAR(T2.HireDate) >= 2007 AND T2.SalariedFlag = 1", "sql_id": 534}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.FirstName, T1.LastName , EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM BirthDate) FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN EmployeeDepartmentHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE T3.ShiftID = 3 ORDER BY EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM BirthDate) DESC LIMIT 1", "sql_id": 535}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.FirstName, T1.LastName \nFROM Person AS T1 \nINNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID \nINNER JOIN EmployeeDepartmentHistory AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID \nINNER JOIN Department AS T4 ON T3.DepartmentID = T4.DepartmentID \nWHERE EXTRACT(YEAR FROM T2.HireDate) = 2009 \nAND T4.Name = 'Shipping and Receiving';", "sql_id": 536}
{"model": "gpt-3.5-turbo", "message": "SELECT AVG(YEAR(CURRENT_TIMESTAMP) - YEAR(T1.HireDate)) FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T3.Name = 'Research and Development';", "sql_id": 537}
{"model": "gpt-3.5-turbo", "message": "SELECT AVG(YEAR(CURRENT_TIMESTAMP) - YEAR(BirthDate)) FROM Employee;", "sql_id": 538}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.Name, T3.Name FROM Product AS T1 INNER JOIN ProductVendor AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T2.BusinessEntityID = T3.BusinessEntityID WHERE EXTRACT(YEAR FROM T1.SellStartDate) = 2013;", "sql_id": 539}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.FirstName, T2.LastName \nFROM Employee AS T1 \nINNER JOIN Person AS T2 \nON T1.BusinessEntityID = T2.BusinessEntityID \nWHERE EXTRACT(YEAR FROM T1.BirthDate) > 1970 \nORDER BY T1.SickLeaveHours \nLIMIT 1", "sql_id": 540}
{"model": "gpt-3.5-turbo", "message": "SELECT EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.BirthDate) + 1 , T3.Name FROM Employee AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 USING (BusinessEntityID) INNER JOIN Department AS T3 USING (DepartmentID) ORDER BY T1.BirthDate DESC LIMIT 1", "sql_id": 541}
{"model": "gpt-3.5-turbo", "message": "SELECT T3.StartTime, T3.EndTime \nFROM Employee AS T1 \nINNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID \nINNER JOIN Shift AS T3 ON T2.ShiftID = T3.ShiftID \nWHERE EXTRACT(YEAR FROM T1.BirthDate) < 1969 \nORDER BY T1.BirthDate \nOFFSET 5 ROWS FETCH NEXT 1 ROW ONLY;", "sql_id": 543}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.\"EndDate\" FROM \"Employee\" AS T1 INNER JOIN \"EmployeeDepartmentHistory\" AS T2 ON T1.\"BusinessEntityID\" = T2.\"BusinessEntityID\" INNER JOIN \"Department\" AS T3 ON T2.\"DepartmentID\" = T3.\"DepartmentID\" WHERE T1.\"JobTitle\" = 'Senior Tool Designer' AND EXTRACT(YEAR FROM T1.\"HireDate\") - EXTRACT(YEAR FROM T1.\"BirthDate\") = 33 AND T2.\"EndDate\" IS NOT NULL;", "sql_id": 544}
{"model": "gpt-3.5-turbo", "message": "SELECT EXTRACT(YEAR FROM T1.HireDate) - EXTRACT(YEAR FROM T1.BirthDate), T2.FirstName, T2.MiddleName, T2.LastName \nFROM Employee AS T1 \nINNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID \nWHERE T1.VacationHours <= 10 \nORDER BY EXTRACT(YEAR FROM T1.HireDate) - EXTRACT(YEAR FROM T1.BirthDate) DESC \nLIMIT 1", "sql_id": 545}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.PersonType \nFROM Employee AS T1 \nINNER JOIN Person AS T2 \nON T1.BusinessEntityID = T2.BusinessEntityID \nWHERE T1.Gender = 'F' \nAND T1.MaritalStatus = 'S' \nAND DATE(T1.HireDate) BETWEEN '2008-01-01' AND '2008-12-31' \nGROUP BY T2.PersonType \nORDER BY COUNT(T2.PersonType) DESC \nLIMIT 1", "sql_id": 546}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.BusinessEntityID) FROM Person AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID INNER JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID WHERE T3.Name = 'Engineering' AND EXTRACT(YEAR FROM T2.EndDate) > 2009 AND EXTRACT(YEAR FROM T2.StartDate) < 2009", "sql_id": 547}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.\"BusinessEntityID\") FROM \"EmployeeDepartmentHistory\" AS T1 INNER JOIN \"Department\" AS T2 ON T1.\"DepartmentID\" = T2.\"DepartmentID\" INNER JOIN \"Person\" AS T3 ON T1.\"BusinessEntityID\" = T3.\"BusinessEntityID\" WHERE T3.\"PersonType\" = 'SC' AND T2.\"GroupName\" = 'Manufacturing' AND EXTRACT(YEAR FROM T1.\"EndDate\") >= 2007 AND EXTRACT(YEAR FROM T1.\"StartDate\") <= 2007", "sql_id": 548}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T2.GroupName = 'Quality Assurance' AND EXTRACT(YEAR FROM T1.StartDate) = 2007", "sql_id": 549}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(365 * (YEAR(T1.EndDate) - YEAR(T1.StartDate)) + 30 * (MONTH(T1.EndDate) - MONTH(T1.StartDate)) + DAYOFMONTH(T1.EndDate) - DAYOFMONTH(T1.StartDate)) AS DOUBLE) / COUNT(T1.BusinessEntityID) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T2.Name = 'Engineering' AND T1.EndDate IS NOT NULL", "sql_id": 550}
{"model": "gpt-3.5-turbo", "message": "SELECT AVG(T3.Rate) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN EmployeePayHistory AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Engineering' AND YEAR(EndDate) > 2007 AND YEAR(T1.StartDate) < 2007", "sql_id": 551}
{"model": "gpt-3.5-turbo", "message": "SELECT 365 * (YEAR(ActualEndDate) - YEAR(ActualStartDate)) + 30 * (MONTH(ActualEndDate) - MONTH(ActualStartDate)) + DAY(ActualEndDate) - DAY(ActualStartDate) FROM WorkOrderRouting WHERE WorkOrderID = 425", "sql_id": 552}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN T1.IMG_ID = 1 THEN 1 ELSE 0 END), SUM(CASE WHEN T1.X = 341 AND T1.Y = 27 AND T1.W = 42 AND T1.H = 51 THEN 1 ELSE 0 END) FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID", "sql_id": 553}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.nameGiven, T1.height, T1.weight, EXTRACT(YEAR FROM CURRENT_DATE) - CAST(birthYear AS INTEGER) FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'COL' AND T2.year >= 2000 AND T2.year <= 2010 GROUP BY T1.playerID;", "sql_id": 554}
{"model": "gpt-3.5-turbo", "message": "SELECT AVG(CASE WHEN birthYear < '1990' THEN CAST(height AS DOUBLE) ELSE NULL END) - AVG(CASE WHEN birthYear >= '1990' THEN CAST(height AS DOUBLE) ELSE NULL END) FROM Master;", "sql_id": 555}
{"model": "gpt-3.5-turbo", "message": "SELECT CASE WHEN T1.note = 'posthumous' THEN 'YES' ELSE 'NO' END FROM AwardsMisc AS T1 RIGHT JOIN Master AS T2 ON T1.ID = T2.playerID WHERE T2.legendsID = 'P194502';", "sql_id": 556}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.firstName, T2.lastName, CASE WHEN T1.tmID = 'BOS' THEN 'YES' ELSE 'NO' END\nFROM Goalies AS T1\nINNER JOIN Master AS T2 ON T1.playerID = T2.playerID\nWHERE T1._year = 1972 AND T1.tmID = 'BOS' AND T2.coachID IS NOT NULL AND T2.hofID IS NULL;", "sql_id": 557}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(T2.G), EXTRACT(YEAR FROM CURRENT_DATE) - T1.birthyear\nFROM Master AS T1\nINNER JOIN Scoring AS T2 ON T1.playerID = T2.playerID\nWHERE T1.playerID = 'aaltoan01'\nGROUP BY T1.birthyear;", "sql_id": 558}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.Language = 'English' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.Code) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode;", "sql_id": 559}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.Language = 'English' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.Code) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GNP > 1500", "sql_id": 560}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.Language = 'Chinese' THEN T1.SurfaceArea ELSE 0 END) AS DOUBLE) * 100 / SUM(T1.SurfaceArea) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode;", "sql_id": 561}
{"model": "gpt-3.5-turbo", "message": "SELECT title FROM reviews ORDER BY LENGTH(content) DESC LIMIT 1", "sql_id": 562}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.title\nFROM categories AS T1\nINNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id\nWHERE T1.category = 'music'\nORDER BY LENGTH(T2.title) DESC\nLIMIT 1;", "sql_id": 563}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(units) FROM sales_in_weather WHERE SUBSTRING(\"_date\" FROM 6 FOR 2) = '01' AND SUBSTRING(\"_date\" FROM 1 FOR 4) = '2012' AND item_nbr = 9 AND store_nbr = 1", "sql_id": 564}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN T3.depart < 0 THEN units ELSE 0 END) AS sum FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTRING(T1._date, 1, 4) = '2012' AND T1.item_nbr = 5;", "sql_id": 565}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.units \nFROM sales_in_weather AS T1 \nINNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr \nINNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr \nWHERE T2.store_nbr = 3 \nAND SUBSTRING(T1._date, 1, 4) = '2012' \nAND T1.item_nbr = 5 \nORDER BY tmax DESC \nLIMIT 1", "sql_id": 566}
{"model": "gpt-3.5-turbo", "message": "SELECT T3.dewpoint \nFROM sales_in_weather AS T1 \nINNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr \nINNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr \nWHERE T2.store_nbr = 3 \nAND SUBSTRING(T1._date, 1, 4) = '2012' \nAND T1.item_nbr = 5 \nORDER BY T1.units DESC \nLIMIT 1", "sql_id": 567}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN units > 100 THEN 1 ELSE 0 END) AS count\nFROM sales_in_weather AS T1\nINNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr\nINNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr\nWHERE T2.store_nbr = 3\nAND SUBSTRING(T1._date, 1, 4) = '2012'\nAND T1.item_nbr = 5\nAND tmax > 90;", "sql_id": 568}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T1.item_nbr) \nFROM sales_in_weather AS T1 \nINNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr \nINNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr \nWHERE T1.store_nbr = 3 \nAND SUBSTRING(T1._date, 1, 4) = '2012' \nAND T1.units = 0 \nGROUP BY T3.tmax \nORDER BY T3.tmax DESC \nLIMIT 1", "sql_id": 569}
{"model": "gpt-3.5-turbo", "message": "SELECT \"_date\" FROM weather WHERE station_nbr = 1 AND CAST(SUBSTRING(\"_date\", 1, 4) AS INT) BETWEEN 2012 AND 2014 ORDER BY tmax DESC LIMIT 1", "sql_id": 570}
{"model": "gpt-3.5-turbo", "message": "SELECT station_nbr FROM weather WHERE SUBSTRING(\"_date\" FROM 1 FOR 4) = '2014' AND SUBSTRING(\"_date\" FROM 6 FOR 2) = '03' AND depart < 0 GROUP BY station_nbr HAVING COUNT(DISTINCT \"_date\") = ( SELECT COUNT(DISTINCT \"_date\") FROM weather WHERE SUBSTRING(\"_date\" FROM 1 FOR 4) = '2014' AND SUBSTRING(\"_date\" FROM 6 FOR 2) = '03' AND depart < 0 GROUP BY station_nbr ORDER BY COUNT(\"_date\") DESC LIMIT 1 )", "sql_id": 571}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(T2.tmax) AS DOUBLE PRECISION) / 29 FROM ( SELECT station_nbr FROM relation GROUP BY station_nbr ORDER BY COUNT(store_nbr) DESC LIMIT 1 ) AS T1 JOIN weather AS T2 ON T1.station_nbr = T2.station_nbr WHERE SUBSTRING(T2.\"_date\", 1, 7) = '2012-02';", "sql_id": 572}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT \"_date\") AS days FROM \"weather\" WHERE \"sunrise\" < TIME '05:00:00'", "sql_id": 573}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T2.station_nbr) AS number FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE SUBSTRING(\"_date\" FROM 1 FOR 7) = '2014-01' AND item_nbr = 5", "sql_id": 574}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN Government = 'republic' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Country) FROM politics WHERE YEAR(Independence) > 1970", "sql_id": 575}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.Country, COUNT(T1.Country) FROM economy AS T1 INNER JOIN organization AS T2 ON T1.Country = T2.Country WHERE T1.GDP < 500000 AND YEAR(T2.Established) < 1999 GROUP BY T1.Country", "sql_id": 576}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.Country\nFROM politics AS T1\nINNER JOIN population AS T2\nON T1.Country = T2.Country\nWHERE EXTRACT(YEAR FROM T1.Independence) = 1960\nORDER BY T2.Infant_Mortality DESC\nLIMIT 1", "sql_id": 577}
{"model": "gpt-3.5-turbo", "message": "SELECT River, STRING_AGG(Province) FROM geo_river GROUP BY River HAVING COUNT(DISTINCT Country) > 1", "sql_id": 578}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.Population / T1.Area FROM country AS T1 INNER JOIN organization AS T2 ON T1.Code = T2.Country WHERE YEAR(T2.Established) = 1947", "sql_id": 579}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.Name\nFROM country AS T1\nINNER JOIN organization AS T2 ON T1.Code = T2.Country\nINNER JOIN politics AS T3 ON T3.Country = T2.Country\nWHERE YEAR(T2.Established) > 1907\nAND T3.Government = 'constitutional monarchy'\nGROUP BY T1.Name\nORDER BY COUNT(DISTINCT T2.Name) DESC\nLIMIT 1", "sql_id": 582}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN \"Government\" = 'parliamentary democracy' THEN 1 ELSE 0 END),\nCAST(SUM(CASE WHEN \"Government\" = 'parliamentary democracy' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) \nFROM politics AS t1 \nWHERE YEAR(\"Independence\") >= 1993;", "sql_id": 583}
{"model": "gpt-3.5-turbo", "message": "SELECT Name FROM organization WHERE EXTRACT(YEAR FROM Established) BETWEEN 1970 AND 1980;", "sql_id": 584}
{"model": "gpt-3.5-turbo", "message": "SELECT EXTRACT(YEAR FROM T4.Established) FROM continent AS T1 INNER JOIN encompasses AS T2 ON T1.Name = T2.Continent INNER JOIN country AS T3 ON T2.Country = T3.Code INNER JOIN organization AS T4 ON T4.Country = T3.Code WHERE T1.Name = 'Europe' GROUP BY EXTRACT(YEAR FROM T4.Established) ORDER BY COUNT(T4.Name) DESC LIMIT 1", "sql_id": 585}
{"model": "gpt-3.5-turbo", "message": "SELECT * FROM politics WHERE EXTRACT(YEAR FROM Independence) BETWEEN 1950 AND 1999 AND Government = 'parliamentary democracy';", "sql_id": 586}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN EXTRACT(YEAR FROM Independence) = 1960 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Country) FROM politics;", "sql_id": 587}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(COUNT(T1.fbi_code_no) AS DOUBLE) / 4 FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE SUBSTRING(T2._date, 1, 1) = '1' AND SUBSTRING(T2._date, 6, 4) = '2018';", "sql_id": 588}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.ward_no, T1.alderman_first_name, T1.alderman_last_name, T1.alderman_name_suffix \nFROM Ward AS T1 \nINNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no \nWHERE SUBSTRING(T2._date FROM 1 FOR 1) = '1' AND SUBSTRING(T2._date FROM 5 FOR 4) = '2018' \nGROUP BY T1.ward_no \nORDER BY COUNT(T1.ward_no) DESC \nLIMIT 1", "sql_id": 589}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.alderman_first_name, T1.alderman_last_name, COUNT(T1.ward_no) AS num \nFROM Ward AS T1 \nINNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no \nWHERE (SUBSTRING(T2._date FROM 1 FOR 1) = '1' AND SUBSTRING(T2._date FROM 5 FOR 4) = '2018' AND T1.alderman_first_name = 'Pat' AND T1.alderman_last_name = 'Dowell') OR (T1.alderman_first_name = 'Sophia' AND T1.alderman_last_name = 'King') \nGROUP BY T1.alderman_first_name, T1.alderman_last_name;", "sql_id": 590}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN SUBSTRING(T2._date, 5, 4) = '2018' THEN 1 ELSE 0 END) FROM \"FBI_Code\" AS T1 INNER JOIN \"Crime\" AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.crime_against = 'Property' AND SUBSTRING(T2._date, 1, 1) = '1';", "sql_id": 591}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN SUBSTRING(T2._date, 5, 4) = '2018' THEN 1 ELSE 0 END) FROM \"District\" AS T1 INNER JOIN \"Crime\" AS T2 ON T1.district_no = T2.district_no WHERE T1.commander = 'Robert A. Rubio' AND SUBSTRING(T2._date, 1, 1) = '1';", "sql_id": 592}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.commander \nFROM District AS T1 \nINNER JOIN Crime AS T2 \nON T1.district_no = T2.district_no \nWHERE T1.commander IN ('Robert A. Rubio', 'Glenn White') \nAND SUBSTRING(T2._date FROM 1 FOR 1) = '1' \nAND SUBSTRING(T2._date FROM 5 FOR 4) = '2018' \nGROUP BY T1.commander;", "sql_id": 593}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(_date) FROM inspections WHERE EXTRACT(YEAR FROM _date) = 2016 AND type = 'Routine - Unscheduled';", "sql_id": 594}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T2.business_id) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE EXTRACT(YEAR FROM T1._date) = 2016 AND T2.city IN ('San Francisco', 'SAN FRANCISCO', 'SF', 'S.F.')", "sql_id": 595}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T2.name \nFROM violations AS T1 \nINNER JOIN businesses AS T2 \nON T1.business_id = T2.business_id \nWHERE YEAR(T1._date) = 2014 \nAND T1.risk_category = 'Low Risk';", "sql_id": 596}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(business_id) FROM businesses WHERE EXTRACT(YEAR FROM application_date) = 2012", "sql_id": 597}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(business_id) FROM inspections WHERE EXTRACT(YEAR FROM \"date\") = 2014 AND type = 'Foodborne Illness Investigation';", "sql_id": 598}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T2.name \nFROM inspections AS T1 \nINNER JOIN businesses AS T2 \nON T1.business_id = T2.business_id \nWHERE YEAR(T1._date) = 2013 \nAND T1.score = 100", "sql_id": 599}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.city\nFROM violations AS T1\nINNER JOIN businesses AS T2 ON T1.business_id = T2.business_id\nWHERE YEAR(T1._date) = 2016 AND T1.risk_category = 'High Risk'\nGROUP BY T2.city\nORDER BY COUNT(T2.city) DESC\nLIMIT 1;", "sql_id": 600}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.name \nFROM violations AS T1 \nINNER JOIN businesses AS T2 \nON T1.business_id = T2.business_id \nWHERE YEAR(T1._date) = 2013 \nAND T1.description = 'Contaminated or adulterated food';", "sql_id": 601}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT T2.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id INNER JOIN inspections AS T3 ON T2.business_id = T3.business_id WHERE EXTRACT(YEAR FROM T1._date) = 2015 AND T2.postal_code = '94102' AND T3.score > 90", "sql_id": 602}
{"model": "gpt-3.5-turbo", "message": "SELECT AVG(T1.score) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE EXTRACT(YEAR FROM T1._date) BETWEEN 2014 AND 2016 AND T2.owner_name = 'Yiu Tim Chan' AND T2.address = '808 Pacific Ave' AND T2.city = 'San Francisco';", "sql_id": 604}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT business_id) FROM inspections WHERE EXTRACT(YEAR FROM \"date\") = 2013 AND score = ( SELECT MAX(score) FROM inspections WHERE EXTRACT(YEAR FROM \"date\") = 2013 )", "sql_id": 606}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(risk_category) FROM violations WHERE EXTRACT(YEAR FROM \"_date\") = 2014 AND risk_category = 'Low Risk'", "sql_id": 607}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T2.business_id) FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id WHERE EXTRACT(YEAR FROM T1._date) = 2016 AND T2.type = 'Routine - Unscheduled';", "sql_id": 608}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.style = 'American Adjunct Lager' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.brewery_id) FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T2.name = 'Stevens Point Brewery';", "sql_id": 609}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.state = 'WI' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.id) FROM beers AS T1 INNER JOIN breweries AS T2 ON T1.brewery_id = T2.id WHERE T1.style = 'American Blonde Ale';", "sql_id": 610}
{"model": "gpt-3.5-turbo", "message": "SELECT ssn FROM employee WHERE gender = 'M' AND CAST(REPLACE(SUBSTRING(salary, 4), ',', '') AS REAL) > 70000", "sql_id": 611}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(REPLACE(SUBSTRING(T1.salary FROM 4) USING ',' WITH '') AS REAL) - CAST(REPLACE(SUBSTRING(T2.minsalary FROM 4) USING ',' WITH '') AS REAL) AS diff FROM employee AS T1 INNER JOIN _position AS T2 ON T1.positionID = T2.positionID WHERE T1.lastname = 'Johnson' AND T1.firstname = 'James'", "sql_id": 612}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM employee AS T1 INNER JOIN _position AS T2 ON T1.positionID = T2.positionID WHERE CAST(REPLACE(SUBSTRING(T1.salary, 4), ',', '') AS REAL) > 20000 AND T2.positiontitle = 'Trainee';", "sql_id": 613}
{"model": "gpt-3.5-turbo", "message": "SELECT AVG(CAST(REPLACE(SUBSTRING(T1.salary, 4), ',', '') AS REAL)) AS avg FROM employee AS T1 INNER JOIN _position AS T2 ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee';", "sql_id": 614}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM employee WHERE performance = 'Poor' AND CAST(REPLACE(SUBSTRING(salary, 4), ',', '') AS REAL) > 50000", "sql_id": 617}
{"model": "gpt-3.5-turbo", "message": "SELECT firstname, lastname FROM employee WHERE CAST(REPLACE(SUBSTRING(salary, 4), ',', '') AS REAL) = ( SELECT MAX(CAST(REPLACE(SUBSTRING(salary, 4), ',', '') AS REAL)) FROM employee )", "sql_id": 618}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(*) FROM _position WHERE CAST(REPLACE(SUBSTRING(maxsalary, 4), ',', '') AS REAL) < 100000", "sql_id": 619}
{"model": "gpt-3.5-turbo", "message": "SELECT AVG(CAST(REPLACE(SUBSTRING(T1.salary, 4), ',', '') AS REAL)) FROM employee AS T1 INNER JOIN \"_position\" AS T2 ON T1.positionID = T2.positionID WHERE T2.educationrequired = '2 year degree';", "sql_id": 620}
{"model": "gpt-3.5-turbo", "message": "SELECT AVG(CAST(REPLACE(SUBSTRING(T1.salary, 4), ',', '') AS REAL)) FROM employee AS T1 INNER JOIN _position AS T2 ON T1.positionID = T2.positionID WHERE T1.performance = 'Poor' AND T2.positiontitle = 'Manager';", "sql_id": 621}
{"model": "gpt-3.5-turbo", "message": "SELECT MAX(\"T2\".\"max_temperature_f\") FROM \"trip\" AS \"T1\" INNER JOIN \"weather\" AS \"T2\" ON \"T2\".\"zip_code\" = \"T1\".\"zip_code\" AND \"T2\".\"_date\" = SUBSTRING(CAST(\"T1\".\"start_date\" AS VARCHAR), 1, POSITION(' ' IN \"T1\".\"start_date\") - 1) WHERE \"T1\".\"id\" = 4080;", "sql_id": 624}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.id, T1.duration\nFROM trip AS T1\nINNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2._date = SUBSTRING(CAST(T1.start_date AS VARCHAR), 1, POSITION(' ' IN T1.start_date) - 1)\nWHERE T2.events LIKE '%Rain%' OR T2.events LIKE '%rain%'", "sql_id": 625}
{"model": "gpt-3.5-turbo", "message": "SELECT AVG(T1.duration), AVG(T2.wind_dir_degrees) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTRING(CAST(T2._date AS STRING), 1, STRPOS(T2._date, '/') - 1) IN ('7', '8', '9') AND SUBSTRING(CAST(T2._date AS STRING), -4) = '2013';", "sql_id": 626}
{"model": "gpt-3.5-turbo", "message": "SELECT SUBSTRING(CAST(\"_date\" AS VARCHAR), -4) FROM \"weather\" GROUP BY SUBSTRING(CAST(\"_date\" AS VARCHAR), -4) ORDER BY SUM(CASE WHEN \"events\" LIKE '%Rain%' OR \"events\" LIKE '%rain%' THEN 1 ELSE 0 END) DESC LIMIT 1", "sql_id": 628}
{"model": "gpt-3.5-turbo", "message": "SELECT T2.max_gust_speed_mph, T2.cloud_cover \nFROM trip AS T1 \nINNER JOIN weather AS T2 \nON T2.zip_code = T1.zip_code \nAND T2._date = SUBSTRING(CAST(T1.start_date AS VARCHAR), 1, POSITION(' ' IN T1.start_date) - 1) \nWHERE T1.bike_id = 10 \nAND T2.mean_temperature_f > 62 \nAND T1.subscription_type = 'Customer' \nAND T1.start_station_name = 'MLK Library' \nAND T1.end_station_name = 'San Salvador at 1st' \nAND T1.duration = 386;", "sql_id": 630}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN subscription_type = 'Subscriber' THEN 1 ELSE 0 END) - SUM(CASE WHEN subscription_type = 'Customer' THEN 1 ELSE 0 END) FROM trip WHERE start_date LIKE '6/%/2013%';", "sql_id": 631}
{"model": "gpt-3.5-turbo", "message": "SELECT T2._date, T1.bike_id \nFROM trip AS T1 \nINNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code \nWHERE SUBSTRING(CAST(T2._date AS VARCHAR), -4) = '2013' \nAND T2.events = 'Fog-Rain';", "sql_id": 632}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.start_date FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2._date = SUBSTRING(CAST(T1.start_date AS VARCHAR), 1, POSITION(' ' IN T1.start_date) - 1) WHERE T2._date LIKE '8/%/2013' AND T1.start_station_name = 'Market at 10th' AND T1.end_station_name = 'South Van Ness at Market' AND T2.min_temperature_f = (SELECT MIN(T2.min_temperature_f) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code AND T2._date = SUBSTRING(CAST(T1.start_date AS VARCHAR), 1, POSITION(' ' IN T1.start_date) - 1) WHERE T2._date LIKE '8/%/2013' AND T1.start_station_name = 'Market at 10th' AND T1.end_station_name = 'South Van Ness at Market')", "sql_id": 633}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN city = 'San Francisco' AND RIGHT(installation_date, 4) = '2014' THEN 1 ELSE 0 END) FROM station;", "sql_id": 634}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN start_station_id = end_station_id THEN 1 ELSE 0 END) FROM trip", "sql_id": 636}
{"model": "gpt-3.5-turbo", "message": "SELECT AVG(T2.mean_temperature_f) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTRING(CAST(T2._date AS VARCHAR), LENGTH(CAST(T2._date AS VARCHAR)) - 3) = '2013' AND T1.start_station_name = 'Market at 4th';", "sql_id": 637}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.events = 'Rain' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.id) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE SUBSTRING(CAST(T2._date AS VARCHAR), -4) = '2015' AND T1.subscription_type = 'Customer';", "sql_id": 638}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(installation_date) FROM station WHERE city = 'San Jose' AND (CAST(SUBSTRING(installation_date FROM 1 FOR POSITION('/' IN installation_date) - 1) AS INTEGER) IN (8, 9, 10, 11, 12) AND SUBSTRING(installation_date FROM -4) = '2013') OR CAST(SUBSTRING(installation_date FROM -4) AS INTEGER) > 2013;", "sql_id": 639}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN \"zip_code\" = '94107' AND \"_date\" = '8/29/2013' THEN \"mean_temperature_f\" ELSE 0 END) FROM \"weather\"", "sql_id": 640}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN \"zip_code\" = '94107' AND \"_date\" = '8/29/2013' THEN \"max_temperature_f\" - \"min_temperature_f\" ELSE 0 END) FROM \"weather\"", "sql_id": 641}
{"model": "gpt-3.5-turbo", "message": "SELECT DISTINCT T1.start_station_name \nFROM trip AS T1 \nINNER JOIN weather AS T2 \nON T2.zip_code = T1.zip_code \nWHERE SUBSTRING(CAST(T2._date AS VARCHAR), LENGTH(CAST(T2._date AS VARCHAR)) - 3) = '2013' \nAND T2.zip_code = '94107' \nAND T2.max_temperature_f > 80;", "sql_id": 642}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN zip_code = '94041' AND events = 'Rain' THEN 1 ELSE 0 END) FROM weather;", "sql_id": 643}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN city = 'Redwood City' AND SUBSTRING(installation_date, -4) < '2014' THEN dock_count ELSE 0 END) AS NUM FROM station;", "sql_id": 644}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN subscription_type = 'Subscriber' THEN 1 ELSE 0 END) AS DOUBLE) / SUM(CASE WHEN subscription_type = 'Customer' THEN 1 ELSE 0 END) FROM trip WHERE start_station_name = '2nd at South Park' AND end_station_name = '2nd at South Park';", "sql_id": 646}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'RUTH' AND T1.last_name = 'MARTINEZ' AND EXTRACT(MONTH FROM T2.return_date) = 8 AND EXTRACT(YEAR FROM T2.return_date) = 2005", "sql_id": 647}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T3.name = 'Music' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.film_id) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id INNER JOIN inventory AS T4 ON T1.film_id = T4.film_id INNER JOIN customer AS T5 ON T4.store_id = T5.store_id INNER JOIN rental AS T6 ON T4.inventory_id = T6.inventory_id WHERE T5.first_name = 'RUTH' AND T5.last_name = 'MARTINEZ';", "sql_id": 648}
{"model": "gpt-3.5-turbo", "message": "SELECT (SUM(CASE WHEN T2.store_id = 2 THEN T1.amount ELSE 0 END) - SUM(CASE WHEN T2.store_id = 1 THEN T1.amount ELSE 0 END))::DOUBLE * 100 / SUM(CASE WHEN T2.store_id = 1 THEN T1.amount ELSE 0 END) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN store AS T3 ON T2.store_id = T3.store_id", "sql_id": 649}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.country = 'India' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.country = 'Italy' THEN 1 ELSE 0 END) FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id", "sql_id": 650}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.first_name = 'GINA' AND T2.last_name = 'DEGENERES' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / SUM(CASE WHEN T2.first_name = 'PENELOPE' AND T2.last_name = 'GUINESS' THEN 1 ELSE 0 END) FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id", "sql_id": 651}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(customer_id) FROM payment WHERE EXTRACT(YEAR FROM payment_date) || '-' || LPAD(EXTRACT(MONTH FROM payment_date), 2, '0') LIKE '2005-08'", "sql_id": 652}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(DISTINCT rental_id) FROM rental WHERE CAST(rental_date AS DATE) BETWEEN '2005-05-26' AND '2005-05-30';", "sql_id": 654}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN active = 0 THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(customer_id) FROM customer;", "sql_id": 655}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(amount) FROM payment WHERE EXTRACT(YEAR FROM payment_date) || '-' || LPAD(EXTRACT(MONTH FROM payment_date), 2, '0') = '2005-08'", "sql_id": 656}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.title \nFROM film AS T1 \nINNER JOIN inventory AS T2 ON T1.film_id = T2.film_id \nINNER JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id \nWHERE SUBSTRING(T3.rental_date FROM 1 FOR 10) = '2005-05-24';", "sql_id": 657}
{"model": "gpt-3.5-turbo", "message": "SELECT T4.title \nFROM customer AS T1 \nINNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id \nINNER JOIN inventory AS T3 ON T2.inventory_id = T3.inventory_id \nINNER JOIN film AS T4 ON T3.film_id = T4.film_id \nWHERE T1.first_name = 'BRIAN' \nAND T1.last_name = 'WYMAN' \nAND EXTRACT(YEAR FROM T2.rental_date) = 2005 \nAND EXTRACT(MONTH FROM T2.rental_date) = 7;", "sql_id": 658}
{"model": "gpt-3.5-turbo", "message": "SELECT T3.title, T2.name \nFROM film_category AS T1 \nJOIN category AS T2 ON T1.category_id = T2.category_id \nJOIN film AS T3 ON T1.film_id = T3.film_id \nJOIN inventory AS T4 ON T3.film_id = T4.film_id \nJOIN customer AS T5 ON T4.store_id = T5.store_id \nJOIN rental AS T6 ON T4.inventory_id = T6.inventory_id \nWHERE T5.first_name = 'Natalie' \nAND T5.last_name = 'Meyer' \nAND EXTRACT(YEAR FROM T3.rental_rate) = 2006 \nAND EXTRACT(MONTH FROM T3.rental_rate) = 2;", "sql_id": 659}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T1.country = 'India' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T4.customer_id) FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id INNER JOIN address AS T3 ON T2.city_id = T3.city_id INNER JOIN customer AS T4 ON T3.address_id = T4.address_id", "sql_id": 660}
{"model": "gpt-3.5-turbo", "message": "SELECT (CAST((SUM(CASE WHEN T1.first_name = 'ANGELA' AND T1.last_name = 'WITHERSPOON' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.first_name = 'MARY' AND T1.last_name = 'KEITEL' THEN 1 ELSE 0 END)) AS REAL) * 100) / SUM(CASE WHEN T1.first_name = 'MARY' AND T1.last_name = 'KEITEL' THEN 1 ELSE 0 END) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id", "sql_id": 661}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T3.rating = 'G' THEN 1 ELSE 0 END) AS DOUBLE) / COUNT(T3.film_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Elvis' AND T1.last_name = 'Marx';", "sql_id": 662}
{"model": "gpt-3.5-turbo", "message": "SELECT first_name, last_name, email FROM customer WHERE EXTRACT(YEAR FROM create_date) = 2006 AND active = 0", "sql_id": 663}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN rating = 'PG-13' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(film_id) FROM film;", "sql_id": 664}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.name = 'horror' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T2.category_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id", "sql_id": 665}
{"model": "gpt-3.5-turbo", "message": "SELECT AVG(CASE WHEN T4.country = 'Australia' THEN 1 ELSE 0 END) - AVG(CASE WHEN T4.country = 'Canada' THEN 1 ELSE 0 END) AS diff FROM customer AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id INNER JOIN city AS T3 ON T2.city_id = T3.city_id INNER JOIN country AS T4 ON T3.country_id = T4.country_id", "sql_id": 666}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T4.name = 'Action' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.actor_id) FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film_category AS T3 ON T2.film_id = T3.film_id INNER JOIN category AS T4 ON T3.category_id = T4.category_id WHERE T1.first_name = 'Reese' AND T1.last_name = 'Kilmer';", "sql_id": 667}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.rental_id) FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'ELLA' AND T2.last_name = 'ELLA' AND T1.rental_date BETWEEN '2005-06-01' AND '2005-06-30';", "sql_id": 670}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(T2.amount) FROM rental AS T1 INNER JOIN payment AS T2 ON T1.rental_id = T2.rental_id WHERE DATE_TRUNC('day', T1.rental_date) = '2005-07-29'", "sql_id": 671}
{"model": "gpt-3.5-turbo", "message": "SELECT T1.first_name FROM customer T1 INNER JOIN address T2 ON T1.address_id = T2.address_id WHERE SUBSTRING(T2.postal_code FROM 1 FOR 2) = '76';", "sql_id": 672}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2._length < 100 AND T3.name = 'Drama' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id", "sql_id": 673}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN T2.name = 'Children' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.name = 'Action' THEN 1 ELSE 0 END) AS diff FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id", "sql_id": 674}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.name = 'Documentary' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id", "sql_id": 675}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.name = 'Horror' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id", "sql_id": 676}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T2.first_name = 'MARGARET' AND T2.last_name = 'MOORE' THEN T1.amount ELSE 0 END) AS DOUBLE) * 100 / SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id", "sql_id": 677}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T3.name = 'Horror' THEN 1 ELSE 0 END) * 100 / COUNT(T1.film_id) AS REAL) FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T3.category_id = T2.category_id WHERE T1._length > 120", "sql_id": 678}
{"model": "gpt-3.5-turbo", "message": "SELECT CAST(SUM(CASE WHEN T3.name = 'Horror' THEN 1 ELSE 0 END) AS DOUBLE) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id INNER JOIN language AS T4 ON T2.language_id = T4.language_id WHERE T4.name = 'English';", "sql_id": 679}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'STEPHANIE' AND T2.last_name = 'MITCHELL' AND SUBSTRING(T1.payment_date, 1, 7) = '2005-06';", "sql_id": 680}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T2.rental_id) , CAST(SUM(CASE WHEN EXTRACT(MONTH FROM T2.rental_date) = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.rental_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'Maria' AND T1.last_name = 'Miller' AND EXTRACT(YEAR FROM T2.rental_date) = 2005", "sql_id": 681}
{"model": "gpt-3.5-turbo", "message": "SELECT SUM(CASE WHEN T4.film_id = 1 THEN 1 ELSE 0 END) - SUM(CASE WHEN T4.film_id = 2 THEN 1 ELSE 0 END) AS diff\nFROM film_actor AS T1\nINNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id\nINNER JOIN film AS T3 ON T1.film_id = T3.film_id\nINNER JOIN inventory AS T4 ON T3.film_id = T4.film_id\nWHERE T2.first_name = 'Reese' AND T2.last_name = 'West';", "sql_id": 682}
{"model": "gpt-3.5-turbo", "message": "SELECT COUNT(T1.customer_id) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH' AND EXTRACT(YEAR FROM T1.payment_date) = 2005 AND EXTRACT(MONTH FROM T1.payment_date) = 6", "sql_id": 683}

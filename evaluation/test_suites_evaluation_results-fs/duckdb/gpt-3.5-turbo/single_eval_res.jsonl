{"sql_id": "duckdb_1_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 10))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT * FROM t0 WHERE (a, b) IN (SELECT 1, 10);\n                                      ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_1_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 10), (2, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT * FROM t0 WHERE (a, b) IN (SELECT 1, 10 UNION ALL SELECT 2, 20...\n                                      ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_1_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 20))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT * FROM t0 WHERE (a, b) NOT IN (SELECT 1, 10);\n                                      ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_1_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT * FROM t0 WHERE (a, b) NOT IN (SELECT 1, 10 UNION ALL SELECT 2...\n                                      ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_100_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: INSERT INTO t1 (ts) VALUES (strftime('%s', '2002-10-27 01:00')); --...\n                                    ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: INSERT INTO t1 (ts) VALUES (strftime('%s', '2002-10-27 02:00')); --...\n                                    ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: INSERT INTO t1 (ts) VALUES (strftime('%s', '2002-10-27 03:00'));\n                                    ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1035680400, datetime.datetime(2002, 10, 27, 9, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)), (1035684000, datetime.datetime(2002, 10, 27, 10, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)), (1035687600, datetime.datetime(2002, 10, 27, 11, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name datetime does not exist!\nDid you mean \"datediff\"?\nLINE 1: SELECT ts, datetime(ts, 'unixepoch') FROM t1;\n                   ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'2001-01-01 00:00:00'\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((730851,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT CAST(strftime('%s', '2001-01-01 00:00:00') A...\n                    ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_100_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((730851,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT CAST(strftime('%s', '2001-01-01 00:00:00') A...\n                    ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_100_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_diff does not exist!\nDid you mean \"date_diff\"?\nLINE 1: SELECT TIME_DIFF('2000-01-01 00:00:00','2000-0...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('40 59 2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('%A %M %Y', '2009-10-10 23:59:...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:59:59',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'2003-12-31 23:59:59'\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 1, 1, 11, 59, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'2003-12-31 23:59:59'\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2003, 1, 3, 0, 0, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timestampadd does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT TIMESTAMPADD(MINUTE, 1, TIMESTAMP '2003...\n               ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_100_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timestampdiff does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT TIMESTAMPDIFF(MONTH, CAST('2003-02-01 2...\n               ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_100_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((63426758399.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('%s', '2009-11-29 23:59:59'); ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1447459199.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT strftime('%s', '2015-11-13 23:59:59'); ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_101_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',), ('612020',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',), ('612020',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_101_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((13,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((13,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "duckdb_101_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('41', 'a'), ('4100', 'b'), ('41', 'c'), ('4100', 'd'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('41', 'a'), ('4100', 'b'), ('41', 'c'), ('4100', 'd'))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_101_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Type with name UNSIGNED does not exist!\nDid you mean \"JSON\"?", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_102_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'strftime(STRING_LITERAL, TIMESTAMP WITH TIME ZONE)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\nLINE 1: INSERT INTO t1 VALUES (CAST(strftime('%Y-%m-%d', CURRENT_TIMESTAMP)...\n                                    ^", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_102_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT COUNT(*) FROM t1 WHERE a = DATE('now');\n                                          ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_102_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_102_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT COUNT(*) FROM t1 WHERE a = DATE('now');\n                                          ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_102_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT COUNT(*) FROM t1 WHERE a = DATE('now') AND b = 1;\n                                          ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_102_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t1\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: CREATE TABLE t1 AS SELECT DATE() AS f1; -- CURDATE\n                                  ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_102_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, 0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 1}
{"sql_id": "duckdb_102_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_102_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name dateadd does not exist!\nDid you mean \"date_add\"?\nLINE 1: SELECT 1 FROM (SELECT DATEADD('day', 1, DATE '2011-01-01')) a...\n                              ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_2_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 'x'), (2, 'xx'), (3, 'xxx'), (4, 'xxxx'), (5, 'xxxxx'), (6, 'xxxxxx'), (7, 'xxxxxxx'), (8, 'xxxxxxxx'), (9, 'xxxxxxxxx'), (10, 'xxxxxxxxxx'))", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 'x'), (2, 'xx'), (3, 'xxx'), (4, 'xxxx'), (5, 'xxxxx'), (6, 'xxxxxx'), (7, 'xxxxxxx'), (8, 'xxxxxxxx'), (9, 'xxxxxxxxx'), (10, 'xxxxxxxxxx'))", "rowcount": 10, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_3_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('NO',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('NO',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_39_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "duckdb_39_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,), (3,), (1,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,), (3,), (1,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "duckdb_4_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a=9223372036854775807 AND \u2502\\n\u2502        a IS NOT NULL      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a=9223372036854775807 AND \u2502\\n\u2502        a IS NOT NULL      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a=9223372036854775806 AND \u2502\\n\u2502        a IS NOT NULL      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a=9223372036854775806 AND \u2502\\n\u2502        a IS NOT NULL      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a=9223372036854775805 AND \u2502\\n\u2502        a IS NOT NULL      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a=9223372036854775805 AND \u2502\\n\u2502        a IS NOT NULL      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502   a=0 AND a IS NOT NULL   \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502   a=0 AND a IS NOT NULL   \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_4_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_6_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('3A',), ('3B',), ('3C',), ('3D',), ('3E',), ('3F',), ('40',), ('5B',), ('5C783543',), ('5D',), ('5E',), ('5F',), ('60',), ('7B',), ('7C',), ('7D',), ('7E',))", "rowcount": 17, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('3A',), ('3B',), ('3C',), ('3D',), ('3E',), ('3F',), ('40',), ('5B',), ('5C783543',), ('5D',), ('5E',), ('5F',), ('60',), ('7B',), ('7C',), ('7D',), ('7E',))", "rowcount": 17, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_5", "EM": 1, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t1\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t1\" already exists!", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_6_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"head\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"head\" already exists!", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"tail\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"tail\" already exists!", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_6_19", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_21", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc', 2), ('\u07f0', 1), ('\u02ae', 1), ('', 0), ('50515253', 8), ('31', 2), ('h31', 3), ('2805', 4))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc', 2), ('\u07f0', 1), ('\u02ae', 1), ('', 0), ('50515253', 8), ('31', 2), ('h31', 3), ('2805', 4))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_7_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc', '                  h\u04bc'), ('\u07f0', '                   \u07f0'), ('\u02ae', '                   \u02ae'), ('', '                    '), ('50515253', '            50515253'), ('31', '                  31'), ('h31', '                 h31'), ('2805', '                2805'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc', '                  h\u04bc'), ('\u07f0', '                   \u07f0'), ('\u02ae', '                   \u02ae'), ('', '                    '), ('50515253', '            50515253'), ('31', '                  31'), ('h31', '                 h31'), ('2805', '                2805'))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc', 'h\u04bc525252525252525252'), ('\u07f0', '\u07f05252525252525252525'), ('\u02ae', '\u02ae5252525252525252525'), ('', '52525252525252525252'), ('50515253', '50515253525252525252'), ('31', '31525252525252525252'), ('h31', 'h3152525252525252525'), ('2805', '28055252525252525252'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc', 'h\u04bc525252525252525252'), ('\u07f0', '\u07f05252525252525252525'), ('\u02ae', '\u02ae5252525252525252525'), ('', '52525252525252525252'), ('50515253', '50515253525252525252'), ('31', '31525252525252525252'), ('h31', 'h3152525252525252525'), ('2805', '28055252525252525252'))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_7_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_7_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_7_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_7_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_7_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('h315253', 'h315253'), ('h31525352', 'h31525352'), ('h3152535252', 'h3152535252'), ('h315253525252', 'h315253525252'), ('52h315253', '52h315253'), ('5252h315253', '5252h315253'), ('525252h315253', '525252h315253'), ('   h315253   ', 'h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('h315253', 'h315253'), ('h31525352', 'h31525352'), ('h3152535252', 'h3152535252'), ('h315253525252', 'h315253525252'), ('52h315253', '52h315253'), ('5252h315253', '5252h315253'), ('525252h315253', '525252h315253'), ('   h315253   ', '   h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_71_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1973, 11, 30, 5, 33, 9, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timestamp_seconds does not exist!\nDid you mean \"map\"?\nLINE 1: SELECT TIMESTAMP_SECONDS(123456789); -- FROM_U...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1977, 6, 8, 5, 44, 50, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timestamp_seconds does not exist!\nDid you mean \"map\"?\nLINE 1: SELECT TIMESTAMP_SECONDS(234567890); -- FROM_U...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 8, 0, 1, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timestamp_seconds does not exist!\nDid you mean \"map\"?\nLINE 1: SELECT TIMESTAMP_SECONDS(1); -- FROM_UNIXTIME\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name datetime does not exist!\nDid you mean \"datediff\"?\nLINE 1: SELECT CAST(strftime('%s', datetime(123456789, 'unixepoch')) AS IN...\n                                   ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 2}
{"sql_id": "duckdb_71_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((234567890.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name datetime does not exist!\nDid you mean \"datediff\"?\nLINE 1: SELECT CAST(strftime('%s', datetime(234567890, 'unixepoch')) AS IN...\n                                   ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 2}
{"sql_id": "duckdb_71_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2179098000.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT strftime('%s', '2039-01-20 01:00:00'); ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2149376400.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT strftime('%s', '2038-02-10 01:00:00'); ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3600.0, 3601.0, 2147487247.0, 2147487248.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT strftime('%s', '1970-01-01 01:00:00'),s...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((32536771199, datetime.datetime(3001, 1, 19, 7, 59, 59, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)), (325367711990, '12280-06-28 23:59:50+00'), (325367711991, '12280-06-28 23:59:51+00'), (325367711992, '12280-06-28 23:59:52+00'), (325367711993, '12280-06-28 23:59:53+00'), (325367711994, '12280-06-28 23:59:54+00'), (325367711995, '12280-06-28 23:59:55+00'), (325367711996, '12280-06-28 23:59:56+00'), (325367711997, '12280-06-28 23:59:57+00'), (325367711998, '12280-06-28 23:59:58+00'), (325367711999, '12280-06-28 23:59:59+00'))", "rowcount": 11, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Unimplemented type for cast (BIGINT -> TIMESTAMP)\nLINE 1: SELECT a, CAST(a AS TIMESTAMP) FROM t1;\n                  ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((32536803599.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT strftime('%s', '3001-01-19 08:59:59'); ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_72_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', \"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502   (concat(x, x) = 'XX')   \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t             \u2502\\n\u2502                           \u2502\\n\u2502       Projections: x      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\"))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_74_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_74_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((13,), (13,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((13,), (13,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_74_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_74_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_74_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 'abc-def', '6162632D646566'), (2, \"'(),-.\", '2728292C2D2E'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 'abc-def', '6162632D646566'), (2, \"'(),-.\", '2728292C2D2E'))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_74_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 'abc-def', '6162632D646566'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 'abc-def', '6162632D646566'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_75_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Constraint Error: Duplicate key \"pk: 1\" violates primary key constraint. If this is an unexpected constraint violation please double check with the known index limitations section in our documentation (https://duckdb.org/docs/sql/indexes).", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Constraint Error: Duplicate key \"pk: 1\" violates primary key constraint. If this is an unexpected constraint violation please double check with the known index limitations section in our documentation (https://duckdb.org/docs/sql/indexes).", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_75_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 12, 12), (2, 4, 4))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 12, 12), (2, 4, 4))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_76_2", "EM": 1, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Constraint Error: Duplicate key \"a: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\" violates unique constraint. If this is an unexpected constraint violation please double check with the known index limitations section in our documentation (https://duckdb.org/docs/sql/indexes).", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Constraint Error: Duplicate key \"a: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\" violates unique constraint. If this is an unexpected constraint violation please double check with the known index limitations section in our documentation (https://duckdb.org/docs/sql/indexes).", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_76_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 110, 210, 110, 210))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name char_length does not exist!\nDid you mean \"array_length\"?\nLINE 1: SELECT i, LENGTH(a), LENGTH(b), CHAR_LENGTH(a), CHAR_LENGTH(b) FROM t1;\n                                        ^", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "duckdb_76_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_77_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(12, 22, 22), datetime.date(1997, 1, 1), datetime.datetime(1997, 1, 2, 0, 0), '1997-01-01 12:22:22', 3, 7, 5))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(12, 22, 22), datetime.date(1997, 1, 1), datetime.datetime(1997, 1, 2, 0, 0), '1997-01-01 12:22:22', 3, 7, 5))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_78_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_78_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_78_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_79_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Sun', 'Sunday'), (datetime.date(2006, 1, 2), 'Mon', 'Monday'), (datetime.date(2006, 1, 3), 'Tue', 'Tuesday'), (datetime.date(2006, 1, 4), 'Wed', 'Wednesday'), (datetime.date(2006, 1, 5), 'Thu', 'Thursday'), (datetime.date(2006, 1, 6), 'Fri', 'Friday'), (datetime.date(2006, 1, 7), 'Sat', 'Saturday'))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Sun', 'Sunday'), (datetime.date(2006, 1, 2), 'Mon', 'Monday'), (datetime.date(2006, 1, 3), 'Tue', 'Tuesday'), (datetime.date(2006, 1, 4), 'Wed', 'Wednesday'), (datetime.date(2006, 1, 5), 'Thu', 'Thursday'), (datetime.date(2006, 1, 6), 'Fri', 'Friday'), (datetime.date(2006, 1, 7), 'Sat', 'Saturday'))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_79_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Jan', 'January'), (datetime.date(2006, 2, 1), 'Feb', 'February'), (datetime.date(2006, 3, 1), 'Mar', 'March'), (datetime.date(2006, 4, 1), 'Apr', 'April'), (datetime.date(2006, 5, 1), 'May', 'May'), (datetime.date(2006, 6, 1), 'Jun', 'June'), (datetime.date(2006, 7, 1), 'Jul', 'July'), (datetime.date(2006, 8, 1), 'Aug', 'August'), (datetime.date(2006, 9, 1), 'Sep', 'September'), (datetime.date(2006, 10, 1), 'Oct', 'October'), (datetime.date(2006, 11, 1), 'Nov', 'November'), (datetime.date(2006, 12, 1), 'Dec', 'December'))", "rowcount": 12, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Jan', 'January'), (datetime.date(2006, 2, 1), 'Feb', 'February'), (datetime.date(2006, 3, 1), 'Mar', 'March'), (datetime.date(2006, 4, 1), 'Apr', 'April'), (datetime.date(2006, 5, 1), 'May', 'May'), (datetime.date(2006, 6, 1), 'Jun', 'June'), (datetime.date(2006, 7, 1), 'Jul', 'July'), (datetime.date(2006, 8, 1), 'Aug', 'August'), (datetime.date(2006, 9, 1), 'Sep', 'September'), (datetime.date(2006, 10, 1), 'Oct', 'October'), (datetime.date(2006, 11, 1), 'Nov', 'November'), (datetime.date(2006, 12, 1), 'Dec', 'December'))", "rowcount": 12, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_79_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1 Mon 01',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('%w %a %W', '2001-01-01'); -- ...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_79_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2001-01-01 00:00:00 Jan 00',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('%m %b %M', '2001-01-01'); -- ...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_79_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Mar AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('%I %p', '2010-03-23 11:00:00'...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_8_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('', 'ae'), STRCMP('ae', ''), STR...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('ss',''), STRCMP('', 'ss'), STRC...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('', 'af'), STRCMP('a', ''), STRC...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('ss','a'), STRCMP('','ssa'), STR...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('', 'o'), STRCMP('', 'u'), STRCM...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, -1, 1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, -1, 1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_8_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, 1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('a','ss'),STRCMP('ssa',''),STRCM...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('u','a'), STRCMP('u',''); -- STR...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('s', 'a'), STRCMP('a', 'x'); -- ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 1, False, True), (1, 0, True, False))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 1, False, True), (1, 1, True, False))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('oe',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('oe',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_80_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xx123',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xx123',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xyxya',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xyxya',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('          I LOVE SQL',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('          I LOVE SQL',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_81_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_81_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((25165824,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((25165824,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_82_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2)), (datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1)), (datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3)))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1)), (datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3)), (datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2)))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 5, "FP": 1, "FN": 0}
{"sql_id": "duckdb_83_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('4142',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('4142',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_84_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: insert into t5 values (1, strftime('%W', '2001-01-01')); -- DATE_...\n                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_84_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: insert into t5 values (2, strftime('%W', '2001-01-01')); -- DATE_...\n                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_84_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: insert into t5 values (3, strftime('%W', '2001-01-01')); -- DATE_...\n                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_84_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_85_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_85_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_85_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_85_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_85_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_86_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, True, False, True, 1, 'TRUE', 'TRUE', False, True))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None, True, True, True, 1, 'TRUE', 'TRUE', False, True))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_86_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None, None, Decimal('1.1'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None, None, Decimal('1.1'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_86_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('', 'abababababababababab', '', None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'abababababababababab', '', None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_86_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 2:     WHEN \"a\" IS NULL THEN 1\n                 ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_86_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t2\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t2\" already exists!", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_86_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t2\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t2\" already exists!", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_86_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t2\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t2\" already exists!", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_87_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_87_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaaaaaaaa,bbbbbbbbbb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaaaaaaaa,bbbbbbbbbb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_87_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1748088855.729,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT CAST(strftime('%s', 'now') AS INTEGER); -- U...\n                    ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_88_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_88_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((100,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((100,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_88_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2000,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_88_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((100, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((100, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_89_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_89_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502        EMPTY_RESULT       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_89_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('5C783030415C7830305C783030',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5C783030415C7830305C783030',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_89_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t1\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"date_part(STRING_LITERAL, \"NULL\")\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tdate_part(VARCHAR, TIME) -> BIGINT\n\tdate_part(VARCHAR, INTERVAL) -> BIGINT\n\tdate_part(VARCHAR, TIME WITH TIME ZONE) -> BIGINT\n\tdate_part(VARCHAR, DATE) -> BIGINT\n\nLINE 1: create table t1 as select extract(epoch from null) as to_seconds;...\n                                  ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_9_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('this', 'is', 'a', 2, Decimal('2.0')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('this', 'is', 'a', 2, Decimal('2.0')))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('A',), ('AA',), ('BBB',), ('a',), ('a',), ('aa',), ('aaa',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('A',), ('AA',), ('BBB',), ('a',), ('a',), ('aa',), ('aaa',))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('A',), ('AA',), ('BBB',), ('a',), ('a',), ('aa',), ('aaa',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('A',), ('AA',), ('BBB',), ('a',), ('a',), ('aa',), ('aaa',))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 CASE  WHEN ((u = 1)) THEN \u2502\\n\u2502     (NULL) ELSE u END     \u2502\\n\u2502                           \u2502\\n\u2502          ~7 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502       Projections: u      \u2502\\n\u2502                           \u2502\\n\u2502          ~7 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((144.54,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((144.54,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6, 56))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6, 56))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, False))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, '05-03-2005', 'Day 1'), (2, '17-03-2005', 'Day 2'), (3, '28-03-2005', 'Day 3'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'strftime(STRING_LITERAL, INTEGER, STRING_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\nLINE 1: ..., CASE WHEN date IS NULL THEN '-' ELSE STRFTIME('%d-%m-%Y', date, 'unixepoch')...\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "duckdb_9_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, '28-03-2005', 'Day 3'), (2, '17-03-2005', 'Day 2'), (1, '05-03-2005', 'Day 1'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'strftime(STRING_LITERAL, INTEGER, STRING_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\nLINE 1: ..., CASE WHEN date IS NULL THEN '-' ELSE STRFTIME('%d-%m-%Y', date, 'unixepoch')...\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "duckdb_9_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1234567890123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Could not convert string '1234567890123456789' to INT32\nLINE 1: ...FROM (SELECT MAX(CAST(CASE WHEN 1 THEN CAST(c AS INTEGER) ELSE 0 END AS INTEGE...\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_9_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1234567890123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Could not convert string '1234567890123456789' to INT32\nLINE 1: SELECT * FROM (SELECT MAX(CAST(NULLIF(c, '') AS INTEGER)) FROM t1...\n                                  ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_9_29", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2001.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"year(STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tyear(TIMESTAMP) -> BIGINT\n\tyear(INTERVAL) -> BIGINT\n\tyear(TIMESTAMP WITH TIME ZONE) -> BIGINT\n\tyear(DATE) -> BIGINT\n\nLINE 1: SELECT AVG(CASE WHEN YEAR('2001-01-01') = 10 THEN NULL ELSE ...\n                             ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 2}
{"sql_id": "duckdb_90_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('10000-03-15 00:00:00', '10000-03-16 00:00:00', '10000-03-17 00:00:00'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT DATE('1899-12-31') + 3652499, DATE('189...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_90_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('117592-03-15 00:00:00', '117592-03-16 00:00:00', '117592-03-18 00:00:00'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT DATE('1900-01-01' || 42949670), DATE('1...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_91_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_91_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((12000,), (120000,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((120000,), (12000,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_92_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502            NULL           \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         DUMMY_SCAN        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \";\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \";\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_22", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_24", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_25", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_26", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_27", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 2, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 2, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, 3, 1), (3, 2, 1), (1, 2, None))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, 3, 1), (3, 2, 1), (1, 2, None))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,), (False,), (False,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 3 columns - expected 1\nLINE 1: SELECT ROW(a,2,3) IN(SELECT 1 AS col1, b AS col2, c AS co...\n                          ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_94_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 3 columns - expected 1\nLINE 1: SELECT ROW(c,2,3) IN(SELECT 1 AS col1, b AS col2, a AS co...\n                          ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_94_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,), (True,), (True,), (True,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT ROW(1,2,3) IN(SELECT ROW(a,b,c), ROW(1,2,3) FROM t...\n                          ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True, False, False, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True, False, False, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_95_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT ROW(a, 1) IN (SELECT SUM(b), 1 FROM t1) FROM t1 G...\n                         ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_95_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT ROW(a, 1) IN (SELECT SUM(b), 3 FROM t1) FROM t1 G...\n                         ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_95_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT ROW(1,2) = (SELECT 1,2 FROM t1 WHERE 1 = 0); -- RO...\n                          ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_95_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT ROW(1,2) = (SELECT 1,3 FROM t1 WHERE 1 = 0); -- RO...\n                          ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_95_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             al            \u2502\\n\u2502                           \u2502\\n\u2502          ~0 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502   PERFECT_HASH_GROUP_BY   \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502         Groups: #0        \u2502\\n\u2502    Aggregates: min(#1)    \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             a             \u2502\\n\u2502             a             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502       Projections: a      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_95_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_96_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Invalid Input Error: Insufficient padding in RPAD.", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('axyxy',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('axyxy',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('I LOVE SQL          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('I LOVE SQL          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_97_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502     (SUBQUERY IS NULL)    \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         HASH_JOIN         \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502      Join Type: MARK      \u2502\\n\u2502     Conditions: a = #0    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502                           \u2502              \u2502\\n\u2502          ~3 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\u2502             t1            \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502        Projections:       \u2502\u2502       Projections: a      \u2502\\n\u2502             a             \u2502\u2502                           \u2502\\n\u2502             b             \u2502\u2502                           \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502          ~3 Rows          \u2502\u2502          ~3 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_97_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_98_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             x             \u2502\\n\u2502             y             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502       CROSS_PRODUCT       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502       (SUBQUERY > 0)      \u2502\u2502             t1            \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502                           \u2502\u2502        Projections:       \u2502\\n\u2502                           \u2502\u2502             x             \u2502\\n\u2502                           \u2502\u2502             y             \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\u2502          ~0 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 CASE  WHEN ((#1 > 1)) THEN\u2502\\n\u2502  (error(\\'More than one row\u2502\\n\u2502   returned by a subquery  \u2502\\n\u2502   used as an expression - \u2502\\n\u2502    scalar subqueries can  \u2502\\n\u2502  only return a single row.\u2502\\n\u2502          Use \"SET         \u2502\\n\u2502 scalar_subquery_error_on_m\u2502\\n\u2502   ultiple_rows=false\" to  \u2502\\n\u2502     revert to previous    \u2502\\n\u2502   behavior of returning a \u2502\\n\u2502 random row.\\')) ELSE #0 END\u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502    UNGROUPED_AGGREGATE    \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502        Aggregates:        \u2502\\n\u2502        \"first\"(#0)        \u2502\\n\u2502        count_star()       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             #0            \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (CAST(uuid() AS VARCHAR) =\u2502\\n\u2502     CAST(a AS VARCHAR))   \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t2            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          ~0 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             x             \u2502\\n\u2502             y             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502       CROSS_PRODUCT       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502       (SUBQUERY > 0)      \u2502\u2502             t1            \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502                           \u2502\u2502        Projections:       \u2502\\n\u2502                           \u2502\u2502             x             \u2502\\n\u2502                           \u2502\u2502             y             \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\u2502          ~0 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 CASE  WHEN ((#1 > 1)) THEN\u2502\\n\u2502  (error(\\'More than one row\u2502\\n\u2502   returned by a subquery  \u2502\\n\u2502   used as an expression - \u2502\\n\u2502    scalar subqueries can  \u2502\\n\u2502  only return a single row.\u2502\\n\u2502          Use \"SET         \u2502\\n\u2502 scalar_subquery_error_on_m\u2502\\n\u2502   ultiple_rows=false\" to  \u2502\\n\u2502     revert to previous    \u2502\\n\u2502   behavior of returning a \u2502\\n\u2502 random row.\\')) ELSE #0 END\u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502    UNGROUPED_AGGREGATE    \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502        Aggregates:        \u2502\\n\u2502        \"first\"(#0)        \u2502\\n\u2502        count_star()       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             #0            \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (CAST(uuid() AS VARCHAR) =\u2502\\n\u2502     CAST(a AS VARCHAR))   \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t2            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          ~0 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_98_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_98_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          SUBQUERY         \u2502\\n\u2502                           \u2502\\n\u2502          ~4 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502      LEFT_DELIM_JOIN      \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502     Join Type: SINGLE     \u2502\\n\u2502                           \u2502\\n\u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502  a IS NOT DISTINCT FROM a \u2502              \u2502\\n\u2502                           \u2502              \u2502\\n\u2502          ~4 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\u2502         HASH_JOIN         \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\u2502     Join Type: SINGLE     \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502       Projections: a      \u2502\u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502                           \u2502\u2502  a IS NOT DISTINCT FROM a \u2502              \u2502\\n\u2502                           \u2502\u2502                           \u2502              \u2502\\n\u2502          ~4 Rows          \u2502\u2502          ~4 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n                             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                             \u2502      COLUMN_DATA_SCAN     \u2502\u2502         PROJECTION        \u2502\\n                             \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                             \u2502                           \u2502\u2502    COALESCE(sum(b), 0)    \u2502\\n                             \u2502                           \u2502\u2502             a             \u2502\\n                             \u2502                           \u2502\u2502                           \u2502\\n                             \u2502          ~4 Rows          \u2502\u2502          ~2 Rows          \u2502\\n                             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502         HASH_JOIN         \u2502\\n                                                          \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                          \u2502      Join Type: LEFT      \u2502\\n                                                          \u2502                           \u2502\\n                                                          \u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502 a IS NOT DISTINCT FROM #0 \u2502              \u2502\\n                                                          \u2502                           \u2502              \u2502\\n                                                          \u2502          ~2 Rows          \u2502              \u2502\\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502         DELIM_SCAN        \u2502\u2502         PROJECTION        \u2502\\n                                                          \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                          \u2502       Delim Index: 1      \u2502\u2502__internal_decompress_integ\u2502\\n                                                          \u2502                           \u2502\u2502     ral_integer(#0, 5)    \u2502\\n                                                          \u2502                           \u2502\u2502             #1            \u2502\\n                                                          \u2502                           \u2502\u2502                           \u2502\\n                                                          \u2502          ~2 Rows          \u2502\u2502          ~0 Rows          \u2502\\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502   PERFECT_HASH_GROUP_BY   \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502         Groups: #0        \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502        Aggregates:        \u2502\\n                                                                                       \u2502    sum_no_overflow(#1)    \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         PROJECTION        \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502             a             \u2502\\n                                                                                       \u2502             b             \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         PROJECTION        \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502__internal_compress_integra\u2502\\n                                                                                       \u2502     l_utinyint(#0, 5)     \u2502\\n                                                                                       \u2502             #1            \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         SEQ_SCAN          \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502             t3            \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502        Projections:       \u2502\\n                                                                                       \u2502             a             \u2502\\n                                                                                       \u2502             b             \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_98_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_98_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          SUBQUERY         \u2502\\n\u2502                           \u2502\\n\u2502          ~4 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502      LEFT_DELIM_JOIN      \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502     Join Type: SINGLE     \u2502\\n\u2502                           \u2502\\n\u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502  a IS NOT DISTINCT FROM a \u2502              \u2502\\n\u2502                           \u2502              \u2502\\n\u2502          ~4 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\u2502         HASH_JOIN         \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\u2502     Join Type: SINGLE     \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502       Projections: a      \u2502\u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502                           \u2502\u2502  a IS NOT DISTINCT FROM a \u2502              \u2502\\n\u2502                           \u2502\u2502                           \u2502              \u2502\\n\u2502          ~4 Rows          \u2502\u2502          ~4 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n                             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                             \u2502      COLUMN_DATA_SCAN     \u2502\u2502         PROJECTION        \u2502\\n                             \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                             \u2502                           \u2502\u2502    COALESCE(sum(b), 0)    \u2502\\n                             \u2502                           \u2502\u2502             a             \u2502\\n                             \u2502                           \u2502\u2502                           \u2502\\n                             \u2502          ~4 Rows          \u2502\u2502          ~2 Rows          \u2502\\n                             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502         HASH_JOIN         \u2502\\n                                                          \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                          \u2502      Join Type: LEFT      \u2502\\n                                                          \u2502                           \u2502\\n                                                          \u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502 a IS NOT DISTINCT FROM #0 \u2502              \u2502\\n                                                          \u2502                           \u2502              \u2502\\n                                                          \u2502          ~2 Rows          \u2502              \u2502\\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502         DELIM_SCAN        \u2502\u2502         PROJECTION        \u2502\\n                                                          \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                          \u2502       Delim Index: 1      \u2502\u2502__internal_decompress_integ\u2502\\n                                                          \u2502                           \u2502\u2502     ral_integer(#0, 5)    \u2502\\n                                                          \u2502                           \u2502\u2502             #1            \u2502\\n                                                          \u2502                           \u2502\u2502                           \u2502\\n                                                          \u2502          ~2 Rows          \u2502\u2502          ~0 Rows          \u2502\\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502   PERFECT_HASH_GROUP_BY   \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502         Groups: #0        \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502        Aggregates:        \u2502\\n                                                                                       \u2502    sum_no_overflow(#1)    \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         PROJECTION        \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502             a             \u2502\\n                                                                                       \u2502             b             \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         PROJECTION        \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502__internal_compress_integra\u2502\\n                                                                                       \u2502     l_utinyint(#0, 5)     \u2502\\n                                                                                       \u2502             #1            \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         SEQ_SCAN          \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502             t3            \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502        Projections:       \u2502\\n                                                                                       \u2502             a             \u2502\\n                                                                                       \u2502             b             \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_99_6", "EM": 1, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ABC', 1), ('ABC', 1), ('XYZ', 1), ('XYZ', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('ABC', 1), ('XYZ', 1), ('XYZ', 1), ('ABC', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}

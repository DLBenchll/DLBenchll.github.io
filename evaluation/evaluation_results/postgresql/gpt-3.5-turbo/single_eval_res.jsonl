{"sql_id": 216, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((100.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"Last Updated\" does not exist\nLINE 1: SELECT CAST(SUM(CASE WHEN SUBSTRING(\"Last Updated\", -4) > '2...\n                                            ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": 249, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Proceedings of the International IFIP-IEEE Conference on Broadband Communications, Global Infrastructure for the Information Age',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"conference\" does not exist\nLINE 1: SELECT FullName FROM Conference ORDER BY LENGTH(FullName) DE...\n                             ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 357, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 358, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((10,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((10,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 359, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 631, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 636, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((327,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((327,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 640, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('68'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('68'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 641, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('13'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('13'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 643, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((16,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((16,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 646, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "division by zero\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": 394, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Consider the Lilies',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Consider the Lilies',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 395, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((32,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((32,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 396, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1000,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 397, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((57.1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((57.1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 398, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((25.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((25.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 399, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('The Illuminati', 'Thomas Nelson'), ('The Season: A Candid Look at Broadway', 'Limelight'), ('Working Effectively with Legacy Code', 'Prentice Hall'), ('Programming in C', 'Sams'), (\"PHP and MySQL Web Development (Developer's Library)\", 'Sams'), (\"The Bonesetter's Daughter\", 'Harper Perennial'), ('Naked Empire (Sword of Truth  #8)', 'Voyager'), ('The Real Trial of Oscar Wilde', 'Harper Perennial'), ('The Opposite of Fate', 'Harper Perennial'), ('Wild Swans: Three Daughters of China', 'Harper Perennial'), ('Reading Lolita in Tehran', 'Fourth Estate'), ('Where Rainbows End', 'HarperCollins'), ('The Known World', 'Harper Perennial'), ('Going Postal (Discworld  #33)', 'Harper'), ('After', 'HarperTeen'), ('Barracuda 945 (Admiral Arnold Morgan  #6)', 'HarperTorch'), ('Behaving Like Adults', 'William Morrow Paperbacks'), ('Letters from the Earth: Uncensored Writings', 'Harper Perennial Modern Classics'), ('Murder Unleashed (Jack and Jamie #2)', 'Avon Books'), ('To Collar a Killer (Jack and Jamie #3)', 'Avon'), ('A Faint Cold Fear (Grant County  #3)', 'Harper'), ('City of the Beasts (Eagle and Jaguar  #1)', 'Rayo'), ('Brave New World and Brave New World Revisited', 'HarperCollins'), ('How to Make Love Like a Porn Star: A Cautionary Tale', 'It Books'), ('1421: The Year China Discovered America', 'Harper Perennial (NYC)'), ('Nimitz Class (Admiral Arnold Morgan  #1)', 'Harper Paperbacks'), ('Built to Last: Successful Habits of Visionary Companies', 'Harper Business'), ('Fluke: Or  I Know Why the Winged Whale Sings', 'Harper'), ('The Perennial Philosophy', 'Harper Perennial Modern Classics'), ('Dead Witch Walking (The Hollows  #1)', 'HarperTorch'), ('Sabriel (Abhorsen  #1)', 'Eos'), ('Slider', 'It Books'), ('The Way the Crow Flies', 'Harper Perennial'), ('Great Short Works of Herman Melville', 'Harper Perennial Modern Classics'), ('El reino del drag\u00f3n de oro', 'HarperCollins Espanol'), ('Quicksilver (The Baroque Cycle  #1)', 'HarperCollins Perennial'), ('Beautiful Boys (Weetzie Bat  #4-5)', 'HarperTeen'), (\"Since You're Leaving Anyway  Take Out the Trash (Domestic Equalizers #1)\", 'Avon'), ('Outposts: Journeys to the Surviving Relics of the British Empire', 'Harper Perennial'), ('Darkest Hour (The Mediator  #4)', 'HarperCollins'), ('Great Short Works of Fyodor Dostoevsky', 'Harper Perennial Modern Classics'), ('The Collected Letters of C.S. Lewis  Volume 1: Family Letters  1905-1931', 'HarperOne'), ('Bloodsucking Fiends (A Love Story  #1)', 'HarperCollins'), ('Island of the Sequined Love Nun', 'Harper Perennial'), ('The Lust Lizard of Melancholy Cove (Pine Cove  #2)', 'William Morrow Paperbacks'), ('One Hundred Years of Solitude', 'Harper Perennial'), ('Wicked: The Life and Times of the Wicked Witch of the West', 'William Morrow Paperbacks'), ('This Rough Magic', 'HarperTorch'), ('Airs Above the Ground', 'HarperTorch'), ('The Known World', 'Harper'), ('Desde mi cielo', 'Debolsillo'), ('One Hundred Years of Solitude', 'Harper'), ('Journey Into the Void (Sovereign Stone  #3)', 'Harper Voyager'), (\"Harrison's Principles of Internal Medicine\", 'McGraw-Hill Medical Publishing'), ('Advanced Statistics Demystified', 'McGraw-Hill Education'), ('Slim to None: A Journey Through the Wasteland of Anorexia Treatment', 'McGraw-Hill Education'), ('The Last Dance: Encountering Death and Dying', 'McGraw-Hill Humanities/Social Sciences/Languages'), ('The Toy Maker: The Life and Times of Inventor Frank Hornby', 'Ebury Press'), ('The Confessions of Nat Turner', 'Vintage Classics'), ('The Time of Our Singing', 'Vintage'), ('Blood Canticle (The Vampire Chronicles #10)', 'Arrow'), ('Like a Charm', 'Arrow'), ('Bringing Down The House', 'Arrow'), ('Earthly Powers', 'Vintage Classics'), ('The Witching Hour (Lives of the Mayfair Witches  #1)', 'Arrow'), ('Lasher (Lives of the Mayfair Witches  #2)', 'Arrow Books'), ('Women Who Love Too Much', 'Arrow'), ('Physics: for Scientists and Engineers with Modern Physics', 'Benjamin-Cummings Publishing Company'), ('Introduction to the Philosophies of Research and Criticism in Education and the Social Sciences', 'Pearson'), ('Criminal Investigation: The Art and the Science', 'Prentice Hall'), ('Java: An Introduction to Problem Solving and Programming', 'Prentice Hall'), ('The Normans in Sicily: The Normans in the South 1016-1130 and the Kingdom in the Sun 1130-1194', 'Penguin Global'), ('The Nibelungenlied', 'Penguin Classics'), ('Germinal', 'Penguin Classics'), ('Metamorphoses', 'Penguin'), ('Sentimental Education', 'Penguin Classics'), ('Dead Souls', 'Penguin Classics'), ('The Nicomachean Ethics', 'Penguin Classics'), ('The Teeth of the Tiger (Jack Ryan Universe  #12)', 'Penguin Books Ltd.'), ('Stiff: The Curious Lives of Human Cadavers', 'Penguin'), ('You Shall Know Our Velocity', 'Penguin'), ('Citizens: A Chronicle of the French Revolution', 'Penguin'), ('Drop City', 'Penguin Books'), ('Freedom Evolves', 'Penguin'), ('Lost in a Good Book (Thursday Next  #2)', 'Penguin Books'), ('River of Shadows: Eadweard Muybridge and the Technological Wild West', 'Penguin Books'), ('The Life of Graham Greene  Vol. 1: 1904-1939', 'Penguin Books'), ('Outcast of Redwall (Redwall  #8)', 'Firebird'), ('Triss (Redwall  #15)', 'Firebird'), ('In the Land of Time: And Other Fantasy Tales', 'Penguin Classics'), ('The Portable John Adams', 'Penguin Books'), ('Paris: After the Liberation 1944-1949', 'Penguin Books'), (\"Swann's Way (In Search of Lost Time  #1)\", 'Penguin Classics'), ('This Lullaby', 'Speak'), ('The Well of Lost Plots (Thursday Next #3)', 'Penguin Books'), ('Anna Karenina', 'Penguin Classics'), ('The Flanders Panel', 'Mariner Books'), ('The Seville Communion', 'Mariner Books'), ('The Liberated Bride', 'Mariner Books'), ('Life of Pi', 'Mariner Books / Harvest Books'), ('Pride and Prejudice', 'Oxford University Press'), ('Sense and Sensibility', 'Oxford University Press'), ('Purgatorio (La Divina Commedia #2)', 'Oxford University Press USA'), ('The Oresteia', 'Oxford University Press USA'), ('American Legal History: Cases and Materials', 'Oxford University Press USA'), ('Modern Latin America', 'Oxford University Press USA'), ('The Selected Journals Of L.M. Montgomery  Vol. 5: 1935-1942', 'Oxford University Press USA'), ('Infants  Children  and Adolescents (MyDevelopmentLab Series)', 'Allyn & Bacon'), ('The Plot Against America', 'Jonathan Cape'), ('Lost Prophet: The Life and Times of Bayard Rustin', 'University of Chicago Press'), ('Directing the Documentary', 'Focal Press'), ('Breach of Promise', 'Zondervan'), (\"Moloka'i (Moloka'i #1)\", \"St. Martin's Griffin\"), ('The New York Times Guide to Essential Knowledge', \"St. Martin's Press\"), ('Something Borrowed (Darcy & Rachel  #1)', \"St. Martin's Press\"), (\"Marching Powder: A True Story of Friendship  Cocaine  and South America's Strangest Jail\", \"St. Martin's Griffin\"), ('All Things Wise and Wonderful', \"St. Martin's Griffin\"), ('Sideways', \"St. Martin's Griffin\"), ('Rereading America: Cultural Contexts for Critical Thinking and Writing', 'Bedford Books'), ('The Interpreter', 'St. Martins Press'), ('Galatea 2.2', 'Picador'), ('Mason & Dixon', 'Picador USA'), ('The River at the Center of the World: A Journey Up the Yangtze & Back in Chinese Time', 'Picador'), ('Primo Levi: A Life', 'Picador'), ('Dry', 'Picador USA'), ('A Home at the End of the World', 'Picador'), ('Faking It (Dempseys  #2)', \"St. Martin's Paperbacks\"), ('Welcome to Temptation (Dempseys  #1)', \"St. Martin's Paperbacks\"), ('Crazy For You', \"St. Martin's Paperbacks\"), ('Full Blast (Full #4)', \"St. Martin's Paperbacks\"), ('The Awakening (Vampire Huntress  #2)', \"St. Martin's Paperbacks\"), ('The Tristan Betrayal', \"St. Martin's Paperbacks\"), ('The Firefly', \"St. Martin's Paperbacks\"), ('As the Crow Flies', \"St. Martin's Paperbacks\"), ('The Lovely Bones', 'Back Bay Books'), ('An Unfinished Life: John F. Kennedy  1917-1963', 'Back Bay Books'), ('The Necessary Shakespeare', 'Longman Publishing Group'), ('Marching Powder', 'Pan MacMillan'), ('The Battle Of Corrin (Legends of Dune  #3)', 'Hodder & Stoughton Ltd'), ('The Dark Tower (The Dark Tower #7)', 'Hodder & Stoughton'), ('Girl Meets Ape', 'Coronet'), ('Rise to Rebellion', 'Ballantine Books'), ('Standing in the Rainbow (Elmwood Springs  #2)', 'Ballantine Books'), ('The Probable Future', 'Ballantine Books'), ('The Bloody Crown of Conan (Conan the Cimmerian  #2)', 'Del Rey Ballantine Random House'), (\"Dragon's Kin (Pern  #17)\", 'Del Rey'), ('Yoda: Dark Rendezvous', 'Del Rey'), ('The Hunchback of Notre-Dame', 'Modern Library'), ('We Were Soldiers Once... and Young: Ia Drang - The Battle that Changed the War in Vietnam', 'Presidio Press'), ('The Star Wars Trilogy', 'Del Rey'), ('The Guns of August', 'Ballantine Books'), ('The Fortunate Pilgrim', 'Ballantine Books'), ('Interview with the Vampire (The Vampire Chronicles  #1)', 'Ballantine Books'), ('The Vampire Lestat (The Vampire Chronicles  #2)', 'Ballantine Books'), ('Sonnets', 'Simon Schuster'), ('Back When We Were Grownups', 'Ballantine Books'), ('Narrative of the Life of Frederick Douglass  an American Slave / Incidents in the Life of a Slave Girl', 'Modern Library'), ('Trump: The Art of the Deal', 'Ballantine Books'), ('Jennifer Government', 'Abacus'), ('Slightly Settled (Slightly  #2)', 'Red Dress Ink'), ('Monkey Business', 'Red Dress Ink'), (\"Girls' Night In\", 'Red Dress Ink'), ('Double-Cross (Athena Force #4)', 'Silhouette Bombshell'), (\"Elphame's Choice (Partholon  #4)\", 'Luna Books'), ('The Fairy Godmother (Five Hundred Kingdoms  #1)', 'Luna Books'), ('Sylvester', 'Harlequin'), ('Selected Verse', 'Farrar Straus and Giroux'), ('The Iliad', 'Farrar Straus and Giroux'), ('The Fixer', 'Farrar Straus and Giroux'), ('My Life', 'Knopf Publishing Group'), ('Sons of Mississippi: A Story of Race and Its Legacy', 'Vintage'), ('The Elegant Universe: Superstrings  Hidden Dimensions  and the Quest for the Ultimate Theory', 'Vintage Books USA'), ('The Adolescent', 'Vintage'), ('The Life and Opinions of Tristram Shandy  Gentleman', 'Modern Library'), ('Shutter Island', 'HarperTorch'), (\"Lamb: The Gospel According to Biff  Christ's Childhood Pal\", 'William Morrow / HarperCollins / Harper Perennial'), ('The Body in the Lighthouse', 'Avon'), ('The Cloud Atlas', 'Dial Press'), ('Coming of Age in Mississippi: The Classic Autobiography of a Young Black Girl in the Rural South', 'Delta'), ('A Painted House', 'Bantam'), ('Sailing the Wine-Dark Sea: Why the Greeks Matter', 'Anchor'), ('Good Faith', 'Anchor Books'), ('Will in the World: How Shakespeare Became Shakespeare', 'W.W. Norton & Company (NY/London)'), ('The Annotated Brothers Grimm', 'W. W. Norton Company'), ('The New Annotated Sherlock Holmes: The Complete Short Stories', 'W. W. Norton & Company'), ('The Complete Aubrey/Maturin Novels (5 Volumes)', 'W. W. Norton Company'), ('The 9/11 Commission Report: Final Report of the National Commission on Terrorist Attacks Upon the United States', 'W. W. Norton Company'), ('Moneyball: The Art of Winning an Unfair Game', 'W. W. Norton Company'), ('The 9/11 Commission Report: Final Report of the National Commission on Terrorist Attacks Upon the United States', 'W. W. Norton Company'), ('Paradise Lost', 'W. W. Norton & Company'), (\"Anton Chekhov's Selected Plays\", 'W. W. Norton & Company'), ('A History of Modern Europe  Volume 2: From the French Revolution to the Present', 'W. W. Norton & Company'), ('Madame Bovary (Critical Editions)', 'W.W. Norton & Company'), ('Raise the Titanic! (Dirk Pitt  #4)', \"G.P. Putnam's Sons\"), ('For Kicks', \"G.P. Putnam's Sons\"), ('Field of Thirteen', \"G.P. Putnam's Sons\"), ('The Bad Place', 'Berkley'), ('Wild Horses', \"G.P. Putnam's Sons\"), (\"Jane's Warlord (Warlord #1)\", 'Berkley Sensation'), ('Iceberg (Dirk Pitt  #3)', 'Berkley Books'), ('The Mediterranean Caper (Dirk Pitt  #2)', \"G.P. Putnam's Sons\"), ('10 lb Penalty', \"G.P. Putnam's Sons\"), ('Goddess of Spring (Goddess Summoning  #2)', 'Berkley Sensation'), ('Guilty Pleasures (Anita Blake  Vampire Hunter  #1)', 'Berkley'), (\"Death's Acre: Inside the Legendary Forensic Lab the Body Farm Where the Dead Do Tell Tales\", 'Berkley'), ('Blow Fly (Kay Scarpetta  #12)', 'Berkley'), ('Master of the Night (Mageverse #1)', 'Berkley Sensation'), (\"Wild Card (Tom Clancy's Power Plays  #8)\", 'Berkley'), ('Trojan Odyssey (Dirk Pitt  #17)', \"G.P. Putnam's Sons\"), ('Disordered Minds', 'Berkley'), ('Decider', \"G.P. Putnam's Sons\"), ('Murder on the Orient Express (Hercule Poirot  #10)', 'Berkley'), ('The Body Farm (Kay Scarpetta  #5)', 'Berkley'), (\"Splinter Cell (Tom Clancy's Splinter Cell  #1)\", 'Berkley'), ('Atlantis Found (Dirk Pitt  #15)', 'Berkley Trade'), ('Birds Without Wings', 'Secker'), ('Harry Potter and the Order of the Phoenix (Harry Potter  #5)', 'Scholastic Inc.'), ('Harry Potter and the Prisoner of Azkaban (Harry Potter  #3)', 'Scholastic Inc.'), ('Harry Potter Boxed Set  Books 1-5 (Harry Potter  #1-5)', 'Scholastic'), (\"Trickster's Choice (Daughter of the Lioness  #1)\", 'Scholastic Press'), ('Shopaholic Takes Manhattan (Shopaholic  #2)', 'Dell Publishing Company'), ('Shopaholic Ties the Knot (Shopaholic  #3)', 'Dell Publishing Company'), ('Masterpieces: The Best Science Fiction of the Twentieth Century', 'Ace Books'), ('Neuromancer', 'Ace'), ('The Big Bad Wolf  (Alex Cross  #9)', 'Grand Central Publishing'), ('Still Life With Crows (Pendergast  #4)', 'Grand Central Publishing'), ('Gloriana', 'Aspect'), ('Lost Boy Lost Girl', 'Ballantine Books'), ('No Second Chance', 'Dutton Books'), ('A Whole Lotta Love', 'Signet'), ('Night Over Water', 'NAL'), ('Monkeewrench (Monkeewrench  #1)', \"G.P. Putnam's Sons\"), (\"Mayada  Daughter of Iraq: One Woman's Survival Under Saddam Hussein\", 'Berkley Books'), ('The Agony and the Ecstasy: A Biographical Novel of Michelangelo', 'NAL'), ('Four Past Midnight', 'Signet'), ('The Anodyne Necklace (Richard Jury  #3)', 'Onyx'), ('The Dirty Duck (Richard Jury  #4)', 'Onyx'), ('Jerusalem Inn (Richard Jury  #5)', 'Onyx'), ('Wuthering Heights', 'Signet Classics'), ('Little Women', 'Signet Classics'), ('The Sea-Wolf and Selected Stories', 'Signet Classics'), ('Travels of Marco Polo', 'Signet'), ('Lies & the Lying Liars Who Tell Them: A Fair & Balanced Look at the Right', 'Plume Books'), ('Stolen (Women of the Otherworld  #2)', 'Plume'), ('Bitten (Otherworld  #1)', 'Plume Books'), ('Atlas Shrugged', 'NAL'), ('Astronomy: A Self-Teaching Guide', 'John Wiley & Sons'), ('The Philosophy of History', 'Dover Publications'), ('Anna Karenina', 'Dover Publications'), ('Love Bites (Argeneau #2)', 'Love Spell'), (\"Aphrodite's Flame (Superhero Central #4)\", 'Love Spell'), ('Cerulean Sins (Anita Blake  Vampire Hunter  #11)', 'Berkley Books'), ('After Glow (Ghost Hunters  #2)', 'Jove Books'), ('Cravings (Undead #1.5; Moon #3.5)', 'Berkley Books'), ('Sunshine', 'Jove'), ('Bite (Anita Blake  Vampire Hunter  #8.5; Sookie Stackhouse  #5.1; Undead  #2.5; Mageverse  #1.5)', 'Jove'), ('The Shell Seekers', 'Gramercy Books'), ('A History of God: The 4 000-Year Quest of Judaism  Christianity  and Islam', 'Gramercy Books'), ('Pathologies of Power: Health  Human Rights and the New War on the Poor', 'University of California Press'), ('Four & Twenty Blackbirds (Bardic Voices  #4)', 'Baen Books'), ('A First Course in String Theory', 'Cambridge University Press'), ('Data Structures and Algorithms in C++', 'Course Technology'), ('Deception Point', 'Corgi Books'), ('Not Without My Daughter', 'Transworld Publishers Ltd'), ('Inferno', 'Bantam Books'), ('Purgatorio (The Divine Comedy  #2)', 'Bantam Books'), ('Light (Kefahuchi Tract  #1)', 'Spectra'), ('The Face', 'Bantam'), ('The Murder Stone', 'Bantam'), ('Dime Store Magic (Women of the Otherworld  #3)', 'Bantam Spectra'), ('Industrial Magic (Women of the Otherworld #4)', 'Bantam Spectra'), ('Beach Girls', 'Bantam'), ('Foundation and Earth (Foundation #5)', 'Spectra'), ('The Devil in the White City: Murder  Magic and Madness at the Fair that Changed America', 'Bantam Press'), ('The Kid Stays in the Picture', 'Faber & Faber'), ('The Avignon Quintet: Monsieur  Livia  Constance  Sebastian and Quinx', 'Faber & Faber'), ('High Performance MySQL: Optimization  Backups  Replication & Load Balancing', \"O'Reilly Media\"), ('BSD Hacks', \"O'Reilly Media\"), ('iMovie 4 & iDVD: The Missing Manual: The Missing Manual', 'Pogue Press'), ('Rising Sun', 'Turtleback Books'), (\"Charlie Wilson's War: The Extraordinary Story of the Largest Cover Operation in History\", 'Turtleback Books'), ('Queen of Scots: The True Life of Mary Stuart', 'Houghton Mifflin'), ('The Best American Mystery Stories 2004', 'Mariner Books'), ('The Best American Nonrequired Reading 2004', 'Houghton Mifflin'), ('The Silmarillion', 'Houghton Mifflin Company'), ('The Earth and Its Peoples: A Global History  Volume C: Since 1750', 'Cengage Learning'), ('Fabulous Small Jews', 'Mariner Books'), ('Reefer Madness: Sex  Drugs  and Cheap Labor in the American Black Market', 'Mariner Books'), ('Dark Star Safari: Overland from Cairo to Cape Town', 'Mariner Books'), ('Natural Health  Natural Medicine', 'Mariner Books'), ('The Lord of the Rings (The Lord of the Rings  #1-3)', 'Houghton Mifflin Harcourt'), ('The Fellowship of the Ring (The Lord of the Rings  #1)', 'Houghton Mifflin Company'), ('In the Shadow of Young Girls in Flower (In Search of Lost Time  #2)', 'Viking Adult'), ('How to Stop Worrying and Start Living', 'Gallery Books'), ('Sharp Edges', 'Pocket Star Books'), ('The Color Purple', 'Pocket'), ('What Is Ancient Philosophy?', 'Belknap Press'), ('Magic Circles: The Beatles in Dream and History', 'Harvard University Press'), ('The Killer Angels: A Novel of the Civil War (The Civil War Trilogy  #2)', 'Modern Library'), ('The Collected Autobiographies of Maya Angelou', 'Modern Library'), ('Mortals', 'Vintage'), (\"Mary Stewart's Merlin Trilogy (Arthurian Saga  #1-3)\", 'Harper Voyager'), ('Nancy Drew: Girl Detective: #1-4', 'Aladdin'), ('Walden', 'Princeton University Press'), ('Shamanism: Archaic Techniques of Ecstasy', 'Princeton University Press'), ('Mary Queen of Scots and the Murder of Lord Darnley', 'Pimlico'), ('Robbins and Cotran Review of Pathology', 'Saunders'), ('Hell House', 'Severn House Publishers'), ('Code Complete', 'Microsoft Press'), (\"Zolar's Encyclopedia and Dictionary of Dreams: Fully Revised and Updated for the 21st Century\", 'Atria Books'), ('Authentic Happiness: Using the New Positive Psychology to Realize Your Potential for Lasting Fulfillment', 'Atria Books'), ('Brick Lane', 'Scribner'), (\"Will You Miss Me When I'm Gone? The Carter Family and Their Legacy in American Music\", 'Simon Schuster'), ('Wrapped in Rainbows: The Life of Zora Neale Hurston', 'Scribner'), ('Plan of Attack', 'Simon & Schuster'), ('Frankenstein', 'Kaplan Publishing'), ('The Path Between the Seas: The Creation of the Panama Canal  1870-1914', 'Simon Schuster'), ('The 7 Habits of Highly Effective People: Powerful Lessons in Personal Change', 'Free Press'), ('The Other Boleyn Girl', 'Atria Books'), ('The Good Earth (House of Earth  #1)', 'Washington Square Press'), ('Plain Truth', 'Atria Books'), ('The Coffin Dancer (Lincoln Rhyme  #2)', 'Simon & Schuster'), ('The Second Time Around', 'Pocket Books'), ('Nighttime Is My Time', 'Simon & Schuster Adult Publishing Group'), ('Black Cat (Gemini  #2)', 'Pocket Books'), ('The Vanished Man (Lincoln Rhyme  #5)', 'Pocket Books'), ('The Footprints of God', 'Pocket Star Books'), ('The Price of Pleasure (Sutherland Brothers  #2)', 'Pocket Books'), ('Dead I Well May Be (Dead Trilogy #1)', 'Pocket Books'), ('Romeo and Juliet', 'Simon Schuster'), ('Othello', 'Simon Schuster'), ('Underworld: Blood Enemy (Underworld  #2)', 'Pocket Star'), ('King Lear', 'Simon Schuster'), ('Othello', 'Simon Schuster'), ('Richard III', 'Simon Schuster'), ('Easy Prey (Lucas Davenport  #11)', 'Simon & Schuster'), ('Certain Prey (Lucas Davenport  #10)', 'Simon & Schuster'), ('Henry V', 'Washington Square Press'), ('The Count of Monte Cristo', 'Simon Schuster'), ('The Scarlet Letter', 'Simon & Schuster'), ('Frankenstein  or the Modern Prometheus', 'Pocket Books'), ('A Tale of Two Cities', 'Simon Schuster'), ('The Awakening and Selected Stories', 'Simon Schuster'), ('The Scarlet Pimpernel', 'Simon Schuster'), ('Twisted: The Collected Short Stories', 'Pocket Books'), ('Dracula', 'Walker Books Ltd'), ('To the Nines (Stephanie Plum  #9)', \"St. Martin's Press\"), ('The Dream Kingdom (The Morland Dynasty  #26)', 'Little Brown Book Group'), ('The Bourne Ultimatum (Jason Bourne  #3)', 'Orion'), ('The Icarus Agenda', 'Orion Books'), ('Trevayne', 'Orion'), ('The Shadow of the Wind', 'Phoenix'), ('The Jester', 'Headline'), ('Falling for You', 'Headline Review'), ('Joust (Dragon Jousters  #1)', 'DAW'), ('The War of the Flowers', 'DAW'), (\"Exile's Valor (Heralds of Valdemar  #7)\", 'DAW'), ('The DC Comics Encyclopedia', 'DK Publishing'), ('Lemon Meringue Pie Murder (Hannah Swensen  #4)', 'Kensington'), ('Corvette: Fifty Years', 'Motorbooks'), ('PHP and MySQL for Dummies', 'For Dummies'), ('ebay Timesaving Techniques for Dummies', 'Wiley'), ('Starting an eBay Business for Dummies', 'Wiley'), ('Dreamer of Dune: The Biography of Frank Herbert', 'Tor Books'), ('Maps in a Mirror: The Short Fiction of Orson Scott Card', 'Orb Books'), ('Sleeping in Flame (Answered Prayers  #2)', 'Orb Books'), ('Wasteland of Flint', 'Tor Books'), ('Naked Empire (Sword of Truth  #8)', 'Tor Books'), ('Wolfskin (Saga of the Light Isles  #1)', 'Tor Books'), ('New Threads in the Pattern: The Great Hunt  Part 2 (Wheel of Time  #2-2)', 'Starscape'), ('A Short History of Nearly Everything', 'Broadway Books'), ('Babyville', 'Broadway Books'), ('The Full Matilda', 'Broadway Books'), ('Holy Cow: An Indian Adventure', 'Broadway Books'), ('The Prize (deWarenne Dynasty  #4)', 'Mira Books'), ('Marvels', 'Marvel Comics Group'), ('Essential Monster of Frankenstein  Vol. 1', 'Marvel Comics'), ('The Origin of Species', 'Castle Books'), ('Island Of Bones (Louis Kincaid  #5)', 'Pinnacle'), ('The Mammoth Book of Storms  Shipwrecks and Sea Disasters', 'Running Press'), ('Summerland', 'Miramax'), ('The Legend of Huma (Dragonlance: Heroes  #1)', 'Wizards of the Coast'), ('Time of the Twins (Dragonlance: Legends  #1)', 'Wizards of the Coast'), ('The Search for Power (Dragonlance: Tales from the War of Souls  #3)', 'Wizards of the Coast'), ('Night of Blood (Dragonlance: The Minotaur Wars  #1)', 'Wizards of the Coast'), ('Dragons in the Archives: The Best of Weis & Hickman (Dragonlance Anthology)', 'Wizards of the Coast'), ('In Focus: National Geographic Greatest Portraits', 'National Geographic Society'), ('Cruelest Journey: Six Hundred Miles To Timbuktu', 'National Geographic Society'), ('The Odyssey (New Translations from Antiquity)', 'Johns Hopkins University Press'), (\"Charlie Wilson's War: The Extraordinary Story of How the Wildest Man in Congress and a Rogue CIA Agent Changed the History of our Times\", 'Grove Press'), ('Monster: The Autobiography of an L.A. Gang Member', 'Grove Press'), ('Layer Cake', 'Grove Press Black Cat'), ('The Second World War: A Complete History', 'Holt McDougal'), (\"Hegemony or Survival: America's Quest for Global Dominance\", 'Holt McDougal'), ('The Origins of Totalitarianism', 'Schocken Books'), ('Once Upon a Gulf Coast Summer', 'B Fiction'), ('Anna Karenina', 'Wildside Press'), ('Drum Into Silence (Drums of Chaos  #3)', 'Tor Fantasy'), ('The Scientists: A History of Science Told Through the Lives of Its Greatest Inventors', 'Random House Trade Paperbacks'), ('The Birth of Venus', 'Random House'), ('The Knight of Maison-Rouge', 'Modern Library'), ('Selected Stories', 'Modern Library'), ('Kim', 'Modern Library'), ('The Red and the Black', 'Modern Library'), ('The Mysterious Island (Extraordinary Voyages  #12)', 'Modern Library'), ('Mountains Beyond Mountains: The Quest of Dr. Paul Farmer  a Man Who Would Cure the World', 'Random House Trade'), ('Filth: Dirt  Disgust  and Modern Life', 'Univ Of Minnesota Press'), ('Weekend Warriors (Sisterhood  #1)', 'Kensington'), ('See How She Dies', 'Zebra Books'), ('Courageous Faith Through the Year', 'IVP Books'), ('Rejoice (Redemption  #4)', 'Tyndale House Publishers'), ('Reunion (Redemption  #5)', 'Tyndale House Publishers'), ('Sweet Revenge', 'Leisure Books'), ('The Deed (Deed  #1)', 'Leisure Books'), ('Nightmare House (Harrow House  #1)', 'Leisure Books'), ('The Chase (Deed  #3)', 'Leisure Books'), ('Blood Moon Over Bengal', 'Leisure Books'), ('History of Beauty', 'Rizzoli'), ('Blink', 'Thomas Nelson'), ('Tuscan Countess: The Life and Extraordinary Times of Matilda of Canossa', 'Vendome Press'), ('Republic', 'Hackett Publishing Company Inc.'), ('The St. Paul Stories of F. Scott Fitzgerald', 'Minnesota Historical Society Press'), (\"A Gateway to Sindarin: A Grammar of an Elvish Language from J.R.R. Tolkien's Lord of the Rings\", 'University of Utah Press'), ('Harpo Speaks!', 'Limelight Editions'), ('Bioinformatics: Sequence and Genome Analysis', 'Cold Spring Harbor Laboratory Press'), ('The Elements of Typographic Style', 'Hartley & Marks Publishers'), ('The Complete I Ching: The Definitive Translation', 'Inner Traditions International'), ('The Criss Cross', 'Melodrama Publishing'), (\"Programming Ruby: The Pragmatic Programmers' Guide\", 'Pragmatic Bookshelf'), ('Plants and Landscapes for Summer-Dry Climates of the San Francisco Bay Region', 'East Bay Municipal Utility District'), ('Natural Cures \"They\" Don\\'t Want You to Know about', 'Alliance Publishing'), ('The Dogs of Riga (Kurt Wallander  #2)', 'Vintage Crime/Black Lizard'), ('The Secret History', 'Vintage'), ('Beloved', 'Vintage'), ('Song of Solomon', 'Vintage'), ('Tar Baby', 'Vintage'), ('Providence of a Sparrow: Lessons from a Life Gone to the Birds', 'Anchor'), ('Living to Tell the Tale', 'Vintage'), (\"Lidia's Family Table\", 'Knopf Publishing Group'), (\"The Prime of Miss Jean Brodie / The Girls of Slender Means / The Driver's Seat / The Only Problem\", \"Everyman's Library\"), ('The Plague  The Fall  Exile and the Kingdom  and Selected Essays', \"Everyman's Library\"), ('Runaway', 'Alfred A. Knopf'), ('Dead Souls', \"Everyman's Library\"), (\"The Last Hours of Ancient Sunlight: The Fate of the World and What We Can Do Before It's Too Late\", 'Broadway Books'), (\"FDR's Folly: How Roosevelt and His New Deal Prolonged the Great Depression\", 'Crown Forum'), ('Titan: The Life of John D. Rockefeller  Sr.', 'Vintage'), ('The Filth', 'Vertigo'), ('On the Road to Perdition \u2014 Oasis  Sanctuary  and Detour \u2014 (Road to Perdition  #2)', 'DC Comics'), ('Pledged: The Secret Life of Sororities', 'Hyperion'), ('Scar Tissue', 'Hachette Books'), ('Feast: Food to Celebrate Life', 'Hachette Books'), (\"Jamie's Dinners: The Essential Family Cookbook\", 'Hachette Books'), ('Illustrated Guide to the NEC: Based on the 2005 National Electric Code', 'Cengage Learning'), ('Little Women (Little Women  #1)', 'Sterling'), (\"Kushiel's Avatar (Ph\u00e8dre's Trilogy  #3)\", 'Tor'), ('The English Novel: An Introduction', 'Wiley-Blackwell'), ('The Radical Right & the Murder of John F. Kennedy: Stunning Evidence in the Assassination of the President', 'Trafford Publishing'), ('The Best Short Stories of Edith Wharton', 'Kessinger Publishing'), ('Katherine', 'Chicago Review Press'), (\"Not Your Mother's Slow Cooker Cookbook\", 'Harvard Common Press'), ('The Mother', 'Moyer Bell and its subsidiaries'), ('Kinfolk', 'Moyer Bell and its subsidiaries'), ('Expelled from Eden: A William T. Vollmann Reader', 'Da Capo Press'), ('Enslaved by Ducks', 'Algonquin Books'), ('On Genesis/A Refutation of the Manichees/The Unfinished Literal Meaning of Genesis (Works of St Augustine 1)', 'New City Press'), ('Selected Poems of Herman Melville', 'David R. Godine Publisher'), ('Africa South of the Sahara: A Geographical Interpretation (Texts In Regional Geography)', 'The Guilford Press'), ('The Story of Philosophy', 'AudioGO'), ('The Letters of Vita Sackville-West and Virginia Woolf', 'Cleis Press'), ('1000 Rings: Inspiring Adornments for the Hand', 'Lark Books'), ('Prophet', 'Crossway Books'), ('Chop Shop (Bug Man  #2)', 'Howard Books'), ('The Stones of Summer', 'Overlook Press'), ('Cocktail Time', 'Harry N. Abrams'), ('Piccadilly Jim', 'Harry N. Abrams'), ('The Big Book of Boy Stuff', 'Gibbs Smith Publishers'), (\"Heart & Hands: A Midwife's Guide to Pregnancy & Birth\", 'Celestial Arts'), (\"The Music of the Republic: Essays on Socrates' Conversations and Plato's Writings\", 'Paul Dry Books'), ('Open Secrets / Inward Prospects: Reflections on World and Soul', 'Paul Dry Books'), ('The Ivory Tower', 'NYRB Classics'), ('The Wave in the Mind: Talks and Essays on the Writer  the Reader and the Imagination', 'Shambhala'), ('A Guide to the Words of My Perfect Teacher', 'Shambhala'), ('Joel on Software', 'Apress'), ('Tuf Voyaging', 'Meisha Merlin Publishing'), ('The Brothers Karamazov', 'Barnes Noble Classics'), ('The Idiot', 'Barnes Noble Classics'), ('Essential Tales and Poems', 'Barnes Noble Classics'), ('The Portrait of a Lady', 'Barnes Noble Classics'), ('Sense and Sensibility', 'Barnes & Noble'), ('A Tale of Two Cities', 'Barnes & Noble Classics'), ('The Three Musketeers', 'Barnes Noble Classics'), ('The House of Mirth', 'Barnes Noble Classics'), ('Anna Karenina', 'Barnes & Noble'), ('Oliver Twist', 'Barnes Noble Classics'), ('Pride and Prejudice', 'Barnes Noble Classics'), ('A Tale of Two Cities', 'Barnes Noble Classics'), ('Sense and Sensibility', 'Barnes & Noble'), ('Write Great Code: Volume 1: Understanding the Machine', 'No Starch Press'), ('The Nature of Play: Great Apes and Humans', 'The Guilford Press'), ('The Lovely Bones', 'Large Print Press'), ('The Zanzibar Chest', 'Riverhead Books'), (\"The Magicians' Guild (Black Magician Trilogy  #1)\", 'Orbit'), ('The Novice (Black Magician Trilogy  #2)', 'Orbit'), ('The High Lord (Black Magician Trilogy  #3)', 'Orbit'), ('Desiring God: Meditations of a Christian Hedonist', 'Inter-Varsity Press'), (\"The Prime of Miss Jean Brodie / The Girls of Slender Means / The Driver's Seat / The Only Problem\", 'Random House'), ('Architecture and Tourism: Perception  Performance and Place', 'Bloomsbury Academic'), ('Watchfiends and Rack Screams: Works from the Final Period', 'Exact Change'), (\"Harrington on Hold 'em: Expert Strategy for No-Limit Tournaments  Volume I: Strategic Play\", 'Two Plus Two Publishing LLC'), ('Her Smoke Rose Up Forever', 'Tachyon Publications'), (\"The Devil's in the Details (A Camilla MacPhee Mystery  #4)\", 'Napoleon and Co'), ('Judas Pig', 'Do-Not Press'), ('Little Women', \"Collector's Library\"), ('Collected Stories I: Gimpel the Fool to The Letter Writer', 'Library of America'), ('Collected Stories III: One Night in Brazil to The Death of Methuselah', 'Library of America'), (\"McSweeney's #14\", \"McSweeney's\"), ('Think and Grow Rich', 'High Roads Media'), ('Under the Influence: The Disinformation Guide to Drugs', 'The Disinformation Company (NYC)'), ('\u041c\u0430\u0441\u0442\u0435\u0440 \u0438 \u041c\u0430\u0440\u0433\u0430\u0440\u0438\u0442\u0430', '\u042d\u043a\u0441\u043c\u043e'), ('El club Dante', 'Seix Barral'), ('Ahora sabr\u00e9is lo que es correr', 'Mondadori'), ('El hombre duplicado', 'Punto de Lectura'), ('El azul de la virgen', 'Punto de Lectura'), ('Harry Potter y la Orden del F\u00e9nix (Harry Potter  #5)', 'Emece Editores'), ('El umbral de la noche', 'Debolsillo'), ('O Xar\u00e1', 'Companhia das Letras'), ('Narraciones Extraordinarias', 'Panamericana Editorial'), ('Zaat', 'American University in Cairo Press'))", "rowcount": 528, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('The Illuminati', 'Thomas Nelson'), ('The Season: A Candid Look at Broadway', 'Limelight'), ('Working Effectively with Legacy Code', 'Prentice Hall'), ('Programming in C', 'Sams'), (\"PHP and MySQL Web Development (Developer's Library)\", 'Sams'), (\"The Bonesetter's Daughter\", 'Harper Perennial'), ('Naked Empire (Sword of Truth  #8)', 'Voyager'), ('The Real Trial of Oscar Wilde', 'Harper Perennial'), ('The Opposite of Fate', 'Harper Perennial'), ('Wild Swans: Three Daughters of China', 'Harper Perennial'), ('Reading Lolita in Tehran', 'Fourth Estate'), ('Where Rainbows End', 'HarperCollins'), ('The Known World', 'Harper Perennial'), ('Going Postal (Discworld  #33)', 'Harper'), ('After', 'HarperTeen'), ('Barracuda 945 (Admiral Arnold Morgan  #6)', 'HarperTorch'), ('Behaving Like Adults', 'William Morrow Paperbacks'), ('Letters from the Earth: Uncensored Writings', 'Harper Perennial Modern Classics'), ('Murder Unleashed (Jack and Jamie #2)', 'Avon Books'), ('To Collar a Killer (Jack and Jamie #3)', 'Avon'), ('A Faint Cold Fear (Grant County  #3)', 'Harper'), ('City of the Beasts (Eagle and Jaguar  #1)', 'Rayo'), ('Brave New World and Brave New World Revisited', 'HarperCollins'), ('How to Make Love Like a Porn Star: A Cautionary Tale', 'It Books'), ('1421: The Year China Discovered America', 'Harper Perennial (NYC)'), ('Nimitz Class (Admiral Arnold Morgan  #1)', 'Harper Paperbacks'), ('Built to Last: Successful Habits of Visionary Companies', 'Harper Business'), ('Fluke: Or  I Know Why the Winged Whale Sings', 'Harper'), ('The Perennial Philosophy', 'Harper Perennial Modern Classics'), ('Dead Witch Walking (The Hollows  #1)', 'HarperTorch'), ('Sabriel (Abhorsen  #1)', 'Eos'), ('Slider', 'It Books'), ('The Way the Crow Flies', 'Harper Perennial'), ('Great Short Works of Herman Melville', 'Harper Perennial Modern Classics'), ('El reino del drag\u00f3n de oro', 'HarperCollins Espanol'), ('Quicksilver (The Baroque Cycle  #1)', 'HarperCollins Perennial'), ('Beautiful Boys (Weetzie Bat  #4-5)', 'HarperTeen'), (\"Since You're Leaving Anyway  Take Out the Trash (Domestic Equalizers #1)\", 'Avon'), ('Outposts: Journeys to the Surviving Relics of the British Empire', 'Harper Perennial'), ('Darkest Hour (The Mediator  #4)', 'HarperCollins'), ('Great Short Works of Fyodor Dostoevsky', 'Harper Perennial Modern Classics'), ('The Collected Letters of C.S. Lewis  Volume 1: Family Letters  1905-1931', 'HarperOne'), ('Bloodsucking Fiends (A Love Story  #1)', 'HarperCollins'), ('Island of the Sequined Love Nun', 'Harper Perennial'), ('The Lust Lizard of Melancholy Cove (Pine Cove  #2)', 'William Morrow Paperbacks'), ('One Hundred Years of Solitude', 'Harper Perennial'), ('Wicked: The Life and Times of the Wicked Witch of the West', 'William Morrow Paperbacks'), ('This Rough Magic', 'HarperTorch'), ('Airs Above the Ground', 'HarperTorch'), ('The Known World', 'Harper'), ('Desde mi cielo', 'Debolsillo'), ('One Hundred Years of Solitude', 'Harper'), ('Journey Into the Void (Sovereign Stone  #3)', 'Harper Voyager'), (\"Harrison's Principles of Internal Medicine\", 'McGraw-Hill Medical Publishing'), ('Advanced Statistics Demystified', 'McGraw-Hill Education'), ('Slim to None: A Journey Through the Wasteland of Anorexia Treatment', 'McGraw-Hill Education'), ('The Last Dance: Encountering Death and Dying', 'McGraw-Hill Humanities/Social Sciences/Languages'), ('The Toy Maker: The Life and Times of Inventor Frank Hornby', 'Ebury Press'), ('The Confessions of Nat Turner', 'Vintage Classics'), ('The Time of Our Singing', 'Vintage'), ('Blood Canticle (The Vampire Chronicles #10)', 'Arrow'), ('Like a Charm', 'Arrow'), ('Bringing Down The House', 'Arrow'), ('Earthly Powers', 'Vintage Classics'), ('The Witching Hour (Lives of the Mayfair Witches  #1)', 'Arrow'), ('Lasher (Lives of the Mayfair Witches  #2)', 'Arrow Books'), ('Women Who Love Too Much', 'Arrow'), ('Physics: for Scientists and Engineers with Modern Physics', 'Benjamin-Cummings Publishing Company'), ('Introduction to the Philosophies of Research and Criticism in Education and the Social Sciences', 'Pearson'), ('Criminal Investigation: The Art and the Science', 'Prentice Hall'), ('Java: An Introduction to Problem Solving and Programming', 'Prentice Hall'), ('The Normans in Sicily: The Normans in the South 1016-1130 and the Kingdom in the Sun 1130-1194', 'Penguin Global'), ('The Nibelungenlied', 'Penguin Classics'), ('Germinal', 'Penguin Classics'), ('Metamorphoses', 'Penguin'), ('Sentimental Education', 'Penguin Classics'), ('Dead Souls', 'Penguin Classics'), ('The Nicomachean Ethics', 'Penguin Classics'), ('The Teeth of the Tiger (Jack Ryan Universe  #12)', 'Penguin Books Ltd.'), ('Stiff: The Curious Lives of Human Cadavers', 'Penguin'), ('You Shall Know Our Velocity', 'Penguin'), ('Citizens: A Chronicle of the French Revolution', 'Penguin'), ('Drop City', 'Penguin Books'), ('Freedom Evolves', 'Penguin'), ('Lost in a Good Book (Thursday Next  #2)', 'Penguin Books'), ('River of Shadows: Eadweard Muybridge and the Technological Wild West', 'Penguin Books'), ('The Life of Graham Greene  Vol. 1: 1904-1939', 'Penguin Books'), ('Outcast of Redwall (Redwall  #8)', 'Firebird'), ('Triss (Redwall  #15)', 'Firebird'), ('In the Land of Time: And Other Fantasy Tales', 'Penguin Classics'), ('The Portable John Adams', 'Penguin Books'), ('Paris: After the Liberation 1944-1949', 'Penguin Books'), (\"Swann's Way (In Search of Lost Time  #1)\", 'Penguin Classics'), ('This Lullaby', 'Speak'), ('The Well of Lost Plots (Thursday Next #3)', 'Penguin Books'), ('Anna Karenina', 'Penguin Classics'), ('The Flanders Panel', 'Mariner Books'), ('The Seville Communion', 'Mariner Books'), ('The Liberated Bride', 'Mariner Books'), ('Life of Pi', 'Mariner Books / Harvest Books'), ('Pride and Prejudice', 'Oxford University Press'), ('Sense and Sensibility', 'Oxford University Press'), ('Purgatorio (La Divina Commedia #2)', 'Oxford University Press USA'), ('The Oresteia', 'Oxford University Press USA'), ('American Legal History: Cases and Materials', 'Oxford University Press USA'), ('Modern Latin America', 'Oxford University Press USA'), ('The Selected Journals Of L.M. Montgomery  Vol. 5: 1935-1942', 'Oxford University Press USA'), ('Infants  Children  and Adolescents (MyDevelopmentLab Series)', 'Allyn & Bacon'), ('The Plot Against America', 'Jonathan Cape'), ('Lost Prophet: The Life and Times of Bayard Rustin', 'University of Chicago Press'), ('Directing the Documentary', 'Focal Press'), ('Breach of Promise', 'Zondervan'), (\"Moloka'i (Moloka'i #1)\", \"St. Martin's Griffin\"), ('The New York Times Guide to Essential Knowledge', \"St. Martin's Press\"), ('Something Borrowed (Darcy & Rachel  #1)', \"St. Martin's Press\"), (\"Marching Powder: A True Story of Friendship  Cocaine  and South America's Strangest Jail\", \"St. Martin's Griffin\"), ('All Things Wise and Wonderful', \"St. Martin's Griffin\"), ('Sideways', \"St. Martin's Griffin\"), ('Rereading America: Cultural Contexts for Critical Thinking and Writing', 'Bedford Books'), ('The Interpreter', 'St. Martins Press'), ('Galatea 2.2', 'Picador'), ('Mason & Dixon', 'Picador USA'), ('The River at the Center of the World: A Journey Up the Yangtze & Back in Chinese Time', 'Picador'), ('Primo Levi: A Life', 'Picador'), ('Dry', 'Picador USA'), ('A Home at the End of the World', 'Picador'), ('Faking It (Dempseys  #2)', \"St. Martin's Paperbacks\"), ('Welcome to Temptation (Dempseys  #1)', \"St. Martin's Paperbacks\"), ('Crazy For You', \"St. Martin's Paperbacks\"), ('Full Blast (Full #4)', \"St. Martin's Paperbacks\"), ('The Awakening (Vampire Huntress  #2)', \"St. Martin's Paperbacks\"), ('The Tristan Betrayal', \"St. Martin's Paperbacks\"), ('The Firefly', \"St. Martin's Paperbacks\"), ('As the Crow Flies', \"St. Martin's Paperbacks\"), ('The Lovely Bones', 'Back Bay Books'), ('An Unfinished Life: John F. Kennedy  1917-1963', 'Back Bay Books'), ('The Necessary Shakespeare', 'Longman Publishing Group'), ('Marching Powder', 'Pan MacMillan'), ('The Battle Of Corrin (Legends of Dune  #3)', 'Hodder & Stoughton Ltd'), ('The Dark Tower (The Dark Tower #7)', 'Hodder & Stoughton'), ('Girl Meets Ape', 'Coronet'), ('Rise to Rebellion', 'Ballantine Books'), ('Standing in the Rainbow (Elmwood Springs  #2)', 'Ballantine Books'), ('The Probable Future', 'Ballantine Books'), ('The Bloody Crown of Conan (Conan the Cimmerian  #2)', 'Del Rey Ballantine Random House'), (\"Dragon's Kin (Pern  #17)\", 'Del Rey'), ('Yoda: Dark Rendezvous', 'Del Rey'), ('The Hunchback of Notre-Dame', 'Modern Library'), ('We Were Soldiers Once... and Young: Ia Drang - The Battle that Changed the War in Vietnam', 'Presidio Press'), ('The Star Wars Trilogy', 'Del Rey'), ('The Guns of August', 'Ballantine Books'), ('The Fortunate Pilgrim', 'Ballantine Books'), ('Interview with the Vampire (The Vampire Chronicles  #1)', 'Ballantine Books'), ('The Vampire Lestat (The Vampire Chronicles  #2)', 'Ballantine Books'), ('Sonnets', 'Simon Schuster'), ('Back When We Were Grownups', 'Ballantine Books'), ('Narrative of the Life of Frederick Douglass  an American Slave / Incidents in the Life of a Slave Girl', 'Modern Library'), ('Trump: The Art of the Deal', 'Ballantine Books'), ('Jennifer Government', 'Abacus'), ('Slightly Settled (Slightly  #2)', 'Red Dress Ink'), ('Monkey Business', 'Red Dress Ink'), (\"Girls' Night In\", 'Red Dress Ink'), ('Double-Cross (Athena Force #4)', 'Silhouette Bombshell'), (\"Elphame's Choice (Partholon  #4)\", 'Luna Books'), ('The Fairy Godmother (Five Hundred Kingdoms  #1)', 'Luna Books'), ('Sylvester', 'Harlequin'), ('Selected Verse', 'Farrar Straus and Giroux'), ('The Iliad', 'Farrar Straus and Giroux'), ('The Fixer', 'Farrar Straus and Giroux'), ('My Life', 'Knopf Publishing Group'), ('Sons of Mississippi: A Story of Race and Its Legacy', 'Vintage'), ('The Elegant Universe: Superstrings  Hidden Dimensions  and the Quest for the Ultimate Theory', 'Vintage Books USA'), ('The Adolescent', 'Vintage'), ('The Life and Opinions of Tristram Shandy  Gentleman', 'Modern Library'), ('Shutter Island', 'HarperTorch'), (\"Lamb: The Gospel According to Biff  Christ's Childhood Pal\", 'William Morrow / HarperCollins / Harper Perennial'), ('The Body in the Lighthouse', 'Avon'), ('The Cloud Atlas', 'Dial Press'), ('Coming of Age in Mississippi: The Classic Autobiography of a Young Black Girl in the Rural South', 'Delta'), ('A Painted House', 'Bantam'), ('Sailing the Wine-Dark Sea: Why the Greeks Matter', 'Anchor'), ('Good Faith', 'Anchor Books'), ('Will in the World: How Shakespeare Became Shakespeare', 'W.W. Norton & Company (NY/London)'), ('The Annotated Brothers Grimm', 'W. W. Norton Company'), ('The New Annotated Sherlock Holmes: The Complete Short Stories', 'W. W. Norton & Company'), ('The Complete Aubrey/Maturin Novels (5 Volumes)', 'W. W. Norton Company'), ('The 9/11 Commission Report: Final Report of the National Commission on Terrorist Attacks Upon the United States', 'W. W. Norton Company'), ('Moneyball: The Art of Winning an Unfair Game', 'W. W. Norton Company'), ('The 9/11 Commission Report: Final Report of the National Commission on Terrorist Attacks Upon the United States', 'W. W. Norton Company'), ('Paradise Lost', 'W. W. Norton & Company'), (\"Anton Chekhov's Selected Plays\", 'W. W. Norton & Company'), ('A History of Modern Europe  Volume 2: From the French Revolution to the Present', 'W. W. Norton & Company'), ('Madame Bovary (Critical Editions)', 'W.W. Norton & Company'), ('Raise the Titanic! (Dirk Pitt  #4)', \"G.P. Putnam's Sons\"), ('For Kicks', \"G.P. Putnam's Sons\"), ('Field of Thirteen', \"G.P. Putnam's Sons\"), ('The Bad Place', 'Berkley'), ('Wild Horses', \"G.P. Putnam's Sons\"), (\"Jane's Warlord (Warlord #1)\", 'Berkley Sensation'), ('Iceberg (Dirk Pitt  #3)', 'Berkley Books'), ('The Mediterranean Caper (Dirk Pitt  #2)', \"G.P. Putnam's Sons\"), ('10 lb Penalty', \"G.P. Putnam's Sons\"), ('Goddess of Spring (Goddess Summoning  #2)', 'Berkley Sensation'), ('Guilty Pleasures (Anita Blake  Vampire Hunter  #1)', 'Berkley'), (\"Death's Acre: Inside the Legendary Forensic Lab the Body Farm Where the Dead Do Tell Tales\", 'Berkley'), ('Blow Fly (Kay Scarpetta  #12)', 'Berkley'), ('Master of the Night (Mageverse #1)', 'Berkley Sensation'), (\"Wild Card (Tom Clancy's Power Plays  #8)\", 'Berkley'), ('Trojan Odyssey (Dirk Pitt  #17)', \"G.P. Putnam's Sons\"), ('Disordered Minds', 'Berkley'), ('Decider', \"G.P. Putnam's Sons\"), ('Murder on the Orient Express (Hercule Poirot  #10)', 'Berkley'), ('The Body Farm (Kay Scarpetta  #5)', 'Berkley'), (\"Splinter Cell (Tom Clancy's Splinter Cell  #1)\", 'Berkley'), ('Atlantis Found (Dirk Pitt  #15)', 'Berkley Trade'), ('Birds Without Wings', 'Secker'), ('Harry Potter and the Order of the Phoenix (Harry Potter  #5)', 'Scholastic Inc.'), ('Harry Potter and the Prisoner of Azkaban (Harry Potter  #3)', 'Scholastic Inc.'), ('Harry Potter Boxed Set  Books 1-5 (Harry Potter  #1-5)', 'Scholastic'), (\"Trickster's Choice (Daughter of the Lioness  #1)\", 'Scholastic Press'), ('Shopaholic Takes Manhattan (Shopaholic  #2)', 'Dell Publishing Company'), ('Shopaholic Ties the Knot (Shopaholic  #3)', 'Dell Publishing Company'), ('Masterpieces: The Best Science Fiction of the Twentieth Century', 'Ace Books'), ('Neuromancer', 'Ace'), ('The Big Bad Wolf  (Alex Cross  #9)', 'Grand Central Publishing'), ('Still Life With Crows (Pendergast  #4)', 'Grand Central Publishing'), ('Gloriana', 'Aspect'), ('Lost Boy Lost Girl', 'Ballantine Books'), ('No Second Chance', 'Dutton Books'), ('A Whole Lotta Love', 'Signet'), ('Night Over Water', 'NAL'), ('Monkeewrench (Monkeewrench  #1)', \"G.P. Putnam's Sons\"), (\"Mayada  Daughter of Iraq: One Woman's Survival Under Saddam Hussein\", 'Berkley Books'), ('The Agony and the Ecstasy: A Biographical Novel of Michelangelo', 'NAL'), ('Four Past Midnight', 'Signet'), ('The Anodyne Necklace (Richard Jury  #3)', 'Onyx'), ('The Dirty Duck (Richard Jury  #4)', 'Onyx'), ('Jerusalem Inn (Richard Jury  #5)', 'Onyx'), ('Wuthering Heights', 'Signet Classics'), ('Little Women', 'Signet Classics'), ('The Sea-Wolf and Selected Stories', 'Signet Classics'), ('Travels of Marco Polo', 'Signet'), ('Lies & the Lying Liars Who Tell Them: A Fair & Balanced Look at the Right', 'Plume Books'), ('Stolen (Women of the Otherworld  #2)', 'Plume'), ('Bitten (Otherworld  #1)', 'Plume Books'), ('Atlas Shrugged', 'NAL'), ('Astronomy: A Self-Teaching Guide', 'John Wiley & Sons'), ('The Philosophy of History', 'Dover Publications'), ('Anna Karenina', 'Dover Publications'), ('Love Bites (Argeneau #2)', 'Love Spell'), (\"Aphrodite's Flame (Superhero Central #4)\", 'Love Spell'), ('Cerulean Sins (Anita Blake  Vampire Hunter  #11)', 'Berkley Books'), ('After Glow (Ghost Hunters  #2)', 'Jove Books'), ('Cravings (Undead #1.5; Moon #3.5)', 'Berkley Books'), ('Sunshine', 'Jove'), ('Bite (Anita Blake  Vampire Hunter  #8.5; Sookie Stackhouse  #5.1; Undead  #2.5; Mageverse  #1.5)', 'Jove'), ('The Shell Seekers', 'Gramercy Books'), ('A History of God: The 4 000-Year Quest of Judaism  Christianity  and Islam', 'Gramercy Books'), ('Pathologies of Power: Health  Human Rights and the New War on the Poor', 'University of California Press'), ('Four & Twenty Blackbirds (Bardic Voices  #4)', 'Baen Books'), ('A First Course in String Theory', 'Cambridge University Press'), ('Data Structures and Algorithms in C++', 'Course Technology'), ('Deception Point', 'Corgi Books'), ('Not Without My Daughter', 'Transworld Publishers Ltd'), ('Inferno', 'Bantam Books'), ('Purgatorio (The Divine Comedy  #2)', 'Bantam Books'), ('Light (Kefahuchi Tract  #1)', 'Spectra'), ('The Face', 'Bantam'), ('The Murder Stone', 'Bantam'), ('Dime Store Magic (Women of the Otherworld  #3)', 'Bantam Spectra'), ('Industrial Magic (Women of the Otherworld #4)', 'Bantam Spectra'), ('Beach Girls', 'Bantam'), ('Foundation and Earth (Foundation #5)', 'Spectra'), ('The Devil in the White City: Murder  Magic and Madness at the Fair that Changed America', 'Bantam Press'), ('The Kid Stays in the Picture', 'Faber & Faber'), ('The Avignon Quintet: Monsieur  Livia  Constance  Sebastian and Quinx', 'Faber & Faber'), ('High Performance MySQL: Optimization  Backups  Replication & Load Balancing', \"O'Reilly Media\"), ('BSD Hacks', \"O'Reilly Media\"), ('iMovie 4 & iDVD: The Missing Manual: The Missing Manual', 'Pogue Press'), ('Rising Sun', 'Turtleback Books'), (\"Charlie Wilson's War: The Extraordinary Story of the Largest Cover Operation in History\", 'Turtleback Books'), ('Queen of Scots: The True Life of Mary Stuart', 'Houghton Mifflin'), ('The Best American Mystery Stories 2004', 'Mariner Books'), ('The Best American Nonrequired Reading 2004', 'Houghton Mifflin'), ('The Silmarillion', 'Houghton Mifflin Company'), ('The Earth and Its Peoples: A Global History  Volume C: Since 1750', 'Cengage Learning'), ('Fabulous Small Jews', 'Mariner Books'), ('Reefer Madness: Sex  Drugs  and Cheap Labor in the American Black Market', 'Mariner Books'), ('Dark Star Safari: Overland from Cairo to Cape Town', 'Mariner Books'), ('Natural Health  Natural Medicine', 'Mariner Books'), ('The Lord of the Rings (The Lord of the Rings  #1-3)', 'Houghton Mifflin Harcourt'), ('The Fellowship of the Ring (The Lord of the Rings  #1)', 'Houghton Mifflin Company'), ('In the Shadow of Young Girls in Flower (In Search of Lost Time  #2)', 'Viking Adult'), ('How to Stop Worrying and Start Living', 'Gallery Books'), ('Sharp Edges', 'Pocket Star Books'), ('The Color Purple', 'Pocket'), ('What Is Ancient Philosophy?', 'Belknap Press'), ('Magic Circles: The Beatles in Dream and History', 'Harvard University Press'), ('The Killer Angels: A Novel of the Civil War (The Civil War Trilogy  #2)', 'Modern Library'), ('The Collected Autobiographies of Maya Angelou', 'Modern Library'), ('Mortals', 'Vintage'), (\"Mary Stewart's Merlin Trilogy (Arthurian Saga  #1-3)\", 'Harper Voyager'), ('Nancy Drew: Girl Detective: #1-4', 'Aladdin'), ('Walden', 'Princeton University Press'), ('Shamanism: Archaic Techniques of Ecstasy', 'Princeton University Press'), ('Mary Queen of Scots and the Murder of Lord Darnley', 'Pimlico'), ('Robbins and Cotran Review of Pathology', 'Saunders'), ('Hell House', 'Severn House Publishers'), ('Code Complete', 'Microsoft Press'), (\"Zolar's Encyclopedia and Dictionary of Dreams: Fully Revised and Updated for the 21st Century\", 'Atria Books'), ('Authentic Happiness: Using the New Positive Psychology to Realize Your Potential for Lasting Fulfillment', 'Atria Books'), ('Brick Lane', 'Scribner'), (\"Will You Miss Me When I'm Gone? The Carter Family and Their Legacy in American Music\", 'Simon Schuster'), ('Wrapped in Rainbows: The Life of Zora Neale Hurston', 'Scribner'), ('Plan of Attack', 'Simon & Schuster'), ('Frankenstein', 'Kaplan Publishing'), ('The Path Between the Seas: The Creation of the Panama Canal  1870-1914', 'Simon Schuster'), ('The 7 Habits of Highly Effective People: Powerful Lessons in Personal Change', 'Free Press'), ('The Other Boleyn Girl', 'Atria Books'), ('The Good Earth (House of Earth  #1)', 'Washington Square Press'), ('Plain Truth', 'Atria Books'), ('The Coffin Dancer (Lincoln Rhyme  #2)', 'Simon & Schuster'), ('The Second Time Around', 'Pocket Books'), ('Nighttime Is My Time', 'Simon & Schuster Adult Publishing Group'), ('Black Cat (Gemini  #2)', 'Pocket Books'), ('The Vanished Man (Lincoln Rhyme  #5)', 'Pocket Books'), ('The Footprints of God', 'Pocket Star Books'), ('The Price of Pleasure (Sutherland Brothers  #2)', 'Pocket Books'), ('Dead I Well May Be (Dead Trilogy #1)', 'Pocket Books'), ('Romeo and Juliet', 'Simon Schuster'), ('Othello', 'Simon Schuster'), ('Underworld: Blood Enemy (Underworld  #2)', 'Pocket Star'), ('King Lear', 'Simon Schuster'), ('Othello', 'Simon Schuster'), ('Richard III', 'Simon Schuster'), ('Easy Prey (Lucas Davenport  #11)', 'Simon & Schuster'), ('Certain Prey (Lucas Davenport  #10)', 'Simon & Schuster'), ('Henry V', 'Washington Square Press'), ('The Count of Monte Cristo', 'Simon Schuster'), ('The Scarlet Letter', 'Simon & Schuster'), ('Frankenstein  or the Modern Prometheus', 'Pocket Books'), ('A Tale of Two Cities', 'Simon Schuster'), ('The Awakening and Selected Stories', 'Simon Schuster'), ('The Scarlet Pimpernel', 'Simon Schuster'), ('Twisted: The Collected Short Stories', 'Pocket Books'), ('Dracula', 'Walker Books Ltd'), ('To the Nines (Stephanie Plum  #9)', \"St. Martin's Press\"), ('The Dream Kingdom (The Morland Dynasty  #26)', 'Little Brown Book Group'), ('The Bourne Ultimatum (Jason Bourne  #3)', 'Orion'), ('The Icarus Agenda', 'Orion Books'), ('Trevayne', 'Orion'), ('The Shadow of the Wind', 'Phoenix'), ('The Jester', 'Headline'), ('Falling for You', 'Headline Review'), ('Joust (Dragon Jousters  #1)', 'DAW'), ('The War of the Flowers', 'DAW'), (\"Exile's Valor (Heralds of Valdemar  #7)\", 'DAW'), ('The DC Comics Encyclopedia', 'DK Publishing'), ('Lemon Meringue Pie Murder (Hannah Swensen  #4)', 'Kensington'), ('Corvette: Fifty Years', 'Motorbooks'), ('PHP and MySQL for Dummies', 'For Dummies'), ('ebay Timesaving Techniques for Dummies', 'Wiley'), ('Starting an eBay Business for Dummies', 'Wiley'), ('Dreamer of Dune: The Biography of Frank Herbert', 'Tor Books'), ('Maps in a Mirror: The Short Fiction of Orson Scott Card', 'Orb Books'), ('Sleeping in Flame (Answered Prayers  #2)', 'Orb Books'), ('Wasteland of Flint', 'Tor Books'), ('Naked Empire (Sword of Truth  #8)', 'Tor Books'), ('Wolfskin (Saga of the Light Isles  #1)', 'Tor Books'), ('New Threads in the Pattern: The Great Hunt  Part 2 (Wheel of Time  #2-2)', 'Starscape'), ('A Short History of Nearly Everything', 'Broadway Books'), ('Babyville', 'Broadway Books'), ('The Full Matilda', 'Broadway Books'), ('Holy Cow: An Indian Adventure', 'Broadway Books'), ('The Prize (deWarenne Dynasty  #4)', 'Mira Books'), ('Marvels', 'Marvel Comics Group'), ('Essential Monster of Frankenstein  Vol. 1', 'Marvel Comics'), ('The Origin of Species', 'Castle Books'), ('Island Of Bones (Louis Kincaid  #5)', 'Pinnacle'), ('The Mammoth Book of Storms  Shipwrecks and Sea Disasters', 'Running Press'), ('Summerland', 'Miramax'), ('The Legend of Huma (Dragonlance: Heroes  #1)', 'Wizards of the Coast'), ('Time of the Twins (Dragonlance: Legends  #1)', 'Wizards of the Coast'), ('The Search for Power (Dragonlance: Tales from the War of Souls  #3)', 'Wizards of the Coast'), ('Night of Blood (Dragonlance: The Minotaur Wars  #1)', 'Wizards of the Coast'), ('Dragons in the Archives: The Best of Weis & Hickman (Dragonlance Anthology)', 'Wizards of the Coast'), ('In Focus: National Geographic Greatest Portraits', 'National Geographic Society'), ('Cruelest Journey: Six Hundred Miles To Timbuktu', 'National Geographic Society'), ('The Odyssey (New Translations from Antiquity)', 'Johns Hopkins University Press'), (\"Charlie Wilson's War: The Extraordinary Story of How the Wildest Man in Congress and a Rogue CIA Agent Changed the History of our Times\", 'Grove Press'), ('Monster: The Autobiography of an L.A. Gang Member', 'Grove Press'), ('Layer Cake', 'Grove Press Black Cat'), ('The Second World War: A Complete History', 'Holt McDougal'), (\"Hegemony or Survival: America's Quest for Global Dominance\", 'Holt McDougal'), ('The Origins of Totalitarianism', 'Schocken Books'), ('Once Upon a Gulf Coast Summer', 'B Fiction'), ('Anna Karenina', 'Wildside Press'), ('Drum Into Silence (Drums of Chaos  #3)', 'Tor Fantasy'), ('The Scientists: A History of Science Told Through the Lives of Its Greatest Inventors', 'Random House Trade Paperbacks'), ('The Birth of Venus', 'Random House'), ('The Knight of Maison-Rouge', 'Modern Library'), ('Selected Stories', 'Modern Library'), ('Kim', 'Modern Library'), ('The Red and the Black', 'Modern Library'), ('The Mysterious Island (Extraordinary Voyages  #12)', 'Modern Library'), ('Mountains Beyond Mountains: The Quest of Dr. Paul Farmer  a Man Who Would Cure the World', 'Random House Trade'), ('Filth: Dirt  Disgust  and Modern Life', 'Univ Of Minnesota Press'), ('Weekend Warriors (Sisterhood  #1)', 'Kensington'), ('See How She Dies', 'Zebra Books'), ('Courageous Faith Through the Year', 'IVP Books'), ('Rejoice (Redemption  #4)', 'Tyndale House Publishers'), ('Reunion (Redemption  #5)', 'Tyndale House Publishers'), ('Sweet Revenge', 'Leisure Books'), ('The Deed (Deed  #1)', 'Leisure Books'), ('Nightmare House (Harrow House  #1)', 'Leisure Books'), ('The Chase (Deed  #3)', 'Leisure Books'), ('Blood Moon Over Bengal', 'Leisure Books'), ('History of Beauty', 'Rizzoli'), ('Blink', 'Thomas Nelson'), ('Tuscan Countess: The Life and Extraordinary Times of Matilda of Canossa', 'Vendome Press'), ('Republic', 'Hackett Publishing Company Inc.'), ('The St. Paul Stories of F. Scott Fitzgerald', 'Minnesota Historical Society Press'), (\"A Gateway to Sindarin: A Grammar of an Elvish Language from J.R.R. Tolkien's Lord of the Rings\", 'University of Utah Press'), ('Harpo Speaks!', 'Limelight Editions'), ('Bioinformatics: Sequence and Genome Analysis', 'Cold Spring Harbor Laboratory Press'), ('The Elements of Typographic Style', 'Hartley & Marks Publishers'), ('The Complete I Ching: The Definitive Translation', 'Inner Traditions International'), ('The Criss Cross', 'Melodrama Publishing'), (\"Programming Ruby: The Pragmatic Programmers' Guide\", 'Pragmatic Bookshelf'), ('Plants and Landscapes for Summer-Dry Climates of the San Francisco Bay Region', 'East Bay Municipal Utility District'), ('Natural Cures \"They\" Don\\'t Want You to Know about', 'Alliance Publishing'), ('The Dogs of Riga (Kurt Wallander  #2)', 'Vintage Crime/Black Lizard'), ('The Secret History', 'Vintage'), ('Beloved', 'Vintage'), ('Song of Solomon', 'Vintage'), ('Tar Baby', 'Vintage'), ('Providence of a Sparrow: Lessons from a Life Gone to the Birds', 'Anchor'), ('Living to Tell the Tale', 'Vintage'), (\"Lidia's Family Table\", 'Knopf Publishing Group'), (\"The Prime of Miss Jean Brodie / The Girls of Slender Means / The Driver's Seat / The Only Problem\", \"Everyman's Library\"), ('The Plague  The Fall  Exile and the Kingdom  and Selected Essays', \"Everyman's Library\"), ('Runaway', 'Alfred A. Knopf'), ('Dead Souls', \"Everyman's Library\"), (\"The Last Hours of Ancient Sunlight: The Fate of the World and What We Can Do Before It's Too Late\", 'Broadway Books'), (\"FDR's Folly: How Roosevelt and His New Deal Prolonged the Great Depression\", 'Crown Forum'), ('Titan: The Life of John D. Rockefeller  Sr.', 'Vintage'), ('The Filth', 'Vertigo'), ('On the Road to Perdition \u2014 Oasis  Sanctuary  and Detour \u2014 (Road to Perdition  #2)', 'DC Comics'), ('Pledged: The Secret Life of Sororities', 'Hyperion'), ('Scar Tissue', 'Hachette Books'), ('Feast: Food to Celebrate Life', 'Hachette Books'), (\"Jamie's Dinners: The Essential Family Cookbook\", 'Hachette Books'), ('Illustrated Guide to the NEC: Based on the 2005 National Electric Code', 'Cengage Learning'), ('Little Women (Little Women  #1)', 'Sterling'), (\"Kushiel's Avatar (Ph\u00e8dre's Trilogy  #3)\", 'Tor'), ('The English Novel: An Introduction', 'Wiley-Blackwell'), ('The Radical Right & the Murder of John F. Kennedy: Stunning Evidence in the Assassination of the President', 'Trafford Publishing'), ('The Best Short Stories of Edith Wharton', 'Kessinger Publishing'), ('Katherine', 'Chicago Review Press'), (\"Not Your Mother's Slow Cooker Cookbook\", 'Harvard Common Press'), ('The Mother', 'Moyer Bell and its subsidiaries'), ('Kinfolk', 'Moyer Bell and its subsidiaries'), ('Expelled from Eden: A William T. Vollmann Reader', 'Da Capo Press'), ('Enslaved by Ducks', 'Algonquin Books'), ('On Genesis/A Refutation of the Manichees/The Unfinished Literal Meaning of Genesis (Works of St Augustine 1)', 'New City Press'), ('Selected Poems of Herman Melville', 'David R. Godine Publisher'), ('Africa South of the Sahara: A Geographical Interpretation (Texts In Regional Geography)', 'The Guilford Press'), ('The Story of Philosophy', 'AudioGO'), ('The Letters of Vita Sackville-West and Virginia Woolf', 'Cleis Press'), ('1000 Rings: Inspiring Adornments for the Hand', 'Lark Books'), ('Prophet', 'Crossway Books'), ('Chop Shop (Bug Man  #2)', 'Howard Books'), ('The Stones of Summer', 'Overlook Press'), ('Cocktail Time', 'Harry N. Abrams'), ('Piccadilly Jim', 'Harry N. Abrams'), ('The Big Book of Boy Stuff', 'Gibbs Smith Publishers'), (\"Heart & Hands: A Midwife's Guide to Pregnancy & Birth\", 'Celestial Arts'), (\"The Music of the Republic: Essays on Socrates' Conversations and Plato's Writings\", 'Paul Dry Books'), ('Open Secrets / Inward Prospects: Reflections on World and Soul', 'Paul Dry Books'), ('The Ivory Tower', 'NYRB Classics'), ('The Wave in the Mind: Talks and Essays on the Writer  the Reader and the Imagination', 'Shambhala'), ('A Guide to the Words of My Perfect Teacher', 'Shambhala'), ('Joel on Software', 'Apress'), ('Tuf Voyaging', 'Meisha Merlin Publishing'), ('The Brothers Karamazov', 'Barnes Noble Classics'), ('The Idiot', 'Barnes Noble Classics'), ('Essential Tales and Poems', 'Barnes Noble Classics'), ('The Portrait of a Lady', 'Barnes Noble Classics'), ('Sense and Sensibility', 'Barnes & Noble'), ('A Tale of Two Cities', 'Barnes & Noble Classics'), ('The Three Musketeers', 'Barnes Noble Classics'), ('The House of Mirth', 'Barnes Noble Classics'), ('Anna Karenina', 'Barnes & Noble'), ('Oliver Twist', 'Barnes Noble Classics'), ('Pride and Prejudice', 'Barnes Noble Classics'), ('A Tale of Two Cities', 'Barnes Noble Classics'), ('Sense and Sensibility', 'Barnes & Noble'), ('Write Great Code: Volume 1: Understanding the Machine', 'No Starch Press'), ('The Nature of Play: Great Apes and Humans', 'The Guilford Press'), ('The Lovely Bones', 'Large Print Press'), ('The Zanzibar Chest', 'Riverhead Books'), (\"The Magicians' Guild (Black Magician Trilogy  #1)\", 'Orbit'), ('The Novice (Black Magician Trilogy  #2)', 'Orbit'), ('The High Lord (Black Magician Trilogy  #3)', 'Orbit'), ('Desiring God: Meditations of a Christian Hedonist', 'Inter-Varsity Press'), (\"The Prime of Miss Jean Brodie / The Girls of Slender Means / The Driver's Seat / The Only Problem\", 'Random House'), ('Architecture and Tourism: Perception  Performance and Place', 'Bloomsbury Academic'), ('Watchfiends and Rack Screams: Works from the Final Period', 'Exact Change'), (\"Harrington on Hold 'em: Expert Strategy for No-Limit Tournaments  Volume I: Strategic Play\", 'Two Plus Two Publishing LLC'), ('Her Smoke Rose Up Forever', 'Tachyon Publications'), (\"The Devil's in the Details (A Camilla MacPhee Mystery  #4)\", 'Napoleon and Co'), ('Judas Pig', 'Do-Not Press'), ('Little Women', \"Collector's Library\"), ('Collected Stories I: Gimpel the Fool to The Letter Writer', 'Library of America'), ('Collected Stories III: One Night in Brazil to The Death of Methuselah', 'Library of America'), (\"McSweeney's #14\", \"McSweeney's\"), ('Think and Grow Rich', 'High Roads Media'), ('Under the Influence: The Disinformation Guide to Drugs', 'The Disinformation Company (NYC)'), ('\u041c\u0430\u0441\u0442\u0435\u0440 \u0438 \u041c\u0430\u0440\u0433\u0430\u0440\u0438\u0442\u0430', '\u042d\u043a\u0441\u043c\u043e'), ('El club Dante', 'Seix Barral'), ('Ahora sabr\u00e9is lo que es correr', 'Mondadori'), ('El hombre duplicado', 'Punto de Lectura'), ('El azul de la virgen', 'Punto de Lectura'), ('Harry Potter y la Orden del F\u00e9nix (Harry Potter  #5)', 'Emece Editores'), ('El umbral de la noche', 'Debolsillo'), ('O Xar\u00e1', 'Companhia das Letras'), ('Narraciones Extraordinarias', 'Panamericana Editorial'), ('Zaat', 'American University in Cairo Press'))", "rowcount": 528, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 400, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Saints',), ('Lovelock (Mayflower Trilogy  #1)',), ('Legends',), ('Sarah (Women of Genesis  #1)',), ('Shadow of the Hegemon (The Shadow Series  #2)',), ('How to Write Science Fiction & Fantasy',), (\"X\u00e9nocide (Ender's Saga  #3)\",))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Saints',), ('Lovelock (Mayflower Trilogy  #1)',), ('Legends',), ('Sarah (Women of Genesis  #1)',), ('Shadow of the Hegemon (The Shadow Series  #2)',), ('How to Write Science Fiction & Fantasy',), (\"X\u00e9nocide (Ender's Saga  #3)\",))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 401, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 402, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 403, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((25.260960334029228,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((25.260960334029228,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 404, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2020',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2020.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 3}
{"sql_id": 405, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Witness for the Prosecution and Selected Plays',), ('She Came to Stay',), ('The Collection: The Outsiders / Rumble Fish / That Was Then  This Is Now',), ('The Love of the Last Tycoon',), ('Heart Songs and Other Stories',), ('Reason in History',), ('Tyranny of the Majority: Fundamental Fairness in Representative Democracy',), ('Mrs. Piggle-Wiggle Treasury (Mrs. Piggle Wiggle  #1-2  #4)',), ('Embracing the Love of God: The Path and Promise of Christian Life',), ('Cathedral  Forge  and Waterwheel: Technology and Invention in the Middle Ages',), (\"Laura Ingalls Wilder Country: The People and places in Laura Ingalls Wilder's life and books\",), ('Imajica: The Reconciliation',), ('The Pilgrimage: A Contemporary Quest for Ancient Wisdom',), ('Betsy and Joe (Betsy-Tacy  #8)',), ('Betsy Was a Junior (Betsy-Tacy  #7)',), ('Crazy Lady!',), ('Seven Spiders Spinning (The Hamlet Chronicles  #1)',), ('American Dragons: Twenty-five Asian American Voices',), ('Winter Days in the Big Woods',), ('The Professor of Desire',), ('The Rings of Saturn',), ('Slow Learner: Early Stories',), (\"Midnight's Children\",), ('Five Patients',), (\"Love's Executioner  And Other Tales Of Psychotherapy\",), ('The Assault',), (\"The Monkey's Wrench\",), ('Six Characters in Search of an Author and Other Plays',), ('Harvesting the Heart',), ('The Basketball Diaries',), ('The Making of Pride and Prejudice',), ('Great Expectations',), ('Anne Frank Beyond the Diary: A Photographic Remembrance',), ('Oddballs',), ('What is Art?',), ('The Railway Children',), ('Billy Budd  Sailor',), ('Fire: From A Journal of Love - The Unexpurgated Diary of Ana\u00efs Nin (1934-1937)',), ('How to Travel with a Salmon and Other Essays',), ('The Metamorphoses of Ovid',), ('Winterdance: The Fine Madness of Running the Iditarod',), ('Roald Dahl: A Biography',), ('This Is the Way the World Ends',), ('View With a Grain of Sand: Selected Poems',), (\"Paul Revere's Ride\",), ('Justice Oliver Wendell Holmes: Law and the Inner Self',), ('Aristophanes and Athens: An Introduction to the Plays',), ('The Mythical Man-Month: Essays on Software Engineering',), ('Bengal Nights',), ('A Dance to the Music of Time: 1st Movement (A Dance to the Music of Time  #1-3)',), ('A Dance to the Music of Time: 2nd Movement (A Dance to the Music of Time  #4-6)',), ('A Dance to the Music of Time: 3rd Movement (A Dance to the Music of Time  #7-9)',), ('A Dance to the Music of Time: 4th Movement (A Dance to the Music of Time  #10-12)',), (\"Dante's Inferno\",), ('The Shaping of America: A Geographical Perspective on 500 Years of History: Volume 2: Continental America  1800-1867',), (\"White Man's Grave\",), ('Isak Dinesen: The Life of a Storyteller',), ('The Wild Shore (Three Californias Triptych  #1)',), ('The Gold Coast (Three Californias Triptych  #2)',), ('Pacific Edge (Three Californias Triptych  #3)',), ('Earthborn (Homecoming Saga #5)',), ('The Edge of Honor',), (\"The Scold's Bridle\",), ('Rose in Bloom (Eight Cousins  #2)',), ('Cry to Heaven',), ('The Vampire Companion',), ('The Shockwave Rider',), ('The Age of Extremes: The Short Twentieth Century  1914-1991',), ('P.S. I Love You (Sealed with a Kiss #4)',), ('First Love  Second Chance',), ('The Night of Wishes',), ('The Sixteen Pleasures',), ('Running from Safety: An Adventure of the Spirit',), (\"Black Holes & Time Warps: Einstein's Outrageous Legacy\",), ('Excellence',), ('Frankenstein',), ('Jesus the Son of Man',), (\"Revenge of the Lawn / The Abortion / So the Wind Won't Blow it All Away\",), ('The Old Way of Seeing: How Architecture Lost Its Magic - And How to Get It Back',), (\"McNally's Caper (Archy McNally  #4)\",), ('The Key to Midnight',), ('Debt of Honor (Jack Ryan  #7)',), ('A Pinch of Poison (Hemlock Falls Mysteries  #3)',), ('Escape from Fire Mountain (World of Adventure  #3)',), ('A Ring of Endless Light (Austin Family  #4)',), ('Fantastic Alice',), ('Nothing Lasts Forever',), ('Prime Time',), ('Death of a Charming Man (Hamish Macbeth  #10)',), ('Season of the Machete',), ('Charade',), ('Night Train to Memphis (Vicky Bliss  #5)',), (\"Fannie Flagg's Original Whistle Stop Cafe Cookbook\",), ('Four Past Midnight: Featuring \"The Langoliers\"',), ('Nightfall',), ('Angel Christmas',), ('The Forest House (Avalon  #2)',), ('Here I Stand: A Life of Martin Luther',), ('The Armies of the Night: History as a Novel  the Novel as History',), ('Holiday Romance and Other Writings for Children',), ('Extraordinary Popular Delusions and the Madness of Crowds/Confusi\u00f3n de Confusiones (Marketplace Book)',), ('The Oil Jar and Other Stories',), ('The Birth of Tragedy',), ('Arms and Armor: A Pictorial Archive from Nineteenth-Century Sources',), ('Three Complete Xanth Novels (Xanth  #1-3)',), ('Children of the Thunder / The Tides of Time / The Crucible of Time',), (\"Cat's Cradle/God Bless You Mr. Rosewater/Breakfast of Champions\",), ('Setting Free the Bears / The Water-Method Man / The 158-Pound Marriage',), ('The Complete Novels',), ('Fine Lines (One-Eyed Mack  #6)',), ('Of Love and Other Demons',), ('The Orion Mystery: Unlocking the Secrets of the Pyramids',), (\"Foucault's Virginity: Ancient Erotic Fiction & the History of Sexuality (Stanford Memorial Lecture)\",), ('The New Knighthood: A History of the Order of the Temple',), ('The Hot Zone: The Chilling True Story of an Ebola Outbreak',), ('Feersum Endjinn',), ('Judge Dredd (Audio Cassette)',), ('The Celestine Prophecy: An Experiential Guide',), ('I. Asimov',), (\"Heaven's Price\",), ('Lords of the Sky',), ('The Seventh Gate (The Death Gate Cycle  #7)',), (\"Finnegan's Week\",), ('Lines and Shadows',), (\"The Goon Show  Volume 11: He's Fallen in the Water!\",), ('The Last Temptation',), ('If I Die In A Combat Zone',), ('How Much is That Guinea Pig in the Window?',), ('The Leader In You: How to Win Friends  Influence People and Succeed in a Changing World',), ('Sahara (Dirk Pitt  #11)',), ('Star Trek: Logs 7-10',), ('A Place Where the Sea Remembers',), ('New Worlds  Ancient Texts: The Power of Tradition and the Shock of Discovery',), ('The Roman Empire',), ('Children of Heracles / Hippolytus / Andromache / Hecuba',), ('The Divine Comedy',), ('Rabbit Angstrom: The Four Novels',), ('Cancer Ward',), ('The Great American Novel',), ('Democracy',), ('A Book of Common Prayer',), ('The Death of Virgil',), ('The Son Avenger (The Master of Hestviken  #4)',), ('Open Secrets',), (\"The Reed Cutter & Captain Shigemoto's Mother\",), ('When She Was Good',), ('Quicksand',), (\"In Pharaoh's Army: Memories of the Lost War\",), ('The Makioka Sisters',), ('Blues for Mister Charlie',), ('Going to Meet the Man',), ('Aman: The Story of a Somali Girl',), ('Three Plays: Desire Under the Elms / Strange Interlude / Mourning Becomes Electra',), (\"Corelli's Mandolin\",), ('Resistance  Rebellion and Death: Essays',), ('Selected Stories',), ('Les Miserables (Stepping Stones)',), ('Daisy-Head Mayzie',), ('A Frolic of His Own',), ('The Great Gatsby',), ('A Life in Letters',), ('The Pat Hobby Stories',), ('No Ordinary Time: Franklin and Eleanor Roosevelt: The Home Front in World War II',), ('Achilles in Vietnam: Combat Trauma and the Undoing of Character',), ('The Reawakening',), ('Survival in Auschwitz',), ('Trapped in the Mirror: Adult Children of Narcissists in Their Struggle for Self',), ('Julius  the Baby of the World',), ('The Fourth of July Story',), ('Come a Stranger (Tillerman Cycle  #5)',), ('The Moon Lady',), ('Unpainted to the Last: \"Moby Dick\" and Twentieth-century American Art',), ('Mondrian',), ('The Painter of Modern Life and Other Essays (Phaidon Arts and Letters)',), ('Red Phoenix',), ('Different Seasons',), (\"The Wealthy Barber: Everyone's Common-Sense Guide to Becoming Financially Independent\",), ('Something Borrowed',), ('Bad Dreams',), ('Sparrow Hawk Red',), ('Love',), ('Bob Marley - Songs of Freedom',), ('Lectures on the History of Philosophy 1: Greek Philosophy to Plato',), ('The Complete Stories',), ('The Forgotten',), ('Anti-Semite and Jew: An Exploration of the Etiology of Hate',), ('The Trial of God: (as it was held on February 25  1649  in Shamgorod)',), ('The Complete Stories',), ('Warfare in the Classical World: An Illustrated Encyclopedia of Weapons  Warriors  and Warfare in the Ancient Civilizations of Greece and Rome',), (\"The Last Book of Swords: Shieldbreaker's Story (Lost Swords  #8)\",), ('Lord of Chaos (The Wheel of Time  #6)',), ('The Ships of Earth (Homecoming Saga #3)',), ('Harpy Thyme (Xanth #17)',), ('Geis of the Gargoyle (Xanth #18)',), ('The Little Baby Snoogle-Fleejer',), ('Practice! Practice!: A Latin Via Ovid Workbook',), ('You Can Never Go Home Again',), ('The Camera (Ansel Adams Photography  #1)',), ('The Negative (Ansel Adams Photography  #2)',), ('The Print (Ansel Adams Photography  #3)',), ('Six Degrees of Separation',), ('Cigarettes Are Sublime',), ('The Calvin and Hobbes Tenth Anniversary Book',), (\"Romanee Conti: The World's Most Fabled Wine\",), ('Moon in a Dewdrop: Writings of Zen Master Dogen',), ('Fire in the Sky (Diadem: Shadowsong  #1)',), ('Storm Warning (Valdemar: Mage Storms #1)',), ('Walking the Rez Road',), ('Dalit: The Black Untaouchables of India',), ('Ghosts of Gettysburg III: Spirits  Apparitions  and Haunted Places of the Battlefield',), ('Novels and Stories',), ('The Ethics of Rhetoric',), ('Pyramids of Montauk: Explorations in Consciousness',), (\"Cook's Illustrated 1995 (Cook's Illustrated Annuals)\",), ('When the World Was Steady',), ('From Far Away',), ('The Belly of Paris (Les Rougon-Macquart  #3)',), ('Keeping Faith: Memoirs of a President',), ('Intimate Communion: Awakening Your Sexual Essence',), ('East Wind: West Wind',), ('A Guided Tour of 5 Works by Plato: Euthyphro/Apology/Crito/Phaedo/Cave',), (\"Meditations for Manifesting: Morning and Evening Meditations to Literally Create Your Heart's Desire\",), ('The Mystery Play',), ('Prince of the City',), ('Lies My Teacher Told Me: Everything Your History Textbook Got Wrong',), ('World War 3 Illustrated: Confrontational Comics',), ('Arcadia',), ('The Azathoth Cycle: Tales of the Blind Idiot God',), ('The Return of Lum  Volume 1: Urusei Yatsura (Urusei Yatsura  #2)',), ('Gunslinger and Nine Other Action-Packed Stories of the Wild West',), ('Desolation Angels',), ('The Western Canon: The Books and School of the Ages',), ('Illuminata: A Return to Prayer',), ('Fantastic Mr. Fox (Cover to Cover)',), ('One Hundred Years Of Solitude',), ('The Bridge over the Drina',), ('The Transit of Venus',), ('Collected Poems  Prose  and Plays',), ('Stories and Early Novels: Pulp Stories / The Big Sleep / Farewell  My Lovely / The High Window',), ('Later Novels and Other Writings: The Lady in the Lake / The Little Sister / The Long Goodbye / Playback / Double Indemnity (screenplay) / Selected Essays and Letters',), (\"Edward Lear's Book of Nonsense: With Lear's Original Illustrations\",), ('En attendant Godot',), ('Premi\u00e8res Histoires',), ('The Art of Richard P. Feynman',), ('April  May und June',), ('Homo faber: Ein Bericht.',), ('La m\u00e1quina de follar',), ('El Hotel New Hampshire',), ('Relato de Um N\u00e1ufrago',))", "rowcount": 249, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Witness for the Prosecution and Selected Plays',), ('She Came to Stay',), ('The Collection: The Outsiders / Rumble Fish / That Was Then  This Is Now',), ('The Love of the Last Tycoon',), ('Heart Songs and Other Stories',), ('Reason in History',), ('Tyranny of the Majority: Fundamental Fairness in Representative Democracy',), ('Mrs. Piggle-Wiggle Treasury (Mrs. Piggle Wiggle  #1-2  #4)',), ('Embracing the Love of God: The Path and Promise of Christian Life',), ('Cathedral  Forge  and Waterwheel: Technology and Invention in the Middle Ages',), (\"Laura Ingalls Wilder Country: The People and places in Laura Ingalls Wilder's life and books\",), ('Imajica: The Reconciliation',), ('The Pilgrimage: A Contemporary Quest for Ancient Wisdom',), ('Betsy and Joe (Betsy-Tacy  #8)',), ('Betsy Was a Junior (Betsy-Tacy  #7)',), ('Crazy Lady!',), ('Seven Spiders Spinning (The Hamlet Chronicles  #1)',), ('American Dragons: Twenty-five Asian American Voices',), ('Winter Days in the Big Woods',), ('The Professor of Desire',), ('The Rings of Saturn',), ('Slow Learner: Early Stories',), (\"Midnight's Children\",), ('Five Patients',), (\"Love's Executioner  And Other Tales Of Psychotherapy\",), ('The Assault',), (\"The Monkey's Wrench\",), ('Six Characters in Search of an Author and Other Plays',), ('Harvesting the Heart',), ('The Basketball Diaries',), ('The Making of Pride and Prejudice',), ('Great Expectations',), ('Anne Frank Beyond the Diary: A Photographic Remembrance',), ('Oddballs',), ('What is Art?',), ('The Railway Children',), ('Billy Budd  Sailor',), ('Fire: From A Journal of Love - The Unexpurgated Diary of Ana\u00efs Nin (1934-1937)',), ('How to Travel with a Salmon and Other Essays',), ('The Metamorphoses of Ovid',), ('Winterdance: The Fine Madness of Running the Iditarod',), ('Roald Dahl: A Biography',), ('This Is the Way the World Ends',), ('View With a Grain of Sand: Selected Poems',), (\"Paul Revere's Ride\",), ('Justice Oliver Wendell Holmes: Law and the Inner Self',), ('Aristophanes and Athens: An Introduction to the Plays',), ('The Mythical Man-Month: Essays on Software Engineering',), ('Bengal Nights',), ('A Dance to the Music of Time: 1st Movement (A Dance to the Music of Time  #1-3)',), ('A Dance to the Music of Time: 2nd Movement (A Dance to the Music of Time  #4-6)',), ('A Dance to the Music of Time: 3rd Movement (A Dance to the Music of Time  #7-9)',), ('A Dance to the Music of Time: 4th Movement (A Dance to the Music of Time  #10-12)',), (\"Dante's Inferno\",), ('The Shaping of America: A Geographical Perspective on 500 Years of History: Volume 2: Continental America  1800-1867',), (\"White Man's Grave\",), ('Isak Dinesen: The Life of a Storyteller',), ('The Wild Shore (Three Californias Triptych  #1)',), ('The Gold Coast (Three Californias Triptych  #2)',), ('Pacific Edge (Three Californias Triptych  #3)',), ('Earthborn (Homecoming Saga #5)',), ('The Edge of Honor',), (\"The Scold's Bridle\",), ('Rose in Bloom (Eight Cousins  #2)',), ('Cry to Heaven',), ('The Vampire Companion',), ('The Shockwave Rider',), ('The Age of Extremes: The Short Twentieth Century  1914-1991',), ('P.S. I Love You (Sealed with a Kiss #4)',), ('First Love  Second Chance',), ('The Night of Wishes',), ('The Sixteen Pleasures',), ('Running from Safety: An Adventure of the Spirit',), (\"Black Holes & Time Warps: Einstein's Outrageous Legacy\",), ('Excellence',), ('Frankenstein',), ('Jesus the Son of Man',), (\"Revenge of the Lawn / The Abortion / So the Wind Won't Blow it All Away\",), ('The Old Way of Seeing: How Architecture Lost Its Magic - And How to Get It Back',), (\"McNally's Caper (Archy McNally  #4)\",), ('The Key to Midnight',), ('Debt of Honor (Jack Ryan  #7)',), ('A Pinch of Poison (Hemlock Falls Mysteries  #3)',), ('Escape from Fire Mountain (World of Adventure  #3)',), ('A Ring of Endless Light (Austin Family  #4)',), ('Fantastic Alice',), ('Nothing Lasts Forever',), ('Prime Time',), ('Death of a Charming Man (Hamish Macbeth  #10)',), ('Season of the Machete',), ('Charade',), ('Night Train to Memphis (Vicky Bliss  #5)',), (\"Fannie Flagg's Original Whistle Stop Cafe Cookbook\",), ('Four Past Midnight: Featuring \"The Langoliers\"',), ('Nightfall',), ('Angel Christmas',), ('The Forest House (Avalon  #2)',), ('Here I Stand: A Life of Martin Luther',), ('The Armies of the Night: History as a Novel  the Novel as History',), ('Holiday Romance and Other Writings for Children',), ('Extraordinary Popular Delusions and the Madness of Crowds/Confusi\u00f3n de Confusiones (Marketplace Book)',), ('The Oil Jar and Other Stories',), ('The Birth of Tragedy',), ('Arms and Armor: A Pictorial Archive from Nineteenth-Century Sources',), ('Three Complete Xanth Novels (Xanth  #1-3)',), ('Children of the Thunder / The Tides of Time / The Crucible of Time',), (\"Cat's Cradle/God Bless You Mr. Rosewater/Breakfast of Champions\",), ('Setting Free the Bears / The Water-Method Man / The 158-Pound Marriage',), ('The Complete Novels',), ('Fine Lines (One-Eyed Mack  #6)',), ('Of Love and Other Demons',), ('The Orion Mystery: Unlocking the Secrets of the Pyramids',), (\"Foucault's Virginity: Ancient Erotic Fiction & the History of Sexuality (Stanford Memorial Lecture)\",), ('The New Knighthood: A History of the Order of the Temple',), ('The Hot Zone: The Chilling True Story of an Ebola Outbreak',), ('Feersum Endjinn',), ('Judge Dredd (Audio Cassette)',), ('The Celestine Prophecy: An Experiential Guide',), ('I. Asimov',), (\"Heaven's Price\",), ('Lords of the Sky',), ('The Seventh Gate (The Death Gate Cycle  #7)',), (\"Finnegan's Week\",), ('Lines and Shadows',), (\"The Goon Show  Volume 11: He's Fallen in the Water!\",), ('The Last Temptation',), ('If I Die In A Combat Zone',), ('How Much is That Guinea Pig in the Window?',), ('The Leader In You: How to Win Friends  Influence People and Succeed in a Changing World',), ('Sahara (Dirk Pitt  #11)',), ('Star Trek: Logs 7-10',), ('A Place Where the Sea Remembers',), ('New Worlds  Ancient Texts: The Power of Tradition and the Shock of Discovery',), ('The Roman Empire',), ('Children of Heracles / Hippolytus / Andromache / Hecuba',), ('The Divine Comedy',), ('Rabbit Angstrom: The Four Novels',), ('Cancer Ward',), ('The Great American Novel',), ('Democracy',), ('A Book of Common Prayer',), ('The Death of Virgil',), ('The Son Avenger (The Master of Hestviken  #4)',), ('Open Secrets',), (\"The Reed Cutter & Captain Shigemoto's Mother\",), ('When She Was Good',), ('Quicksand',), (\"In Pharaoh's Army: Memories of the Lost War\",), ('The Makioka Sisters',), ('Blues for Mister Charlie',), ('Going to Meet the Man',), ('Aman: The Story of a Somali Girl',), ('Three Plays: Desire Under the Elms / Strange Interlude / Mourning Becomes Electra',), (\"Corelli's Mandolin\",), ('Resistance  Rebellion and Death: Essays',), ('Selected Stories',), ('Les Miserables (Stepping Stones)',), ('Daisy-Head Mayzie',), ('A Frolic of His Own',), ('The Great Gatsby',), ('A Life in Letters',), ('The Pat Hobby Stories',), ('No Ordinary Time: Franklin and Eleanor Roosevelt: The Home Front in World War II',), ('Achilles in Vietnam: Combat Trauma and the Undoing of Character',), ('The Reawakening',), ('Survival in Auschwitz',), ('Trapped in the Mirror: Adult Children of Narcissists in Their Struggle for Self',), ('Julius  the Baby of the World',), ('The Fourth of July Story',), ('Come a Stranger (Tillerman Cycle  #5)',), ('The Moon Lady',), ('Unpainted to the Last: \"Moby Dick\" and Twentieth-century American Art',), ('Mondrian',), ('The Painter of Modern Life and Other Essays (Phaidon Arts and Letters)',), ('Red Phoenix',), ('Different Seasons',), (\"The Wealthy Barber: Everyone's Common-Sense Guide to Becoming Financially Independent\",), ('Something Borrowed',), ('Bad Dreams',), ('Sparrow Hawk Red',), ('Love',), ('Bob Marley - Songs of Freedom',), ('Lectures on the History of Philosophy 1: Greek Philosophy to Plato',), ('The Complete Stories',), ('The Forgotten',), ('Anti-Semite and Jew: An Exploration of the Etiology of Hate',), ('The Trial of God: (as it was held on February 25  1649  in Shamgorod)',), ('The Complete Stories',), ('Warfare in the Classical World: An Illustrated Encyclopedia of Weapons  Warriors  and Warfare in the Ancient Civilizations of Greece and Rome',), (\"The Last Book of Swords: Shieldbreaker's Story (Lost Swords  #8)\",), ('Lord of Chaos (The Wheel of Time  #6)',), ('The Ships of Earth (Homecoming Saga #3)',), ('Harpy Thyme (Xanth #17)',), ('Geis of the Gargoyle (Xanth #18)',), ('The Little Baby Snoogle-Fleejer',), ('Practice! Practice!: A Latin Via Ovid Workbook',), ('You Can Never Go Home Again',), ('The Camera (Ansel Adams Photography  #1)',), ('The Negative (Ansel Adams Photography  #2)',), ('The Print (Ansel Adams Photography  #3)',), ('Six Degrees of Separation',), ('Cigarettes Are Sublime',), ('The Calvin and Hobbes Tenth Anniversary Book',), (\"Romanee Conti: The World's Most Fabled Wine\",), ('Moon in a Dewdrop: Writings of Zen Master Dogen',), ('Fire in the Sky (Diadem: Shadowsong  #1)',), ('Storm Warning (Valdemar: Mage Storms #1)',), ('Walking the Rez Road',), ('Dalit: The Black Untaouchables of India',), ('Ghosts of Gettysburg III: Spirits  Apparitions  and Haunted Places of the Battlefield',), ('Novels and Stories',), ('The Ethics of Rhetoric',), ('Pyramids of Montauk: Explorations in Consciousness',), (\"Cook's Illustrated 1995 (Cook's Illustrated Annuals)\",), ('When the World Was Steady',), ('From Far Away',), ('The Belly of Paris (Les Rougon-Macquart  #3)',), ('Keeping Faith: Memoirs of a President',), ('Intimate Communion: Awakening Your Sexual Essence',), ('East Wind: West Wind',), ('A Guided Tour of 5 Works by Plato: Euthyphro/Apology/Crito/Phaedo/Cave',), (\"Meditations for Manifesting: Morning and Evening Meditations to Literally Create Your Heart's Desire\",), ('The Mystery Play',), ('Prince of the City',), ('Lies My Teacher Told Me: Everything Your History Textbook Got Wrong',), ('World War 3 Illustrated: Confrontational Comics',), ('Arcadia',), ('The Azathoth Cycle: Tales of the Blind Idiot God',), ('The Return of Lum  Volume 1: Urusei Yatsura (Urusei Yatsura  #2)',), ('Gunslinger and Nine Other Action-Packed Stories of the Wild West',), ('Desolation Angels',), ('The Western Canon: The Books and School of the Ages',), ('Illuminata: A Return to Prayer',), ('Fantastic Mr. Fox (Cover to Cover)',), ('One Hundred Years Of Solitude',), ('The Bridge over the Drina',), ('The Transit of Venus',), ('Collected Poems  Prose  and Plays',), ('Stories and Early Novels: Pulp Stories / The Big Sleep / Farewell  My Lovely / The High Window',), ('Later Novels and Other Writings: The Lady in the Lake / The Little Sister / The Long Goodbye / Playback / Double Indemnity (screenplay) / Selected Essays and Letters',), (\"Edward Lear's Book of Nonsense: With Lear's Original Illustrations\",), ('En attendant Godot',), ('Premi\u00e8res Histoires',), ('The Art of Richard P. Feynman',), ('April  May und June',), ('Homo faber: Ein Bericht.',), ('La m\u00e1quina de follar',), ('El Hotel New Hampshire',), ('Relato de Um N\u00e1ufrago',))", "rowcount": 249, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 406, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('amazonaws.com',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('amazonaws.com',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": 407, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 408, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": 409, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 410, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 411, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((7,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((7,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 413, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('The Landmark Thucydides: A Comprehensive Guide to the Peloponnesian War',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('The Landmark Thucydides: A Comprehensive Guide to the Peloponnesian War',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 414, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3.84,), (4.82,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3.84,), (4.82,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 415, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 416, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 417, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 9, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Onions, Leeks, and Garlic: Cooking Secrets of the Mediterranean',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Onions, Leeks, and Garlic: Cooking Secrets of the Mediterranean',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 10, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Onions, Leeks, and Garlic: Cooking Secrets of the Mediterranean', 'Profusely illustrated in color, this makes a wonderful gift book for a cuisine-oriented friend.', 'Binnet & Hardley'), (\"The Busy Executive's Database Guide\", 'An overview of available database systems with emphasis on common business applications. Illustrated.', 'Algodata Infosystems'), ('Cooking with Computers: Surreptitious Balance Sheets', 'Helpful hints on how to use your electronic resources to the best advantage.', 'Algodata Infosystems'), ('You Can Combat Computer Stress!', 'The latest medical and psychological techniques for living with the electronic office. Easy-to-understand explanations.', 'New Moon Books'), ('Straight Talk About Computers', 'Annotated analysis of what computers can do for you: a no-hype guide for the critical user.', 'Algodata Infosystems'), ('Silicon Valley Gastronomic Treats', 'Favorite recipes for quick, easy, and elegant meals.', 'Binnet & Hardley'), ('The Gourmet Microwave', 'Traditional French gourmet recipes adapted for modern microwave cooking.', 'Binnet & Hardley'), ('But Is It User Friendly?', \"A survey of software for the naive user, focusing on the 'friendliness' of each.\", 'Algodata Infosystems'), ('Computer Phobic AND Non-Phobic Individuals: Behavior Variations', \"A must for the specialist, this book examines the difference between those who hate and fear computers and those who don't.\", 'Binnet & Hardley'), ('Is Anger the Enemy?', 'Carefully researched study of the effects of strong emotions on the body. Metabolic charts included.', 'New Moon Books'), ('Life Without Fear', 'New exercise, meditation, and nutritional techniques that can reduce the shock of daily interactions. Popular audience. Sample menus included, exercise video available separately.', 'New Moon Books'), ('Prolonged Data Deprivation: Four Case Studies', 'What happens when the data runs dry?  Searching evaluations of information-shortage effects.', 'New Moon Books'), ('Emotional Security: A New Algorithm', 'Protecting yourself and your loved ones from undue emotional stress in the modern world. Use of computer and nutritional aids emphasized.', 'New Moon Books'), ('Fifty Years in Buckingham Palace Kitchens', \"More anecdotes from the Queen's favorite cook describing life among English royalty. Recipes, techniques, tender vignettes.\", 'Binnet & Hardley'), ('Sushi, Anyone?', 'Detailed instructions on how to make authentic Japanese sushi in your spare time.', 'Binnet & Hardley'))", "rowcount": 15, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Onions, Leeks, and Garlic: Cooking Secrets of the Mediterranean', 'Profusely illustrated in color, this makes a wonderful gift book for a cuisine-oriented friend.', 'Binnet & Hardley'), (\"The Busy Executive's Database Guide\", 'An overview of available database systems with emphasis on common business applications. Illustrated.', 'Algodata Infosystems'), ('Cooking with Computers: Surreptitious Balance Sheets', 'Helpful hints on how to use your electronic resources to the best advantage.', 'Algodata Infosystems'), ('You Can Combat Computer Stress!', 'The latest medical and psychological techniques for living with the electronic office. Easy-to-understand explanations.', 'New Moon Books'), ('Straight Talk About Computers', 'Annotated analysis of what computers can do for you: a no-hype guide for the critical user.', 'Algodata Infosystems'), ('Silicon Valley Gastronomic Treats', 'Favorite recipes for quick, easy, and elegant meals.', 'Binnet & Hardley'), ('The Gourmet Microwave', 'Traditional French gourmet recipes adapted for modern microwave cooking.', 'Binnet & Hardley'), ('But Is It User Friendly?', \"A survey of software for the naive user, focusing on the 'friendliness' of each.\", 'Algodata Infosystems'), ('Computer Phobic AND Non-Phobic Individuals: Behavior Variations', \"A must for the specialist, this book examines the difference between those who hate and fear computers and those who don't.\", 'Binnet & Hardley'), ('Is Anger the Enemy?', 'Carefully researched study of the effects of strong emotions on the body. Metabolic charts included.', 'New Moon Books'), ('Life Without Fear', 'New exercise, meditation, and nutritional techniques that can reduce the shock of daily interactions. Popular audience. Sample menus included, exercise video available separately.', 'New Moon Books'), ('Prolonged Data Deprivation: Four Case Studies', 'What happens when the data runs dry?  Searching evaluations of information-shortage effects.', 'New Moon Books'), ('Emotional Security: A New Algorithm', 'Protecting yourself and your loved ones from undue emotional stress in the modern world. Use of computer and nutritional aids emphasized.', 'New Moon Books'), ('Fifty Years in Buckingham Palace Kitchens', \"More anecdotes from the Queen's favorite cook describing life among English royalty. Recipes, techniques, tender vignettes.\", 'Binnet & Hardley'), ('Sushi, Anyone?', 'Detailed instructions on how to make authentic Japanese sushi in your spare time.', 'Binnet & Hardley'))", "rowcount": 15, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 11, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Carlos', 'Hernadez'), ('Gary', 'Thomas'), ('Helen', 'Bennett'), ('Howard', 'Snyder'), ('Manuel', 'Pereira'), ('Margaret', 'Smith'), ('Maria', 'Pontes'), ('Patricia', 'McKenna'), ('Philip', 'Cramer'), ('Timothy', \"O'Rourke\"), ('Yoshi', 'Latimer'))", "rowcount": 11, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Carlos', 'Hernadez'), ('Gary', 'Thomas'), ('Helen', 'Bennett'), ('Howard', 'Snyder'), ('Manuel', 'Pereira'), ('Margaret', 'Smith'), ('Maria', 'Pontes'), ('Patricia', 'McKenna'), ('Philip', 'Cramer'), ('Timothy', \"O'Rourke\"), ('Yoshi', 'Latimer'))", "rowcount": 11, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 12, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1990',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1990',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 13, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Binnet & Hardley',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Binnet & Hardley',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 14, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('An overview of available database systems with emphasis on common business applications. Illustrated.',), ('Carefully researched study of the effects of strong emotions on the body. Metabolic charts included.',), ('Carefully researched study of the effects of strong emotions on the body. Metabolic charts included.',), ('Traditional French gourmet recipes adapted for modern microwave cooking.',), ('Traditional French gourmet recipes adapted for modern microwave cooking.',), ('An overview of available database systems with emphasis on common business applications. Illustrated.',))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('An overview of available database systems with emphasis on common business applications. Illustrated.',), ('Carefully researched study of the effects of strong emotions on the body. Metabolic charts included.',), ('Carefully researched study of the effects of strong emotions on the body. Metabolic charts included.',), ('Traditional French gourmet recipes adapted for modern microwave cooking.',), ('Traditional French gourmet recipes adapted for modern microwave cooking.',), ('An overview of available database systems with emphasis on common business applications. Illustrated.',))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 15, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('psychology',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('psychology',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 16, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((8.333333333333334,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((8.333333333333334,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 17, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Francisco', '', 'Chang'), ('Matti', 'G', 'Karttunen'), ('Ann', 'M', 'Devon'), ('Rita', 'B', 'Muller'), ('Palle', 'D', 'Ibsen'), ('Diego', 'W', 'Roel'), ('Laurence', 'A', 'Lebihan'), ('Mary', 'M', 'Saveley'), ('Janine', 'Y', 'Labrune'), ('Karla', 'J', 'Jablonski'), ('Martin', 'F', 'Sommer'), ('Paul', 'X', 'Henriot'), ('Annette', '', 'Roulet'), ('Roland', '', 'Mendel'), ('Sven', 'K', 'Ottlieb'), ('Victoria', 'P', 'Ashworth'), ('Maria', '', 'Larsson'), ('Paula', 'S', 'Parente'), ('Helvetius', 'A', 'Nagy'), ('Lesley', '', 'Brown'), ('Miguel', 'A', 'Paolino'), ('Anabela', 'R', 'Domingues'), ('Karin', 'F', 'Josephs'), ('Pedro', 'S', 'Afonso'), ('Aria', '', 'Cruz'), ('Pirkko', 'O', 'Koskitalo'), ('Daniel', 'B', 'Tonini'), ('Martine', '', 'Rance'), ('Peter', 'H', 'Franken'), ('Carine', 'G', 'Schmitt'), ('Elizabeth', 'N', 'Lincoln'), ('Paolo', 'M', 'Accorti'))", "rowcount": 32, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Francisco', '', 'Chang'), ('Matti', 'G', 'Karttunen'), ('Ann', 'M', 'Devon'), ('Rita', 'B', 'Muller'), ('Palle', 'D', 'Ibsen'), ('Diego', 'W', 'Roel'), ('Laurence', 'A', 'Lebihan'), ('Mary', 'M', 'Saveley'), ('Janine', 'Y', 'Labrune'), ('Karla', 'J', 'Jablonski'), ('Martin', 'F', 'Sommer'), ('Paul', 'X', 'Henriot'), ('Annette', '', 'Roulet'), ('Roland', '', 'Mendel'), ('Sven', 'K', 'Ottlieb'), ('Victoria', 'P', 'Ashworth'), ('Maria', '', 'Larsson'), ('Paula', 'S', 'Parente'), ('Helvetius', 'A', 'Nagy'), ('Lesley', '', 'Brown'), ('Miguel', 'A', 'Paolino'), ('Anabela', 'R', 'Domingues'), ('Karin', 'F', 'Josephs'), ('Pedro', 'S', 'Afonso'), ('Aria', '', 'Cruz'), ('Pirkko', 'O', 'Koskitalo'), ('Daniel', 'B', 'Tonini'), ('Martine', '', 'Rance'), ('Peter', 'H', 'Franken'), ('Carine', 'G', 'Schmitt'), ('Elizabeth', 'N', 'Lincoln'), ('Paolo', 'M', 'Accorti'))", "rowcount": 32, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 140, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((4825.44,), (2757.3999999999996,), (3315.2599999999998,), (3863.02,), (3002.44,), (3222.73,), (1732.59,), (2798.0,), (1846.0,), (2156.5499999999997,), (1395.42,), (2831.54,), (2552.7000000000003,), (3390.48,), (3644.8,), (3344.0,), (3375.84,), (2097.6000000000004,), (4373.53,), (2484.0,), (4039.2000000000003,), (1432.3400000000001,), (3941.0299999999997,), (3081.32,), (1591.52,), (2694.52,), (2618.12,), (1623.51,), (2279.16,), (925.97,), (1064.3400000000001,), (2268.9500000000003,), (1249.5,), (2056.7799999999997,))", "rowcount": 34, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.customernumber does not exist\nLINE 3: INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNu...\n                                   ^\nHINT:  Perhaps you meant to reference the column \"t1.customerNumber\".\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 141, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 142, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((65, 'Handji Gifts& Co'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.customernumber does not exist\nLINE 13: ON T1.customerNumber = T2.customerNumber \n            ^\nHINT:  Perhaps you meant to reference the column \"t1.customerNumber\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": 143, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((99,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((99,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 144, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3638.63024390244,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.productcode does not exist\nLINE 3: INNER JOIN orderdetails AS T2 ON T1.productCode = T2.product...\n                                         ^\nHINT:  Perhaps you meant to reference the column \"t1.productCode\".\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 145, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"paymentdate\" does not exist\nLINE 1: ...SUM(amount) FROM payments WHERE DATE_PART('year', paymentDat...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"payments.paymentDate\".\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 146, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((7,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"customernumber\" does not exist\nLINE 1: SELECT COUNT(\"customernumber\") FROM ( SELECT \"customernumber...\n                                                     ^\nHINT:  Perhaps you meant to reference the column \"payments.customerNumber\".\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": 147, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('24, place Kl\u00e9ber', None, '88.60.1555'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.ordernumber does not exist\nLINE 3: INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber \n                                   ^\nHINT:  Perhaps you meant to reference the column \"t1.orderNumber\".\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 148, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2005, 4, 8),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.ordernumber does not exist\nLINE 3: INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber \n                                   ^\nHINT:  Perhaps you meant to reference the column \"t1.orderNumber\".\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 150, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Euro+ Shopping Channel',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Euro+ Shopping Channel',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 151, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0.1795114944011043,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0.1795114944011043,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": 152, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 153, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2004', 21), ('2003', 15), ('2005', 6))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.paymentdate does not exist\nLINE 1: SELECT DATE_PART('year', t1.paymentDate), COUNT(t1.\"customer...\n                                 ^\nHINT:  Perhaps you meant to reference the column \"t1.paymentDate\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": 154, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1992 Ferrari 360 Spider red', Decimal('624')), ('1964 Mercedes Tour Bus', Decimal('384')), ('1936 Mercedes-Benz 500K Special Roadster', Decimal('381')))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1992 Ferrari 360 Spider red', Decimal('624')), ('1964 Mercedes Tour Bus', Decimal('384')), ('1936 Mercedes-Benz 500K Special Roadster', Decimal('381')))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 588, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((250.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"fbi_code\" does not exist\nLINE 2: FROM FBI_Code AS T1\n             ^\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": 589, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((42, 'Brendan', 'Reilly', None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": 592, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((53,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((53,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": 593, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Glenn White',), ('Robert A. Rubio',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Glenn White',), ('Robert A. Rubio',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": 48, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Filtering',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Filtering',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": 49, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('HtmlParser',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('HtmlParser',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": 52, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": 443, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12:44:28', '23:09:25', datetime.date(2016, 8, 1)), ('17:34:25', '00:04:25', datetime.date(2016, 8, 2)), ('19:49:25', '13:34:25', datetime.date(2016, 8, 3)), ('04:39:24', '19:54:25', datetime.date(2016, 8, 4)), ('21:34:25', '07:04:24', datetime.date(2016, 8, 5)), ('01:29:25', '17:09:25', datetime.date(2016, 8, 6)), ('15:09:25', '21:54:25', datetime.date(2016, 8, 7)), ('02:29:25', '15:54:24', datetime.date(2016, 8, 8)), ('20:09:26', '01:04:25', datetime.date(2016, 8, 9)), ('02:54:25', '01:04:25', datetime.date(2016, 8, 10)), ('01:24:25', '20:44:25', datetime.date(2016, 8, 11)), ('17:24:25', '11:34:25', datetime.date(2016, 8, 12)), ('16:54:24', '04:19:15', datetime.date(2016, 8, 13)), ('23:59:24', '22:19:25', datetime.date(2016, 8, 14)), ('22:24:25', '03:24:24', datetime.date(2016, 8, 15)), ('01:44:25', '20:04:25', datetime.date(2016, 8, 16)), ('00:19:25', '20:39:25', datetime.date(2016, 8, 17)), ('06:09:27', '23:29:25', datetime.date(2016, 8, 18)), ('23:19:24', '18:09:25', datetime.date(2016, 8, 19)), ('11:39:24', '08:49:25', datetime.date(2016, 8, 20)), ('15:14:24', '04:04:25', datetime.date(2016, 8, 21)), ('19:54:25', '08:49:24', datetime.date(2016, 8, 22)), ('14:29:25', '00:24:25', datetime.date(2016, 8, 23)), ('00:24:25', '22:24:25', datetime.date(2016, 8, 24)), ('07:24:25', '16:29:25', datetime.date(2016, 8, 25)), ('23:19:26', '07:19:25', datetime.date(2016, 8, 26)), ('00:04:26', '14:34:25', datetime.date(2016, 8, 27)), ('12:19:25', '15:39:25', datetime.date(2016, 8, 28)), ('16:14:26', '23:54:25', datetime.date(2016, 8, 29)), ('00:04:25', '06:29:25', datetime.date(2016, 8, 30)), ('17:54:26', '20:49:26', datetime.date(2016, 8, 31)))", "rowcount": 31, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12:44:28', '23:09:25', datetime.date(2016, 8, 1)), ('17:34:25', '00:04:25', datetime.date(2016, 8, 2)), ('19:49:25', '13:34:25', datetime.date(2016, 8, 3)), ('04:39:24', '19:54:25', datetime.date(2016, 8, 4)), ('21:34:25', '07:04:24', datetime.date(2016, 8, 5)), ('01:29:25', '17:09:25', datetime.date(2016, 8, 6)), ('15:09:25', '21:54:25', datetime.date(2016, 8, 7)), ('02:29:25', '15:54:24', datetime.date(2016, 8, 8)), ('20:09:26', '01:04:25', datetime.date(2016, 8, 9)), ('02:54:25', '01:04:25', datetime.date(2016, 8, 10)), ('01:24:25', '20:44:25', datetime.date(2016, 8, 11)), ('17:24:25', '11:34:25', datetime.date(2016, 8, 12)), ('16:54:24', '04:19:15', datetime.date(2016, 8, 13)), ('23:59:24', '22:19:25', datetime.date(2016, 8, 14)), ('22:24:25', '03:24:24', datetime.date(2016, 8, 15)), ('01:44:25', '20:04:25', datetime.date(2016, 8, 16)), ('00:19:25', '20:39:25', datetime.date(2016, 8, 17)), ('06:09:27', '23:29:25', datetime.date(2016, 8, 18)), ('23:19:24', '18:09:25', datetime.date(2016, 8, 19)), ('11:39:24', '08:49:25', datetime.date(2016, 8, 20)), ('15:14:24', '04:04:25', datetime.date(2016, 8, 21)), ('19:54:25', '08:49:24', datetime.date(2016, 8, 22)), ('14:29:25', '00:24:25', datetime.date(2016, 8, 23)), ('00:24:25', '22:24:25', datetime.date(2016, 8, 24)), ('07:24:25', '16:29:25', datetime.date(2016, 8, 25)), ('23:19:26', '07:19:25', datetime.date(2016, 8, 26)), ('00:04:26', '14:34:25', datetime.date(2016, 8, 27)), ('12:19:25', '15:39:25', datetime.date(2016, 8, 28)), ('16:14:26', '23:54:25', datetime.date(2016, 8, 29)), ('00:04:25', '06:29:25', datetime.date(2016, 8, 30)), ('17:54:26', '20:49:26', datetime.date(2016, 8, 31)))", "rowcount": 31, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 445, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((568.492413380107,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((568.492413380107,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 446, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((257.4744598327145,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((257.4744598327145,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 448, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Novacoin',), ('Mincoin',), ('Freicoin',), ('BitBar',), ('WorldCoin',), ('Digitalcoin',), ('Goldcoin',), ('Argentum',), ('Fastcoin',), ('Megacoin',), ('Infinitecoin',), ('Primecoin',), ('Anoncoin',), ('CasinoCoin',), ('Bullion',), ('Emerald Crypto',), ('Quark',), ('Zetacoin',), ('SecureCoin',), ('Sexcoin',), ('TagCoin',), ('I0Coin',), ('FLO',), ('Joulecoin',), ('Datacoin',), ('BetaCoin',), ('GrandCoin',), ('Deutsche eMark',), ('NetCoin',), ('HoboNickels',), ('Tigercoin',), ('Orbitcoin',), ('Catcoin',), ('RonPaulCoin',), ('Mooncoin',), ('Dimecoin',), ('RedCoin',), ('TeslaCoin',), ('NobleCoin',), ('Nyancoin',), ('UltraCoin',), ('PotCoin',), ('Blakecoin',), ('HunterCoin',), ('CacheCoin',), ('Aricoin',), ('Auroracoin',), ('Pesetacoin',), ('Marscoin',), ('Cashcoin',), ('Pandacoin',), ('MAZA',), ('Uniform Fiscal Object',), ('LiteBar',), ('Photon',), ('Myriad',), ('DNotes',), ('Skeincoin',), ('Einsteinium',), ('Bitcoin Scrypt',), ('Coin(O)',), ('FlutterCoin',), ('OctoCoin',), ('e-Gulden',), ('PLNcoin',), ('AsiaCoin',), ('PopularCoin',), ('CannaCoin',), ('BlueCoin',), ('Canada eCoin',), ('Guncoin',), ('Pinkcoin',), ('Energycoin',), ('VeriCoin',), ('TEKcoin',), ('Litecoin Plus',), ('UnbreakableCoin',), ('CryptCoin',), ('SuperCoin',), ('BoostCoin',), ('Hyper',), ('BitQuark',), ('CloakCoin',), ('Fantomcoin',), ('ArtByte',), ('Donationcoin',), ('Piggycoin',), ('Startcoin',), ('Boolberry',), ('SHACoin',), ('BritCoin',), ('Quatloo',), ('Viacoin',), ('Triangles',), ('I/O Coin',), ('Cryptonite',), ('Carboncoin',), ('Titcoin',), ('Virtacoin',), ('Joincoin',), ('Bitmark',), ('Halcyon',), ('Donu',), ('Emercoin',), ('NativeCoin',), ('BunnyCoin',), ('Acoin',), ('FoldingCoin',), ('bitCNY',), ('Sterlingcoin',), ('Magi',), ('ExclusiveCoin',), ('Trollcoin',), ('GlobalBoost-Y',), ('Prime-XI',), ('Dashcoin',), ('Sativacoin',), ('SpreadCoin',), ('Blocknet',), ('Gapcoin',), ('GCN Coin',), ('Bitcoin Fast',), ('PayCoin',), ('Unitus',), ('IncaKoin',), ('SmileyCoin',), ('Bean Cash',), ('Wild Beast Block',), ('Gridcoin',), ('Sharkcoin',), ('SongCoin',), ('Crave',), ('Pura',), ('Neutron',), ('Xaurum',), ('Californium',), ('Advanced Internet Blocks',), ('Universal Currency',), ('Bata',), ('FujiCoin',), ('EuropeCoin',), ('The Cypherfunks',), ('GravityCoin',), ('IrishCoin',), ('Bitzeny',), ('BowsCoin',), ('AnarchistsPrime',), ('CompuCoin',), ('Hellenic Coin',), ('TransferCoin',), ('AmsterdamCoin',), ('Eurocoin',), ('VectorAI',), ('SpaceCoin',), ('Pakcoin',), ('Influxcoin',), ('Expanse',), ('Swing',), ('ParallelCoin',), ('Save and Gain',), ('Elite',), ('SOILcoin',), ('Adzcoin',), ('RussiaCoin',), ('EverGreenCoin',), ('Creditbit',), ('Litecred',), ('Yocoin',), ('Francs',), ('Evil Coin',), ('Asiadigicoin',), ('TrumpCoin',), ('C-Bit',), ('Independent Money System',), ('HOdlcoin',), ('BERNcash',), ('DigixDAO',), ('Fantasy Cash',), ('FuzzBalls',), ('HiCoin',), ('Zurcoin',), ('SixEleven',), ('2GIVE',), ('PlatinumBAR',), ('MarteXcoin',), ('Nullex',), ('Citadel',), ('RevolverCoin',), ('GoldBlocks',), ('Breakout',), ('Debitcoin',), ('Comet',), ('Rise',), ('LBRY Credits',), ('PutinCoin',), ('Syndicate',), ('Cryptojacks',), ('Steem Dollars',), ('Ardor',), ('808Coin',), ('VapersCoin',), ('TajCoin',), ('Experience Points',), ('B3Coin',), ('Neo',), ('Bitcloud',), ('Zayedcoin',), ('Tao',), ('Tellurion',), ('Dollarcoin',), ('MustangCoin',), ('PROUD Money',), ('Sequence',), ('Atomic Coin',), ('JobsCoin',), ('Sakuracoin',), ('Cubits',), ('BipCoin',), ('Zoin',), ('Lykke',), ('Centurion',), ('Golem',), ('Internet of People',), ('Nexium',), ('Vault Coin',), ('Pabyosi Coin (Special)',), ('Alias',), ('BenjiRolls',), ('iBank',), ('FirstCoin',), ('Solarflarecoin',), ('Eryllium',), ('Elysium',), ('Marijuanacoin',), ('PRCoin',), ('Argus',), ('MarxCoin',), ('Pascal Lite',), ('MiloCoin',), ('Musicoin',), ('ZSEcoin',), ('Impact',), ('DubaiCoin',), ('Darsek',), ('Matchpool',), ('Ultimate Secure Cash',), ('BlazerCoin',), ('HappyPay',), ('Coinonat',), ('Lunyr',), ('Qtum',), ('Aeternity',), ('Metaverse ETP',), ('MobileGo',), ('Neuro',), ('More Coin',), ('TenX',), ('Rotten',), ('Ecobit',), ('Gas',), ('Santiment Network Token',), ('CVCoin',), ('SkinCoin',), ('OracleChain',), ('Shadow Token',), ('BlockCAT',), ('Nebulas',), ('Achain',), ('Loopring',), ('Monetha',), ('Agrello',), ('Elixir',), ('VIBE',), ('Voise',), ('RChain',), ('FLiK',), ('BridgeCoin',), ('ALIS',), ('HelloGold',), ('Enigma',), ('Change',), ('Bitcoin Gold',), ('KuCoin Token',), ('EXRNchain',), ('LATOKEN',), ('NULS',), ('JavaScript Token',), ('Etherparty',), ('Revain',), ('Electroneum',), ('Raiden Network Token',), ('Ties.DB',), ('Upfiring',), ('bitJob',), ('Viuly',), ('EncrypGen',), ('Bodhi',), ('Quantstamp',), ('QASH',), ('Bitcoin Diamond',), ('Divi Exchange Token',), ('Flixxo',), ('Bibox Token',), ('Presearch',), ('CyberMiles',), ('IoT Chain',), ('Wabi',), ('Verify',), ('Uquid Coin',), ('ProChain',), ('Ignis',), ('Playkey',), ('Datum',), ('LockTrip',), ('Genaro Network',), ('aelf',), ('Single Collateral DAI ',), ('SophiaTX',), ('HTMLCOIN',), ('Utrust',), ('AppCoins',), ('Mixin',), ('GameChain System',), ('Coinlancer',), ('AI Doctor',), ('Show',), ('United Traders Token',), ('Spectre.ai Dividend Token',), ('Vezt',), ('ugChain',), ('Bottos',), ('Selfkey',), ('MOAC',), ('IOST',), ('Nitro',), ('Aurora DAO',), ('SingularityNET',), ('Scry.info',), ('Mobius',), ('Hydro Protocol',), ('Maggie',), ('Trinity Network Credit',), ('DATA',), ('Matrix AI Network',), ('CoinFi',), ('Zeepin',), ('CPChain',), ('Zilla',), ('EtherSportz',), ('LOCIcoin',), ('Dether',), ('Fusion',), ('Neurotoken',), ('Concensum',), ('Insights Network',), ('Ravencoin',), ('Sharpe Platform Token',), ('Loom Network',), ('Noah Coin',), ('Mithril',), ('PolySwarm',), ('Stakenet',), ('U Network',), ('AdHive',), ('DeviantCoin',), ('Auctus',), ('Zebi Token',), ('Nexo',), ('Hydro',), ('Sharder',), ('Digitex',), ('Plian',), ('XMax',), ('Project Pai',), ('Karatgold Coin',), ('BitZ Token',), ('Everipedia',), ('Blue Whale EXchange',), ('NIX',), ('Apollo Currency',), ('Vexanium',), ('Maximine Coin',), ('Birake',), ('Gemini Dollar',), ('Paxos Standard',), ('FREE Coin',), ('USD Coin',), ('MMOCoin',), ('Italian Lira',), ('SINOVATE',), ('CWV Chain',), ('MXC',), ('Aergo',), ('HedgeTrade',), ('RSK Infrastructure Framework',), ('v.systems',), ('Grin',), ('Stably USD',), ('SOLVE',), ('PlayChip',), ('Constant',), ('Fetch.ai',), ('BORA',), ('Flexacoin',), ('Theta Fuel',), ('Japan Content Token',), ('Nash',), ('OTOCASH',), ('Locus Chain',), ('Newton',), ('ThoreNext',), ('Diamond Platform Token',), ('Artfinity',), ('Origo',), ('StakeCubeCoin',), ('Bitsdaq',), ('EOSDT',), ('Contentos',), ('MovieBloc',), ('MX Token',), ('USDK',), ('Silverway',), ('Dusk Network',), ('ChainX',), ('Oasis City',), ('GateToken',), ('Cocos-BCX',), ('BHEX Token',), ('BitForex Token',), ('Ladder Network Token',), ('Netbox Coin',), ('VideoCoin',), ('Streamit Coin',), ('MineBee',), ('Lightyears',), ('NuCypher',), ('1irstGold',), ('Ultragate',), ('Beyondcoin',), ('Waves Enterprise',), ('Bitcoin Vault',), ('Jarvis Network',), ('Ghost',), ('Xaya',), ('DXdao',), ('Secret',), ('Simple Software Solutions',), ('MATH',), ('Orion Protocol',), ('Kadena',), ('Sylo',), ('renBTC',), ('Sora',), ('sDEFI',), ('MCDEX',), ('Blocery',), ('ECOMI',), ('Kulupu',), ('Hakka.Finance',), ('UniLayer',), ('NFT',), ('YAMv2',), ('Lien',), ('Falconswap',), ('Polkaswap',), ('DataHighway',), ('BUILD Finance',), ('REVV',), ('Empty Set Dollar',), ('Wing',), ('Percent',), ('Defi Shopping Stake',), ('yAxis',), ('DeFiner',), ('DerivaDAO',), ('Nsure.Network',), ('Celo Dollar',), ('cVault.finance',), ('Persistence',), ('Polyient Games Governance Token',), ('Wrapped Origin Axie',), ('CoFiX',), ('Atari Token',), ('Value Liquidity',), ('UniLend',), ('DAOFi',), ('Akash Network',), ('Pepemon Pepeballs',), ('ETG Finance',), ('UnFederalReserve',), ('CryptoFrog.Finance',), ('Gameswap',), ('Unifi Protocol DAO',), ('88mph',), ('Vanilla Network',), ('Pancake Bunny',), ('Bifrost (BFC)',), ('Zoracles',), ('Plasma Finance',), ('Honey',), ('Unit Protocol Duck',), ('AnRKey X',), ('SafePal',), ('MAPS',), ('COVER Protocol',), ('Shabu Shabu Finance',), ('BSCEX',), ('NFTX',), ('ZKSwap',), ('CheeseSwap',), ('Poolz Finance',), ('Paralink Network',), ('Mdex',), ('Onooks',), ('Umbrella Network',), ('Lotto',), ('APYSwap',), ('Goose Finance',), ('Premia',), ('DAOventures',), ('Midas Dollar',), ('Vesper',), ('AC Milan Fan Token',), ('RamenSwap',), ('Polkacity',), ('PRCY Coin',), ('SOTA Finance',), ('Wault Finance (OLD)',), ('FileStar',), ('xToken',), ('Bounce Token',), ('BSCPAD',), ('Vortex Defi',), ('Konomi Network',), ('Playcent',), ('Space Cow Boy',), ('Illuvium',), ('Inverse Finance',), ('Belt',), ('LABS Group',), ('Splyt',), ('Oracle Top 5 Tokens Index',), ('StakerDAO',), ('Ellipsis',), ('Uhive',), ('Scaleswap',), ('WHEAT Token',), ('UniFarm',), ('Refinable',), ('Chainswap',), ('DAIN',), ('Vulcan Forged PYR',), ('Crowny',), ('Phuture',), ('Synthetify',), ('Wault [New]',), ('Smaugs NFT',), ('ETHERLAND',), ('Cubiex Power',), ('MemePad',), ('CrossFi',), ('Coldstack',), ('JaguarSwap',), ('DinoExchange',), ('SingularityDAO',), ('Don-key',), ('My DeFi Pet',), ('Frenchie Network',), ('Sleepy Sloth Finance',), ('Bakery Tools',), ('xxxNifty',), ('Oviex',), ('YooShi',), ('HODL',), ('Netvrk',), ('Dotmoovs',), ('Lean',), ('Elk Finance',), ('Rabbit Finance',), ('Vega Protocol',), ('Convex CRV',), ('EthereumPay',), ('Alpha Impact',), ('Dina',), ('Waivlength',), ('Whale Fall',), ('Pornstar',), ('AirNFTs',), ('PureFi Protocol',))", "rowcount": 589, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"name\" does not exist\nLINE 1: SELECT name FROM coins WHERE LENGTH(tag_names) - LENGTH(REPL...\n               ^\nHINT:  Perhaps you meant to reference the column \"coins._name\".\n", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": 449, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Freicoin',), ('CHNCoin',), ('BBQCoin',), ('Ixcoin',), ('CHNCoin',), ('BitBar',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',))", "rowcount": 28, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Freicoin',), ('CHNCoin',), ('BBQCoin',), ('Ixcoin',), ('CHNCoin',), ('BitBar',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',), ('CHNCoin',))", "rowcount": 28, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 450, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 609, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((31.818181818181817,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((31.818181818181817,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 610, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3.7037037037037037,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3.7037037037037037,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 309, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 311, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((\"Ev'rybody Wants to Be a Cat\",))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((\"Ev'rybody Wants to Be a Cat\",))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 3, "FN": 0}
{"sql_id": 312, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('101 Dalmatians',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('101 Dalmatians',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 313, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 314, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"mpaa_rating\" does not exist\nLINE 1: ... COUNT(movie_title) FROM movies_total_gross WHERE MPAA_ratin...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": 315, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Moana',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.name does not exist\nLINE 1: SELECT T2.name \n               ^\nHINT:  Perhaps you meant to reference the column \"t2._name\".\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": 316, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Barry Cook',), ('Chris Buck',), ('Gary Trousdale',), ('Mark Dindal',), ('Mike Gabriel',), ('Ralph Zondag',), ('Roger Allers',), ('Ron Clements',), ('Wolfgang Reitherman',))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Barry Cook',), ('Chris Buck',), ('Gary Trousdale',), ('Mark Dindal',), ('Mike Gabriel',), ('Ralph Zondag',), ('Roger Allers',), ('Ron Clements',), ('Wolfgang Reitherman',))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": 317, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Dinosaur',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Dinosaur',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 321, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Moana', 'Adventure'), ('A Beautiful Planet', 'Documentary'), ('Alice Through the Looking Glass', 'Adventure'), ('Captain America: Civil War', 'Action'), ('Doctor Strange', 'Adventure'), ('Finding Dory', 'Adventure'), ('Pete\u2019s Dragon', 'Adventure'), ('Queen of Katwe', 'Drama'), ('Rogue One: A Star Wars Story', 'Adventure'), ('The BFG', 'Adventure'), ('The Finest Hours', 'Thriller/Suspense'), ('The Jungle Book', 'Adventure'), ('The Light Between Oceans', 'Drama'), ('Zootopia', 'Adventure'))", "rowcount": 14, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Moana', 'Adventure'), ('A Beautiful Planet', 'Documentary'), ('Alice Through the Looking Glass', 'Adventure'), ('Captain America: Civil War', 'Action'), ('Doctor Strange', 'Adventure'), ('Finding Dory', 'Adventure'), ('Pete\u2019s Dragon', 'Adventure'), ('Queen of Katwe', 'Drama'), ('Rogue One: A Star Wars Story', 'Adventure'), ('The BFG', 'Adventure'), ('The Finest Hours', 'Thriller/Suspense'), ('The Jungle Book', 'Adventure'), ('The Light Between Oceans', 'Drama'), ('Zootopia', 'Adventure'))", "rowcount": 14, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 323, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('The Many Adventures of Winnie the Pooh', 'Winnie the Pooh', 'Winnie the Pooh'), ('The Rescuers', 'Bernard and Miss Bianca', 'The Journey'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('The Many Adventures of Winnie the Pooh', 'Winnie the Pooh', 'Winnie the Pooh'), ('The Rescuers', 'Bernard and Miss Bianca', 'The Journey'))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 325, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Roger Allers',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "function translate(text, unknown) does not exist\nLINE 4: ORDER BY CAST(REPLACE(trim(translate(T1.total_gross, '$,'), ...\n                                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 328, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.name does not exist\nLINE 1: SELECT T2.name, T2.director \n               ^\nHINT:  Perhaps you meant to reference the column \"t2._name\".\n", "exec_able": false}}, "TP": 2, "FP": 3, "FN": 0}
{"sql_id": 329, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((12,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((12,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 330, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Saludos Amigos',), ('Make Mine Music',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Saludos Amigos',), ('Make Mine Music',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 331, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Rich Moore',), ('Ron Clements',), ('Mark Dindal',), ('Wilfred Jackson',), ('David Hand',), ('Gary Trousdale',), ('Barry Cook',), ('Chris Buck',), ('Byron Howard',), ('Ralph Zondag',), ('Chris Sanders',), ('Chris Williams',), ('Roger Allers',), ('Wolfgang Reitherman',), ('Clyde Geronimi',), ('Mike Gabriel',), ('Nathan Greno',), ('Don Hall',))", "rowcount": 18, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "syntax error at or near \"AS\"\nLINE 5: ...E(trim(REPLACE(T3.total_gross, '$', ''), ',', '') AS REAL) >...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 332, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Circle of Life',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "syntax error at or near \"AS\"\nLINE 4: ...E(trim('$' FROM replace(T1.total_gross, ',', '')) AS REAL) D...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 333, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('David Hand',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('David Hand',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 335, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Dinosaur',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Dinosaur',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 336, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((7,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((7,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 337, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Clayton',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Clayton',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 338, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('The Avengers',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('The Avengers',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 340, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Wolfgang Reitherman',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Wolfgang Reitherman',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 247, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('f',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('f',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": 594, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1000,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 595, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((523,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((523,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 596, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('901 Columbus Cafe',), ('A-1 BAKERY',), ('A2 CAFE',), ('Academy Bar & Kitchen',), (\"ADELITA'S CAKES\",), (\"AFC SUSHI @ MOLLIE STONE'S 2\",), ('Akikos Sushi',), (\"Akiko's Sushi Bar\",), ('A La Turca',), ('Allstar Donuts',), ('AL-MASRI EGYPTIAN RESTAURANT',), ('Amarena',), ('ANCHOR OYSTER BAR INC.',), ('ANH HONG PHU-NHUAN RESTAURANT',), ('APERTO RESTAURANT',), ('ARLEQUIN',), (\"ART'S CAFE\",), ('ASHOKA Indian Cuisine',), ('Asia Chinese Food #2',), ('ATAMI SUSHI BAR & GRILL',), ('ATLAS CAFE',), ('AT&T - Cognac Bar/ KITCHEN Room3232 [145080]',), ('AT&T - FIELD CLUB KITCHEN [145082]',), ('Aux Delices Vietnam',), ('AXUM',), (\"BABY'S EATERY AND PALABOK\",), ('Bamboo Restaurant',), ('BARBARY COAST PASTRY & COFFEE',), ('Battery Street Coffee Roastery',), ('BAYSIDE COFFEE SHOP',), ('BAY VIEW BOAT CLUB',), ('BAZAAR CAFE',), ('Beanery',), ('BEANERY INC.',), ('BEAN THERE COFFEE & TEA',), (\"Ben & Jerry's\",), ('BEN WAH RESTAURANT',), ('BIG MOUTH BURGERS',), ('BIO',), ('BISTRO AIX',), ('Bistro Burger',), ('B & J QUARTER POUNDER BURGERS',), ('B & M MEI SING RESTAURANT',), ('Bocadillos',), ('Bohemian Cigar Store',), ('Boudin Bakery',), ('Boudin Petit Cafe',), ('BRAZEN HEAD RESTAURANT',), ('Broadway Dim Sum',), ('BUFFALO BURGERS RESTAURANT',), ('BULLSHEAD RESTAURANT',), ('BURGERMEISTER',), ('BURMA SUPERSTAR RESTAURANT',), ('BURRITO EXPRESS',), (\"Buster's\",), ('CABLE CAR COFFEE CO',), ('Cafe Bastille',), ('Cafe Bellini',), ('Cafe Ethiopia',), ('CAFE LOMBARD',), ('Cafe Madeleine',), ('CAFE MUMS',), ('Cafe Niebaum Coppola',), ('Cafe Tiramisu',), ('CAFE V',), ('Cafe Venue',), ('CAFE X + O',), ('Caffe Del Sole',), ('Caffe Puccini',), ('Caffe Roma Coffee Roasting Co',), ('Caffe Sapore',), ('Caffe Trieste',), ('CAJUN PACIFIC',), (\"Calzone's\",), (\"CARL'S JUNIOR\",), ('Casa Mexicana Restaurant',), ('Cesario',), (\"CHARLIE'S DELI CAFE\",), ('CHATZ',), (\"CHAVITA'S MEXICAN RESTAURANT\",), ('CHEESE STEAK SHOP, THE',), ('Chestnut Diner',), ('CHEVRON #1512',), (\"CHOUQUET'S\",), ('Chowders',), (\"CITY'S CHOICE\",), ('CLADDAGH COFFEE',), ('CLEMENT BBQ RESTAURANT',), ('Clement Street Bar & Grill',), ('CLUB WAZIEMA',), ('Cocotte',), ('Columbus Cafe',), ('CONSTANS GROCERY',), ('Cordon Bleu',), ('CORSAGNA',), (\"Courtyard by Marriott at Fisherman's Wharf\",), ('COURTYARD BY MARRIOTT-COFFEE SHOP',), ('COURTYARD BY MARRIOTT-RESTAURANT',), ('COURTYARD BY MARRIOTT-STAFF KITCHEN',), ('COW HOLLOW CATERING',), ('CREPE EXPRESS',), ('C & Y Cafe',), ('Dar Bar Pakistani/Indian Cusine',), ('DELFINA RESTAURANT',), ('Delicious Dim Sum',), (\"Diller's Delicatessen\",), (\"DINO'S UNCLE VITO\",), ('Dol-Ho Restaurant',), ('Donut Time',), ('DRAGON WELL',), (\"Elaine's Kitchen\",), ('EL BURRITO EXPRESS #2',), ('EL POLLO SUPREMO',), ('Emporio Rulli Il Caffe at Union Square',), ('Escape From New York Pizza',), ('ESPERPENTO RESTAURANT',), ('Estia Restaurant',), ('EXIT THEATRE',), ('EXTREME  PIZZA',), ('Firenze By Night',), ('FIRST CUP',), (\"Fisherman's Pizzeria Inc [#50]\",), ('FLORIO',), ('Franchino',), ('FRINGALE',), ('GARDEN HOUSE CAFE',), ('Garden of Eden',), (\"GASPARE'S PIZZA HOUSE & REST.\",), ('GEARY STREET BELLA PIZZA',), ('Gelato Classico Italian Ice',), ('GENEVA STEAK HOUSE',), ('GIANT SCOOP',), ('Golden Boy Pizza',), ('GOLDEN CHARIOT BAKERY & REST',), ('Golden Coffee',), ('GOLDEN ISLAND CAFE',), ('Gordo Taqueria #1',), ('GORDO TAQUERIA #2',), ('GORDO TAQUERIA #6',), (\"Grumpy's American Pub\",), ('HAAGEN-DAZS #561',), ('HAI SUN RESTAURANT',), ('Hamburger Haven',), ('Han Bat Korean Restaurant',), ('HARD KNOX CAFE',), ('HEUNG YUEN RESTAURANT',), ('HIGHER GROUNDS',), ('HOANG DAT COFFEE SHOP',), ('Hook a Cook',), ('HOUSE OF HUNAN',), ('House of Nanking',), ('HOWARD STREET COFFEE ROASTERY CAFE',), ('Hunan Restaurant',), ('Hyde Street Seafood House & Raw Bar, Inc',), ('IL BORGO',), ('Il Pollaio',), ('Inga Donuts',), ('ISUMIYA',), ('JAVA BEACH CAFE',), ('JAVA SUPREME',), (\"J.B.'S PLACE\",), (\"JIM'S SMOKE SHOP\",), ('JITRA THAI CUISINE',), (\"Joanie's Diner Inc.\",), ('Just For You Cafe Inc.',), ('Just Wonton',), ('KABABAYAN FAST FOOD',), (\"KD'S GROG & GROCERY\",), ('KENTUCKY FRIED CHICKEN',), ('KENTUCKY FRIED CHICKEN #249',), ('KENTUCKY FRIED CHICKEN #50',), ('KEZAR PUB',), ('KFC/TACO BELL',), ('Kim Thanh Restaurant',), ('KISS SEAFOOD',), ('Kitchen Kura',), ('La Copa Loca',), ('Lanna Restaurant',), ('LA SANTANECA',), ('LA TORTILLA',), ('Latte Express #3',), (\"L'AVENIDA\",), ('LE ZINC',), ('LINCOLN PARK BAR AND GRILL',), (\"LITTLE HENRY'S RESTAURANT\",), (\"Loi's Vietnamese Restaurant\",), ('LOS HERMANOS',), ('LOS PLANES DE RENDEROS',), ('LUPA TRATTORIA',), (\"MAI'S VIETNAMESE RESTAURANT\",), (\"Mara's\",), (\"MARCELLO'S PIZZA\",), ('Marche Club of S.F.',), ('MARINA SUBMARINE',), ('MARIPOSA HUNTERS POINT YACHT CLUB',), ('Marnee Thai Restaurant',), ('MARTHA & BROS. COFFEE CO',), (\"Ma's Dim Sum & Cafe\",), ('Maykadeh Restaurant',), (\"MELISA'S CHINESE CUISINE\",), ('Michelangelo Caffe',), ('MIFUNE DON',), ('MIKI RESTAURANT',), ('MING TAI WUN TUN NOODLE, INC.',), ('Miyako',), ('Molinari Delicatessen',), ('MONROE RESIDENCE CLUB',), ('MOONLIGHT CAFE',), (\"Mo's Grill\",), ('MOULIN ROUGE',), ('MOZZARELLA DI BUFALA PIZZERIA II',), (\"MUFFIN'S MUFFIN\",), (\"Murphy's\",), ('MY FAVORITE CAFE',), ('NAPOLI PIZZA RESTAURANT',), ('Neiman Marcus On The Square',), ('NENAS RESTAURANT',), ('New Hollywood Bakery & Restaurant',), ('New Lun Ting Cafe, Inc',), ('New Moon Restaurant',), (\"Nick's Lighthouse\",), (\"Nizario's Pizza\",), (\"NOAH'S BAGELS\",), ('Nob Hill Cafe',), ('Nonna Rose Restaurant',), ('NOODLE EXPRESS',), ('NORDSTROM CAFE BISTRO',), ('NORTH BEACH PIZZA',), ('North Beach Restaurant',), ('Olympic Flame Cafe',), ('OMNI S.F. Hotel - 2nd Floor Pantry',), ('OMNI S.F. Hotel - 3rd Floor Pantry',), ('OMNI S.F. Hotel - Employee Cafeteria',), ('OMNI S.F. Hotel - Food & Beverage Storeroom',), ('ON THE BRIDGE',), ('Orale Orale Inc',), ('Original Perfect Hamburger',), (\"ORPHAN ANDY'S\",), ('Osha Thai Noodle Cafe',), ('PACIFIC CATCH',), ('PANDA EXPRESS',), ('Pasquales',), ('PATPONG THAI CUISINE, INC.',), (\"Pat's Cafe\",), (\"PEET'S COFFEES & TEAS\",), (\"Peet's Coffee & Tea\",), (\"Peet's Coffee & Tea, Inc\",), ('PEKING WOK RESTAURANT',), (\"Pete's Deli & Cafe\",), ('Piperade',), ('Plouf',), ('Polkers',), ('POMELO ON CHURCH',), ('PORK STORE CAFE',), ('PRESIDIO GOLF CLUB',), ('PRIMO PATIO CAFE',), ('PROGRESSIVE GROUNDS',), ('QUEEN ANNE HOTEL',), ('Quickly',), ('RADIO HABANA',), ('RAILROAD EXPRESSO CAFE',), ('Raintree Cafe',), ('RED BALLOON',), ('REINA RESTAURANT',), ('RINCON PERUANO RESTAURANT',), ('RINCONSITO SALVADORENO',), ('Ristorante Ideale',), ('Ritz-Carlton SF - Club Lounge',), ('Rogue Ales Public House',), ('Rose Pistola',), ('Roxanne Cafe',), ('Sabra Restaurant',), (\"Sam's Pizza\",), ('San Francisco Athletic Club',), ('SAN FRANCISCO SOUP COMPANY',), ('SAN MIGUEL RESTAURANT #2',), ('SANPPO RESTAURANT',), ('SEA BREEZE CAFE',), ('SECRET GARDEN TEA HOUSE',), ('SF Bay Club - Court Cafe',), ('SF MARRIOTT HOTEL PANTRY 4/F',), ('S.F. Pizza',), ('SHANGRILA VEGETARIAN REST',), ('SHERATON PALACE - EMP.  CAFETERIA',), ('Silverhat Bar, Inc',), ('Silver Star Cafe and Deli',), ('SIMPLE PLEASURES CAFE',), ('Sorabol-Stonestown Galleria',), ('Spiazzo',), ('Star Bagels',), ('STARBUCKS',), ('Starbucks Coffee',), ('STARBUCKS COFFEE #509',), ('STARBUCKS COFFEE CO.',), ('Starbucks Coffee Company',), ('Starbucks Coffee Company #6765',), ('Street Restaurant',), ('SUBWAY',), ('SUBWAY SANDWICHES & SALADS',), ('Sun Kwong Restaurant',), ('Sunrise Deli',), ('SUPER STAR RESTAURANT',), ('Sushi on North Beach',), ('Sushi Rapture',), ('SWEET DELIGHT BAKERY',), ('TACO LOS ALTOS',), ('TAL-Y-TARA TEA & POLO SHOPPE',), ('TANPOPO',), ('TAQUERIA EL FAROLITO NO. 2',), ('Taqueria Zorro',), ('TARAVAL OKAZU YA',), (\"TAWAN'S THAI FOOD\",), ('T C PASTRY',), ('TEKKA JAPANESE RESTAURANT',), ('Thai Spice Restaurant',), ('THANH THANH',), ('THE BITTER END',), ('THE GROVE FILLMORE',), ('The House',), ('The Old Ship Saloon',), ('The Posh Bagel',), ('The Stinking Rose',), (\"The Sunset's Best Seafood Restaurant\",), ('Tiramisu Kitchen',), ('Town & Country Club',), ('Toy Boat Dessert Cafe',), ('TRIPTYCH',), ('TSING TAO RESTAURANT',), (\"TULLY'S  COFFEE\",), ('Tung Sing Restaurant',), (\"Uncle Vito's Pizza\",), ('UNIVERSAL CAFE',), ('VANIDA THAI KITCHEN',), ('Vega',), ('Vieni-Vieni',), (\"Viking's Giant Sub\",), ('VIKINGS GIANT SUBMARINE',), ('VIKINGS GIANT SUBMARINE SANDWICHES',), ('Waterfront Bakery',), ('Whole Foods Steep Brew',), (\"WORKING GIRLS' CAFE III\",), ('YOU SEE SUSHI',), ('Yuet Lee Restaurant',), ('YUKOL PLACE THAI CUISINE',), (\"YUMMA'S MED GRILL\",), ('YUMMY YUMMY VIETNAMESE RESTAURANT',), ('ZA',), ('ZAOH RESTAURANT',), ('Zarzuela',), ('Zazie',), (\"ZEKE'S DIAMOND BAR\",), ('Zona Rosa',), ('ZUSHI-PUZZLE',))", "rowcount": 353, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('901 Columbus Cafe',), ('A-1 BAKERY',), ('A2 CAFE',), ('Academy Bar & Kitchen',), (\"ADELITA'S CAKES\",), (\"AFC SUSHI @ MOLLIE STONE'S 2\",), ('Akikos Sushi',), (\"Akiko's Sushi Bar\",), ('A La Turca',), ('Allstar Donuts',), ('AL-MASRI EGYPTIAN RESTAURANT',), ('Amarena',), ('ANCHOR OYSTER BAR INC.',), ('ANH HONG PHU-NHUAN RESTAURANT',), ('APERTO RESTAURANT',), ('ARLEQUIN',), (\"ART'S CAFE\",), ('ASHOKA Indian Cuisine',), ('Asia Chinese Food #2',), ('ATAMI SUSHI BAR & GRILL',), ('ATLAS CAFE',), ('AT&T - Cognac Bar/ KITCHEN Room3232 [145080]',), ('AT&T - FIELD CLUB KITCHEN [145082]',), ('Aux Delices Vietnam',), ('AXUM',), (\"BABY'S EATERY AND PALABOK\",), ('Bamboo Restaurant',), ('BARBARY COAST PASTRY & COFFEE',), ('Battery Street Coffee Roastery',), ('BAYSIDE COFFEE SHOP',), ('BAY VIEW BOAT CLUB',), ('BAZAAR CAFE',), ('Beanery',), ('BEANERY INC.',), ('BEAN THERE COFFEE & TEA',), (\"Ben & Jerry's\",), ('BEN WAH RESTAURANT',), ('BIG MOUTH BURGERS',), ('BIO',), ('BISTRO AIX',), ('Bistro Burger',), ('B & J QUARTER POUNDER BURGERS',), ('B & M MEI SING RESTAURANT',), ('Bocadillos',), ('Bohemian Cigar Store',), ('Boudin Bakery',), ('Boudin Petit Cafe',), ('BRAZEN HEAD RESTAURANT',), ('Broadway Dim Sum',), ('BUFFALO BURGERS RESTAURANT',), ('BULLSHEAD RESTAURANT',), ('BURGERMEISTER',), ('BURMA SUPERSTAR RESTAURANT',), ('BURRITO EXPRESS',), (\"Buster's\",), ('CABLE CAR COFFEE CO',), ('Cafe Bastille',), ('Cafe Bellini',), ('Cafe Ethiopia',), ('CAFE LOMBARD',), ('Cafe Madeleine',), ('CAFE MUMS',), ('Cafe Niebaum Coppola',), ('Cafe Tiramisu',), ('CAFE V',), ('Cafe Venue',), ('CAFE X + O',), ('Caffe Del Sole',), ('Caffe Puccini',), ('Caffe Roma Coffee Roasting Co',), ('Caffe Sapore',), ('Caffe Trieste',), ('CAJUN PACIFIC',), (\"Calzone's\",), (\"CARL'S JUNIOR\",), ('Casa Mexicana Restaurant',), ('Cesario',), (\"CHARLIE'S DELI CAFE\",), ('CHATZ',), (\"CHAVITA'S MEXICAN RESTAURANT\",), ('CHEESE STEAK SHOP, THE',), ('Chestnut Diner',), ('CHEVRON #1512',), (\"CHOUQUET'S\",), ('Chowders',), (\"CITY'S CHOICE\",), ('CLADDAGH COFFEE',), ('CLEMENT BBQ RESTAURANT',), ('Clement Street Bar & Grill',), ('CLUB WAZIEMA',), ('Cocotte',), ('Columbus Cafe',), ('CONSTANS GROCERY',), ('Cordon Bleu',), ('CORSAGNA',), (\"Courtyard by Marriott at Fisherman's Wharf\",), ('COURTYARD BY MARRIOTT-COFFEE SHOP',), ('COURTYARD BY MARRIOTT-RESTAURANT',), ('COURTYARD BY MARRIOTT-STAFF KITCHEN',), ('COW HOLLOW CATERING',), ('CREPE EXPRESS',), ('C & Y Cafe',), ('Dar Bar Pakistani/Indian Cusine',), ('DELFINA RESTAURANT',), ('Delicious Dim Sum',), (\"Diller's Delicatessen\",), (\"DINO'S UNCLE VITO\",), ('Dol-Ho Restaurant',), ('Donut Time',), ('DRAGON WELL',), (\"Elaine's Kitchen\",), ('EL BURRITO EXPRESS #2',), ('EL POLLO SUPREMO',), ('Emporio Rulli Il Caffe at Union Square',), ('Escape From New York Pizza',), ('ESPERPENTO RESTAURANT',), ('Estia Restaurant',), ('EXIT THEATRE',), ('EXTREME  PIZZA',), ('Firenze By Night',), ('FIRST CUP',), (\"Fisherman's Pizzeria Inc [#50]\",), ('FLORIO',), ('Franchino',), ('FRINGALE',), ('GARDEN HOUSE CAFE',), ('Garden of Eden',), (\"GASPARE'S PIZZA HOUSE & REST.\",), ('GEARY STREET BELLA PIZZA',), ('Gelato Classico Italian Ice',), ('GENEVA STEAK HOUSE',), ('GIANT SCOOP',), ('Golden Boy Pizza',), ('GOLDEN CHARIOT BAKERY & REST',), ('Golden Coffee',), ('GOLDEN ISLAND CAFE',), ('Gordo Taqueria #1',), ('GORDO TAQUERIA #2',), ('GORDO TAQUERIA #6',), (\"Grumpy's American Pub\",), ('HAAGEN-DAZS #561',), ('HAI SUN RESTAURANT',), ('Hamburger Haven',), ('Han Bat Korean Restaurant',), ('HARD KNOX CAFE',), ('HEUNG YUEN RESTAURANT',), ('HIGHER GROUNDS',), ('HOANG DAT COFFEE SHOP',), ('Hook a Cook',), ('HOUSE OF HUNAN',), ('House of Nanking',), ('HOWARD STREET COFFEE ROASTERY CAFE',), ('Hunan Restaurant',), ('Hyde Street Seafood House & Raw Bar, Inc',), ('IL BORGO',), ('Il Pollaio',), ('Inga Donuts',), ('ISUMIYA',), ('JAVA BEACH CAFE',), ('JAVA SUPREME',), (\"J.B.'S PLACE\",), (\"JIM'S SMOKE SHOP\",), ('JITRA THAI CUISINE',), (\"Joanie's Diner Inc.\",), ('Just For You Cafe Inc.',), ('Just Wonton',), ('KABABAYAN FAST FOOD',), (\"KD'S GROG & GROCERY\",), ('KENTUCKY FRIED CHICKEN',), ('KENTUCKY FRIED CHICKEN #249',), ('KENTUCKY FRIED CHICKEN #50',), ('KEZAR PUB',), ('KFC/TACO BELL',), ('Kim Thanh Restaurant',), ('KISS SEAFOOD',), ('Kitchen Kura',), ('La Copa Loca',), ('Lanna Restaurant',), ('LA SANTANECA',), ('LA TORTILLA',), ('Latte Express #3',), (\"L'AVENIDA\",), ('LE ZINC',), ('LINCOLN PARK BAR AND GRILL',), (\"LITTLE HENRY'S RESTAURANT\",), (\"Loi's Vietnamese Restaurant\",), ('LOS HERMANOS',), ('LOS PLANES DE RENDEROS',), ('LUPA TRATTORIA',), (\"MAI'S VIETNAMESE RESTAURANT\",), (\"Mara's\",), (\"MARCELLO'S PIZZA\",), ('Marche Club of S.F.',), ('MARINA SUBMARINE',), ('MARIPOSA HUNTERS POINT YACHT CLUB',), ('Marnee Thai Restaurant',), ('MARTHA & BROS. COFFEE CO',), (\"Ma's Dim Sum & Cafe\",), ('Maykadeh Restaurant',), (\"MELISA'S CHINESE CUISINE\",), ('Michelangelo Caffe',), ('MIFUNE DON',), ('MIKI RESTAURANT',), ('MING TAI WUN TUN NOODLE, INC.',), ('Miyako',), ('Molinari Delicatessen',), ('MONROE RESIDENCE CLUB',), ('MOONLIGHT CAFE',), (\"Mo's Grill\",), ('MOULIN ROUGE',), ('MOZZARELLA DI BUFALA PIZZERIA II',), (\"MUFFIN'S MUFFIN\",), (\"Murphy's\",), ('MY FAVORITE CAFE',), ('NAPOLI PIZZA RESTAURANT',), ('Neiman Marcus On The Square',), ('NENAS RESTAURANT',), ('New Hollywood Bakery & Restaurant',), ('New Lun Ting Cafe, Inc',), ('New Moon Restaurant',), (\"Nick's Lighthouse\",), (\"Nizario's Pizza\",), (\"NOAH'S BAGELS\",), ('Nob Hill Cafe',), ('Nonna Rose Restaurant',), ('NOODLE EXPRESS',), ('NORDSTROM CAFE BISTRO',), ('NORTH BEACH PIZZA',), ('North Beach Restaurant',), ('Olympic Flame Cafe',), ('OMNI S.F. Hotel - 2nd Floor Pantry',), ('OMNI S.F. Hotel - 3rd Floor Pantry',), ('OMNI S.F. Hotel - Employee Cafeteria',), ('OMNI S.F. Hotel - Food & Beverage Storeroom',), ('ON THE BRIDGE',), ('Orale Orale Inc',), ('Original Perfect Hamburger',), (\"ORPHAN ANDY'S\",), ('Osha Thai Noodle Cafe',), ('PACIFIC CATCH',), ('PANDA EXPRESS',), ('Pasquales',), ('PATPONG THAI CUISINE, INC.',), (\"Pat's Cafe\",), (\"PEET'S COFFEES & TEAS\",), (\"Peet's Coffee & Tea\",), (\"Peet's Coffee & Tea, Inc\",), ('PEKING WOK RESTAURANT',), (\"Pete's Deli & Cafe\",), ('Piperade',), ('Plouf',), ('Polkers',), ('POMELO ON CHURCH',), ('PORK STORE CAFE',), ('PRESIDIO GOLF CLUB',), ('PRIMO PATIO CAFE',), ('PROGRESSIVE GROUNDS',), ('QUEEN ANNE HOTEL',), ('Quickly',), ('RADIO HABANA',), ('RAILROAD EXPRESSO CAFE',), ('Raintree Cafe',), ('RED BALLOON',), ('REINA RESTAURANT',), ('RINCON PERUANO RESTAURANT',), ('RINCONSITO SALVADORENO',), ('Ristorante Ideale',), ('Ritz-Carlton SF - Club Lounge',), ('Rogue Ales Public House',), ('Rose Pistola',), ('Roxanne Cafe',), ('Sabra Restaurant',), (\"Sam's Pizza\",), ('San Francisco Athletic Club',), ('SAN FRANCISCO SOUP COMPANY',), ('SAN MIGUEL RESTAURANT #2',), ('SANPPO RESTAURANT',), ('SEA BREEZE CAFE',), ('SECRET GARDEN TEA HOUSE',), ('SF Bay Club - Court Cafe',), ('SF MARRIOTT HOTEL PANTRY 4/F',), ('S.F. Pizza',), ('SHANGRILA VEGETARIAN REST',), ('SHERATON PALACE - EMP.  CAFETERIA',), ('Silverhat Bar, Inc',), ('Silver Star Cafe and Deli',), ('SIMPLE PLEASURES CAFE',), ('Sorabol-Stonestown Galleria',), ('Spiazzo',), ('Star Bagels',), ('STARBUCKS',), ('Starbucks Coffee',), ('STARBUCKS COFFEE #509',), ('STARBUCKS COFFEE CO.',), ('Starbucks Coffee Company',), ('Starbucks Coffee Company #6765',), ('Street Restaurant',), ('SUBWAY',), ('SUBWAY SANDWICHES & SALADS',), ('Sun Kwong Restaurant',), ('Sunrise Deli',), ('SUPER STAR RESTAURANT',), ('Sushi on North Beach',), ('Sushi Rapture',), ('SWEET DELIGHT BAKERY',), ('TACO LOS ALTOS',), ('TAL-Y-TARA TEA & POLO SHOPPE',), ('TANPOPO',), ('TAQUERIA EL FAROLITO NO. 2',), ('Taqueria Zorro',), ('TARAVAL OKAZU YA',), (\"TAWAN'S THAI FOOD\",), ('T C PASTRY',), ('TEKKA JAPANESE RESTAURANT',), ('Thai Spice Restaurant',), ('THANH THANH',), ('THE BITTER END',), ('THE GROVE FILLMORE',), ('The House',), ('The Old Ship Saloon',), ('The Posh Bagel',), ('The Stinking Rose',), (\"The Sunset's Best Seafood Restaurant\",), ('Tiramisu Kitchen',), ('Town & Country Club',), ('Toy Boat Dessert Cafe',), ('TRIPTYCH',), ('TSING TAO RESTAURANT',), (\"TULLY'S  COFFEE\",), ('Tung Sing Restaurant',), (\"Uncle Vito's Pizza\",), ('UNIVERSAL CAFE',), ('VANIDA THAI KITCHEN',), ('Vega',), ('Vieni-Vieni',), (\"Viking's Giant Sub\",), ('VIKINGS GIANT SUBMARINE',), ('VIKINGS GIANT SUBMARINE SANDWICHES',), ('Waterfront Bakery',), ('Whole Foods Steep Brew',), (\"WORKING GIRLS' CAFE III\",), ('YOU SEE SUSHI',), ('Yuet Lee Restaurant',), ('YUKOL PLACE THAI CUISINE',), (\"YUMMA'S MED GRILL\",), ('YUMMY YUMMY VIETNAMESE RESTAURANT',), ('ZA',), ('ZAOH RESTAURANT',), ('Zarzuela',), ('Zazie',), (\"ZEKE'S DIAMOND BAR\",), ('Zona Rosa',), ('ZUSHI-PUZZLE',))", "rowcount": 353, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 597, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((374,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((374,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 598, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 599, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 600, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('SF',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('SF',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 601, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 602, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 606, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": 607, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1000,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 608, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 604, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('74.0000000000000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('74.0000000000000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 418, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Anastasia', 'Hansen'), ('Arnold', 'Holder'), ('Bob', 'Benson'), ('Craig', 'Kerr'), ('David', 'Hodges'), ('Jessica', 'Anthony'), ('Joshua', 'Rosa'), ('Lisa', 'Tillman'), ('Mark', 'Atkins'), ('Randall', 'Curtis'), ('Robert', 'Morin'), ('Rosemary', 'Kennedy'), ('Ruth', 'Noble'), ('Sarah', 'Lindsey'), ('Standard', 'Murray'), ('Vicky', 'Coleman'), ('Zach', 'Barber'))", "rowcount": 17, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Anastasia', 'Hansen'), ('Arnold', 'Holder'), ('Bob', 'Benson'), ('Craig', 'Kerr'), ('David', 'Hodges'), ('Jessica', 'Anthony'), ('Joshua', 'Rosa'), ('Lisa', 'Tillman'), ('Mark', 'Atkins'), ('Randall', 'Curtis'), ('Robert', 'Morin'), ('Rosemary', 'Kennedy'), ('Ruth', 'Noble'), ('Sarah', 'Lindsey'), ('Standard', 'Murray'), ('Vicky', 'Coleman'), ('Zach', 'Barber'))", "rowcount": 17, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 419, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((68,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((68,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 420, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((108,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((108,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 421, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 422, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((\"CHICAGO'S HOME OF CHICKEN & WAFFLES\",), ('COALFIRE',), ('COMPUTER AND NETWORK SOLUTIONS',), ('DUKS RED HOTS',), ('EL CONCORDIA',), ('EL MEZQUITE GRILL',), ('EL SALVADOR RESTAURANT',), ('FOREVER YOGURT',), ('GOLDEN CRUST PIZZERIA',), ('JALISCO RESTAURANT',), ('LA HACIENDITA TAQUERIA INC',), ('LAS ISLAS MARIAS',), ('McDonalds',), ('ORANGE GARDEN RESTAURANT LLC',), (\"PIZZARO'S\",), ('PR CAFETERIA INCORPORATED',), ('ROCKIN  TACO',), ('SAN JOSE RESTAURANT, INC.',), ('SMOTHER BROTHERS',), ('Southern Grill',), ('STARFRUIT CAFE',), ('TAQUERIA JAMAY',), ('THE PARTHENON RESTAURANT INC',), ('THE WORM HOLE',), (\"TONY'S BURRITO MEX, INC\",))", "rowcount": 25, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((\"CHICAGO'S HOME OF CHICKEN & WAFFLES\",), ('COALFIRE',), ('COMPUTER AND NETWORK SOLUTIONS',), ('DUKS RED HOTS',), ('EL CONCORDIA',), ('EL MEZQUITE GRILL',), ('EL SALVADOR RESTAURANT',), ('FOREVER YOGURT',), ('GOLDEN CRUST PIZZERIA',), ('JALISCO RESTAURANT',), ('LA HACIENDITA TAQUERIA INC',), ('LAS ISLAS MARIAS',), ('McDonalds',), ('ORANGE GARDEN RESTAURANT LLC',), (\"PIZZARO'S\",), ('PR CAFETERIA INCORPORATED',), ('ROCKIN  TACO',), ('SAN JOSE RESTAURANT, INC.',), ('SMOTHER BROTHERS',), ('Southern Grill',), ('STARFRUIT CAFE',), ('TAQUERIA JAMAY',), ('THE PARTHENON RESTAURANT INC',), ('THE WORM HOLE',), (\"TONY'S BURRITO MEX, INC\",))", "rowcount": 25, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 423, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 424, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 425, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 426, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "invalid input syntax for type date: \"2012-05\"\nLINE 4: ...RE DATE_TRUNC('month', T1.inspection_date) = DATE '2012-05' \n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 427, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 428, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "invalid input syntax for type timestamp with time zone: \"2014-02\"\nLINE 5: WHERE DATE_TRUNC('month', T2.inspection_date) = '2014-02' \n                                                        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 430, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 431, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 433, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((125.125,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((125.125,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 434, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 435, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 436, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 437, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 439, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 440, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 441, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "invalid input syntax for type timestamp with time zone: \"2010-02\"\nLINE 5: AND DATE_TRUNC('month', T2.inspection_date) = '2010-02' \n                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 212, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6.342229199372056,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6.342229199372056,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 213, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((84.61538461538461,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"genes\" does not exist\nLINE 1: ...SE 0 END) AS REAL) * 100 / COUNT(T2.GeneID1) FROM Genes AS T...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 556, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('NO',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.id does not exist\nLINE 3: RIGHT JOIN \"Master\" AS T2 ON T1.ID = T2.playerID\n                                     ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 557, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 611, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('222-23-2222',), ('444-45-4444',), ('500-50-0505',), ('925-45-7116',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('222-23-2222',), ('444-45-4444',), ('500-50-0505',), ('925-45-7116',))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 612, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((22500.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.positionid does not exist\nLINE 4: ON T1.positionID = T2.positionID \n           ^\nHINT:  Perhaps you meant to reference the column \"t1.positionID\".\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": 613, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.positionid does not exist\nLINE 4: ON T1.positionID = T2.positionID \n           ^\nHINT:  Perhaps you meant to reference the column \"t1.positionID\".\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 614, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((20333.333333333332,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.positionid does not exist\nLINE 1: ...FROM employee AS T1 INNER JOIN _position AS T2 ON T1.positio...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.positionID\".\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 617, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 618, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('David', 'Whitehead'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('David', 'Whitehead'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": 619, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 620, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((20333.333333333332,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.positionid does not exist\nLINE 1: ...FROM employee AS T1 INNER JOIN _position AS T2 ON T1.positio...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.positionID\".\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 621, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((55250.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.positionid does not exist\nLINE 3: INNER JOIN _position AS T2 ON T1.positionID = T2.positionID \n                                      ^\nHINT:  Perhaps you meant to reference the column \"t1.positionID\".\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 507, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0.0,), (8.026030368763557,), (11.946050096339114,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"playerinfo\" does not exist\nLINE 2: FROM PlayerInfo AS T1\n             ^\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 553, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((27, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"img_obj\" does not exist\nLINE 1: ...D T1.W = 42 AND T1.H = 51 THEN 1 ELSE 0 END) FROM IMG_OBJ AS...\n                                                             ^\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 393, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1206408'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1206408'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 96, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"episode\" does not exist\nLINE 2: FROM Episode AS T1 \n             ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 98, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Constantine Makris',), ('Rene Balcer',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Constantine Makris',), ('Rene Balcer',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": 350, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((14,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.start does not exist\nLINE 4: WHERE DATE_PART('year', T2.start::date) = 2015 \n                                ^\nHINT:  Perhaps you meant to reference the column \"t2._start\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 351, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((92.03056768558952,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.start does not exist\nLINE 1: SELECT CAST(SUM(CASE WHEN EXTRACT(YEAR FROM T2.start::date) ...\n                                                    ^\nHINT:  Perhaps you meant to reference the column \"t2._start\".\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": 356, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 372, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Radishes',), ('Celery',), ('Celery',), ('Sardines',), ('Sardines',), ('Sliced Bananas',), ('Apple Sauce',), ('Breakfast',), ('Strawberries',), ('Strawberries',), ('Strawberries',), ('Strawberries',), ('Preserved figs',), ('BLUE POINTS',), ('CONSOMME ANGLAISE',), (\"BROILED SHAD, A LA MAITRE D'HOTEL\",), ('SLICED CUCUMBERS',), ('SALTED ALMONDS',), ('SALTED ALMONDS',), ('POTATOES, JULIEN',), ('Cracked Wheat',), ('Cracked Wheat',), ('Cracked Wheat',), ('Malt Breakfast Food',), ('BOILED BEEF TONGUE, ITALIAN SAUCE',), ('Young Onions',), ('Pears',), ('Pears',), ('ROAST SIRLOIN OF BEEF, YORKSHIRE PUDDING',), ('Huhnerbruhe',), ('ROAST EASTER LAMB, MINT SAUCE',), ('Hafergrutze',), ('Hafergrutze',), ('BROWNED POTATOES',), ('Pampelmuse',), ('Apfelsinen',), ('Apfelsinen',), ('Ananas',), ('Milchreis',), ('Grape fruit',), ('Grape fruit',), ('Grape fruit',), ('Grape fruit',), ('Oranges',), ('Oranges',), ('Oranges',), ('Oranges',), ('Oranges',), ('Oranges',), ('Oranges',), ('Oranges',), ('Oranges',), ('Oranges',), ('Oranges',), ('Oranges',), ('Clam Fritters',), ('Filet v. Schildkrote m. Truffeln',), ('Bouillon, en Tasse',), ('Spargel Suppe',), ('Kraftsuppe, konigliche Art',), ('Rissoles a la Merrill',), ('S. Julien',), ('Chambertin',), ('St. Julien',), ('Mashed potatoes',), ('Mashed potatoes',), ('Mashed potatoes',), ('Breaded veal cutlet with peas',), ('Hind-quarter of spring lamb with stuffed tomatoes',), ('Doucette salad',), ('New beets',), ('Salisbury steak au cresson',), ('Boiled rice',), ('Boiled rice',), ('Boiled rice',), ('Boiled rice',), ('Boiled rice',), ('Boiled rice',), ('Boiled rice',), ('Boiled rice',), ('Boiled rice',), ('Boiled rice',), ('Stewed oyster plant',), ('Boiled onions, cream sauce',), ('Old fashioned rice pudding',), ('Ice cream',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Coffee',), ('Tea',), ('Tea',), ('Tea',), ('Tea',), ('Tea',), ('Tea',), ('Tea',), ('Tea',), ('Tea',), ('Tea',), ('Tea',), ('Tea',), ('Tea',), ('Tea',), ('Tea',), ('Tea',), ('Tea',), ('Tea',), ('Milk',), ('Milk',), ('Mush',), ('Rolled Oats',), ('Rolled Oats',), ('Rolled Oats',), ('Rolled Oats',), ('Rolled Oats',), ('Rolled Oats',), ('Small Hominy',), ('Broiled Mackerel',), ('Kippered Herring',), ('Kippered Herring',), ('Kippered Herring',), ('Strawberries with cream',), ('Compote of fruits',), ('Orange marmalade',), ('Baked apples with cream',), ('Bananas',), ('Bananas',), ('Bananas',), ('Bananas',), ('Bananas with cream',), ('Austern in der Schale',), ('Stewed prunes',), ('Stewed prunes',), ('Stewed prunes',), ('Fruit',), ('Fruit',), ('Fruit',), ('Fruit',), ('Fruit',), ('Fruit',), ('Fruit',), ('Fruit',), ('Fruit',), ('Fruit',), ('Fruit',), ('Fruit',), ('Fruit',), ('Grapes',), ('Honey in comb',), ('Apples',), ('Apples',), ('Apples',), ('Apples',), ('Apples',), ('Apples',), ('Oranges sliced',), ('Stewed tomatoes',), ('Stewed tomatoes',), ('Stewed tomatoes',), ('Large pot of coffee',), ('Cup of coffee (served in small pot)',), ('Large pot of Oolong tea',), ('Pot of chocolate',), ('Pitcher of milk',), ('Pot of broma',), ('Suppe, Schlossherrin Art',), ('Eggs, boiled [2]',), ('Sliced Bananas and Cream',), ('Baked Apples and Cream',), ('Pettijohn Breakfast Food',), ('Quaker Oats',), ('Quaker Oats',), ('Quaker Oats',), ('Quaker Oats',), ('Quaker Oats',), ('Hotch potch von Ochsenschwanazen',), ('Sugar Cured Ham',), ('PINE APPLE FRITTERS, SAUCE MARASCHINO',), ('Planked shad',), ('Baked bluefish, Duxelle',), (\"Consomme aux Quenelle's\",), ('Milk rice',), ('Mohren Suppe mit Sago',), ('French rolls',), ('French rolls',), ('Milk rolls',), ('Corn muffins',), ('Corn muffins',), ('Omelette aux fines herbes',), ('Boiled eggs',), ('Boiled eggs',), ('Bacon and eggs',), ('Fish cakes',), ('Fish cakes',), ('Fish cakes',), ('Fish cakes',), ('Fish cakes',), ('Fish cakes',), ('Food',), ('Shreaded Wheat',), ('Clam cocktail',), ('Clam cocktail',), ('Oyster cocktail',), ('Oyster cocktail',), ('Little Neck clams',), ('Stuffed olives',), ('Malaga grapes',), ('Martineaus',), ('Oatmeal',), ('Oatmeal',), ('hominy with milk',), ('Baked apples',), ('PATTIES OF SWEET BREADS, A LA TOULOUSE',), ('Chicken broth, per cup',), ('Terrapin, Maryland',), ('Sardines on toast',), ('English snipe',), ('Charlotte Russe',), ('Charlotte Russe',), ('Tutti frutti',), ('Lady fingers',), ('Marrow bones on toast',), ('Fresh mushrooms on toast',), ('Farm Sausage',), ('Club sandwich',), ('Baked Stuffed Mullet & Sauce Pomard',), ('Thon marine',), ('Croquettes of sweetbreads',), ('Teal duck',), ('Demi-tasse',), ('Strawberry',), ('Oyster Bay asparagus',), ('SMALL TENDERLOIN STEAK, A LA STANLEY',), ('Hoot Mon Mush',), ('Hoot Mon Mush',), ('Apollinoris',), ('Vve Cliquot',), ('Chicken broth',), ('Chicken broth',), ('Fruits in Season',), ('Fruits in Season',), ('Fruits in Season',), ('Fruits in Season',), ('Fruits in Season',), ('Fruits in Season',), ('Salt Codfish, Spanish Style',), ('Salt Codfish, Spanish Style',), ('Salt Codfish, Spanish Style',), ('Oatmeal Porridge',), ('Oatmeal Porridge',), ('Oatmeal Porridge',), ('Oatmeal Porridge',), ('Oatmeal Porridge',), ('Oatmeal Porridge',), ('Oatmeal Porridge',), ('Mashed Hominy',), ('Plain Omelette',), ('Plain Omelette',), ('Plain Omelette',), ('Canape, Martha',), ('Puree of beans',), ('Fried Flounders',), ('Strawberry short cake',), ('Fried smelts',), ('Fried smelts',), ('Fried fish',), ('Fried fish',), ('Oxford Sausage',), ('BUZZARD BAY OYSTERS',), ('Strained gumbo',), ('Bouillon in cup',), ('Queen olives',), ('Chow chow',), ('Ribs of prime beef',), (\"Calf's tongue, caper sauce\",), ('Assorted cakes',), ('Scollops en caisse, Supreme',), ('Irish stew',), ('Marrow on toast, Bordelaise',), ('Lobster salad',), ('Potato salad',), ('Chicken salad',), ('Spinach with egg',), ('Boiled potatoes',), ('Boiled potatoes',), ('Boiled potatoes',), ('Boiled potatoes',), ('Boiled potatoes',), ('Baba au rhum',), ('Hot buns',), ('Tongue',), ('Lemon ice cream',), (\"Pickled lambs' tongues\",), ('Blackberry tarts',), ('Apricots',), ('Red currant jam',), ('Chipped beef',), ('Turkey',), ('Crackers',), ('Chocolate',), ('Chocolate',), ('Chocolate',), ('Chocolate',), ('Chocolate',), ('Chocolate',), ('Chocolate',), ('Roast beef',), ('Corned beef',), ('Boned capon',), ('Lamb',), ('Cumberland ham',), ('Chicken',), ('Fried Eggs',), ('Fried Eggs',), ('Fried Eggs',), ('Broiled Ham',), ('Broiled Ham',), ('Broiled Ham',), ('Broiled Ham',), ('Broiled Ham',), ('Broiled Ham',), ('Broiled Ham',), ('Broiled Ham',), ('Broiled Ham',), ('Broiled Ham',), ('Roast veal',), ('Rolls',), ('Griddle cakes',), ('Griddle cakes',), ('Griddle cakes',), ('Griddle cakes',), ('Griddle cakes',), ('Porterhouse Steak',), ('Pommes de Terre a la Creme',), ('Tenderloin Steak',), ('Sirloin Steak',), ('Sirloin Steak',), ('Sirloin Steak',), ('Sirloin Steak',), ('Filet mignon, Lyonnaise',), ('All Kinds of Pies per cut',), ('Sandwiches of all Kinds',), ('Small Steak',), ('Hamburger Steak',), ('Pork Chops',), ('Pork Chops',), ('Ham & Eggs',), ('Bacon & Eggs',), ('Fried Liver',), ('German Pancake',), ('Oysters & Clams',), ('Hominy',), ('Hominy',), ('Hominy',), (\"Omelette a l'Oseille\",), ('Eggs au Beurre Noir',), ('Eggs au Beurre Noir',), ('Eggs au Beurre Noir',), ('Smelts - Remoulade',), ('Sirloin Steak with Mushrooms',), ('Sirloin Steak with Mushrooms',), ('Grilled Ham',), ('Calves Liver & Bacon',), ('Calves Liver & Bacon',), ('Calves Liver & Bacon',), ('Calves Liver & Bacon',), ('Lamb Hash - en Bordure',), ('Mutton Chops - Mashed Potatoes',), ('Corn Cakes',), ('Corn Cakes',), ('Corn Cakes',), ('Corn Cakes',), ('Marmalade',), ('Marmalade',), ('Marmalade',), ('Marmalade',), ('Marmalade',), ('Marmalade',), ('Marmalade',), ('Marmalade',), ('Marmalade',), ('Marmalade',), ('Marmalade',), ('Marmalade',), ('Marmalade',), ('Marmalade',), ('Marmalade',), ('Marmalade',), ('Marmalade',), ('Marmalade',), ('Marmalade',), ('Jam',), ('Jam',), ('Jam',), ('Jam',), ('Jam',), ('Jam',), ('Jam',), ('Jam',), ('Jam',), ('Jam',), ('Jam',), ('Jam',), ('Cocoa',), ('Cocoa',), ('Cocoa',), ('Cocoa',), ('Cocoa',), ('Cocoa',), ('Cocoa',), ('Cocoa',), ('Cocoa',), ('Cocoa',), ('Oat Meal',), ('Oat Meal',), ('Oat Meal',), ('Oat Meal',), ('Scrambled Eggs',), ('Scrambled Eggs',), ('Poached Eggs on Toast',), ('Poached Eggs on Toast',), ('Broiled Fresh Mackerel',), ('Broiled Fresh Mackerel',), ('Chicken Liver with Bacon',), ('Minced Veal a la Zingari',), ('Minced Veal a la Zingari',), ('Minced Veal a la Zingari',), ('Lyonnaise Potatoes',), ('Lyonnaise Potatoes',), ('Baked Weakfish',), ('Half and Half Scallops & Oysters',), ('Pork Chops Piquante Sauce',), ('Broiled Kidney with Bacon',), ('Dry Toast',), ('Dry Toast',), ('Dry Toast',), ('Dry Toast',), ('Bunns',), ('Graham Muffins',), ('Hot Cakes',), ('Ponche de huevo, sambayon, frolada, con pan',), ('Smelts Meuniere',), ('Findon Haddock',), ('Findon Haddock',), ('Boiled Whiting and Parsley Sauce',), ('Haricot Mutton',), ('Sausages and Mashed Potatoes',), ('Fried Flounder',), ('Grillirte Kuken',), ('Fillet Steaks aux Champignon',), ('broiled shad',), ('broiled shad',), ('Saratoga Chips',), ('Grilled Mutton Chops',), ('Grilled Mutton Chops',), ('Grilled Mutton Chops',), ('Grilled Mutton Chops',), ('Grilled Mutton Chops',), ('Dried Hash',), ('Dried Hash',), ('Sausage',), ('Porto-Rico',), ('Buckwheat Cakes',), ('Buckwheat Cakes',), ('Buckwheat Cakes',), ('Buckwheat Cakes',), ('Buckwheat Cakes',), ('Sliced Pineapples',), ('Soles Normandy',), ('Broiled Salt Mackerel',), ('Broiled Salt Mackerel',), ('Shad roe and bacon',), ('Shad roe and bacon',), ('Tripe Fricassee',), ('Minced scallops on toast',), ('Oyster Omelette',), ('Stewed Tripe',), ('Stewed Tripe',), ('Corned Beef Hash',), ('Corned Beef Hash',), ('Corned Beef Hash',), ('Corned Beef Hash',), ('Corned Beef Hash',), ('Corned Beef Hash',), ('Corned Beef Hash',), ('Corned Beef Hash',), ('Corned Beef Hash',), ('Corned Beef Hash',), ('Corned Beef Hash',), ('Broiled Mackerel, Butter Sauce',), ('Consomme Benoiton',), ('Puree of Tomatoes',), ('Filet Steaks aux Champignon',), ('Consomme Plain',), ('Minced Chicken, Creamed Rice',), ('Schmorbraten a la bourgeoise',), ('Kartoffelmus',), ('Tripe, Spanish Style',), ('Tripe, Spanish Style',), ('Consomme San Remo',), ('Gebackene Kartoffeln',), ('Calves\u2019 Liver & Bacon',), ('Eggs to order',), ('Eggs to order',), ('Eggs to order',), ('Eggs to order',), ('Eggs to order',), ('Eggs to order',), ('Eggs to order',), ('Eggs to order',), ('Eggs to order',), ('Eggs to order',), ('Eggs to order',), ('Consomme Maceo',), ('Puree Mongol',), ('Consomme Printanier',), ('Chicken Mulligatawny',), ('Split Rolls',), ('Split Rolls',), ('Split Rolls',), ('Split Rolls',), ('Split Rolls',), ('French bread',), ('French bread',), ('French bread',), ('French bread',), ('French bread',), ('French bread',), ('French bread',), ('Corn bread',), ('Corn bread',), ('Corn bread',), ('Corn bread',), ('Corn bread',), ('Corn bread',), ('Corn bread',), ('Corn bread',), ('Corn bread',), ('Beef Stew',), ('Tomato Soup',), ('Filet of sole a la Horly',), ('Diamond back terrapin',), ('Fried Plaice - Meuniere',), ('Sausage & Mashed Potatoes',), ('Fried Jew Fish, Sauce Tartare',), ('Fruit in Season',), ('Fruit in Season',), ('Fruit in Season',), ('GREEN PEAS',), ('Fried country sausage and buckwheat cakes',), ('Stewed california prunes',), ('Ham omelette',), ('Ham omelette',), ('Fried hominy',), ('Broiled bluefish',), ('Egg, to order',), ('Diamond stew',), ('Diamond stew',), ('Whitefish',), (\"Shad, Maitre d'Hotel\",), ('Codfish in Cream',), ('Fried Scollops',), ('Breakfast Bacon',), (\"Calf's Liver and Bacon\",), (\"Calf's Liver and Bacon\",), ('Pork Spare Ribs',), ('English Mutton Chops',), ('Broiled Spring Chicken',), ('Broiled Spring Chicken',), ('Corned Beef Hash, Browned',), ('Veal Cutlets, Breaded, Tomato Sauce',), ('Stewed Honeycomb Tripe, Lyonnaise',), ('Frizzled Beef, in Cream',), ('Eggs as Ordered',), ('Shredded Wheat Biscuits',), ('Vienna Rolls',), ('Papovers',), ('Corn Meal Mush',), ('Boiled',), ('Scotch grouse en casserole',), (\"Soup \u00e1 l'\u00e9cossaise\",), ('Broiled Blue Fish',), ('Chicken Liver on Toast with Bacon',), ('Chicken Liver on Toast with Bacon',), ('PUNCH, REPUBLICAN',), ('Puff over',), ('Passion Fruit',), ('Passion Fruit',), ('Kippered Herrings',), ('Kippered Herrings',), ('Curried Pork and Rice',), ('Stewed Tripe with Cream sauce',), ('Eggs, boiled',), ('Fillets of Beef with Mushrooms',), ('Consomme Macaroni',), ('Hard Boiled Egg',), ('Cream Cheese',), (\"Broiled Mackerel - Maitre d'Hotel\",), ('Sirloin Steak -- Fried Onions',), ('Devilled Chicken',), ('Lamb Hash en Bordure',), ('Apfel',), ('Maisgries',), ('Snowflakes',), ('Gebratene Seezunge',), ('Fried Halibut, Sauce Tartare',), ('Yarmouth Bloaters',), ('Yarmouth Bloaters',), ('Yarmouth Bloaters',), ('Yarmouth Bloaters',), ('Yarmouth Bloaters',), ('Fillet Steads with Mushrooms',), ('Curried Prawns and Rice, Bombay Duck',), ('Lamb Chops, Broiled Plain',), ('Whiting - Meuniere',), ('Broiled Rashers of Bacon with Fried Bananas',), ('Broiled Rashers of Bacon with Fried Bananas',), ('Sirloin Steak - Fried Onions',), (\"Lambs' Liver Saute\",), (\"Lambs' Liver Saute\",), (\"Lambs' Liver Saute\",), ('Tripe Fritters',), ('Tripe Fritters',), ('Jambon Grille',), ('Mutton Chops - Saute Potatoes',), ('Calfs Liver + Bacon',), ('Cold Smoked Tongue and Ham',), ('Fried & Boiled Potatoes',), ('Sirloin Steaks aux Cepes',), ('Beefsteaks with Horseradish',), ('Dry and buttered Toast',), ('English Muffins',), ('English Muffins',), ('English Muffins',), ('English Muffins',), ('Salt Cod, Egg Sauce',), ('Rice Cakes',), ('Rice Cakes',), ('Rice Cakes',), ('Rice Cakes',), ('Honey in the Comb',), ('Honey in the Comb',), ('Honey in the Comb',), ('Ris de Veau aux Epinards',), ('Quail on Toast',), ('Broiled Green Bluefish, Drawn Butter',), ('Roast Leg of Mutton & Black Currant',), ('Frizzled Breakfast Bacon (to order)',), ('French Fried Potatoes with Dinner Orders',), ('Beefsteak and Onions',), ('Roast (Vancouver) Suckling Pig & Bread Sauce',), ('Saute of Kidney',), ('Knuckle of Veal, Bacon & Parsely Sauce',), ('liver and bacon',), ('liver and bacon',), ('Fillet de Boeuf a la Parisienne',), ('Fried Chicken a la Maryland',), ('Fried sole',), ('Salt mackerel',), ('Bouchees aux Macaroni',), ('Cold Ham with Potato Salad',), ('mutton chops with potato chips',), ('Tenderloin of pork, Robert sauce',), ('Roast Goose & Apple Sauce',), ('Oyster Stew',), ('Hot Breads',), ('Pork Sausage and Lyonnaise Potatoes',), ('Pork Sausage and Lyonnaise Potatoes',), ('Baked Apple Dumpling, Hard Sauce',), (\"Potato a la Maitre d'Hotel\",), ('Cracked Wheat with Fresh Milk',), ('Boiled Cabbage',), ('Strawberries and Cream',), ('Chicken Liver with Mushrooms',), ('Mashed Pumpkins',), ('Bread Pudding, Hard Sauce',), ('Indo Curry & Rice',), ('Steamed Apple Pudding & Hard Sauce',), ('Fruit Pie',), ('Chocolate Pudding with Cream',), ('Scotch Sandwiches',), ('Chocolate Cream & Sauce',), ('Corn Starch Pudding with Cream',), ('Swiss Rolls',), ('Cold Ham',), ('Cold Ham',), ('Cold Ham',), ('Cup Custard',), ('Codfish Cakes',), ('Lettuce',), ('Cum-quats',), ('Orange',), (\"Calf's Liver Saute\",), ('Brazil Nuts',), ('Almonds & Raisins',), ('Cheshire Cheese',), ('Stilton Cheese',), ('Broiled Lambs Kidney',), ('MacLaren Cheese',), ('Stewed Tripe Spanish',), ('Stewed Tripe Spanish',), ('Breakfast Jem',), ('Breakfast Rolls',), ('Breakfast Rolls',), ('Breakfast Rolls',), ('Germea',), ('Butter Cakes with Maple Syrup',), ('Hot Rolls',), ('Hot Rolls',), ('Hot Rolls',), ('Hot Rolls',), ('Hot Rolls',), ('Hot Rolls',), ('Hot Rolls',), ('Kraftsuppe, Prinzessin Art',), ('Boiled Mackerel',), ('Boiled Mackerel',), ('Gekochter Steinbutt, Granatsauce, zerlassene Butter',), ('Findon Haddocks',), ('Cromesquis von Schinken',), ('Curried Pork & Rice',), ('Fillet Steaks and Mushrooms',), ('Blumenkohl, hollandische Sauce',), ('Cotelettes de Veau, Sauce Tomate',), ('Gratinierter Eierkuchen nach Mornay',), ('Entenbraten, Bordeaux Sauce',), ('Pork Sausages, Snowflake Potatoes',), (\"Lambs' Liver with Bacon\",), ('Mutton Chops & Potato Chips',), ('Citronen-Auflauf',), ('Cape Horn Hash',), ('A. A. Oats with Fresh Milk',), ('Fried Whiting',), ('Fried Whiting',), ('Fried Whiting',), ('Pikelets',), ('Flannel Cakes',), ('Flannel Cakes',), ('Saute of Sheeps Kidney',), ('Smoked Schnapper, Butter Sauce',), ('Fillet Steak Fried Potatoes',), ('Finnon Haddock Butter Sauce',), ('Mutton Stew',), ('Broiled Lamb Chops',), ('Wheat Cakes',), ('Beef Steak & onions',), ('Fried Bananas',), ('Fried Bananas',), ('Fried Bananas',), ('Egg to Order',), ('Beef Steak and Champignons',), ('Boiled potato',), ('Currant Buns',), ('Waffle',), ('Sirloin Steaks with Onions',), ('Dipped Toast',), ('Tripe a la Bordelaise',), ('Curried Chicken with Rice',), ('Mutton Chops',), ('Mutton Chops',), ('Potato Chips',), ('Curried Veal and Rice',), ('Broiled Rashers of Bacon',), ('Cold: Ox Tongue',), ('Tripe, Stewed in Cream',), ('Egg Muffins',), ('Devilled Mutton Kidneys and Bacon',), ('Coffee Cake',), ('Fried Sausages, Mashed Potatoes',), ('Devilled Kidney',), ('Pettijohn',), ('Fried Ham & Eggs',), ('Boiled Cracked Wheat',), ('Spanish Omelettes',), ('Calves Liver and Onions',), ('Mutton Chops (to order)',), ('Jacket Potatoes',), ('Boiled Corn Meal with Cream',), ('Maple Syrup',), ('Curried Shrimps and Rice',), ('Fried Fresh Fish',), ('Honey',), ('Fillet Steaks with Mushrooms',), ('Porterhouse Steak and Lamb Chops',), ('Tongues and Sounds',), ('Cornmeal Mush',), ('Breakfast Delight',), ('Fresh Comb Honey',), ('Broiled Boned Smelts',), ('Blue Points on the Shell',), ('Broiled Lobster',), ('Fried Country Sausages and Lima Beans',), ('Oyster Pan Roast on Toast',), ('Mutton Chops Bratonne',), ('Broiled Chicken with Petit Pois',), ('Roast Leg of English Mutton',), ('Roast Leg of English Mutton',), ('Hamburger Steak and Onions',), ('Pork Sausages',), ('Pork Sausages',), ('Veal Cutlets Breaded',), ('Veal Cutlets Breaded',), ('Little Neck Clams on the Shell',), ('Frankfurter Sausages and Sauerkraut',), ('Curried Prawns and Rice with Bombay Duck',), ('Hamburg Steak with Fried Onions',), ('Mashed Turnips',), ('Fried Liver & Bacon',), ('Potatoes',), ('Potatoes Saute',), ('Eclairs',), ('Pies',), ('Baked Shad Wine Sauce',), ('Hot Biscuits',), ('Broiled Lamb Kidneys and Bacon',), ('Toast',), ('Toast',), (\"Frogs' legs in every style\",), ('Jelly omelette',), ('Broiled Lamb Chops and Bacon',), ('Sauterne 1ere',), ('Pontet Canet',), ('Haut Sauternes',), ('Sherry',), ('Laubenheimer',), ('Smoked Tongue',), ('Niersteiner',), ('Hochheimer',), (\"Mumm's Ex. Dry\",), ('Pommery Sec',), ('Irroy Brut',), ('Apollinaris',), ('Johannis',), ('Blue Point Oysters',), ('Consomme Daumont',), ('Bisque of Crawfish',), ('Timbales Warsaw',), ('Fillet of Beef with Fresh Mushrooms',), ('Trevise Tomatoes',), ('Poularde Stuffed with Chestnuts',), ('French Peas with Butter',), ('New Asparagus, Cream Sauce',), ('Sherbert Roman',), ('Red Head Duck',), ('Celery Salad',), ('Fancy Ice Cream',), (\"Broiled Shad Maitre d'Hotel\",), ('Cakes',), ('Cheese',), ('Mutton chops fried potatoes',), ('ROAST SQUAB ON TOAST, WITH APRICOTS',), ('ASPARAGUS, BROWN BUTTER',), ('Beef Steak & fried onions',), ('BAKED SWEET POTATOES',), ('Smoked Snapper',), ('Smoked Snapper',), ('Fillets of Steak with Champignons',), ('Curried Lamb and Rice',), ('Broiled Chicken on Toast',), ('Broiled Chicken on Toast',), ('Curried Shrimps & Rice',), ('Stewed Tripe, Cream sauce',), ('Mutton Chops with Fried Potatoes',), ('Kaffee',), ('Hamburg Steak with Onions',), ('Fried Gar fish',), ('Batter Cakes',), ('Oat Meal Porridge',), ('Pork Cutlets',), (\"Roast Phil'a Chicken\",), (\"Roast Phil'a Chicken\",), ('Fried Potatoes',), ('Fried Potatoes',), ('Baked Potatoes',), ('Baked Potatoes',), ('Obst',), ('Nachtisch',), ('Saute Potatoes',), ('Waffles',), ('Waffles',), ('French fried potatoes',), ('French fried potatoes',), ('Veal Chops',), ('Raisin cake',), ('Fried Ham',), ('Fried Ham',), ('Mock turtle soup',), ('Oysters, Boston stew',), ('Omelettes',), ('Clear green turtle soup',), ('rice pudding',), ('Boiled Salt Mackerel',), ('Plain Omelet',), ('Philadelphia Cream Cheese',), ('Two Eggs Boiled',), ('Flaked Rice',), ('Rye Bread',), ('Smoked Schnapper Butter Sce',), ('Baked fish, wine sauce',), ('Cold Roast Lamb',), ('Potatoes stewed in Cream',), ('Pork Sausage and Mashed Potatoes',), ('Vegetable Soup',), ('Raw Oysters',), ('Wheat Cakes, with Maple Syrup',), ('Fried Indian Mush',), ('Oysters, Roast in Shell',), ('Cold Mutton',), ('China Teas',), ('Oysters, Box Stew',), ('Oysters, Fry',), ('Oysters, Fry with Bacon',), ('Potatoes Boiled',), ('Potatoes Boiled',), ('Gemischtes Rahmeis',), ('Cape Cods oysters',), ('Rockaways oysters',), ('Lynnhavens oysters',), ('Corn Meal Fritters',), ('Lalla Rookh Sorbet',), ('Oysters stewed',), ('Liver & Bacon',), ('Liver & Bacon',), ('Boiled Potatos',), ('Oysters box stew',), ('Broiled Mullet',), ('Calfs Liver and Onions',), ('Oysters, Milk Stew',), ('Mirabellen',), ('Fricassee of Turkey Wings Celery Sauce',), ('Cream of Cauliflower Soup',), ('Broiled Rashers of Ham',), ('Broiled Rashers of Ham',), ('Asparagus Omelette ',), ('Oysters Half Shell per plate',), ('Oysters Half Shell per doz.',), ('Oysters Small Fry',), ('Oysters Large fry',), ('Cold German Sausage',), ('Bacon to order',), ('Lammkoteletten nach Villeroi',), ('Veal Cuttlets Lyonnaise',), ('Boiled Fish',), ('Cherrystones clams',), ('Fried New Potatoes',), ('Beef Steak, fried onions',), ('Panfish, Meuniere, German fried potatoes',), ('Oysters, Boston Box Stew',), ('Oysters, Raw on the shell',), ('Oxtail Ragout and Vegetables',), ('Hot ribs of beef',), ('York Ham, Grilled',), ('Clicquot Sec',), ('Boiled Cod',), ('Oysters, Crumb Fry',), ('Oysters, Raw on the Half Shell',), ('Pork Chops, Sage & Onions',), ('Sirloin Steak, Fried French Chips',), ('Cold Veal and Ham Pie',), ('Oysters, Blue Point Fry',), ('Oysters, Blue Point Stew',), ('Cold Roast Beef',), ('Coffee ',), ('Smelts, Tartare sauce',), ('Beef Steak, Saratoga chips',), ('Mo\u00ebt & Chandon, White Seal',), ('Onions plain or fried',), ('Fillet Steak ',), ('Scrambled Eggs and bacon',), ('Parmentier au Cerfeuil Soup',), ('Paysanne Soup',), ('Cold Half Chicken and Ham ',), ('Cold Steak Pie',), ('English Beef soup',), ('Consomm\u00e9 in cup',), ('St. Julien Sup\u00e8rieur',), ('Perrier Jou\u00ebt Special and Brut',), ('Mo\u00ebt & Chandon, Brut',), ('Pur\u00e9e of split peas aux croutons',), (\"Broiled shad, Ma\u00eetre d'h\u00f4tel\",))", "rowcount": 1001, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"menuitem\" does not exist\nLINE 1: SELECT T2._name FROM MenuItem AS T1 INNER JOIN Dish AS T2 ON...\n                             ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 373, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Hafergrutze',), ('Apfelsinen',), ('Milchreis',), ('Pur\u00e9e of split peas aux croutons',), (\"Broiled shad, Ma\u00eetre d'h\u00f4tel\",), ('Hot ribs of beef',), (\"Consomme aux Quenelle's\",), ('Milk rice',), ('Baked Stuffed Mullet & Sauce Pomard',), ('Grilled Mutton Chops',), ('Eggs to order',), ('Parmentier au Cerfeuil Soup',), ('Paysanne Soup',), ('Cold Half Chicken and Ham ',), ('Smelts, Tartare sauce',), ('Beef Steak, Saratoga chips',), ('Grilled Mutton Chops',), ('Cold Steak Pie',), ('Eggs to order',), ('Grilled Mutton Chops',), ('Eggs as Ordered',), ('Grilled Mutton Chops',), ('Grilled Mutton Chops',), ('Apfelsinen',), ('Hafergrutze',), ('Eggs to order',), ('Fried & Boiled Potatoes',), ('Roast (Vancouver) Suckling Pig & Bread Sauce',), ('Scrambled Eggs and bacon',), ('Fillet de Boeuf a la Parisienne',), ('Bouchees aux Macaroni',), ('Roast Goose & Apple Sauce',), ('Mashed Pumpkins',), ('Indo Curry & Rice',), ('Steamed Apple Pudding & Hard Sauce',), ('Scotch Sandwiches',), ('Chocolate Cream & Sauce',), ('Swiss Rolls',), ('Cum-quats',), ('Fillet Steak ',), ('MacLaren Cheese',), ('China Teas',), ('Eggs to order',), ('Eggs to order',), ('Eggs to order',), ('Cotelettes de Veau, Sauce Tomate',), ('A. A. Oats with Fresh Milk',), ('Egg to Order',), ('Eggs to order',), ('Eggs to order',), ('Eggs to order',), ('Pork Sausage and Mashed Potatoes',), ('Eggs to order',), (\"Broiled Shad Maitre d'Hotel\",), ('Obst',), ('Nachtisch',), ('Eggs to order',), ('Batter Cakes',), ('Gemischtes Rahmeis',), ('Pork Cutlets',))", "rowcount": 60, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Hafergrutze',), ('Apfelsinen',), ('Milchreis',), ('Pur\u00e9e of split peas aux croutons',), (\"Broiled shad, Ma\u00eetre d'h\u00f4tel\",), ('Hot ribs of beef',), (\"Consomme aux Quenelle's\",), ('Milk rice',), ('Baked Stuffed Mullet & Sauce Pomard',), ('Grilled Mutton Chops',), ('Eggs to order',), ('Parmentier au Cerfeuil Soup',), ('Paysanne Soup',), ('Cold Half Chicken and Ham ',), ('Smelts, Tartare sauce',), ('Beef Steak, Saratoga chips',), ('Grilled Mutton Chops',), ('Cold Steak Pie',), ('Eggs to order',), ('Grilled Mutton Chops',), ('Eggs as Ordered',), ('Grilled Mutton Chops',), ('Grilled Mutton Chops',), ('Apfelsinen',), ('Hafergrutze',), ('Eggs to order',), ('Fried & Boiled Potatoes',), ('Roast (Vancouver) Suckling Pig & Bread Sauce',), ('Scrambled Eggs and bacon',), ('Fillet de Boeuf a la Parisienne',), ('Bouchees aux Macaroni',), ('Roast Goose & Apple Sauce',), ('Mashed Pumpkins',), ('Indo Curry & Rice',), ('Steamed Apple Pudding & Hard Sauce',), ('Scotch Sandwiches',), ('Chocolate Cream & Sauce',), ('Swiss Rolls',), ('Cum-quats',), ('Fillet Steak ',), ('MacLaren Cheese',), ('China Teas',), ('Eggs to order',), ('Eggs to order',), ('Eggs to order',), ('Cotelettes de Veau, Sauce Tomate',), ('A. A. Oats with Fresh Milk',), ('Egg to Order',), ('Eggs to order',), ('Eggs to order',), ('Eggs to order',), ('Pork Sausage and Mashed Potatoes',), ('Eggs to order',), (\"Broiled Shad Maitre d'Hotel\",), ('Obst',), ('Nachtisch',), ('Eggs to order',), ('Batter Cakes',), ('Gemischtes Rahmeis',), ('Pork Cutlets',))", "rowcount": 60, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": 374, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1000,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 575, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((43.333333333333336,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((43.333333333333336,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 576, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('DJI', 1), ('A', 5), ('CH', 17), ('YV', 1), ('SA', 3), ('WAN', 1), ('WL', 1), ('L', 1), ('ETH', 2), ('SGP', 1), ('B', 10), ('ROU', 1), ('RCH', 1), ('RT', 1), ('AUS', 1), ('PE', 1), ('RSA', 1), ('UAE', 1), ('CZ', 1), ('GUY', 1), ('NCA', 1), ('H', 1), ('NEP', 1), ('SYR', 1), ('RCA', 1), ('IR', 1), ('GCA', 1), ('CL', 1), ('RB', 1), ('CI', 2), ('RP', 1), ('ET', 1), ('RA', 1), ('SUD', 1), ('SF', 1), ('IL', 1), ('HCA', 1), ('G', 1), ('FJI', 1), ('BY', 1), ('EAU', 1), ('THA', 1), ('MA', 1), ('S', 1), ('RCB', 1), ('JOR', 2))", "rowcount": 46, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('DJI', 1), ('A', 5), ('CH', 17), ('YV', 1), ('SA', 3), ('WAN', 1), ('WL', 1), ('L', 1), ('ETH', 2), ('SGP', 1), ('B', 10), ('ROU', 1), ('RCH', 1), ('RT', 1), ('AUS', 1), ('PE', 1), ('RSA', 1), ('UAE', 1), ('CZ', 1), ('GUY', 1), ('NCA', 1), ('H', 1), ('NEP', 1), ('SYR', 1), ('RCA', 1), ('IR', 1), ('GCA', 1), ('CL', 1), ('RB', 1), ('CI', 2), ('RP', 1), ('ET', 1), ('RA', 1), ('SUD', 1), ('SF', 1), ('IL', 1), ('HCA', 1), ('G', 1), ('FJI', 1), ('BY', 1), ('EAU', 1), ('THA', 1), ('MA', 1), ('S', 1), ('RCB', 1), ('JOR', 2))", "rowcount": 46, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 577, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('SP',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('SP',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 579, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11.932633788037775,), (114.49680350194552,), (174.54734802615644,), (174.54734802615644,), (174.54734802615644,))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11.932633788037775,), (114.49680350194552,), (174.54734802615644,), (174.54734802615644,), (174.54734802615644,))", "rowcount": 5, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 583, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((5, 62.5))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"government\" does not exist\nLINE 1: SELECT SUM(CASE WHEN government = 'parliamentary democracy' ...\n                             ^\nHINT:  Perhaps you meant to reference the column \"t1.Government\".\n", "exec_able": false}}, "TP": 2, "FP": 3, "FN": 0}
{"sql_id": 584, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('African, Caribbean, and Pacific Countries',), ('South Pacific Forum',), ('Caribbean Community and Common Market',), ('Central African States Development Bank',), ('Latin American Integration Association',), ('West African Development Bank',), ('Nordic Investment Bank',), ('Arab Bank for Economic Development in Africa',), ('United Nations Disengagement Observer Force',), ('Arab Monetary Fund',), ('Economic Community of West African States',), ('Latin American Economic System',), ('Agency for Cultural and Technical Cooperation',), ('Economic Community of the Great Lakes Countries',), ('European Space Agency',), ('Economic and Social Commission for Western Asia',), ('Group of 19',), ('Group of 24',), ('Group of 8',), ('Islamic Development Bank',), ('International Energy Agency',), ('International Fund for Agricultural Development',), ('International Mobile Satellite Organization',), ('International Telecommunications Satellite Organization',), ('United Nations Interim Force in Lebanon',), ('United Nations University',), ('World Tourism Organization',))", "rowcount": 27, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"Name\" does not exist\nLINE 1: SELECT \"Name\" FROM \"organization\" WHERE DATE_PART('year', \"E...\n               ^\nHINT:  Perhaps you meant to reference the column \"organization._Name\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 585, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1949',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1._name does not exist\nLINE 1: ...M continent AS T1 INNER JOIN encompasses AS T2 ON T1._Name =...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1._Name\".\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": 586, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('AG', datetime.date(1981, 11, 1), None, 'parliamentary democracy'), ('BZ', datetime.date(1981, 9, 21), None, 'parliamentary democracy'), ('CZ', datetime.date(1993, 1, 1), None, 'parliamentary democracy'), ('HR', datetime.date(1991, 6, 25), None, 'parliamentary democracy'), ('PNG', datetime.date(1975, 9, 16), None, 'parliamentary democracy'), ('SK', datetime.date(1993, 1, 1), None, 'parliamentary democracy'), ('SLB', datetime.date(1978, 7, 7), None, 'parliamentary democracy'), ('WD', datetime.date(1978, 11, 3), None, 'parliamentary democracy'), ('WG', datetime.date(1974, 2, 7), None, 'parliamentary democracy'), ('WL', datetime.date(1979, 2, 22), None, 'parliamentary democracy'), ('ZW', datetime.date(1980, 4, 18), None, 'parliamentary democracy'), ('BDS', datetime.date(1966, 11, 30), None, 'parliamentary democracy'), ('JA', datetime.date(1962, 8, 6), None, 'parliamentary democracy'), ('M', datetime.date(1964, 9, 21), None, 'parliamentary democracy'), ('MS', datetime.date(1968, 3, 12), None, 'parliamentary democracy'), ('TT', datetime.date(1962, 8, 31), None, 'parliamentary democracy'))", "rowcount": 16, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"independence\" does not exist\nLINE 1: SELECT * FROM politics WHERE DATE_PART('year', Independence)...\n                                                       ^\nHINT:  Perhaps you meant to reference the column \"politics.Independence\".\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 587, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((7.563025210084033,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"independence\" does not exist\nLINE 1: SELECT CAST(SUM(CASE WHEN EXTRACT(YEAR FROM Independence) = ...\n                                                    ^\nHINT:  Perhaps you meant to reference the column \"politics.Independence\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 53, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1500.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "syntax error at or near \"FROM\"\nLINE 1: ...STRING(T2.screentime, 3, 2) AS DOUBLE PRECISION)) FROM movie...\n                                                             ^\n", "exec_able": false}}, "TP": 3, "FP": 3, "FN": 0}
{"sql_id": 182, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 183, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((98.4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((98.4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 184, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((31.871838111298484,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((31.871838111298484,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 185, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 186, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2.257328990228013,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2.257328990228013,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 187, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 188, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 189, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 190, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-35.632183908045974,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-35.632183908045974,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 191, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None, None, None, None, 273045, 'Documentary'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None, None, None, None, 273045, 'Documentary'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 4, "FP": 0, "FN": 0}
{"sql_id": 40, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": 42, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('61641217.333333'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('61641217.333333330000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 43, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Four Rooms',), ('Star Wars',), ('Forrest Gump',), ('American Beauty',), ('The Fifth Element',))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Four Rooms',), ('Star Wars',), ('Forrest Gump',), ('American Beauty',), ('The Fifth Element',))", "rowcount": 5, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": 44, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1307,), (1308,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1307,), (1308,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": 45, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Spellbound',), ('State Fair',), ('The Lost Weekend',), ('The Valley of Decision',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Spellbound',), ('State Fair',), ('The Lost Weekend',), ('The Valley of Decision',))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": 46, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((26,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((26,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": 47, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Shaft',), ('Mission: Impossible II',), ('The Next Best Thing',), ('What Women Want',), ('Bless the Child',), ('Lucky Numbers',), ('Wonder Boys',), ('Snow Day',), ('Rugrats in Paris: The Movie',), ('Rugrats in Paris: The Movie',), ('The Next Best Thing',))", "rowcount": 11, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Shaft',), ('Mission: Impossible II',), ('The Next Best Thing',), ('What Women Want',), ('Bless the Child',), ('Lucky Numbers',), ('Wonder Boys',), ('Snow Day',), ('Rugrats in Paris: The Movie',), ('Rugrats in Paris: The Movie',), ('The Next Best Thing',))", "rowcount": 11, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": 647, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 2}
{"sql_id": 648, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6.7,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6.7,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 649, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((7.703747711738978,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "syntax error at or near \"AS\"\nLINE 1: ...E WHEN T2.store_id = 1 THEN T1.amount ELSE 0 END) AS DOUBLE ...\n                                                             ^\n", "exec_able": false}}, "TP": 3, "FP": 2, "FN": 0}
{"sql_id": 650, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((8.571428571428571,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((8.571428571428571,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 651, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 652, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((351,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((351,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": 654, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((421,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((421,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": 655, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2.5041736227045077,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2.5041736227045077,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 656, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1481.4900000000027,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1481.4900000000027,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": 657, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('BLANKET BEVERLY',), ('LAWLESS VISION',), ('LOVE SUICIDES',), ('MYSTIC TRUMAN',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('BLANKET BEVERLY',), ('LAWLESS VISION',), ('LOVE SUICIDES',), ('MYSTIC TRUMAN',))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 658, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 2}
{"sql_id": 659, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "function pg_catalog.extract(unknown, double precision) does not exist\nLINE 10: AND EXTRACT(YEAR FROM T3.rental_rate) = 2006 \n             ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 2}
{"sql_id": 660, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((10.01669449081803,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((10.01669449081803,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 662, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 663, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('SANDRA', 'MARTIN', 'SANDRA.MARTIN@sakilacustomer.org'), ('JUDITH', 'COX', 'JUDITH.COX@sakilacustomer.org'), ('SHEILA', 'WELLS', 'SHEILA.WELLS@sakilacustomer.org'), ('ERICA', 'MATTHEWS', 'ERICA.MATTHEWS@sakilacustomer.org'), ('HEIDI', 'LARSON', 'HEIDI.LARSON@sakilacustomer.org'), ('PENNY', 'NEAL', 'PENNY.NEAL@sakilacustomer.org'), ('KENNETH', 'GOODEN', 'KENNETH.GOODEN@sakilacustomer.org'), ('HARRY', 'ARCE', 'HARRY.ARCE@sakilacustomer.org'), ('NATHAN', 'RUNYON', 'NATHAN.RUNYON@sakilacustomer.org'), ('THEODORE', 'CULP', 'THEODORE.CULP@sakilacustomer.org'), ('MAURICE', 'CRAWLEY', 'MAURICE.CRAWLEY@sakilacustomer.org'), ('BEN', 'EASTER', 'BEN.EASTER@sakilacustomer.org'), ('CHRISTIAN', 'JUNG', 'CHRISTIAN.JUNG@sakilacustomer.org'), ('JIMMIE', 'EGGLESTON', 'JIMMIE.EGGLESTON@sakilacustomer.org'), ('TERRANCE', 'ROUSH', 'TERRANCE.ROUSH@sakilacustomer.org'))", "rowcount": 15, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('SANDRA', 'MARTIN', 'SANDRA.MARTIN@sakilacustomer.org'), ('JUDITH', 'COX', 'JUDITH.COX@sakilacustomer.org'), ('SHEILA', 'WELLS', 'SHEILA.WELLS@sakilacustomer.org'), ('ERICA', 'MATTHEWS', 'ERICA.MATTHEWS@sakilacustomer.org'), ('HEIDI', 'LARSON', 'HEIDI.LARSON@sakilacustomer.org'), ('PENNY', 'NEAL', 'PENNY.NEAL@sakilacustomer.org'), ('KENNETH', 'GOODEN', 'KENNETH.GOODEN@sakilacustomer.org'), ('HARRY', 'ARCE', 'HARRY.ARCE@sakilacustomer.org'), ('NATHAN', 'RUNYON', 'NATHAN.RUNYON@sakilacustomer.org'), ('THEODORE', 'CULP', 'THEODORE.CULP@sakilacustomer.org'), ('MAURICE', 'CRAWLEY', 'MAURICE.CRAWLEY@sakilacustomer.org'), ('BEN', 'EASTER', 'BEN.EASTER@sakilacustomer.org'), ('CHRISTIAN', 'JUNG', 'CHRISTIAN.JUNG@sakilacustomer.org'), ('JIMMIE', 'EGGLESTON', 'JIMMIE.EGGLESTON@sakilacustomer.org'), ('TERRANCE', 'ROUSH', 'TERRANCE.ROUSH@sakilacustomer.org'))", "rowcount": 15, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 664, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((22.3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((22.3,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 665, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 666, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('-0.008347'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('-0.00834724540901502504'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 667, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 670, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": 671, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": 672, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('MARIE',), ('DAWN',), ('SYLVIA',), ('MICHELE',), ('LYNN',), ('JACKIE',), ('STANLEY',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('MARIE',), ('DAWN',), ('SYLVIA',), ('MICHELE',), ('LYNN',), ('JACKIE',), ('STANLEY',))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 673, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2.1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2.1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 674, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 675, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6.8,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6.8,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 676, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((5.6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((5.6,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 677, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2.1715097676353534,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2.1715098488385873,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 678, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((4.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 679, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((5.6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((5.6,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 680, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 681, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": 682, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 668, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"customer_id;\"\nLINE 7: GROUP BY \"T1\".\"customer_id;\n                      ^\n", "exec_able": false}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "CASE types integer and text cannot be matched\nLINE 1: ...N T5._name = 'Sci-Fi' THEN 1 ELSE 0 END) > 0 THEN T1.first_n...\n                                                             ^\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 2, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": 4, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((312,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((312,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": 562, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Omg please the heck fix it',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"content\" does not exist\nLINE 1: SELECT title FROM reviews ORDER BY LENGTH(content) DESC LIMI...\n                                                  ^\nHINT:  Perhaps you meant to reference the column \"reviews._content\".\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 563, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Classical Minutes: Musical Skills and Motivation | Tips and Insights | Instrumental Coaching | Onlin...',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Classical Minutes: Musical Skills and Motivation | Tips and Insights | Instrumental Coaching | Onlin...',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 234, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.playerid does not exist\nLINE 1: ...ate) FROM draft AS T1 INNER JOIN players AS T2 ON T1.playerI...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.playerID\".\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": 235, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Chauncey', 'Ray', 'Billups', Decimal('27')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Chauncey', 'Ray', 'Billups', Decimal('27')))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": 237, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3.112449799196787,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.tmid does not exist\nLINE 1: ...ROM teams AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = ...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.tmID\".\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 252, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((8.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"users\" does not exist\nLINE 2: FROM Users AS T1 \n             ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": 217, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Medsep Group',), ('Ole Group',), ('Pure Group',), ('Prasco Group',), ('Wuxi Group',), ('S.S.S. Group',), ('Uriel Group',), ('Amylin Group',))", "rowcount": 8, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"customers\" does not exist\nLINE 1: ...p%' THEN \"Customer_Names\" ELSE NULL END AS T FROM Customers ...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 219, "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((8,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((8,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 220, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('SO - 000136',), ('SO - 000165',), ('SO - 000163',), ('SO - 000106',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"deliverydate\" does not exist\nLINE 1: SELECT DISTINCT T FROM ( SELECT CASE WHEN DeliveryDate = '6/...\n                                                  ^\nHINT:  Perhaps you meant to reference the column \"Sales_Orders.DeliveryDate\".\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 221, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((396,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"Order Quantity\" does not exist\nLINE 1: SELECT SUM(CASE WHEN \"Order Quantity\" > 5 THEN 1 ELSE 0 END)...\n                             ^\nHINT:  Perhaps you meant to reference the column \"Sales_Orders.Order_Quantity\".\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 222, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Georgia',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"regions\" does not exist\nLINE 1: ...ateCode = 'GA' THEN State ELSE NULL END AS T FROM Regions ) ...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 223, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Stemware',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"products\" does not exist\nLINE 1: ...E NULL END AS T FROM \"Sales_Orders\" T1 INNER JOIN Products T...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 224, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12/29/18',), ('10/13/18',), ('7/4/18',), ('6/13/18',), ('1/4/19',), ('11/4/18',), ('10/9/18',), ('12/8/18',), ('10/15/18',), ('1/13/19',), ('12/11/18',), ('12/22/18',), ('6/21/18',), ('11/10/18',), ('11/27/18',), ('12/28/18',), ('10/18/18',), ('11/13/18',), ('10/26/18',), ('10/12/18',), ('7/3/18',), ('10/19/18',), ('1/18/19',), ('6/16/18',), ('11/15/18',), ('1/3/19',), ('11/23/18',))", "rowcount": 27, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"products\" does not exist\nLINE 1: ...E NULL END AS T FROM \"Sales_Orders\" T1 INNER JOIN Products T...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 225, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('TV and video',), ('Table Linens',), ('Bedroom Furniture',), ('Pillows',), ('Wine Storage',), ('Sculptures',), ('Pendants',), ('Collectibles',), ('Phones',), ('Wardrobes',), ('Candleholders',), ('Floral',), ('Audio',), ('Platters',), ('Floor Lamps',), ('Outdoor Decor',), ('Furniture Cushions',), ('Wreaths',), ('Vases',), ('Bean Bags',), ('Wall Coverings',), ('Stemware',), ('Computers',), ('Bar Tools',), ('Serveware',), ('Ornaments',), ('Table Lamps',), ('Dinnerware',), ('Cocktail Glasses',), ('Clocks',), ('Baseball',), ('Photo Frames',), ('Bakeware',), ('Accessories',), ('Cookware',), ('Mirrors',), ('Dining Furniture',), ('Home Fragrances',), ('Festive',), ('Blankets',), ('Basketball',), ('Vanities',), ('Wall Frames',), ('Candles',))", "rowcount": 44, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"products\" does not exist\nLINE 1: ...E NULL END AS T FROM \"Sales_Orders\" T1 INNER JOIN Products T...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 227, "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('781.22',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('781.22',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 230, "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((30,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((30,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 231, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('SO - 000158', 'Home Fragrances'), ('SO - 000159', 'Cookware'), ('SO - 000156', 'Outdoor Decor'), ('SO - 000157', 'Home Fragrances'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.Product Name does not exist\nLINE 1: ...Number\", CASE WHEN T2.\"OrderDate\" = '6/6/18' THEN T1.\"Produc...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.Product_Name\".\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": 232, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12/31/17',), ('7/19/18',), ('4/10/18',), ('10/27/18',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"_customerid\" does not exist\nLINE 3:     SELECT CASE WHEN _CustomerID = 11 THEN ProcuredDate ELSE...\n                             ^\nHINT:  Perhaps you meant to reference the column \"Sales_Orders._CustomerID\".\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 233, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((28,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"shipdate\" does not exist\nLINE 1: SELECT SUM(CASE WHEN ShipDate LIKE '6/%/18' AND \"Sales_Chann...\n                             ^\nHINT:  Perhaps you meant to reference the column \"Sales_Orders.ShipDate\".\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 155, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((12.5,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((12.5,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 156, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0.3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0.3,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 157, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 158, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0.21344717182497333,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0.21344717182497333,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 159, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((100.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((100.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 160, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 161, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 471, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3.5964035964035963,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3.5964035964035963,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 473, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((20.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((20.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 474, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((4.714912280701754,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4.714912280701754,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 475, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((995,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((995,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 476, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 477, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": 478, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((9.49050949050949,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((9.49050949050949,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 479, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((19.6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((19.6,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 481, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((4.495614035087719,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4.495614035087719,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 482, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 483, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 484, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((48.5,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((48.5,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 485, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((26.829268292682926,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((26.829268292682926,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 486, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((23.3502538071066,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((23.3502538071066,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 488, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((67.3992673992674,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((67.3992673992674,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 490, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6.091370558375634,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6.091370558375634,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 491, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('RAIL',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('RAIL',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 492, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 493, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-229,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-229,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 494, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "function pg_catalog.extract(unknown, integer) does not exist\nLINE 1: SELECT EXTRACT(DAY FROM (T2.l_receiptdate - T2.l_commitdate)...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": 495, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18.48151848151848,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18.48151848151848,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 496, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 497, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 498, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 499, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 500, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((25.641025641025642,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((25.641025641025642,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 501, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 502, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 503, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 504, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 472, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('-32.0000000000000000'),), (Decimal('93.0000000000000000'),), (Decimal('49.0000000000000000'),), (Decimal('-25.0000000000000000'),), (Decimal('-23.0000000000000000'),), (Decimal('111.0000000000000000'),))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('-2764800'),), (Decimal('8035200'),), (Decimal('4233600'),), (Decimal('-2160000'),), (Decimal('-1987200'),), (Decimal('9590400'),))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 19, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((981,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.client_id does not exist\nLINE 3: INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID \n                                                  ^\nHINT:  Perhaps you meant to reference the column \"t1.client_id\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 20, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((47.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.client_id does not exist\nLINE 3: INNER JOIN \"events\" AS T2 ON T1.client_id = T2.Client_ID \n                                                    ^\nHINT:  Perhaps you meant to reference the column \"t1.client_id\".\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": 23, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": 29, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('CR1026897', 35730, '978-277-2764'), ('CR0678444', 36017, '915-818-1976'), ('CR0775199', 40342, '978-527-8432'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"Complaint ID\" does not exist\nLINE 1: SELECT \"Complaint ID\", call_id, phonefinal FROM callcenterlo...\n               ^\nHINT:  Perhaps you meant to reference the column \"callcenterlogs.Complaint_ID\".\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": 30, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11.353982300884956,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11.353982300884956,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 33, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 34, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.client_id does not exist\nLINE 1: ...t AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.client_id\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 35, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.client_id does not exist\nLINE 3: INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID \n                                                  ^\nHINT:  Perhaps you meant to reference the column \"t1.client_id\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 37, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"Submitted via\" does not exist\nLINE 1: SELECT COUNT(\"Submitted via\") FROM events WHERE EXTRACT(YEAR...\n                     ^\nHINT:  Perhaps you meant to reference the column \"events.Submitted_via\".\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": 38, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 39, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.Complaint ID does not exist\nLINE 1: ...M callcenterlogs AS T1 INNER JOIN events AS T2 ON T1.\"Compla...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.Complaint_ID\".\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": 21, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('-96.9696969696969697'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.client_id does not exist\nLINE 3: INNER JOIN \"events\" AS T2 ON T1.client_id = T2.Client_ID \n                                                    ^\nHINT:  Perhaps you meant to reference the column \"t1.client_id\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 3}
{"sql_id": 453, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((10,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((10,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 455, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((8,), (2,), (14,), (4,), (3,), (5,), (14,), (22,), (5,), (3,), (9,), (1,), (1,), (4,), (6,), (6,), (3,), (10,), (24,), (8,))", "rowcount": 20, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((8,), (2,), (14,), (4,), (3,), (5,), (14,), (22,), (5,), (3,), (9,), (1,), (1,), (4,), (6,), (6,), (3,), (10,), (24,), (8,))", "rowcount": 20, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 363, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 364, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((134,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"sales\" does not exist\nLINE 1: ...FirstName = 'Dean' THEN 1 ELSE 0 END) AS num FROM Sales AS T...\n                                                             ^\n", "exec_able": false}}, "TP": 3, "FP": 0, "FN": 0}
{"sql_id": 365, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('YES',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"sales\" does not exist\nLINE 1: ... T1.ProductID = 498 THEN 'YES' ELSE 'NO' END FROM Sales AS T...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 366, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('19073'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('19073'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 367, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Black',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1._name does not exist\nLINE 1: SELECT CASE WHEN SUM(CASE WHEN T1._Name = 'HL Mountain Frame...\n                                       ^\nHINT:  Perhaps you meant to reference the column \"t1._Name\".\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 368, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"products\" does not exist\nLINE 1: ...0 END) AS REAL) * 100 / COUNT(T2.CustomerID) FROM Products A...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 369, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((4.278838342810723,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"products\" does not exist\nLINE 1: ...LSE 0 END) AS REAL) * 100 / SUM(T2.Quantity) FROM Products A...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 370, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1._name does not exist\nLINE 1: SELECT CAST(SUM(CASE WHEN T1._Name = 'Blade' THEN T2.Quantit...\n                                  ^\nHINT:  Perhaps you meant to reference the column \"t1._Name\".\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 371, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"sales\" does not exist\nLINE 1: ...ELSE 0 END) AS REAL) * 100 / COUNT(T2.Price) FROM Sales AS T...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 565, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "function substring(date, integer, integer) does not exist\nLINE 6: AND SUBSTRING(T1.date, 1, 4) = '2012' \n            ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 567, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((26,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "function substring(date, integer, integer) does not exist\nLINE 6: AND SUBSTRING(T1.date, 1, 4) = '2012' \n            ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 568, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((12444,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "function substring(date, integer, integer) does not exist\nLINE 6: AND SUBSTRING(T1.date, 1, 4) = '2012'\n            ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 573, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "operator does not exist: text < time without time zone\nLINE 1: ...STINCT \"date\") AS days FROM weather WHERE sunrise < TIME '05...\n                                                             ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 238, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.act does not exist\nLINE 1: SELECT SUM(CASE WHEN T2.Act = 1 THEN 1 ELSE 0 END) - SUM(CAS...\n                             ^\nHINT:  Perhaps you meant to reference the column \"t2.Act\".\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 239, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((44.827586206896555,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((44.827586206896555,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 240, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, 0, 0.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 0, 0.0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 4, "FP": 0, "FN": 0}
{"sql_id": 241, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.title does not exist\nLINE 1: SELECT CAST(SUM(CASE WHEN T1.Title = 'All''s Well That Ends ...\n                                  ^\nHINT:  Perhaps you meant to reference the column \"t1.Title\".\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 242, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 243, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((21.428571428571427,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.act does not exist\nLINE 1: SELECT CAST(SUM(CASE WHEN T2.act = 5 THEN 1 ELSE 0 END) AS R...\n                                  ^\nHINT:  Perhaps you meant to reference the column \"t2.Act\".\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 244, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Pericles, Prince of Tyre',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Pericles, Prince of Tyre',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": 245, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Venus and Adonis.',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Venus and Adonis.',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 0}
{"sql_id": 246, "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 378, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Andrea', 'Simons'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Andrea', 'Simons'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 381, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((26190.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((26190.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 207, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((56.52173913043478,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((56.52173913043478,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 210, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": 211, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('031347-2015',), ('216145-2014',), ('912B',), ('134472-2015',), ('182199A',), ('154184-2014',), ('219229-2015',), ('183313Z',), ('155523Z',), ('204701-2014',), ('155466-2015',), ('125333Z',), ('135680Z',), ('192550-2014',), ('302115Z',), ('45802Z',), ('94757B',), ('248051A',), ('56628A',), ('165193-2016',), ('203639-2016',), ('308643Z',), ('206124-2014',), ('79223B',), ('32587A',), ('192024-2014',), ('130254Z',), ('280218A',), ('143473-2014',), ('199250-2015',), ('36192Z',), ('60045A',))", "rowcount": 32, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('031347-2015',), ('216145-2014',), ('912B',), ('134472-2015',), ('182199A',), ('154184-2014',), ('219229-2015',), ('183313Z',), ('155523Z',), ('204701-2014',), ('155466-2015',), ('125333Z',), ('135680Z',), ('192550-2014',), ('302115Z',), ('45802Z',), ('94757B',), ('248051A',), ('56628A',), ('165193-2016',), ('203639-2016',), ('308643Z',), ('206124-2014',), ('79223B',), ('32587A',), ('192024-2014',), ('130254Z',), ('280218A',), ('143473-2014',), ('199250-2015',), ('36192Z',), ('60045A',))", "rowcount": 32, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 256, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((7.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((7.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 257, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((7,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"episode\" does not exist\nLINE 2: FROM Episode AS T1 \n             ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 259, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('MyPods and Boomsticks',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"award\" does not exist\nLINE 2: FROM Award AS T1 \n             ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 260, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Adam Klein',), ('Adam Kuhlman',), ('Alan Decker',), ('Alexander Duke',), ('Alex Que',), ('Alex Ruiz',), ('Alf Clausen',), ('Alfred Cruz',), ('Al Jean',), ('Amanda Byrnes',), ('Andrea Schell',), ('Angela Wixtrom',), ('Anne Legge',), ('Ashley Brooke Cooper',), ('Ben Lane',), ('Bill Higley',), ('Bill Odenkirk',), ('Billy Theriot',), ('Bob Anderson',), ('Bobby Mackston',), ('Bonita Pietila',), ('Brian J. Kaufman',), ('Brian Kelley',), ('Brooks Stonestreet',), ('Cameron Porter',), ('Carlton Batten',), ('Caroline Cruikshank',), ('Carolyn Omine',), ('Chance Raspberry',), ('Charles McCaskill',), ('Charles Ragins',), ('Chris Bolden',), ('Chris Clements',), ('Chris Ledesma',), ('Christianna Lang Daley',), ('Colin Contreary',), ('Cynthia Jill French',), ('Dan Castellaneta',), ('Dane Romley',), ('Dan Greaney',), ('Daniel Chiu',), ('Daniel Chun',), ('Danny Elfman',), ('Dante Fabiero',), ('David Mirkin',), ('David Salvador',), ('David Silverman',), ('Deanna Asato',), ('Dean Scammahorn',), ('Debbie Mahan',), ('Debbie Peterson',), ('Dell Hake',), ('Denise Donatelli',), ('Denise Sirkot',), ('Derek Casari',), ('Desiree E. Craig',), ('Dominique Braud',), ('Don Barrozo',), ('Don Payne',), ('Drew McPhail',), ('Eddie Rosas',), ('Ed Ghertner',), ('Edwin E. Aguilar',), ('Eli Balser',), ('Elizabeth Ableson',), ('Eric Koenig',), ('Erick T. Tran',), ('Eric Lara',), ('Eric Loudon',), ('Eric S. Keyes',), ('Ernie Elicanal',), ('Esther H. Lee',), ('Felicia Nalivansky-Caplan',), ('Felix Sanchez',), ('Fill Marc Sagadraca',), ('Gabriel DeFrancesco',), ('Glen Wuthrich',), ('Grant Lee',), ('Greg Checketts',), ('Hank Azaria',), ('Harry Shearer',), ('Heejin Kim',), ('Heliodoro Salvatierra',), ('Ian Maxtone-Graham',), ('Ian Wilcox',), ('Istvan Majoros',), ('Jabu Henderson',), ('Jack Dyer',), ('James L. Brooks',), ('Jarod Daetwiler',), ('Jason Bikowski',), ('Jason D. Warnesky',), ('Javier Pineda',), ('Jay Robinson',), ('J.C. Wegman',), ('Jeanne Erickson',), ('Jefferson R. Weekley',), ('Jeff Johnson',), ('Jeff Westbrook',), ('Jennie Hoffer',), ('Jennifer Dolce',), ('Jennifer Moeller',), ('Jesse D. Miller',), ('Jim Reardon',), ('Joel H. Cohen',), ('Joe Saunders',), ('Joe Wack',), ('Joe Zimmerman',), ('John Achenbach',), ('John Berman',), ('John Frink',), ('John Krause',), ('John Liu',), ('John Mathot',), ('John Pattison',), ('John W. Hyde',), ('Jonathan Gebhart',), ('Josh Taback',), ('J. Stewart Burns',), ('Julia Fitzmaurice',), ('Julie Kavner',), ('Jung A. Yoo',), ('Karen Bauer',), ('Karl Wiedergott',), ('Karolina Waclawiak',), ('Kent Rice',), ('Kevin Curran',), ('Kevin M. Newman',), ('Kevin N. Moore',), ('Kurtis Kunsak',), ('Lance Wilder',), ('Larina Jean Adamson',), ('Larry Field',), ('Larry Miravalles',), ('Larry Smith',), ('Lauren Biller',), ('Laurie Biernacki',), ('Laurie Wetzler',), ('Leasa Epps-Eisele',), ('Lena Podesta',), ('Lisa S. Cervantes',), ('Lisa Walder',), ('Liz Climo',), ('Louise Jaffe',), ('Luis Escobar',), ('Lynna Blankenship',), ('Maeve McGrath',), ('Manny DeGuzman',), ('Marc Wilmore',), ('Mark Ervin',), ('Mark Linden',), ('Martin Alvarez',), ('Mary Orario-Natale',), ('Matt Groening',), ('Matthew Faughnan',), ('Matthew Herbert',), ('Matthew Schofield',), ('Matt Marshall',), ('Matt Selman',), ('Matt Warburton',), ('Max Pross',), ('Merl Reagle',), ('Michael Bridge',), ('Michael D. Mitchell',), ('Michael G. Mahan',), ('Michael Miller',), ('Michael Nobori',), ('Michael Polcino',), ('Michael Price',), ('Michael Wolf',), ('Mike B. Anderson',), ('Mike Battle',), ('Mike Morris',), ('Mike Pettengill',), ('Mike Reiss',), ('Mike Scully',), ('Mindi Lee',), ('Myung Nam Chang',), ('Nancy Cartwright',), ('Nancy Kruse',), ('Nelson Shin',), ('Nikki Isordia',), ('Norman P. Auble',), ('Norm MacLeod',), ('N. Vyolet Diaz',), ('Orlando Baeza',), ('Oscar Cervantes',), ('Oscar Pangestu',), ('Pamela Hayden',), ('Patrick Buchanan',), ('Paul Newman',), ('Paul Wee',), ('Peter Gomez',), ('Ray Claffey',), ('Ray Miceli',), ('Raymond S. Persi',), ('Rene Vega',), ('Richard Gasparian',), ('Richard Hinds Jr.',), ('Richard K. Chung',), ('Richard Manginsay',), ('Richard Raynis',), ('Richard Sakai',), ('Rick Polizzi',), ('Rick Riccio',), ('Rick Salonga',), ('Robert Ingram',), ('Robert Nichols II',), ('Rob LaZebnik',), ('Robyn Anderson',), ('Ron Hauge',), ('Ronny Cox',), ('Rosanna Lyons',), ('Rudi Berden',), ('Russi Taylor',), ('Ryan Rivette',), ('Sally Stevens',), ('Sam Ho',), ('Sam Im',), ('Sam Simon',), ('Scott Alberts',), ('Scott Brutz',), ('Scott Clausen',), ('Scott D. Greenberg',), ('Sergio Guerra',), (\"Shannon O'Connor\",), ('Shohreh Aghdashloo',), ('Silvia Pompei',), ('Sooan Kim',), ('Stephenie Moffatt',), ('Steve Mills',), ('Steven Dean Moore',), ('Steven L. Smith',), ('Steve Pilapil',), ('Terry Greene',), ('Tim Lauber',), ('Tim Long',), ('T.J. Kim',), ('Tom Boyd',), ('Tom Gammill',), ('Tom Klein',), ('Tom Madrid Jr.',), ('Tom Mazzocco',), ('Tress MacNeille',), ('Tricia Benson',), ('Trista H. Navarro',), ('Utit Choomuang',), ('Valentina Garza',), ('Victor E. Almaguer',), ('Victor Pesavento',), ('Viorel Voronca',), ('Will Anderson',), ('William Bemiller',), ('William L. Arance',), ('Yeardley Smith',), ('Yelena Geodakyan',), ('Young Yoo',))", "rowcount": 257, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"episode\" does not exist\nLINE 1: SELECT DISTINCT T2.person FROM Episode AS T1 INNER JOIN Cred...\n                                       ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 261, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((52,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((52,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 262, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 263, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Outstanding Voice-Over Performance', 'Dan Castellaneta'), ('Best Animated Series', None), ('Best Voice-Over Performance', 'Hank Azaria'), ('Favorite Animated Comedy', None))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Outstanding Voice-Over Performance', 'Dan Castellaneta'), ('Best Animated Series', None), ('Best Voice-Over Performance', 'Hank Azaria'), ('Favorite Animated Comedy', None))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 264, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 'Lost Verizon', 7.0), (3, 'Double, Double, Boy in Trouble', 7.0))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"episode\" does not exist\nLINE 1: SELECT episode, title, rating FROM Episode WHERE SUBSTRING(a...\n                                           ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 265, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Treehouse of Horror XIX', 'https://m.media-amazon.com/images/M/MV5BMTgzOTYyNTc2OF5BMl5BanBnXkFtZTgwNjc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg', 'Best Directing in an Animated Television Production or Short Form', 'Bob Anderson'), ('MyPods and Boomsticks', 'https://m.media-amazon.com/images/M/MV5BNTE5NzY3NjU3OV5BMl5BanBnXkFtZTgwODc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg', 'Outstanding Writing in a Comedy Series', 'Marc Wilmore'), ('MyPods and Boomsticks', 'https://m.media-amazon.com/images/M/MV5BNTE5NzY3NjU3OV5BMl5BanBnXkFtZTgwODc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg', 'Favorite Cartoon', None), ('MyPods and Boomsticks', 'https://m.media-amazon.com/images/M/MV5BNTE5NzY3NjU3OV5BMl5BanBnXkFtZTgwODc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg', 'Favorite Cartoon', None), ('MyPods and Boomsticks', 'https://m.media-amazon.com/images/M/MV5BNTE5NzY3NjU3OV5BMl5BanBnXkFtZTgwODc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg', 'Favorite Cartoon', None), ('Homer and Lisa Exchange Cross Words', 'https://m.media-amazon.com/images/M/MV5BMTQ2MzcyOTMyMl5BMl5BanBnXkFtZTgwNDc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg', 'Animation', 'Tim Long'))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Treehouse of Horror XIX', 'https://m.media-amazon.com/images/M/MV5BMTgzOTYyNTc2OF5BMl5BanBnXkFtZTgwNjc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg', 'Best Directing in an Animated Television Production or Short Form', 'Bob Anderson'), ('MyPods and Boomsticks', 'https://m.media-amazon.com/images/M/MV5BNTE5NzY3NjU3OV5BMl5BanBnXkFtZTgwODc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg', 'Outstanding Writing in a Comedy Series', 'Marc Wilmore'), ('MyPods and Boomsticks', 'https://m.media-amazon.com/images/M/MV5BNTE5NzY3NjU3OV5BMl5BanBnXkFtZTgwODc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg', 'Favorite Cartoon', None), ('MyPods and Boomsticks', 'https://m.media-amazon.com/images/M/MV5BNTE5NzY3NjU3OV5BMl5BanBnXkFtZTgwODc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg', 'Favorite Cartoon', None), ('MyPods and Boomsticks', 'https://m.media-amazon.com/images/M/MV5BNTE5NzY3NjU3OV5BMl5BanBnXkFtZTgwODc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg', 'Favorite Cartoon', None), ('Homer and Lisa Exchange Cross Words', 'https://m.media-amazon.com/images/M/MV5BMTQ2MzcyOTMyMl5BMl5BanBnXkFtZTgwNDc5MTQ2MjE@._V1_UX224_CR0,0,224,126_AL_.jpg', 'Animation', 'Tim Long'))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 268, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 269, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Dan Castellaneta',), ('Paul Newman',), ('Marc Wilmore',), ('J. Stewart Burns',), ('Stephanie Gillis',), ('James L. Brooks',), ('Matt Groening',), ('Ian Maxtone-Graham',), ('Kevin Curran',), ('Hank Azaria',), ('Michael Price',), ('Harry Shearer',), ('John Frink',), ('Don Payne',), ('Al Jean',), ('Tim Long',), ('Alf Clausen',), ('Billy Kimball',), ('Bobby Mackston',), ('Colm Meaney',), ('Larina Jean Adamson',), ('Nancy Kruse',), ('Eric S. Keyes',), ('Lance Kramer',), ('Richard Sakai',), ('Chuck Sheetz',), ('Karl Wiedergott',), ('Pamela Hayden',), ('Max Pross',), ('Jefferson R. Weekley',), ('Patty Shinagawa',), ('Lynna Blankenship',), ('Mike Reiss',), ('Jeff Topping',), ('Carolyn Omine',), ('Sooan Kim',), ('Michael Polcino',), ('Joe Montana',), ('Jodie Foster',), ('Sam Simon',), ('Robert Forster',), ('Russi Taylor',), ('Brian Grazer',), ('Mike Scully',), ('Maurice LaMarche',), ('Marv Albert',), ('Maggie Roswell',), ('Ed Begley Jr.',), ('Nancy Cartwright',), ('Tress MacNeille',), ('Robert Nichols II',), ('Tom Mazzocco',), ('Kelsey Grammer',), ('Danny Elfman',), ('Joe Mantegna',), ('Julie Kavner',), ('Jeff Bezos',), ('Marcia Wallace',), ('Denis Leary',), ('Mark Cuban',), ('Dell Hake',), ('Mark Kirkland',), ('David Silverman',), ('Chris Ledesma',), ('Julia Louis-Dreyfus',), ('William Bemiller',), ('Richard Raynis',), ('Dean Scammahorn',), ('Glen Wuthrich',), ('Merl Reagle',), ('Kipp Lennon',), ('Don Vanderbeek',), ('John Mathot',), ('Denise Sirkot',), ('Bill Odenkirk',), ('Dan Greaney',), ('Matthew Nastuk',), ('Orlando Gumatay',), ('David Mirkin',), ('Karen Bauer',), ('John Achenbach',), ('Anna Pagan',), ('Sally Stevens',), ('Alex Dilts',), ('Scott Thompson',), ('Rob LaZebnik',), ('John Berman',), ('Yeardley Smith',), ('Shohreh Aghdashloo',), ('Tom Gammill',), ('Bonita Pietila',), ('Will Shortz',), ('Grant Lee',))", "rowcount": 93, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"person\" does not exist\nLINE 1: SELECT name FROM Person WHERE SUBSTRING(birthdate, 1, 4) < '...\n                         ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 270, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"name\" does not exist\nLINE 1: SELECT name FROM \"Person\" WHERE SUBSTRING(birthdate, 1, 4) =...\n               ^\nHINT:  Perhaps you meant to reference the column \"Person._name\".\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 271, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Billy Kimball',), ('Ian Maxtone-Graham',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Billy Kimball',), ('Ian Maxtone-Graham',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 272, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('S20-E13',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"award\" does not exist\nLINE 2: FROM Award AS T1 \n             ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 273, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Jodie Foster',), ('Rob LaZebnik',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"name\" does not exist\nLINE 1: SELECT name FROM \"Person\" WHERE SUBSTRING(birthdate, 1, 4) =...\n               ^\nHINT:  Perhaps you meant to reference the column \"Person._name\".\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 274, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('S20-E1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"episode\" does not exist\nLINE 2: FROM Episode AS T1 \n             ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 275, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Wedding for Disaster',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"award\" does not exist\nLINE 2: FROM Award AS T1 \n             ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 276, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((12.878787878787879,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((12.878787878787879,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": 278, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('MyPods and Boomsticks',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"award\" does not exist\nLINE 2: FROM Award AS T1 \n             ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 281, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1930s to 2020s',), ('erotic bakery',), ('cake',), ('bullet',), (\"st. patrick's day\",), ('riot',), ('bounty hunter',), ('bail bondsman',), ('2d animation',), ('twin',), ('slow motion scene',), ('punched in the face',), ('cigar smoking',), ('phallus shaped cake',), ('reference to the fantastic four',), ('taser',), ('female slaps male',), ('wet cement',), ('wanted poster',), ('twin sister',), ('suffocation',), ('shot in the arm',), ('shillelagh',), ('secret from husband',), ('school principal',), ('ricochet',), ('prison',), ('prayer',), ('police arrest',), ('plastic bag',), ('partnership',), ('parade float',), ('montage with pop song',), (\"man in woman's clothes\",), ('man in drag',), ('male in female clothes',), ('male in drag',), ('male bonding',), ('leprechaun',), ('irish joke',), ('gun',), ('gratitude',), ('flashback',), ('fistfight',), ('fantastic four spoof',), ('face slap',), ('construction site',), ('concrete',), ('coffee',), ('catholic priest',), ('catholic joke',), ('buddy cop spoof',), ('bleeding arm',), ('biblical reference',), ('biblical quote',), ('bulletproof glass',), ('1930s to 2020s',), ('cell phone',), ('machu picchu',), ('2d animation',), ('tracking device',), ('peru',), ('overprotective mother',), ('pun in title',), ('lottery',), ('lottery ticket',), ('1930s to 2020s',), ('bad behavior',), ('party',), ('identity swap',), ('2d animation',), ('rich kid',), ('lottery winner',), ('halloween episode',), ('reference to the great pumpkin',), ('reference to barack obama',), ('reference to john mccain',), ('reference to dwight d. eisenhower',), ('year 2008',), ('reference to john wayne',), ('reference to jimmy stewart',), ('reference to prince',), ('reference to golda meir',), ('reference to george clooney',), ('reference to kate winslet',), ('reference to edward g. robinson',), ('reference to rip taylor',), ('reference to charlton heston',), ('reference to george washington',), ('reference to abraham lincoln',), ('reference to pontius pilate',), ('1930s to 2020s',), ('transformer',), ('christmas',), ('halloween',), ('alien',), ('halloween party',), ('princess costume',), ('skeleton costume',), ('frankenstein costume',), ('ghost costume',), ('pumpkin patch',), ('witch costume',), ('halloween costume',), ('reference to charlie brown',), ('dead celebrity',), ('celebrity death',), ('reference to mad men',), ('transformer toy',), ('toy car',), ('voting booth',), ('halloween spoof',), ('giant pumpkin',), ('2d animation',), ('roman numeral in title',), ('turkey the bird',), ('body in chipper',), ('advertising campaign',), (\"jack o'lantern\",), ('premarital sex',), ('body in a trunk',), ('1930s to 2020s',), ('steamer trunk',), ('limbo dancing',), ('bear trap',), ('1930s to 2020s',), ('crossword puzzle',), ('2d animation',), ('lemonade stand',), ('getting dumped',), ('gay bar',), ('disco',), ('1930s to 2020s',), ('time machine',), ('2d animation',), ('ipod',), ('arab stereotype',), ('arab culture',), ('1930s to 2020s',), ('stadium',), ('poker game',), ('greenhouse',), ('town meeting',), ('demolition',), ('construction site',), ('secret handshake',), ('bagpipes',), ('dare',), ('prank',), ('2d animation',), ('surrealism',), ('skinny dipping',), ('wetting pants',), ('male bonding',), ('eskimo indian',), ('colony collapse disorder',), ('billionaire',), ('beekeeper',), ('beehive',), ('killer bee',), ('boston celtics',))", "rowcount": 161, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"episode\" does not exist\nLINE 2: FROM Episode AS T1 \n             ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 283, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 284, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('S20-E1',), ('S20-E2',), ('S20-E3',), ('S20-E4',), ('S20-E5',), ('S20-E6',), ('S20-E7',), ('S20-E8',))", "rowcount": 8, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"episode\" does not exist\nLINE 2: FROM Episode AS T1 \n             ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 285, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((5.9,), (11.6,), (13.5,), (22.0,), (23.2,), (6.9,), (15.1,), (15.4,), (17.4,), (29.0,), (5.2,), (11.6,), (14.4,), (19.1,), (24.7,), (2.1,), (2.6,), (3.7,), (6.5,), (0.7,), (2.2,), (2.6,), (4.6,), (2.4,), (2.9,), (4.4,), (6.0,), (8.9,), (6.1,), (9.2,), (15.4,), (15.4,), (2.9,), (2.6,), (5.9,), (6.0,))", "rowcount": 36, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"episode\" does not exist\nLINE 1: SELECT T2._percent FROM Episode AS T1 INNER JOIN Vote AS T2 ...\n                                ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 286, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((9,), (6,), (8,), (10,), (7,), (9,), (8,), (10,), (6,), (7,), (9,), (10,), (6,), (8,), (7,), (9,), (6,), (8,), (10,), (7,), (2,), (3,), (4,), (1,), (3,), (2,), (4,), (1,), (2,), (3,), (4,), (1,), (3,), (2,), (4,), (1,), (5,), (5,), (5,), (5,), (10,), (6,), (6,), (6,), (2,), (9,))", "rowcount": 46, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"episode\" does not exist\nLINE 2: FROM Episode AS T1 \n             ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 287, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"episode\" does not exist\nLINE 2: FROM Episode AS T1 \n             ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 163, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((40,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "function pg_catalog.substring(date, integer, integer) does not exist\nLINE 1: SELECT COUNT(\"Match_Id\") FROM \"_Match\" WHERE SUBSTRING(\"Matc...\n                                                     ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": 164, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((335987,), (335988,), (335989,), (335990,), (335991,), (335992,), (335993,), (335994,), (335995,), (335996,), (335997,), (335998,), (335999,), (336000,), (336001,), (336002,), (336003,), (336004,), (336005,), (336006,), (336007,), (336008,), (336009,), (336010,), (336011,), (336012,), (336013,), (336014,), (336015,), (336016,), (336017,), (336018,), (336019,), (336020,), (336021,), (336022,), (336023,), (336024,), (336025,), (336026,), (336027,), (336028,), (336029,), (336030,), (336031,), (336032,), (336033,), (336034,), (336036,), (336037,), (336038,), (336039,), (336040,), (336041,), (336042,), (336043,), (336044,), (336045,))", "rowcount": 58, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "function pg_catalog.substring(date, integer, integer) does not exist\nLINE 1: SELECT \"Match_Id\" FROM \"_Match\" WHERE SUBSTRING(\"Match_Date\"...\n                                              ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 169, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0.00016902285552537663,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((100.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": 170, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0.023706926606144277,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"player_match\" does not exist\nLINE 1: ... 0 END) AS REAL) * 100 / COUNT(T1.Player_Id) FROM Player_Mat...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 171, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"player\" does not exist\nLINE 1: ... 0 END) AS REAL) * 100 / COUNT(T1.Player_Id) FROM Player AS ...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 172, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((19.183673469387756,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.win_type does not exist\nLINE 1: ... FROM \"_Match\" AS T1 INNER JOIN \"Win_By\" AS T2 ON T1.Win_Typ...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.Win_Type\".\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": 176, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('YK Pathan',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"player\" does not exist\nLINE 2: FROM Player AS T1 \n             ^\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": 177, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Kings XI Punjab',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.team_id does not exist\nLINE 3: INNER JOIN \"_Match\" AS T2 ON T1.Team_Id = T2.Team_1 OR T1.Te...\n                                     ^\nHINT:  Perhaps you meant to reference the column \"t1.Team_Id\".\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 178, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('36'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"player\" does not exist\nLINE 1: SELECT 2008 - EXTRACT(YEAR FROM DOB) FROM Player WHERE Playe...\n                                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": 179, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0.47257383966244726,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"player\" does not exist\nLINE 1: ...1 ELSE 0 END) AS REAL) / COUNT(T1.Player_Id) FROM Player AS ...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 180, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((37,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"player\" does not exist\nLINE 1: SELECT COUNT(Player_Id) FROM Player WHERE EXTRACT(YEAR FROM ...\n                                     ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 288, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((54.166666666666664,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((54.166666666666664,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 289, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((16.363636363636363,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((16.363636363636363,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 290, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('female',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('female',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 291, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((102.12765957446808,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((102.12765957446808,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 292, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((37.755102040816325,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.name does not exist\nLINE 1: ..._from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = ...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1._name\".\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 293, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('female',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('female',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 294, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 295, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((52.666666666666664, 47.333333333333336))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((52.666666666666664, 47.333333333333336))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 296, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((10.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((10.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 297, "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1.8011204481792717,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1.8011204481792717,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 298, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('female', 'uci'), ('female', 'ucsd'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('female', 'uci'), ('female', 'ucsd'))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 299, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((50.3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((50.3,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 302, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-6,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 303, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-7.0, 'NO'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.name does not exist\nLINE 1: ...nse_from_school AS T1 LEFT JOIN disabled AS T2 ON T2.name = ...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t2._name\".\n", "exec_able": false}}, "TP": 4, "FP": 3, "FN": 0}
{"sql_id": 304, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((12.244897959183673,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((12.244897959183673,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 305, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1500,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1500,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 306, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ucla', 'female'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.name does not exist\nLINE 1: ...er FROM enrolled AS T1 INNER JOIN person AS T2 ON T1.name = ...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1._name\".\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 307, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0.10526315789473684,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t4.name does not exist\nLINE 1: SELECT CAST(SUM(CASE WHEN T1.school = 'uci' AND T4.name IS N...\n                                                        ^\nHINT:  Perhaps you meant to reference the column \"t4._name\".\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 308, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((24,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.name does not exist\nLINE 1: ...ult\" FROM enlist AS T1 INNER JOIN person AS T2 ON T1.name = ...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1._name\".\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 192, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((5.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"Ship Date\" does not exist\nLINE 1: SELECT MAX(EXTRACT(EPOCH FROM \"Ship Date\" - \"Order Date\") / ...\n                                      ^\nHINT:  Perhaps you meant to reference the column \"t2.Ship_Date\".\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 2}
{"sql_id": 193, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Acme Elite Stainless Steel Scissors',), ('Boston School Pro Electric Pencil Sharpener, 1670',), ('Telescoping Adjustable Floor Lamp',), ('Xerox 1901',), ('Xerox 1952',))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t3.Product ID does not exist\nLINE 4: INNER JOIN product AS T3 ON T3.\"Product ID\" = T2.\"Product ID...\n                                    ^\nHINT:  Perhaps you meant to reference the column \"t3.Product_ID\".\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": 194, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((42,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.Product ID does not exist\nLINE 3: INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID...\n                                    ^\nHINT:  Perhaps you meant to reference the column \"t1.Product_ID\".\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": 195, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 196, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Commercial WindTunnel Clean Air Upright Vacuum, Replacement Belts, Filtration Bags',), ('Mophie Juice Pack Helium for iPhone',), ('Xerox 1979',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.Customer ID does not exist\nLINE 3: INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer I...\n                                   ^\nHINT:  Perhaps you meant to reference the column \"t1.Customer_ID\".\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": 197, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((739.0306,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.Customer ID does not exist\nLINE 3: INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer I...\n                                   ^\nHINT:  Perhaps you meant to reference the column \"t1.Customer_ID\".\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": 198, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((353210.0870000004,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.Product ID does not exist\nLINE 3: INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID...\n                                    ^\nHINT:  Perhaps you meant to reference the column \"t1.Product_ID\".\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": 199, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Aaron Smayling',), ('Alejandro Ballentine',), ('Allen Armold',), ('Anna Andreadi',), ('Ben Ferrer',), ('Brian Dahlen',), ('Chris Selesnick',), ('Clytie Kelty',), ('Corey Catlett',), ('Craig Carreira',), ('Cynthia Arntzen',), ('Delfina Latchford',), ('Denise Leinenbach',), ('Elpida Rittenbach',), ('Frank Hawley',), ('Gary McGarr',), ('Giulietta Weimer',), ('Greg Maxwell',), ('Harold Pawlan',), ('Herbert Flentye',), (\"Jack O'Briant\",), ('James Galang',), ('Jay Fein',), ('Jay Kimmel',), ('Joe Elijah',), ('Joe Kamberova',), ('Jonathan Doherty',), ('Ken Heidel',), ('Kimberly Carter',), ('Kristen Hastings',), ('Laurel Elliston',), ('Lena Hernandez',), ('Lindsay Castell',), ('Maria Etezadi',), ('Mark Haberlin',), ('Maxwell Schwartz',), ('Michael Moore',), ('Mitch Willingham',), ('Natalie DeCherney',), ('Patrick Gardner',), ('Randy Ferguson',), ('Raymond Buch',), ('Roy Collins',), ('Roy Franz\u00f6sisch',), ('Ruben Ausman',), ('Russell Applegate',), ('Sally Hughsby',), ('Sean Miller',), ('Shahid Hopkins',), ('Sheri Gordon',), ('Shirley Daniels',), ('Steven Roelle',), ('Thomas Boland',), ('Tony Sayre',), ('Vivek Sundaresam',))", "rowcount": 55, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.Customer ID does not exist\nLINE 3: INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer I...\n                                   ^\nHINT:  Perhaps you meant to reference the column \"t1.Customer_ID\".\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": 200, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.Customer ID does not exist\nLINE 3: INNER JOIN central_superstore AS T2 ON T1.\"Customer ID\" = T2...\n                                               ^\nHINT:  Perhaps you meant to reference the column \"t1.Customer_ID\".\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": 201, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Erin Smith',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.Customer ID does not exist\nLINE 3: INNER JOIN people AS T2 ON T1.\"Customer ID\" = T2.\"Customer I...\n                                   ^\nHINT:  Perhaps you meant to reference the column \"t1.Customer_ID\".\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": 203, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('3.6 Cubic Foot Counter Height Office Refrigerator',), ('Avery Hi-Liter EverBold Pen Style Fluorescent Highlighters, 4/Pack',), ('Avery Non-Stick Heavy Duty View Round Locking Ring Binders',), ('Bevis Round Conference Room Tables and Bases',), ('Bionaire Personal Warm Mist Humidifier/Vaporizer',), ('Black Print Carbonless 8 1/2\" x 8 1/4\" Rapid Memo Book',), ('DAX Black Cherry Wood-Tone Poster Frame',), ('Fellowes Bankers Box Recycled Super Stor/Drawer',), ('Geographics Note Cards, Blank, White, 8 1/2\" x 11\"',), ('Harbour Creations Steel Folding Chair',), ('Hewlett-Packard Deskjet 6540 Color Inkjet Printer',), ('Memo Book, 100 Message Capacity, 5 3/8_ x 11_',), ('Newell 333',), ('Newell 35',), ('Novimex Swivel Fabric Task Chair',), ('Plymouth Boxed Rubber Bands by Plymouth',), ('Recycled Steel Personal File for Hanging File Folders',), ('RSVP Cards & Envelopes, Blank White, 8-1/2\" X 11\", 24 Cards/25 Envelopes/Set',), ('Wilson Jones 14 Line Acrylic Coated Pressboard Data Binders',), ('Xerox 1963',), ('Xerox 1966',), ('Xerox 1967',))", "rowcount": 22, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.Product ID does not exist\nLINE 1: ...tral_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Produc...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.Product_ID\".\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": 204, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.Order ID does not exist\nLINE 1: SELECT COUNT(DISTINCT T2.\"Order ID\") \n                              ^\nHINT:  Perhaps you meant to reference the column \"t2.Order_ID\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 205, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((13.175675675675675,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.Product ID does not exist\nLINE 1: ...tral_superstore AS T1 INNER JOIN product AS T2 ON T1.\"Produc...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.Product_ID\".\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": 206, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Ibico EPK-21 Electric Binding System',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.Product ID does not exist\nLINE 3: INNER JOIN product AS T2 ON T1.\"Product ID\" = T2.\"Product ID...\n                                    ^\nHINT:  Perhaps you meant to reference the column \"t1.Product_ID\".\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": 202, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"Ship Date\" does not exist\nLINE 1: SELECT DISTINCT EXTRACT(DAY FROM \"Ship Date\" - \"Order Date\")...\n                                         ^\nHINT:  Perhaps you meant to reference the column \"central_superstore.Ship_Date\".\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 2}
{"sql_id": 105, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"patient\" does not exist\nLINE 1: SELECT COUNT(PATIENT) FROM conditions WHERE DESCRIPTION = 'D...\n                     ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 106, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.patient does not exist\nLINE 3: INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT \n                                                     ^\nHINT:  Perhaps you meant to reference the column \"t1.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 3}
{"sql_id": 107, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((8,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.patient does not exist\nLINE 1: ...AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 108, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Camelia', 'Boyle', None), ('Gabrielle', 'Wunsch', None), ('Lindsay', 'Kilback', None), ('Tien', 'Turner', None))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.patient does not exist\nLINE 3: INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT \n                                                     ^\nHINT:  Perhaps you meant to reference the column \"t1.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": 109, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.patient does not exist\nLINE 1: ...T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 110, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((82,), (82,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.patient does not exist\nLINE 1: ...ROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t2.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": 112, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Irvin', 'Barrows'), ('Jerald', 'Hilpert'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.patient does not exist\nLINE 3: INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT \n                                                     ^\nHINT:  Perhaps you meant to reference the column \"t1.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 2}
{"sql_id": 113, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Esmeralda', 'Muller', 50), ('Lai', 'Ebert', 38), ('Shandra', 'Lesch', 32), ('Martin', 'Harris', 60), ('Murray', 'Conroy', 19))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.patient does not exist\nLINE 7: INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient \n                                     ^\nHINT:  Perhaps you meant to reference the column \"t2.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 5}
{"sql_id": 114, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0.0, 101))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.patient does not exist\nLINE 1: ...T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 115, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((100.3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.patient does not exist\nLINE 1: ... AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 4}
{"sql_id": 119, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.patient does not exist\nLINE 3: INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT \n                                                     ^\nHINT:  Perhaps you meant to reference the column \"t1.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": 123, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.patient does not exist\nLINE 1: ... AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 126, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((18.727272727272727,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"patient\" does not exist\nLINE 1: SELECT CAST(COUNT(PATIENT) AS REAL) / COUNT(DISTINCT EXTRACT...\n                          ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": 128, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Acute bronchitis (disorder)',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Acute bronchitis (disorder)',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 130, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((33.333333333333336,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.patient does not exist\nLINE 3: INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient \n                                     ^\nHINT:  Perhaps you meant to reference the column \"t2.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 131, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((31, 45.16129032258065))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.patient does not exist\nLINE 1: ...AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 132, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.patient does not exist\nLINE 1: ...FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t2.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": 133, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.patient does not exist\nLINE 3: INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient\n                                     ^\nHINT:  Perhaps you meant to reference the column \"t2.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": 134, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.patient does not exist\nLINE 3: INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient \n                                     ^\nHINT:  Perhaps you meant to reference the column \"t2.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 135, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Shona', 'Hamill'), ('Jonathan', 'Douglas'), ('Donn', 'Schowalter'), ('Lavelle', 'Vandervort'), ('Tiffani', 'Dickens'), ('Myrtie', 'Reilly'), ('Katharine', 'Dach'), ('Muoi', 'Kuhlman'), ('Judith', 'Fay'), ('Adolfo', 'Schmitt'), ('Jeremy', 'Goodwin'), ('Maurice', 'Kshlerin'), ('Kory', 'Klocko'), ('Wilmer', 'Denesik'), ('Octavia', 'Klein'), ('Lynwood', 'Stehr'), ('Ima', 'Murphy'), ('Augustus', 'Parker'), ('Elizbeth', 'Konopelski'), ('Mathew', 'Windler'), ('Valentine', 'Jacobson'), ('Warner', 'Wisozk'), ('Andres', 'Parisian'), ('Leena', 'Kemmer'), ('Akilah', 'Fadel'), ('Claudette', 'Renner'), ('Ryan', 'Keeling'), ('Emelina', 'Abernathy'), ('Patrick', 'Kilback'), ('Courtney', 'Schaden'), ('Leisha', 'Monahan'), ('Deanne', 'Kilback'), ('Mui', 'Trantow'), ('Wendy', 'Huels'), ('Curtis', 'Schroeder'), ('Margarette', 'Maggio'), ('Demetrius', 'Dickens'), ('Tobias', 'Carroll'), ('Tuyet', 'Abernathy'), ('Tonette', 'Gislason'), ('Siobhan', 'Conroy'), ('Dallas', 'Spencer'), ('Augustine', \"O'Reilly\"), ('Thomas', 'Altenwerth'), ('Gala', 'Carroll'), ('Stacy', 'McLaughlin'), ('Shon', 'Nikolaus'), ('Dana', 'Bayer'), ('Chelsey', 'Balistreri'), ('Deeann', 'Jacobson'), ('Mckinley', 'Cartwright'), ('Verline', 'Konopelski'), ('Arielle', 'Nader'), ('Tabetha', 'Hamill'), ('Clarisa', 'Tromp'), ('Alycia', 'Olson'), ('Missy', 'MacGyver'), ('Lai', 'Ebert'), ('Sara', 'Pacocha'), ('Ronnie', 'Lindgren'), ('Fern', 'Padberg'), ('Kyle', 'Bernier'), ('Phillis', 'Mante'), ('Cleo', 'Hilpert'), ('Tabitha', 'Baumbach'), ('Andres', 'Sipes'), ('Filiberto', 'Bartoletti'), ('Carroll', 'Boyle'), ('Gwen', 'Satterfield'), ('Nyla', 'Heathcote'), ('Faustino', 'Huel'), ('Alfonzo', 'Smitham'), ('Lacy', 'Collier'), ('Hugh', 'Kuhn'), ('Jerome', 'Spinka'), ('Buck', 'Kshlerin'), ('Emile', 'Brekke'), ('Harriette', 'Hessel'), ('Lizeth', 'Ernser'), ('Vinita', 'Stanton'), ('Victor', 'Walter'), ('Lon', 'Simonis'), ('Micki', 'Haag'), ('Julian', 'Strosin'), ('Gwendolyn', 'Ziemann'), ('Luis', 'Wilderman'), ('Maurice', 'Bins'), ('Denita', 'Nitzsche'), ('Suk', 'Hartmann'), ('Weldon', 'Murphy'), ('Elvis', 'Lockman'), ('Elly', 'Koss'), ('Damian', 'Schultz'), ('Robert', 'Stamm'), ('Farah', 'Gerhold'), ('Cami', 'Terry'), ('Laree', 'Strosin'), ('Neville', 'McDermott'), ('Charlene', 'Mann'), ('Nestor', 'Dibbert'), ('Hana', 'Brekke'), ('Renaldo', 'Kshlerin'), ('Delilah', 'Kuhic'), ('Randall', 'Smith'), ('Stacey', 'Pollich'), ('Randall', 'Wilderman'), ('Ozie', 'Larson'), ('Rudy', 'Cormier'), ('Lloyd', 'Kemmer'), ('Kary', 'Schmitt'), ('Eulalia', 'Wiegand'), ('Willene', 'Orn'), ('Chin', 'Kub'), ('Carley', 'Schneider'), ('Benny', 'Herzog'), ('Xavier', 'Krajcik'), ('Terry', 'Kuhic'), ('Roosevelt', 'Breitenberg'), ('Yuriko', 'Schumm'), ('Jesse', 'Leuschke'), ('Rigoberto', 'Heidenreich'), ('Georgianna', 'Boehm'), ('Tiffany', 'Mertz'), ('Abraham', 'Balistreri'), ('Dirk', 'Stoltenberg'), ('Orlando', 'Cormier'), ('Pok', 'Thompson'), ('Hildred', 'Schuppe'), ('Reuben', 'Bashirian'), ('Georgie', 'Herzog'), ('Joselyn', 'Marquardt'), ('Rico', 'Schmitt'), ('Martin', 'Harris'), ('Thuy', 'Luettgen'), ('Chad', 'Hartmann'), ('Shawna', 'Lowe'), ('Lawanda', 'Murray'), ('Ethel', 'Cormier'), ('Nanci', 'Huel'), ('Olen', 'Homenick'), ('Lorie', 'Cruickshank'), ('Yanira', 'Flatley'), ('Jamar', 'Durgan'), ('Gilbert', 'Bradtke'), ('Rod', 'Hahn'), ('Sherlene', 'Murphy'), ('Kelle', 'Kessler'), ('Mana', 'Schiller'), ('Jazmine', 'Rau'), ('Mack', 'Orn'), ('Kyra', 'Bode'), ('Saundra', 'Monahan'), ('Rubin', 'Thiel'), ('Lyndon', 'Pacocha'), ('Rosendo', 'Hodkiewicz'), ('Ona', 'Waters'), ('Astrid', 'Schroeder'), ('Will', 'Mayert'), ('Raymonde', 'Heathcote'), ('Refugio', 'Barton'), ('Shantel', 'White'), ('Alonzo', 'Prohaska'), ('Jame', 'Mayer'), ('Lesli', 'Gislason'), ('Trula', 'Harber'), ('Bryan', 'Mayer'), ('Alina', 'Padberg'), ('Shonta', 'Mann'), ('Shawnta', 'Erdman'), ('Sang', 'Bauch'), ('Maryjane', 'Herzog'), ('Berry', 'Keebler'), ('Demarcus', 'Cormier'), ('Benito', 'Wiegand'), ('Darleen', 'Tillman'), ('Augustine', 'Erdman'), ('Darren', 'Predovic'), ('Chris', 'Hamill'), ('Betty', 'Hickle'), ('Jimmy', 'Marks'), ('Walter', 'Bahringer'), ('Janean', 'Bashirian'), ('Brice', 'Jerde'), ('Nelson', 'Jast'), ('Martha', 'Swaniawski'), ('Arlette', 'Leuschke'), ('Ester', 'Schinner'), ('Serafina', 'Bosco'), ('Miquel', 'Pouros'), ('Rikki', 'Osinski'), ('Jeff', 'Labadie'), ('Dave', 'Hudson'), ('Dorian', 'Kovacek'), ('Nathan', 'Botsford'), ('Delpha', 'Schinner'), ('Kim', 'Barrows'), ('Lindsey', 'Lowe'), ('Trudi', 'Murray'), ('Adrianne', 'Rodriguez'), ('Marcelo', 'Mayert'), ('Siu', 'Pagac'), ('Conrad', 'Kuhlman'), ('Cesar', 'Larson'), ('Loise', 'Will'), ('Percy', 'Wunsch'), ('Particia', 'Ward'), ('Tyrone', 'Johns'), ('Omar', 'Ziemann'), ('Hilma', 'Rath'), ('Adam', 'Lynch'), ('Jere', 'Spinka'), ('Cheree', 'Rice'), ('Avelina', 'Block'), ('Albert', 'Lemke'), ('Deane', 'Kris'), ('Royal', 'Turcotte'), ('Pasquale', 'Crist'), ('Gricelda', 'Hane'), ('Mauro', 'McCullough'), ('Carroll', 'Bernhard'), ('Lillian', 'Stark'), ('Viva', 'Walker'), ('Diego', 'Hand'), ('Bonnie', 'Wisoky'), ('Charlsie', 'Vandervort'), ('Austin', 'Waelchi'), ('Alfredo', 'Halvorson'), ('Livia', 'Williamson'), ('Felicitas', 'Hahn'), ('Ivana', 'Rowe'), ('Patrick', 'Lind'), ('Ernie', 'Fisher'), ('Winford', 'Jast'), ('Milan', 'DuBuque'), ('Hector', 'Ziemann'), ('Serina', 'Robel'), ('Elisa', 'Lowe'), ('Larue', 'Brekke'), ('Keri', 'Veum'), ('Ernestine', 'Rutherford'), ('Merrill', 'Kassulke'), ('Neal', 'Eichmann'), ('Carl', 'Sawayn'), ('Isadora', 'Moen'), ('Anamaria', 'Mraz'), ('Jasper', 'Ernser'), ('Tarra', 'Gerhold'), ('Danilo', 'Feeney'), ('21-Jan', 'Koelpin'), ('Emanuel', 'Kerluke'), ('Deetta', 'Harber'), ('Garry', \"O'Connell\"), ('Florida', 'Stark'), ('Jospeh', 'VonRueden'), ('Irmgard', 'Krajcik'), ('Nickie', 'Stiedemann'), ('Oswaldo', 'Abernathy'), ('Anette', 'Hand'), ('Willette', 'Hyatt'), ('Jaye', 'Schroeder'), ('Mora', 'Hand'), ('Marianela', 'Funk'), ('Whitney', 'Nolan'), ('Annie', 'Prosacco'), ('Andreas', 'Bauch'), ('Edgar', 'Von'), ('Rusty', \"D'Amore\"), ('Melanie', 'Schroeder'), ('Natalie', 'Green'), ('Rodolfo', 'Heathcote'), ('Dominic', 'Bins'), ('Gwenda', \"O'Conner\"), ('Ozell', 'Armstrong'), ('Joesph', 'Runte'), ('Scot', 'Morissette'), ('Kelsey', 'Skiles'), ('Lenore', 'Gleason'), ('Ezekiel', 'Herzog'), ('Jules', 'Barton'), ('Eldon', 'Ryan'), ('Antone', 'Dickinson'), ('Clora', 'Veum'), ('Trey', 'Wunsch'), ('Brain', 'Hudson'), ('Margaretta', \"O'Hara\"), ('Caron', 'Volkman'), ('Renda', 'Botsford'), ('Gertrud', 'Roob'), ('Corrina', 'Feest'), ('Dillon', 'Lehner'), ('Mohammed', 'Larson'), ('Dania', 'Trantow'), ('Nicolas', 'Prosacco'), ('Isaiah', 'Bernier'), ('Emmanuel', 'Douglas'), ('Verda', 'Stehr'), ('Sung', 'Carter'), ('Merlin', 'Roob'), ('Tony', 'Kessler'), ('Cole', 'Keeling'), ('Darla', 'Crona'), ('Dion', 'Auer'), ('Markus', 'Mraz'), ('Otto', 'Wolff'), ('Belle', 'Smitham'), ('Terra', 'Heller'), ('Ellyn', 'Block'), ('Yahaira', 'Ortiz'), ('Kathaleen', 'Cummerata'), ('Bret', 'Grant'), ('Jose', 'Pfeffer'), ('Latasha', 'Adams'), ('Mario', 'Gottlieb'), ('Reva', 'Schmeler'), ('Quentin', 'Toy'), ('Rob', 'Pouros'), ('Neely', 'Keeling'), ('Jessie', 'Corkery'), ('Heath', 'Doyle'), ('Wilmer', 'Koepp'), ('Tish', 'Donnelly'), ('Young', 'Treutel'), ('Javier', 'Hamill'), ('Barrie', 'Abernathy'), ('Lula', 'Spencer'), ('Doreen', 'Mohr'), ('Jorge', 'Wolff'), ('Ira', 'Deckow'), ('Tyisha', 'Brekke'), ('Williams', 'Torp'), ('Ashlee', 'Leannon'), ('Cecil', 'Gaylord'), ('Diego', 'Mosciski'), ('Adam', 'Pacocha'), ('Chance', 'Schamberger'), ('Dexter', 'Mitchell'), ('Dannie', 'Considine'), ('Dena', 'Kutch'), ('Jerrod', 'Mayert'), ('Florencio', 'Turner'), ('Laci', 'Heller'), ('Bradley', 'Kerluke'), ('Lourie', 'Crooks'), ('Lorean', 'Gulgowski'), ('Katelynn', 'Tremblay'), ('Telma', 'Jakubowski'), ('Lenard', 'Schiller'))", "rowcount": 347, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.patient does not exist\nLINE 3: INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT \n                                                     ^\nHINT:  Perhaps you meant to reference the column \"t1.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": 136, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.patient does not exist\nLINE 3: INNER JOIN conditions AS T2 ON T1.patient = T2.patient \n                                                    ^\nHINT:  Perhaps you meant to reference the column \"t1.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 100, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((10,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.patient does not exist\nLINE 1: ...S T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": 101, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((7,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.patient does not exist\nLINE 1: ...AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": 118, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((11,), (18,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.patient does not exist\nLINE 1: ...S T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": 120, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Escherichia coli urinary tract infection', 'NITROFURANTOIN  MACROCRYSTALS 50 MG [Macrodantin]', 7, 'alive'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.patient does not exist\nLINE 1: ...S T1 INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 2}
{"sql_id": 122, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The query result of converted postgresql query is inconsiste...\n        ^\n", "exec_able": false}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.patient does not exist\nLINE 3: INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT \n                                                     ^\nHINT:  Perhaps you meant to reference the column \"t1.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 2}
{"sql_id": 129, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((10,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2.patient does not exist\nLINE 3: INNER JOIN medications AS T2 ON T1.patient = T2.PATIENT \n                                                     ^\nHINT:  Perhaps you meant to reference the column \"t1.patient\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": 54, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 55, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((19, 22))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((19, 22))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 57, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-6689096779184407258, 'YES'), (-6590029937880196169, 'YES'), (-5305692228635096563, 'YES'), (-2917998150844653076, 'YES'), (-1633968677373322472, 'YES'), (-450723994850216235, 'YES'), (-324761265507882224, 'YES'), (528590055286269542, 'YES'), (4296637564570566271, 'YES'), (5354621554047170232, 'YES'), (5497109940653330488, 'YES'), (5611317768433566721, 'YES'), (5927333115845830913, 'YES'), (6607018907660377991, 'YES'), (6666573787717908158, 'YES'), (8693964245073640147, 'YES'), (9112463114311278255, 'YES'))", "rowcount": 17, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-6689096779184407258, 'YES'), (-6590029937880196169, 'YES'), (-5305692228635096563, 'YES'), (-2917998150844653076, 'YES'), (-1633968677373322472, 'YES'), (-450723994850216235, 'YES'), (-324761265507882224, 'YES'), (528590055286269542, 'YES'), (4296637564570566271, 'YES'), (5354621554047170232, 'YES'), (5497109940653330488, 'YES'), (5611317768433566721, 'YES'), (5927333115845830913, 'YES'), (6607018907660377991, 'YES'), (6666573787717908158, 'YES'), (8693964245073640147, 'YES'), (9112463114311278255, 'YES'))", "rowcount": 17, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 59, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 61, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((19,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((19,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 62, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 3, "FP": 0, "FN": 0}
{"sql_id": 65, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.timestamp does not exist\nLINE 4: WHERE DATE_PART('year', T1.timestamp) = 2016 \n                                ^\nHINT:  Perhaps you meant to reference the column \"t1._timestamp\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 66, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 67, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 68, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 74, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"timestamp\" does not exist\nLINE 1: SELECT SUM(CASE WHEN \"timestamp\" = '2016-05-02 7:50:28' THEN...\n                             ^\nHINT:  Perhaps you meant to reference the column \"t1._timestamp\".\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": 75, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 76, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 77, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Finance',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Finance',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 78, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 79, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 80, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 81, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 82, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.timestamp does not exist\nLINE 5: AND TO_CHAR(T1.\"timestamp\", 'YYYY-MM-DD') = '2016-05-01';\n                    ^\nHINT:  Perhaps you meant to reference the column \"t1._timestamp\".\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 83, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 84, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 85, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 86, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 87, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((114.0, 24.0), (88.0, 44.0), (120.0, 32.0), (114.0, 31.0), (106.0, 27.0), (113.0, 23.0), (113.0, 23.0), (104.0, 36.0), (114.0, 37.0), (116.0, 40.0), (113.0, 23.0), (120.0, 37.0), (0.0, 0.0), (0.0, 0.0), (104.0, 30.0), (116.0, 40.0), (122.0, 30.0), (113.0, 23.0), (114.0, 38.0), (116.0, 40.0), (114.0, 39.0), (0.0, 0.0), (1.0, 1.0), (116.0, 40.0), (105.0, 32.0), (113.0, 23.0), (104.0, 30.0), (107.0, 30.0), (119.0, 32.0), (113.0, 23.0), (0.0, 0.0), (1.0, 1.0), (0.0, 0.0), (0.0, 0.0), (114.0, 23.0), (114.0, 23.0), (114.0, 23.0), (118.0, 24.0), (119.0, 32.0), (121.0, 29.0), (114.0, 23.0), (121.0, 29.0), (0.0, 0.0), (113.0, 23.0), (0.0, 0.0), (113.0, 23.0), (102.0, 25.0), (116.0, 29.0), (104.0, 31.0), (109.0, 34.0), (116.0, 24.0), (122.0, 40.0), (118.0, 39.0), (0.0, 0.0), (108.0, 23.0), (0.0, 0.0), (108.0, 23.0), (0.0, 0.0), (114.0, 35.0), (1.0, 1.0), (0.0, 0.0), (114.0, 35.0), (122.0, 42.0), (121.0, 30.0), (0.0, 0.0), (118.0, 37.0), (0.0, 0.0), (113.0, 23.0), (0.0, 0.0), (0.0, 0.0), (118.0, 39.0), (1.0, 1.0), (104.0, 30.0), (118.0, 32.0), (0.0, 0.0), (0.0, 0.0), (119.0, 32.0), (113.0, 36.0), (108.0, 23.0), (114.0, 23.0), (117.0, 32.0), (113.0, 23.0), (1.0, 1.0), (1.0, 1.0), (120.0, 30.0), (121.0, 31.0), (108.0, 23.0), (0.0, 0.0), (114.0, 23.0), (114.0, 25.0), (120.0, 36.0), (113.0, 36.0), (108.0, 23.0), (0.0, 0.0), (114.0, 35.0), (121.0, 31.0), (0.0, 0.0), (121.0, 31.0), (115.0, 38.0), (0.0, 0.0), (0.0, 0.0), (104.0, 30.0), (120.0, 32.0), (120.0, 37.0), (118.0, 38.0), (0.0, 0.0), (118.0, 24.0), (0.0, 0.0), (0.0, 0.0), (114.0, 37.0), (0.0, 0.0), (1.0, 1.0), (0.0, 0.0), (116.0, 40.0), (0.0, 0.0), (0.0, 0.0), (114.0, 38.0), (126.0, 42.0), (113.0, 23.0), (0.0, 0.0), (108.0, 23.0), (117.0, 34.0), (114.0, 31.0), (116.0, 29.0), (121.0, 31.0), (0.0, 0.0), (106.0, 27.0), (0.0, 0.0), (0.0, 0.0), (120.0, 32.0), (0.0, 0.0), (114.0, 23.0), (104.0, 30.0), (104.0, 31.0), (114.0, 35.0), (115.0, 33.0), (116.0, 40.0), (116.0, 40.0), (120.0, 30.0), (0.0, 0.0), (114.0, 23.0), (105.0, 23.0), (0.0, 0.0), (0.0, 0.0), (116.0, 40.0), (121.0, 31.0), (0.0, 0.0), (0.0, 0.0), (0.0, 0.0), (113.0, 23.0), (120.0, 36.0), (115.0, 37.0), (104.0, 36.0), (114.0, 31.0), (119.0, 32.0), (0.0, 0.0), (124.0, 42.0), (116.0, 40.0), (106.0, 30.0), (113.0, 23.0), (0.0, 0.0), (1.0, 1.0), (0.0, 0.0), (0.0, 0.0), (121.0, 31.0), (0.0, 0.0), (120.0, 36.0), (112.0, 23.0), (0.0, 0.0), (114.0, 37.0), (116.0, 40.0), (110.0, 25.0), (118.0, 24.0), (104.0, 30.0), (108.0, 23.0), (107.0, 29.0), (121.0, 31.0), (0.0, 0.0), (113.0, 34.0), (0.0, 0.0), (120.0, 29.0), (104.0, 30.0), (0.0, 0.0), (117.0, 28.0), (108.0, 23.0), (0.0, 0.0), (104.0, 31.0), (114.0, 36.0), (116.0, 40.0), (117.0, 31.0), (0.0, 0.0), (114.0, 38.0), (120.0, 30.0), (104.0, 30.0), (108.0, 23.0), (112.0, 22.0), (114.0, 23.0), (116.0, 23.0), (116.0, 23.0), (117.0, 38.0), (114.0, 31.0), (113.0, 36.0), (122.0, 40.0), (112.0, 36.0), (109.0, 34.0), (122.0, 30.0), (115.0, 26.0), (115.0, 26.0), (121.0, 28.0), (0.0, 0.0), (119.0, 32.0), (119.0, 32.0), (113.0, 23.0), (120.0, 29.0), (119.0, 26.0), (0.0, 0.0), (0.0, 0.0), (115.0, 23.0), (0.0, 0.0), (119.0, 32.0), (120.0, 33.0), (121.0, 30.0), (111.0, 27.0), (120.0, 29.0), (117.0, 39.0), (1.0, 1.0), (114.0, 23.0), (121.0, 31.0), (0.0, 0.0), (0.0, 0.0), (0.0, 0.0), (117.0, 36.0), (124.0, 42.0), (0.0, 0.0), (0.0, 0.0), (113.0, 23.0), (122.0, 40.0), (105.0, 23.0), (122.0, 40.0), (122.0, 31.0), (112.0, 22.0), (121.0, 31.0), (0.0, 0.0), (0.0, 0.0), (1.0, 1.0), (106.0, 37.0), (106.0, 27.0), (114.0, 23.0), (121.0, 31.0), (0.0, 0.0), (0.0, 0.0), (112.0, 36.0), (104.0, 36.0), (106.0, 38.0), (120.0, 42.0), (0.0, 0.0), (121.0, 31.0), (114.0, 31.0), (110.0, 21.0), (0.0, 0.0), (110.0, 20.0), (120.0, 36.0), (116.0, 40.0), (0.0, 0.0), (0.0, 0.0), (0.0, 0.0), (104.0, 30.0), (1.0, 1.0), (118.0, 35.0), (122.0, 30.0), (120.0, 30.0), (113.0, 23.0), (113.0, 28.0), (0.0, 0.0), (114.0, 31.0), (126.0, 42.0), (0.0, 0.0), (114.0, 23.0), (120.0, 37.0), (112.0, 38.0), (113.0, 28.0), (103.0, 30.0), (113.0, 28.0), (119.0, 32.0), (115.0, 30.0), (110.0, 20.0), (121.0, 31.0), (113.0, 36.0), (1.0, 1.0), (103.0, 25.0), (108.0, 26.0), (123.0, 41.0), (114.0, 23.0), (118.0, 26.0), (116.0, 40.0), (120.0, 27.0), (0.0, 0.0), (121.0, 31.0), (109.0, 22.0), (121.0, 31.0), (0.0, 0.0), (0.0, 0.0), (0.0, 0.0), (114.0, 35.0), (117.0, 37.0), (118.0, 38.0), (0.0, 0.0), (119.0, 26.0), (0.0, 0.0), (114.0, 36.0), (0.0, 0.0), (121.0, 31.0), (104.0, 30.0), (123.0, 41.0), (123.0, 41.0), (109.0, 30.0), (0.0, 0.0), (122.0, 30.0), (0.0, 0.0), (105.0, 32.0), (0.0, 0.0), (0.0, 0.0), (117.0, 32.0), (118.0, 39.0), (121.0, 28.0), (121.0, 31.0), (121.0, 38.0), (113.0, 34.0), (121.0, 28.0), (121.0, 31.0), (113.0, 29.0), (114.0, 23.0), (114.0, 23.0), (112.0, 36.0), (113.0, 23.0), (118.0, 40.0), (0.0, 0.0), (111.0, 21.0), (116.0, 40.0), (119.0, 32.0), (116.0, 40.0), (116.0, 40.0), (116.0, 40.0), (119.0, 26.0), (120.0, 37.0), (120.0, 30.0), (114.0, 31.0), (113.0, 38.0), (119.0, 32.0), (115.0, 38.0), (112.0, 32.0), (109.0, 35.0), (0.0, 0.0), (117.0, 36.0), (120.0, 36.0), (119.0, 26.0), (0.0, 0.0), (113.0, 23.0), (0.0, 0.0), (102.0, 25.0), (0.0, 0.0), (120.0, 30.0), (115.0, 30.0), (121.0, 30.0), (116.0, 23.0), (117.0, 28.0), (127.0, 46.0), (121.0, 31.0), (114.0, 23.0), (114.0, 35.0), (120.0, 32.0), (114.0, 23.0), (105.0, 29.0), (114.0, 35.0), (102.0, 25.0), (116.0, 40.0), (121.0, 31.0), (112.0, 30.0), (0.0, 0.0), (104.0, 30.0), (116.0, 40.0), (0.0, 0.0), (121.0, 31.0), (115.0, 38.0), (114.0, 31.0), (0.0, 0.0), (0.0, 0.0), (1.0, 1.0), (1.0, 1.0), (0.0, 0.0), (88.0, 44.0), (118.0, 34.0), (0.0, 0.0), (0.0, 0.0), (0.0, 0.0), (114.0, 23.0), (119.0, 26.0), (114.0, 23.0), (114.0, 23.0), (106.0, 38.0), (0.0, 0.0), (113.0, 23.0), (0.0, 0.0), (88.0, 44.0), (0.0, 0.0), (114.0, 23.0), (106.0, 27.0), (113.0, 23.0), (121.0, 28.0), (118.0, 36.0), (109.0, 18.0), (109.0, 18.0), (118.0, 28.0), (118.0, 28.0), (108.0, 23.0), (0.0, 0.0), (123.0, 42.0), (114.0, 23.0), (0.0, 0.0), (106.0, 27.0), (119.0, 34.0), (0.0, 0.0), (0.0, 0.0), (120.0, 29.0), (119.0, 25.0), (119.0, 25.0), (0.0, 0.0), (114.0, 27.0), (121.0, 31.0), (116.0, 40.0), (109.0, 34.0), (109.0, 34.0), (100.0, 27.0), (0.0, 0.0), (122.0, 40.0), (0.0, 0.0), (0.0, 0.0), (120.0, 27.0), (0.0, 0.0), (0.0, 0.0), (112.0, 22.0), (114.0, 35.0), (1.0, 1.0), (114.0, 23.0), (104.0, 31.0), (0.0, 0.0), (110.0, 25.0), (104.0, 30.0), (0.0, 0.0), (0.0, 0.0), (117.0, 36.0), (121.0, 29.0), (120.0, 30.0), (114.0, 23.0), (110.0, 20.0), (121.0, 31.0), (0.0, 0.0), (0.0, 0.0), (1.0, 1.0), (0.0, 0.0), (113.0, 23.0), (113.0, 34.0), (113.0, 23.0), (0.0, 0.0), (113.0, 38.0), (0.0, 0.0), (118.0, 37.0), (0.0, 0.0), (115.0, 30.0), (114.0, 30.0), (118.0, 35.0), (118.0, 35.0), (121.0, 30.0), (0.0, 0.0), (117.0, 39.0), (0.0, 0.0), (120.0, 33.0), (0.0, 0.0), (116.0, 40.0), (114.0, 31.0), (113.0, 35.0), (0.0, 0.0), (119.0, 40.0), (114.0, 23.0), (106.0, 38.0), (116.0, 40.0), (119.0, 26.0), (114.0, 28.0), (117.0, 37.0), (124.0, 42.0), (0.0, 0.0), (104.0, 30.0), (105.0, 25.0), (114.0, 37.0), (0.0, 0.0), (0.0, 0.0), (122.0, 39.0), (0.0, 0.0), (114.0, 35.0), (115.0, 29.0), (0.0, 0.0), (0.0, 0.0), (119.0, 32.0), (110.0, 25.0), (113.0, 28.0), (0.0, 0.0), (0.0, 0.0), (0.0, 0.0), (122.0, 37.0), (114.0, 23.0), (0.0, 0.0), (118.0, 24.0), (121.0, 31.0), (121.0, 38.0), (104.0, 23.0), (119.0, 32.0), (107.0, 30.0), (0.0, 0.0), (119.0, 26.0), (117.0, 32.0), (116.0, 40.0), (117.0, 32.0), (121.0, 28.0), (121.0, 28.0), (119.0, 25.0), (0.0, 0.0), (114.0, 38.0), (118.0, 36.0), (111.0, 36.0), (0.0, 0.0), (0.0, 0.0), (116.0, 36.0), (121.0, 30.0), (117.0, 23.0), (0.0, 0.0), (0.0, 0.0), (119.0, 26.0), (114.0, 35.0), (121.0, 31.0), (103.0, 25.0), (113.0, 23.0), (0.0, 0.0), (0.0, 0.0), (114.0, 27.0), (124.0, 47.0), (104.0, 36.0), (119.0, 26.0), (117.0, 37.0), (105.0, 23.0), (107.0, 28.0), (0.0, 0.0), (0.0, 0.0), (113.0, 23.0), (0.0, 0.0), (120.0, 30.0), (116.0, 36.0), (121.0, 31.0), (117.0, 39.0), (0.0, 0.0), (1.0, 1.0), (0.0, 0.0), (106.0, 30.0), (114.0, 23.0), (0.0, 0.0), (108.0, 23.0), (111.0, 32.0), (0.0, 0.0), (114.0, 31.0), (127.0, 46.0), (0.0, 0.0), (122.0, 30.0), (108.0, 23.0), (0.0, 0.0), (0.0, 0.0), (113.0, 23.0), (118.0, 39.0), (113.0, 23.0), (0.0, 0.0), (118.0, 37.0), (113.0, 38.0), (1.0, 1.0), (116.0, 35.0), (117.0, 40.0), (109.0, 34.0), (109.0, 22.0), (0.0, 0.0), (107.0, 27.0), (0.0, 0.0), (114.0, 23.0), (121.0, 31.0), (0.0, 0.0), (114.0, 36.0), (108.0, 35.0), (0.0, 0.0), (117.0, 37.0), (122.0, 40.0), (110.0, 19.0), (1.0, 1.0), (0.0, 0.0), (105.0, 23.0), (118.0, 35.0), (0.0, 0.0), (121.0, 37.0), (1.0, 1.0), (117.0, 23.0), (114.0, 23.0), (0.0, 0.0), (121.0, 31.0), (0.0, 0.0), (0.0, 0.0), (114.0, 32.0), (116.0, 37.0), (0.0, 0.0), (116.0, 29.0), (110.0, 25.0), (122.0, 31.0), (121.0, 31.0), (0.0, 0.0), (121.0, 29.0), (119.0, 32.0), (111.0, 25.0), (102.0, 25.0), (102.0, 25.0), (0.0, 0.0), (118.0, 31.0), (110.0, 21.0), (110.0, 25.0), (119.0, 32.0), (120.0, 30.0), (120.0, 30.0), (120.0, 30.0), (121.0, 31.0), (114.0, 23.0), (108.0, 23.0), (114.0, 23.0), (0.0, 0.0), (110.0, 20.0), (116.0, 40.0), (113.0, 36.0), (122.0, 30.0), (108.0, 32.0), (0.0, 0.0), (104.0, 30.0), (104.0, 30.0), (113.0, 23.0), (1.0, 1.0), (123.0, 41.0), (120.0, 30.0), (112.0, 38.0), (112.0, 38.0), (113.0, 28.0), (0.0, 0.0), (116.0, 40.0), (119.0, 32.0), (102.0, 28.0), (122.0, 40.0), (113.0, 23.0), (0.0, 0.0), (114.0, 24.0), (114.0, 24.0), (119.0, 32.0), (100.0, 9.0), (121.0, 31.0), (106.0, 30.0), (104.0, 31.0), (0.0, 0.0), (118.0, 36.0), (120.0, 36.0), (122.0, 31.0), (120.0, 29.0), (116.0, 33.0), (114.0, 23.0), (113.0, 23.0), (119.0, 26.0), (113.0, 23.0), (113.0, 23.0), (121.0, 31.0), (120.0, 29.0), (108.0, 26.0), (0.0, 0.0), (105.0, 32.0), (0.0, 0.0), (1.0, 1.0), (121.0, 31.0), (118.0, 25.0), (114.0, 23.0), (108.0, 25.0), (0.0, 0.0), (114.0, 35.0), (114.0, 23.0), (119.0, 26.0), (0.0, 0.0), (114.0, 23.0), (113.0, 28.0), (104.0, 31.0), (117.0, 32.0), (116.0, 40.0), (103.0, 25.0), (106.0, 30.0), (113.0, 34.0), (0.0, 0.0), (0.0, 0.0), (118.0, 38.0), (125.0, 45.0), (114.0, 31.0), (119.0, 37.0), (0.0, 0.0), (121.0, 31.0), (116.0, 40.0), (104.0, 30.0), (118.0, 38.0), (102.0, 39.0), (119.0, 34.0), (121.0, 31.0), (0.0, 0.0), (121.0, 31.0), (114.0, 39.0), (119.0, 32.0), (120.0, 36.0), (116.0, 24.0), (113.0, 23.0), (0.0, 0.0), (113.0, 23.0), (100.0, 27.0), (107.0, 30.0), (121.0, 31.0), (120.0, 32.0), (120.0, 32.0), (114.0, 31.0), (113.0, 32.0), (0.0, 0.0), (116.0, 35.0), (115.0, 27.0), (113.0, 23.0), (113.0, 23.0), (0.0, 0.0), (122.0, 40.0), (120.0, 31.0), (0.0, 0.0), (121.0, 38.0), (106.0, 38.0), (0.0, 0.0), (0.0, 0.0), (119.0, 26.0), (110.0, 25.0), (104.0, 23.0), (114.0, 23.0), (114.0, 23.0), (120.0, 29.0), (0.0, 0.0), (0.0, 0.0), (110.0, 20.0), (116.0, 40.0), (104.0, 31.0), (123.0, 42.0), (115.0, 28.0), (0.0, 0.0), (0.0, 0.0), (0.0, 0.0), (1.0, 1.0), (110.0, 20.0), (113.0, 35.0), (117.0, 40.0), (1.0, 1.0), (116.0, 27.0), (112.0, 30.0), (113.0, 28.0), (116.0, 40.0), (110.0, 27.0), (110.0, 23.0), (119.0, 32.0), (114.0, 23.0), (119.0, 25.0), (0.0, 0.0), (116.0, 40.0), (0.0, 0.0), (0.0, 0.0), (0.0, 0.0), (121.0, 31.0), (119.0, 26.0), (120.0, 27.0), (0.0, 0.0), (0.0, 0.0), (0.0, 0.0), (120.0, 32.0), (113.0, 23.0), (0.0, 0.0), (104.0, 31.0), (1.0, 1.0), (122.0, 30.0), (122.0, 40.0), (104.0, 30.0), (0.0, 0.0), (116.0, 40.0), (0.0, 0.0), (113.0, 23.0), (0.0, 0.0), (117.0, 23.0), (113.0, 28.0), (122.0, 40.0), (120.0, 32.0), (1.0, 1.0), (108.0, 23.0), (1.0, 1.0), (0.0, 0.0), (108.0, 23.0), (120.0, 30.0), (114.0, 31.0), (0.0, 0.0), (121.0, 31.0), (105.0, 32.0), (117.0, 36.0), (113.0, 36.0), (113.0, 36.0), (122.0, 30.0), (110.0, 41.0), (121.0, 28.0), (106.0, 30.0), (114.0, 23.0), (106.0, 27.0), (106.0, 27.0), (104.0, 36.0), (109.0, 18.0), (118.0, 28.0), (116.0, 36.0), (125.0, 50.0), (121.0, 31.0), (119.0, 25.0), (0.0, 0.0), (120.0, 31.0), (0.0, 0.0), (121.0, 31.0), (0.0, 0.0), (1.0, 1.0), (0.0, 0.0), (0.0, 0.0), (103.0, 30.0), (119.0, 32.0), (120.0, 30.0), (119.0, 34.0), (114.0, 25.0), (118.0, 30.0), (0.0, 0.0), (121.0, 31.0), (113.0, 36.0), (104.0, 30.0), (126.0, 43.0), (0.0, 0.0), (114.0, 31.0), (113.0, 36.0), (121.0, 31.0), (117.0, 38.0), (113.0, 23.0), (114.0, 35.0), (116.0, 40.0), (0.0, 0.0), (0.0, 0.0), (112.0, 38.0), (120.0, 27.0), (0.0, 0.0), (0.0, 0.0), (104.0, 30.0), (115.0, 37.0), (0.0, 0.0), (120.0, 36.0), (1.0, 1.0), (108.0, 23.0), (0.0, 0.0), (0.0, 0.0), (112.0, 36.0), (104.0, 31.0), (113.0, 23.0), (119.0, 32.0), (116.0, 40.0), (116.0, 40.0), (119.0, 26.0), (116.0, 24.0), (0.0, 0.0), (106.0, 38.0), (113.0, 36.0), (0.0, 0.0), (120.0, 37.0), (121.0, 31.0), (113.0, 23.0), (88.0, 44.0), (116.0, 24.0), (109.0, 34.0), (120.0, 31.0), (121.0, 28.0), (114.0, 37.0), (113.0, 34.0), (116.0, 40.0), (106.0, 37.0), (0.0, 0.0), (0.0, 0.0), (0.0, 0.0), (0.0, 0.0), (121.0, 29.0), (114.0, 23.0), (123.0, 42.0), (0.0, 0.0), (113.0, 23.0), (116.0, 40.0), (116.0, 23.0), (0.0, 0.0), (124.0, 42.0), (114.0, 31.0), (0.0, 0.0), (0.0, 0.0), (113.0, 36.0), (110.0, 20.0), (118.0, 37.0), (106.0, 38.0), (113.0, 23.0), (112.0, 38.0), (120.0, 30.0), (114.0, 23.0), (116.0, 40.0), (116.0, 40.0), (114.0, 25.0), (0.0, 0.0), (109.0, 34.0), (114.0, 35.0), (124.0, 42.0), (114.0, 35.0), (0.0, 0.0), (121.0, 31.0), (0.0, 0.0), (119.0, 34.0), (121.0, 38.0), (120.0, 27.0), (118.0, 36.0), (0.0, 0.0), (114.0, 23.0), (118.0, 38.0), (118.0, 39.0), (1.0, 1.0), (114.0, 38.0), (121.0, 29.0), (116.0, 40.0), (116.0, 36.0), (110.0, 20.0), (0.0, 0.0), (121.0, 31.0), (114.0, 37.0), (121.0, 31.0), (114.0, 35.0), (118.0, 35.0), (113.0, 23.0), (115.0, 38.0), (0.0, 0.0), (0.0, 0.0), (104.0, 31.0), (115.0, 27.0), (105.0, 38.0), (0.0, 0.0), (116.0, 40.0), (114.0, 23.0), (124.0, 47.0))", "rowcount": 959, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column \"timestamp\" does not exist\nLINE 1: SELECT longitude, latitude FROM events WHERE date(timestamp)...\n                                                          ^\nHINT:  Perhaps you meant to reference the column \"events._timestamp\".\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 88, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "()", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": 89, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": 90, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 91, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 92, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('F',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('F',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": 94, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 95, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 93, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('0E-20'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('0E-20'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 248, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('DS Yamamura Misa Suspense: Maiko Kogiku - Kisha Katherine - Sougiya Isa Akashi - Koto ni Maru Hana Sanrin: Kyoto Satujin Jinken File',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('DS Yamamura Misa Suspense: Maiko Kogiku - Kisha Katherine - Sougiya Isa Akashi - Koto ni Maru Hana Sanrin: Kyoto Satujin Jinken File',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 510, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((45.370370370370374,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "function pg_catalog.substring(date, integer, integer) does not exist\nLINE 1: .../ COUNT(\"BusinessEntityID\") FROM \"Employee\" WHERE SUBSTRING(...\n                                                             ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": 511, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 512, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((77.994,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((77.994,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 513, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, '75'), (0, '93'), (0, 'NV'), (0, '94'), (0, 'OH'), (0, '95'), (0, 'NY'), (0, '32'), (0, 'QC'), (0, 'BC'), (0, 'NW'), (0, 'CT'), (0, 'HH'), (0, 'WY'), (0, 'MT'), (0, '45'), (0, 'BY'), (0, 'MI'), (0, 'VIC'), (0, '31'), (0, 'SA'), (0, '62'), (0, 'NH'), (0, 'AB'), (0, 'OR'), (0, 'BB'), (0, 'QLD'), (0, 'WI'), (0, 'RI'), (0, '17'), (0, '78'), (0, 'TN'), (0, 'WA'), (0, 'MA'), (0, 'AL'), (0, 'ON'), (0, 'CO'), (0, 'VA'), (0, 'AZ'), (0, 'SL'), (0, 'IN'), (0, 'NSW'), (0, 'NE'), (0, 'FL'), (0, 'ME'), (0, 'SD'), (0, '33'), (0, '92'), (0, 'UT'), (0, 'SC'), (0, 'ENG'), (0, '80'), (0, 'TAS'), (0, 'CA'), (0, 'NB'), (0, 'TX'), (0, 'KY'), (0, '91'), (0, 'MB'), (0, '59'), (0, 'HE'), (0, '77'), (0, 'NM'), (0, 'MS'), (0, 'MO'), (0, 'NC'), (0, '57'), (0, 'GA'), (0, 'ID'), (0, 'MN'), (0, 'PA'), (0, 'MD'), (0, 'IL'), (0, '41'))", "rowcount": 74, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.stateprovinceid does not exist\nLINE 1: ...ddress\" AS T1 INNER JOIN \"StateProvince\" AS T2 ON T1.statepr...\n                                                             ^\n", "exec_able": false}}, "TP": 2, "FP": 3, "FN": 0}
{"sql_id": 514, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1431.5,), (1431.5,), (1431.5,), (1431.5,), (1431.5,), (337.22,), (337.22,), (337.22,), (337.22,), (337.22,), (337.22,), (1364.5,), (1364.5,), (1349.6,), (1349.6,), (1349.6,), (1364.5,), (2319.99,), (2319.99,), (2319.99,), (2294.99,), (2294.99,), (2294.99,), (2443.35,), (2443.35,), (2443.35,), (2443.35,), (2443.35,), (1120.49,), (1120.49,), (1120.49,), (1120.49,), (1120.49,), (44.54,), (61.92,), (120.27,), (44.54,), (61.92,), (120.27,), (594.83,), (594.83,), (594.83,), (594.83,), (594.83,), (1431.5,), (1431.5,), (1431.5,), (1431.5,), (63.5,), (63.5,), (63.5,), (69.99,), (69.99,), (69.99,), (120.0,), (159.0,), (54.99,), (1003.91,), (333.42,), (1003.91,), (1003.91,), (1003.91,), (1003.91,), (1003.91,), (1003.91,), (1003.91,), (121.46,), (333.42,), (333.42,), (333.42,), (333.42,), (333.42,), (333.42,), (333.42,), (333.42,), (333.42,), (364.09,), (364.09,), (364.09,), (106.5,), (52.64,), (52.64,), (52.64,), (264.05,), (264.05,), (264.05,), (264.05,), (249.79,), (249.79,), (249.79,), (249.79,), (35.0,), (40.49,), (62.09,), (80.99,), (40.49,), (62.09,), (80.99,), (80.99,), (364.09,), (249.79,), (264.05,), (91.49,), (46.09,), (91.57,), (106.5,), (175.49,), (256.49,), (404.99,), (1214.85,), (2384.07,), (2384.07,), (2384.07,), (2384.07,), (742.35,), (742.35,), (742.35,), (742.35,), (742.35,), (742.35,), (742.35,), (742.35,), (2384.07,), (2384.07,), (2384.07,), (2384.07,), (1214.85,), (1214.85,), (1214.85,), (1700.99,), (1700.99,), (1700.99,), (1700.99,), (539.99,), (742.35,), (742.35,), (769.49,), (769.49,), (769.49,), (769.49,), (564.99,), (564.99,), (564.99,), (564.99,), (564.99,), (539.99,), (539.99,), (539.99,), (539.99,), (539.99,), (53.99,), (101.24,), (121.49,), (539.99,), (539.99,), (539.99,))", "rowcount": 156, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1431.5,), (1431.5,), (1431.5,), (1431.5,), (1431.5,), (337.22,), (337.22,), (337.22,), (337.22,), (337.22,), (337.22,), (1364.5,), (1364.5,), (1349.6,), (1349.6,), (1349.6,), (1364.5,), (2319.99,), (2319.99,), (2319.99,), (2294.99,), (2294.99,), (2294.99,), (2443.35,), (2443.35,), (2443.35,), (2443.35,), (2443.35,), (1120.49,), (1120.49,), (1120.49,), (1120.49,), (1120.49,), (44.54,), (61.92,), (120.27,), (44.54,), (61.92,), (120.27,), (594.83,), (594.83,), (594.83,), (594.83,), (594.83,), (1431.5,), (1431.5,), (1431.5,), (1431.5,), (63.5,), (63.5,), (63.5,), (69.99,), (69.99,), (69.99,), (120.0,), (159.0,), (54.99,), (1003.91,), (333.42,), (1003.91,), (1003.91,), (1003.91,), (1003.91,), (1003.91,), (1003.91,), (1003.91,), (121.46,), (333.42,), (333.42,), (333.42,), (333.42,), (333.42,), (333.42,), (333.42,), (333.42,), (333.42,), (364.09,), (364.09,), (364.09,), (106.5,), (52.64,), (52.64,), (52.64,), (264.05,), (264.05,), (264.05,), (264.05,), (249.79,), (249.79,), (249.79,), (249.79,), (35.0,), (40.49,), (62.09,), (80.99,), (40.49,), (62.09,), (80.99,), (80.99,), (364.09,), (249.79,), (264.05,), (91.49,), (46.09,), (91.57,), (106.5,), (175.49,), (256.49,), (404.99,), (1214.85,), (2384.07,), (2384.07,), (2384.07,), (2384.07,), (742.35,), (742.35,), (742.35,), (742.35,), (742.35,), (742.35,), (742.35,), (742.35,), (2384.07,), (2384.07,), (2384.07,), (2384.07,), (1214.85,), (1214.85,), (1214.85,), (1700.99,), (1700.99,), (1700.99,), (1700.99,), (539.99,), (742.35,), (742.35,), (769.49,), (769.49,), (769.49,), (769.49,), (564.99,), (564.99,), (564.99,), (564.99,), (564.99,), (539.99,), (539.99,), (539.99,), (539.99,), (539.99,), (53.99,), (101.24,), (121.49,), (539.99,), (539.99,), (539.99,))", "rowcount": 156, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 515, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((44,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((44,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 517, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('W',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('W',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 520, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((276, 750000.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((276, 750000.0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 522, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1200000.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1200000.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 523, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((275,), (276,), (277,), (278,), (279,), (280,), (281,), (282,), (283,), (286,), (288,), (289,), (290,))", "rowcount": 13, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.SalesLastYearOutput does not exist\nLINE 5: AND T1.\"SalesQuota\" < T1.\"SalesLastYearOutput\";\n                              ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 524, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((188715.0, 1.3384042553191489))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((188715.0, 1.3384042553191489))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 525, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((13.4615,), (12.45,), (11.0,), (25.0,), (9.5,), (11.0,), (15.0,), (14.0,), (6.5,), (7.25,), (9.5,), (15.0,), (15.0,), (10.5769,))", "rowcount": 14, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((13.4615,), (12.45,), (11.0,), (25.0,), (9.5,), (11.0,), (15.0,), (14.0,), (6.5,), (7.25,), (9.5,), (15.0,), (15.0,), (10.5769,))", "rowcount": 14, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": 526, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((9,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"employee\" does not exist\nLINE 1: SELECT COUNT(BusinessEntityID) FROM Employee WHERE MaritalSt...\n                                            ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 528, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t3.Name does not exist\nLINE 1: SELECT COUNT(T3.\"Name\") \n                     ^\nHINT:  Perhaps you meant to reference the column \"t3._Name\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 529, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((38.76470588235294,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('38.7647058823529412'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": 530, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((53, 14.4231))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"employee\" does not exist\nLINE 1: ...5 - EXTRACT(YEAR FROM T1.BirthDate), T2.Rate FROM Employee A...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": 531, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((254, 40))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((254, 40.0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": 534, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Ken', 'S\u00e1nchez'), ('Terri', 'Duffy'), ('Roberto', 'Tamburello'), ('Gail', 'Erickson'), ('Jossef', 'Goldberg'), ('Dylan', 'Miller'), ('Diane', 'Margheim'), ('Gigi', 'Matthew'), ('Michael', 'Raheem'), ('Michael', 'Sullivan'), ('Sharon', 'Salavaria'), ('David', 'Bradley'), ('James', 'Hamilton'), ('Peter', 'Krebs'), ('Pilar', 'Ackerman'), ('Hazem', 'Abolrous'), ('Peng', 'Wu'), ('Gary', 'Altman'), ('Christian', 'Kleinerman'), ('Laura', 'Norman'), ('Paula', 'Barreto de Mattos'), ('David', 'Liu'), ('Barbara', 'Moreland'), ('Mike', 'Seamans'), ('Wendy', 'Kahn'), ('Sheela', 'Word'), ('Jean', 'Trenary'), ('Stephanie', 'Conroy'), ('Karen', 'Berg'), ('Ramesh', 'Meyyappan'), ('Dan', 'Bacon'), ('Fran\u00e7ois', 'Ajenstat'), ('Dan', 'Wilson'), ('Janaina', 'Bueno'), ('Brian', 'Welcker'), ('Stephen', 'Jiang'), ('Michael', 'Blythe'), ('Linda', 'Mitchell'), ('Jillian', 'Carson'), ('Garrett', 'Vargas'), ('Tsvi', 'Reiter'), ('Pamela', 'Ansman-Wolfe'), ('Shu', 'Ito'), ('Jos\u00e9', 'Saraiva'), ('David', 'Campbell'), ('Tete', 'Mensa-Annan'), ('Syed', 'Abbas'), ('Lynn', 'Tsoflias'), ('Amy', 'Alberts'), ('Rachel', 'Valdez'), ('Jae', 'Pak'), ('Ranjit', 'Varkey Chudukatil'))", "rowcount": 52, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.firstname does not exist\nLINE 1: SELECT T1.FirstName, T1.LastName \n               ^\nHINT:  Perhaps you meant to reference the column \"t1.FirstName\".\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 537, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('16.250000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"employee\" does not exist\nLINE 2: FROM Employee AS T1 \n             ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": 538, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('46.982759'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"employee\" does not exist\nLINE 1: ...NT_TIMESTAMP) - EXTRACT(YEAR FROM BirthDate)) FROM Employee;\n                                                              ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 2}
{"sql_id": 540, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Terri', 'Duffy'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"employee\" does not exist\nLINE 2: FROM Employee AS T1 \n             ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 541, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((35, 'Production'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t1.birthdate does not exist\nLINE 1: ...RT('year', CURRENT_TIMESTAMP) - DATE_PART('year', T1.BirthDa...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.BirthDate\".\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": 545, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((57, 'Prasanna', 'E', 'Samarawickrama'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((57.0, 'Prasanna', 'E', 'Samarawickrama'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 4}
{"sql_id": 547, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": 548, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": 549, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": 550, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((910.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((910.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 4, "FN": 6}
{"sql_id": 551, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": 552, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((8,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "relation \"workorderrouting\" does not exist\nLINE 1: ...EndDate) - EXTRACT(DAY FROM ActualStartDate) FROM WorkOrderR...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 6}
{"sql_id": 508, "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 4}
{"sql_id": 559, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((6.097560975609756,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2._language does not exist\nLINE 1: SELECT CAST(SUM(CASE WHEN T2._Language = 'English' THEN 1 EL...\n                                  ^\nHINT:  Perhaps you meant to reference the column \"t2._Language\".\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": 560, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3.120936280884265,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2._language does not exist\nLINE 1: SELECT CAST(SUM(CASE WHEN T2._Language = 'English' THEN 1 EL...\n                                  ^\nHINT:  Perhaps you meant to reference the column \"t2._Language\".\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": 561, "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2.8452181419627407,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "", "rowcount": -1, "error_message": "column t2._language does not exist\nLINE 1: SELECT CAST(SUM(CASE WHEN T2._Language = 'Chinese' THEN T1.\"...\n                                  ^\nHINT:  Perhaps you meant to reference the column \"t2._Language\".\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}

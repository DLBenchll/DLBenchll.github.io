{"sql_id": "postgresql_1_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 10))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 10))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_1_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 10), (2, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_1_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 20))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_1_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_100_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_100_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_100_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1035680400, datetime.datetime(2002, 10, 27, 1, 0, tzinfo=datetime.timezone.utc)), (1035684000, datetime.datetime(2002, 10, 27, 2, 0, tzinfo=datetime.timezone.utc)), (1035687600, datetime.datetime(2002, 10, 27, 3, 0, tzinfo=datetime.timezone.utc)))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1035680400, '2002-10-27 01:00:00'), (1035684000, '2002-10-27 02:00:00'), (1035687600, '2002-10-27 03:00:00'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_100_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent PostgreSQL statement is as follows:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_100_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((730851,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent PostgreSQL command for this MySQL statement i...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 9, "FN": 1}
{"sql_id": "postgresql_100_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((730851,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_100_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('172798.9999999999999980'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_100_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type interval: \"2000-01-01 00:00:00\"\nLINE 1: SELECT INTERVAL '2000-01-01 00:00:00' - '2000-01-01 00:00:00...\n                        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Saturday October 2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Saturday  10 October   2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:59:59',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"TIME\"\nLINE 1: SELECT EXTRACT(TIME FROM TIME '2003-12-31 23:59:59');\n                       ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_100_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2004, 1, 1, 11, 59, 59, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2004, 1, 1, 11, 59, 59, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2003, 1, 3, 0, 0, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(0, 0, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('2'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_100_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('63426758399.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('86399.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_100_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1447459199.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((86399,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_101_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',), ('6120',), ('612020',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_101_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((7,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((24,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_101_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('41', 'a'), ('41', 'c'), ('4100', 'b'), ('4100', 'd'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('41', 'a'), ('41', 'c'), ('4100', 'b'), ('4100', 'd'))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_101_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function convert(integer, unknown) does not exist\nLINE 1: SELECT convert('123456789'::int, 'unsigned');\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_102_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "postgresql_102_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "postgresql_102_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 2}
{"sql_id": "postgresql_102_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "postgresql_102_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_102_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"SELECT\"\nLINE 1: CREATE TABLE t1 SELECT CURRENT_DATE AS f1;\n                        ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_102_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The PostgreSQL equivalent of your MySQL query is as follows:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 40, "FN": 1}
{"sql_id": "postgresql_2_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "recursive query \"qn\" column 2 has type character(100) in non-recursive term but type bpchar overall\nLINE 1: WITH RECURSIVE qn as (select 1 as n, 'x'::character(100) as ...\n                                             ^\nHINT:  Cast the output of the non-recursive term to the correct type.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_3_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('NO',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('NO',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_39_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"b\" does not exist\nLINE 1: ...N a ELSE NULL END AS b FROM t1 ORDER BY position((b + 1)::te...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_39_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,), (3,), (1,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 5, "FN": 1}
{"sql_id": "postgresql_4_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given MySQL query cannot be translated to PostgreSQL wit...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 22, "FN": 0}
{"sql_id": "postgresql_4_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_4_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The provided SQL statement contains MySQL-specific functions...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 41, "FN": 0}
{"sql_id": "postgresql_4_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"PostgreSQL\"\nLINE 1: PostgreSQL does not support the TRIM function as used in MyS...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 23, "FN": 0}
{"sql_id": "postgresql_4_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"This\"\nLINE 3: This SQL statement is already compatible with PostgreSQL. It...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 29, "FN": 0}
{"sql_id": "postgresql_4_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_4_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The provided SQL statement is in MySQL dialect. The equivale...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 37, "FN": 0}
{"sql_id": "postgresql_5_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('postgres',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"In\"\nLINE 1: In PostgreSQL, to get current username you can use the follo...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 11, "FN": 0}
{"sql_id": "postgresql_6_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('3a',), ('3b',), ('3c',), ('3d',), ('3e',), ('3f',), ('40',), ('5b',), ('5c',), ('5d',), ('5e',), ('5f',), ('60',), ('7b',), ('7c',), ('7d',), ('7e',))", "rowcount": 17, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('3a',), ('3b',), ('3c',), ('3d',), ('3e',), ('3f',), ('40',), ('5b',), ('5c',), ('5d',), ('5e',), ('5f',), ('60',), ('7b',), ('7c',), ('7d',), ('7e',))", "rowcount": 17, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_6_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" already exists\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_6_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"head\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 39, "FN": 1}
{"sql_id": "postgresql_6_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"tail\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"tail\" already exists\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_6_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_6_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_6_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_6_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 2: ```sql\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_7_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc                  ', 21), ('\u07f0                   ', 21), ('\u02ae                   ', 21), ('                    ', 20), ('50515253            ', 20), ('31                  ', 20), ('h31                 ', 20), ('2805                ', 20))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc                  ', 2), ('\u07f0                   ', 1), ('\u02ae                   ', 1), ('                    ', 0), ('50515253            ', 8), ('31                  ', 2), ('h31                 ', 3), ('2805                ', 4))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_7_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc                  ', '                  h\u04bc'), ('\u07f0                   ', '                   \u07f0'), ('\u02ae                   ', '                   \u02ae'), ('                    ', '                    '), ('50515253            ', '            50515253'), ('31                  ', '                  31'), ('h31                 ', '                 h31'), ('2805                ', '                2805'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc                  ', '                  h\u04bc'), ('\u07f0                   ', '                   \u07f0'), ('\u02ae                   ', '                   \u02ae'), ('                    ', '                    '), ('50515253            ', '            50515253'), ('31                  ', '                  31'), ('h31                 ', '                 h31'), ('2805                ', '                2805'))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_7_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc                  ', 'h\u04bc525252525252525252'), ('\u07f0                   ', '\u07f05252525252525252525'), ('\u02ae                   ', '\u02ae5252525252525252525'), ('                    ', '52525252525252525252'), ('50515253            ', '50515253525252525252'), ('31                  ', '31525252525252525252'), ('h31                 ', 'h3152525252525252525'), ('2805                ', '28055252525252525252'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc                  ', 'h\u04bc525252525252525252'), ('\u07f0                   ', '\u07f05252525252525252525'), ('\u02ae                   ', '\u02ae5252525252525252525'), ('                    ', '52525252525252525252'), ('50515253            ', '50515253525252525252'), ('31                  ', '31525252525252525252'), ('h31                 ', 'h3152525252525252525'), ('2805                ', '28055252525252525252'))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_7_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_7_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_7_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_7_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_7_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('h315253             ', 'h315253'), ('h31525352           ', 'h31525352'), ('h3152535252         ', 'h3152535252'), ('h315253525252       ', 'h315253525252'), ('52h315253           ', '52h315253'), ('5252h315253         ', '5252h315253'), ('525252h315253       ', '525252h315253'), ('   h315253          ', 'h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('h315253             ', 'h315253'), ('h31525352           ', 'h31525352'), ('h3152535252         ', 'h3152535252'), ('h315253525252       ', 'h315253525252'), ('52h315253           ', '52h315253'), ('5252h315253         ', '5252h315253'), ('525252h315253       ', '525252h315253'), ('   h315253          ', 'h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1973, 11, 29, 21, 33, 9, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1973, 11, 29, 21, 33, 9, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_71_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1977, 6, 7, 21, 44, 50, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1977, 6, 7, 21, 44, 50, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_71_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 0, 0, 1, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1970-01-01 00:00:01',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 5, "FN": 0}
{"sql_id": "postgresql_71_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('123456789.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('123456789.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 4, "FN": 1}
{"sql_id": "postgresql_71_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('234567890.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"SECONDS\"\nLINE 1: ...MESTAMP WITH TIME ZONE '1970-01-01' + (234567890) SECONDS); ...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 1}
{"sql_id": "postgresql_71_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('2179098000.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('2179098000.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_71_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('2149376400.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"To\"\nLINE 1: To translate MySQL's `UNIX_TIMESTAMP` function to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_71_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('3600.000000'), Decimal('3601.000000'), Decimal('2147487247.000000'), Decimal('2147487248.000000')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type timestamp: \"1970-01<\uff5cbegin\u2581of\u2581sentence\uff5c> 23:58:59.999\"\nLINE 1: ...1970-01-01 01:00:00'),EXTRACT(EPOCH FROM TIMESTAMP '1970-01<...\n                                                              ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 12280 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_char(timestamp with time zone) does not exist\nLINE 1: SELECT a, to_char(to_timestamp(a)) FROM t1;\n                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_71_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('32536803599.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('32399.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_72_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"PostgreSQL\"\nLINE 1: PostgreSQL does not support the CONCAT function in the same ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 24, "FN": 0}
{"sql_id": "postgresql_74_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The SQL statement can be translated to the following in Post...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 10, "FN": 1}
{"sql_id": "postgresql_74_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((13,), (13,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_74_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_74_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"[\"\nLINE 1: [Translated SQL]:INSERT INTO t2  (d) SELECT SUM(length(c)) F...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_74_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 'abc-def', '6162632d646566'), (2, \"'(),-.\", '2728292c2d2e'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 'abc-def', '6162632d646566'), (2, \"'(),-.\", '2728292c2d2e'))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_74_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 'abc-def', '6162632d646566'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 'abc-def', '6162632d646566'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_75_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "duplicate key value violates unique constraint \"t1_pkey\"\nDETAIL:  Key (pk)=(1) already exists.\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The Postgres equivalent of your MySQL statement would be as ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 18, "FN": 0}
{"sql_id": "postgresql_75_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 12, 12), (2, 4, 4))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 12), (2, 4))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_76_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_76_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 200, 210, 110, 210))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 110, 210, 110, 210))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 1}
{"sql_id": "postgresql_76_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_77_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(12, 22, 22), datetime.date(1997, 1, 1), datetime.datetime(1997, 1, 2, 0, 0), '1997-01-01 12:22:22', 3, 7, 5))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: timestamp with time zone - integer\nLINE 1: ...mestampadd, EXTRACT(epoch FROM (current_timestamp - t1.times...\n                                                             ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_78_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_78_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function encode(text, unknown) does not exist\nLINE 1: SELECT ENCODE(val::text, 'hex') FROM t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_78_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_79_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Sun', 'Sunday   '), (datetime.date(2006, 1, 2), 'Mon', 'Monday   '), (datetime.date(2006, 1, 3), 'Tue', 'Tuesday  '), (datetime.date(2006, 1, 4), 'Wed', 'Wednesday'), (datetime.date(2006, 1, 5), 'Thu', 'Thursday '), (datetime.date(2006, 1, 6), 'Fri', 'Friday   '), (datetime.date(2006, 1, 7), 'Sat', 'Saturday '))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"To\"\nLINE 1: To translate the provided MySQL statement to PostgreSQL, we ...\n        ^\n", "exec_able": false}}, "TP": 2, "FP": 17, "FN": 0}
{"sql_id": "postgresql_79_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Jan', 'January  '), (datetime.date(2006, 2, 1), 'Feb', 'February '), (datetime.date(2006, 3, 1), 'Mar', 'March    '), (datetime.date(2006, 4, 1), 'Apr', 'April    '), (datetime.date(2006, 5, 1), 'May', 'May      '), (datetime.date(2006, 6, 1), 'Jun', 'June     '), (datetime.date(2006, 7, 1), 'Jul', 'July     '), (datetime.date(2006, 8, 1), 'Aug', 'August   '), (datetime.date(2006, 9, 1), 'Sep', 'September'), (datetime.date(2006, 10, 1), 'Oct', 'October  '), (datetime.date(2006, 11, 1), 'Nov', 'November '), (datetime.date(2006, 12, 1), 'Dec', 'December '))", "rowcount": 12, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Jan', 'January  '), (datetime.date(2006, 2, 1), 'Feb', 'February '), (datetime.date(2006, 3, 1), 'Mar', 'March    '), (datetime.date(2006, 4, 1), 'Apr', 'April    '), (datetime.date(2006, 5, 1), 'May', 'May      '), (datetime.date(2006, 6, 1), 'Jun', 'June     '), (datetime.date(2006, 7, 1), 'Jul', 'July     '), (datetime.date(2006, 8, 1), 'Aug', 'August   '), (datetime.date(2006, 9, 1), 'Sep', 'September'), (datetime.date(2006, 10, 1), 'Oct', 'October  '), (datetime.date(2006, 11, 1), 'Nov', 'November '), (datetime.date(2006, 12, 1), 'Dec', 'December '))", "rowcount": 12, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_79_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1 Mon 01',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"To\"\nLINE 1: To translate MySQL's `DATE_FORMAT()` function to PostgreSQL,...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_79_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('01 Jan January  ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Jan 01, 2001',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_79_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('11 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('11 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_8_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \">\"\nLINE 1: ..._DIFF('ae',''),PG_CATALOG.PG<\uff5cbegin\u2581of\u2581sentence\uff5c>cmp('aeq'...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "postgresql_8_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The Postgres equivalent of your MySQL query is as follows:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 36, "FN": 1}
{"sql_id": "postgresql_8_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The PostgreSQL equivalent of your MySQL statement using strc...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 61, "FN": 1}
{"sql_id": "postgresql_8_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is your translation:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 46, "FN": 1}
{"sql_id": "postgresql_8_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent PostgreSQL function for comparing two strings...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 18, "FN": 1}
{"sql_id": "postgresql_8_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, 1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The PostgreSQL equivalent of your MySQL query would be:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_8_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, 1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent PostgreSQL command for your MySQL query would...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 9, "FN": 1}
{"sql_id": "postgresql_8_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"In\"\nLINE 1: In PostgreSQL, the function `strcmp()` is used to compare tw...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 84, "FN": 0}
{"sql_id": "postgresql_8_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT strcmp('s', 'a'), strcmp('a', 'x');\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_8_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, 1, False, True), (1, 0, True, False))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 1, False, True), (1, 0, True, False))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_8_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('oe   ',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_80_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xxxxx',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_80_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_80_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent PostgreSQL statement is as follows: \n        ^\n", "exec_able": false}}, "TP": 1, "FP": 38, "FN": 0}
{"sql_id": "postgresql_80_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_80_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_80_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent statement in PostgreSQL would be: SELECT lpad...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 7, "FN": 0}
{"sql_id": "postgresql_80_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_80_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_80_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_80_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_80_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent PostgreSQL command for your MySQL query would...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 23, "FN": 1}
{"sql_id": "postgresql_80_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_80_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('xx123',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('123xx',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_80_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('xyxya',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent PostgreSQL command for your MySQL query would...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 9, "FN": 0}
{"sql_id": "postgresql_80_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('          I LOVE SQL',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('          I LOVE SQL',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_81_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"In\"\nLINE 1: In Postgres, the REPEAT function is called directly without ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 44, "FN": 0}
{"sql_id": "postgresql_81_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((25165824,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement from MySQL to PostgreSQL is as ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 31, "FN": 1}
{"sql_id": "postgresql_82_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3)), (datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2)), (datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1)))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function ifnull(date, date) does not exist\nLINE 1: SELECT COALESCE(d, d), IFNULL(d, d), IF(i IS NOT NULL, d, d)...\n                               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 5, "FP": 1, "FN": 0}
{"sql_id": "postgresql_83_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('41422020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function encode(text, unknown) does not exist\nLINE 1: SELECT ENCODE(c1::text, 'hex') FROM ab;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_84_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_84_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_84_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_84_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_84_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The USER() function in MySQL is used to return the current u...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 14, "FN": 1}
{"sql_id": "postgresql_85_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_85_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_85_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The PostgreSQL equivalent of the given MySQL statement is as...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 30, "FN": 1}
{"sql_id": "postgresql_85_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL REPEAT function does not exist in PostgreSQL. Inst...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 19, "FN": 0}
{"sql_id": "postgresql_85_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_86_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, None, Decimal('1.1'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True, None, Decimal('1.1'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "postgresql_86_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, None, None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is your translated query in PostgreSQL:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "postgresql_86_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('', 'abababababababababab', '', None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The original query is using MySQL-specific functions such as...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 50, "FN": 0}
{"sql_id": "postgresql_86_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_86_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t2\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"SELECT\"\nLINE 1: CREATE TABLE t2 SELECT COALESCE(a, b) FROM t1;\n                        ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_86_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t2\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t2\" already exists\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_86_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t2\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"SELECT\"\nLINE 1: CREATE TABLE t2 SELECT COALESCE(NULL::numeric, b) FROM t1;\n                        ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_87_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_87_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaaaaaaaa,bbbbbbbbbb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaaaaaaaa,bbbbbbbbbb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_87_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1748095951.471456'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1748095951.579025'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_88_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_88_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((100,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\" does not exist\nLINE 1: SELECT length(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...\n                      ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_88_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2000,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_88_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((100, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((100, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_89_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_89_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The query you have provided can be translated to Postgres SQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 47, "FN": 0}
{"sql_id": "postgresql_89_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('00410000',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The PostgreSQL equivalent of your SQL statement would be:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 9, "FN": 0}
{"sql_id": "postgresql_89_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" already exists\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_9_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('this', 'is', 'a', 2, Decimal('2.0')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('ERROR', 'is', 'a', 2, 2))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a',), ('A',), ('aa',), ('AA',), ('aaa',), ('BBB',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a',), ('A',), ('aa',), ('AA',), ('aaa',), ('BBB',))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_9_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a',), ('A',), ('aa',), ('AA',), ('aaa',), ('BBB',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a',), ('A',), ('aa',), ('AA',), ('aaa',), ('BBB',))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_9_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement is as follows:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_9_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('144.54'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_9_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((6, 56))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_9_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, False))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type integer: \"\"\nLINE 1: SELECT COALESCE((NULLIF(5, 5)), '') IS NULL, COALESCE((NULLI...\n                                        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_9_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, '05-03-2005', 'Day 1'), (2, '16-03-2005', 'Day 2'), (3, '28-03-2005', 'Day 3'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent PostgreSQL query would be:\n        ^\n", "exec_able": false}}, "TP": 2, "FP": 27, "FN": 0}
{"sql_id": "postgresql_9_22", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3, '28-03-2005', 'Day 3'), (2, '16-03-2005', 'Day 2'), (1, '05-03-2005', 'Day 1'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3, '28-03-2005', 'Day 3'), (2, '16-03-2005', 'Day 2'), (1, '05-03-2005', 'Day 1'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "postgresql_9_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1234567890123456789'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"unsigned\" does not exist\nLINE 2: ...SELECT max(CASE WHEN c IS NOT NULL THEN CAST(c AS UNSIGNED) ...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_9_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1234567890123456789'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The SQL statement can be translated to PostgreSQL as follows...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 40, "FN": 1}
{"sql_id": "postgresql_9_29", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('2001.0000000000000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('2001.0000000000000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_90_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 10000 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The function FROM_DAYS() is a MySQL-specific function, so it...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 11, "FN": 1}
{"sql_id": "postgresql_90_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 117592 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent of your MySQL query in PostgreSQL would be:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_91_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_91_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((120000,), (12000,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((120000,), (12000,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_92_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_93_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_93_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_93_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \",\"\nLINE 1: SELECT (10,2,3) = ANY ((3,NULL,3), (1,2,3), (1,3,3));\n                                         ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_93_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent PostgresSQL statement would be:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 7, "FN": 0}
{"sql_id": "postgresql_93_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The original MySQL statement `SELECT ROW(1,2,3)=ROW(1+1,2,3)...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 39, "FN": 0}
{"sql_id": "postgresql_93_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_93_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_93_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unequal number of entries in row expressions\nLINE 1: SELECT ROW((1,2,3))<>ROW(1+1,2,3);\n                           ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_22", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The original query in MySQL uses the ROW function to create ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 50, "FN": 1}
{"sql_id": "postgresql_93_24", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is your MySQL statement translated to PostgreSQL:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 7, "FN": 0}
{"sql_id": "postgresql_93_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The query you provided is already using PostgreSQL's ROW fun...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 7, "FN": 0}
{"sql_id": "postgresql_94_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 2, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 2, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_94_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent SQL statement in PostgreSQL would be:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_94_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 3, 1), (3, 2, 1))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 2: ```sql\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 24, "FN": 1}
{"sql_id": "postgresql_94_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,), (False,), (False,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"a\" does not exist\nLINE 1: SELECT ROW(a,2,3) = ANY(ARRAY[(1, b, c), (2, 3, 1)]::integer...\n                   ^\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "postgresql_94_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The PostgreSQL equivalent of your MySQL query is as follows:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 27, "FN": 0}
{"sql_id": "postgresql_94_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,), (False,), (True,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"a\" does not exist\nLINE 1: SELECT ROW(a, b, c) = ANY('{{1,2,3},{3,2,1}}'::int4[]);\n                   ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_94_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,), (True,), (True,), (True,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"a\" does not exist\nLINE 1: SELECT ROW(1,2,3) = ANY (ARRAY[ROW(a, b, c), ROW(1,2,3)]);\n                                           ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_94_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, False, False, False, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is your query translated to PostgreSQL syntax:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 40, "FN": 0}
{"sql_id": "postgresql_95_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "subquery has too few columns\nLINE 1: SELECT ROW(t1.a, 1) <@ (SELECT ARRAY[SUM(t1.b), 1] FROM t1 G...\n                            ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_95_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "missing FROM-clause entry for table \"t1\"\nLINE 1: SELECT ROW(t1.a, 1) <@ (SELECT ARRAY[SUM(t1.b), 3] FROM t1 G...\n                   ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_95_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The query you provided is using MySQL's ROW function to crea...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 16, "FN": 1}
{"sql_id": "postgresql_95_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement for MySQL to PostgreSQL is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 7, "FN": 0}
{"sql_id": "postgresql_95_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given MySQL query cannot be translated directly to Postg...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 52, "FN": 0}
{"sql_id": "postgresql_95_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The SQL statement you've given is already in PostgreSQL synt...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 26, "FN": 0}
{"sql_id": "postgresql_95_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 3: ```sql\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_96_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function lpad(unknown, text, integer) does not exist\nLINE 1: SELECT LPAD('', ''::text, NULL::integer) AS result; -- RPAD\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('axyxy',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xyxya',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('I LOVE SQL          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('          I LOVE SQL',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_97_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The original MySQL command uses the ISNULL function to filte...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 51, "FN": 0}
{"sql_id": "postgresql_97_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The SQL statement you provided is essentially checking if co...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 74, "FN": 0}
{"sql_id": "postgresql_98_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_98_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_98_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The query translation should look like this:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 25, "FN": 0}
{"sql_id": "postgresql_98_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_98_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_99_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('ABC', 1), ('XYZ', 1), ('ABC', 1), ('XYZ', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('ABC', 1), ('XYZ', 1), ('ABC', 1), ('XYZ', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}

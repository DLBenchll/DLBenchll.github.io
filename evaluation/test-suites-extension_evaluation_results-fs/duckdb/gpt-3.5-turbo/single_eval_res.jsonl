{"sql_id": "duckdb_1_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 10))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT * FROM t0 WHERE (a, b) IN (SELECT 1, 10);\n                                      ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_1_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 10), (2, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT * FROM t0 WHERE (a, b) IN (SELECT 1, 10 UNION ALL SELECT 2, 20...\n                                      ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_1_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 20))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT * FROM t0 WHERE (a, b) NOT IN (SELECT 1, 10);\n                                      ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_1_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT * FROM t0 WHERE (a, b) NOT IN (SELECT 1, 10 UNION ALL SELECT 2...\n                                      ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_100_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: INSERT INTO t1 (ts) VALUES (strftime('%s', '2002-10-27 01:00')); --...\n                                    ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: INSERT INTO t1 (ts) VALUES (strftime('%s', '2002-10-27 02:00')); --...\n                                    ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: INSERT INTO t1 (ts) VALUES (strftime('%s', '2002-10-27 03:00'));\n                                    ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1035680400, datetime.datetime(2002, 10, 27, 9, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)), (1035684000, datetime.datetime(2002, 10, 27, 10, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)), (1035687600, datetime.datetime(2002, 10, 27, 11, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name datetime does not exist!\nDid you mean \"datediff\"?\nLINE 1: SELECT ts, datetime(ts, 'unixepoch') FROM t1;\n                   ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'2001-01-01 00:00:00'\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((730851,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT CAST(strftime('%s', '2001-01-01 00:00:00') A...\n                    ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_100_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((730851,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT CAST(strftime('%s', '2001-01-01 00:00:00') A...\n                    ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_100_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_diff does not exist!\nDid you mean \"date_diff\"?\nLINE 1: SELECT TIME_DIFF('2000-01-01 00:00:00','2000-0...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('40 59 2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('%A %M %Y', '2009-10-10 23:59:...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:59:59',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'2003-12-31 23:59:59'\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 1, 1, 11, 59, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'2003-12-31 23:59:59'\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_100_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2003, 1, 3, 0, 0, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timestampadd does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT TIMESTAMPADD(MINUTE, 1, TIMESTAMP '2003...\n               ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_100_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timestampdiff does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT TIMESTAMPDIFF(MONTH, CAST('2003-02-01 2...\n               ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_100_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((63426758399.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('%s', '2009-11-29 23:59:59'); ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1447459199.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT strftime('%s', '2015-11-13 23:59:59'); ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_101_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',), ('612020',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',), ('612020',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_101_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((13,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((13,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "duckdb_101_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('41', 'a'), ('4100', 'b'), ('41', 'c'), ('4100', 'd'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('41', 'a'), ('4100', 'b'), ('41', 'c'), ('4100', 'd'))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_101_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Type with name UNSIGNED does not exist!\nDid you mean \"JSON\"?", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_102_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'strftime(STRING_LITERAL, TIMESTAMP WITH TIME ZONE)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\nLINE 1: INSERT INTO t1 VALUES (CAST(strftime('%Y-%m-%d', CURRENT_TIMESTAMP)...\n                                    ^", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_102_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT COUNT(*) FROM t1 WHERE a = DATE('now');\n                                          ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_102_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_102_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT COUNT(*) FROM t1 WHERE a = DATE('now');\n                                          ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_102_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT COUNT(*) FROM t1 WHERE a = DATE('now') AND b = 1;\n                                          ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_102_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t1\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: CREATE TABLE t1 AS SELECT DATE() AS f1; -- CURDATE\n                                  ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_102_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, 0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 1}
{"sql_id": "duckdb_102_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_102_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name dateadd does not exist!\nDid you mean \"date_add\"?\nLINE 1: SELECT 1 FROM (SELECT DATEADD('day', 1, DATE '2011-01-01')) a...\n                              ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_2_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 'x'), (2, 'xx'), (3, 'xxx'), (4, 'xxxx'), (5, 'xxxxx'), (6, 'xxxxxx'), (7, 'xxxxxxx'), (8, 'xxxxxxxx'), (9, 'xxxxxxxxx'), (10, 'xxxxxxxxxx'))", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 'x'), (2, 'xx'), (3, 'xxx'), (4, 'xxxx'), (5, 'xxxxx'), (6, 'xxxxxx'), (7, 'xxxxxxx'), (8, 'xxxxxxxx'), (9, 'xxxxxxxxx'), (10, 'xxxxxxxxxx'))", "rowcount": 10, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "duckdb_3_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('NO',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('NO',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_39_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "duckdb_39_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,), (3,), (1,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,), (3,), (1,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "duckdb_4_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a=9223372036854775807 AND \u2502\\n\u2502        a IS NOT NULL      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a=9223372036854775807 AND \u2502\\n\u2502        a IS NOT NULL      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a=9223372036854775806 AND \u2502\\n\u2502        a IS NOT NULL      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a=9223372036854775806 AND \u2502\\n\u2502        a IS NOT NULL      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a=9223372036854775805 AND \u2502\\n\u2502        a IS NOT NULL      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a=9223372036854775805 AND \u2502\\n\u2502        a IS NOT NULL      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502   a=0 AND a IS NOT NULL   \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502   a=0 AND a IS NOT NULL   \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_4_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_6_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('3A',), ('3B',), ('3C',), ('3D',), ('3E',), ('3F',), ('40',), ('5B',), ('5C783543',), ('5D',), ('5E',), ('5F',), ('60',), ('7B',), ('7C',), ('7D',), ('7E',))", "rowcount": 17, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('3A',), ('3B',), ('3C',), ('3D',), ('3E',), ('3F',), ('40',), ('5B',), ('5C783543',), ('5D',), ('5E',), ('5F',), ('60',), ('7B',), ('7C',), ('7D',), ('7E',))", "rowcount": 17, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_5", "EM": 1, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t1\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t1\" already exists!", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_6_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"head\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"head\" already exists!", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 2}
{"sql_id": "duckdb_6_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"tail\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"tail\" already exists!", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_6_19", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_21", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc', 2), ('\u07f0', 1), ('\u02ae', 1), ('', 0), ('50515253', 8), ('31', 2), ('h31', 3), ('2805', 4))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc', 2), ('\u07f0', 1), ('\u02ae', 1), ('', 0), ('50515253', 8), ('31', 2), ('h31', 3), ('2805', 4))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_7_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc', '                  h\u04bc'), ('\u07f0', '                   \u07f0'), ('\u02ae', '                   \u02ae'), ('', '                    '), ('50515253', '            50515253'), ('31', '                  31'), ('h31', '                 h31'), ('2805', '                2805'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc', '                  h\u04bc'), ('\u07f0', '                   \u07f0'), ('\u02ae', '                   \u02ae'), ('', '                    '), ('50515253', '            50515253'), ('31', '                  31'), ('h31', '                 h31'), ('2805', '                2805'))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc', 'h\u04bc525252525252525252'), ('\u07f0', '\u07f05252525252525252525'), ('\u02ae', '\u02ae5252525252525252525'), ('', '52525252525252525252'), ('50515253', '50515253525252525252'), ('31', '31525252525252525252'), ('h31', 'h3152525252525252525'), ('2805', '28055252525252525252'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc', 'h\u04bc525252525252525252'), ('\u07f0', '\u07f05252525252525252525'), ('\u02ae', '\u02ae5252525252525252525'), ('', '52525252525252525252'), ('50515253', '50515253525252525252'), ('31', '31525252525252525252'), ('h31', 'h3152525252525252525'), ('2805', '28055252525252525252'))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_7_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_7_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_7_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_7_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_7_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('h315253', 'h315253'), ('h31525352', 'h31525352'), ('h3152535252', 'h3152535252'), ('h315253525252', 'h315253525252'), ('52h315253', '52h315253'), ('5252h315253', '5252h315253'), ('525252h315253', '525252h315253'), ('   h315253   ', 'h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('h315253', 'h315253'), ('h31525352', 'h31525352'), ('h3152535252', 'h3152535252'), ('h315253525252', 'h315253525252'), ('52h315253', '52h315253'), ('5252h315253', '5252h315253'), ('525252h315253', '525252h315253'), ('   h315253   ', '   h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_71_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1973, 11, 30, 5, 33, 9, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timestamp_seconds does not exist!\nDid you mean \"map\"?\nLINE 1: SELECT TIMESTAMP_SECONDS(123456789); -- FROM_U...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1977, 6, 8, 5, 44, 50, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timestamp_seconds does not exist!\nDid you mean \"map\"?\nLINE 1: SELECT TIMESTAMP_SECONDS(234567890); -- FROM_U...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 8, 0, 1, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timestamp_seconds does not exist!\nDid you mean \"map\"?\nLINE 1: SELECT TIMESTAMP_SECONDS(1); -- FROM_UNIXTIME\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name datetime does not exist!\nDid you mean \"datediff\"?\nLINE 1: SELECT CAST(strftime('%s', datetime(123456789, 'unixepoch')) AS IN...\n                                   ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 2}
{"sql_id": "duckdb_71_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((234567890.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name datetime does not exist!\nDid you mean \"datediff\"?\nLINE 1: SELECT CAST(strftime('%s', datetime(234567890, 'unixepoch')) AS IN...\n                                   ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 2}
{"sql_id": "duckdb_71_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2179098000.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT strftime('%s', '2039-01-20 01:00:00'); ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2149376400.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT strftime('%s', '2038-02-10 01:00:00'); ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3600.0, 3601.0, 2147487247.0, 2147487248.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT strftime('%s', '1970-01-01 01:00:00'),s...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((32536771199, datetime.datetime(3001, 1, 19, 7, 59, 59, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)), (325367711990, '12280-06-28 23:59:50+00'), (325367711991, '12280-06-28 23:59:51+00'), (325367711992, '12280-06-28 23:59:52+00'), (325367711993, '12280-06-28 23:59:53+00'), (325367711994, '12280-06-28 23:59:54+00'), (325367711995, '12280-06-28 23:59:55+00'), (325367711996, '12280-06-28 23:59:56+00'), (325367711997, '12280-06-28 23:59:57+00'), (325367711998, '12280-06-28 23:59:58+00'), (325367711999, '12280-06-28 23:59:59+00'))", "rowcount": 11, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Unimplemented type for cast (BIGINT -> TIMESTAMP)\nLINE 1: SELECT a, CAST(a AS TIMESTAMP) FROM t1;\n                  ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((32536803599.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT strftime('%s', '3001-01-19 08:59:59'); ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_72_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', \"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502   (concat(x, x) = 'XX')   \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t             \u2502\\n\u2502                           \u2502\\n\u2502       Projections: x      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\"))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_74_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_74_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((13,), (13,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((13,), (13,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_74_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_74_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_74_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 'abc-def', '6162632D646566'), (2, \"'(),-.\", '2728292C2D2E'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 'abc-def', '6162632D646566'), (2, \"'(),-.\", '2728292C2D2E'))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_74_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 'abc-def', '6162632D646566'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 'abc-def', '6162632D646566'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_75_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Constraint Error: Duplicate key \"pk: 1\" violates primary key constraint. If this is an unexpected constraint violation please double check with the known index limitations section in our documentation (https://duckdb.org/docs/sql/indexes).", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Constraint Error: Duplicate key \"pk: 1\" violates primary key constraint. If this is an unexpected constraint violation please double check with the known index limitations section in our documentation (https://duckdb.org/docs/sql/indexes).", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_75_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 12, 12), (2, 4, 4))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 12, 12), (2, 4, 4))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_76_2", "EM": 1, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Constraint Error: Duplicate key \"a: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\" violates unique constraint. If this is an unexpected constraint violation please double check with the known index limitations section in our documentation (https://duckdb.org/docs/sql/indexes).", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Constraint Error: Duplicate key \"a: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\" violates unique constraint. If this is an unexpected constraint violation please double check with the known index limitations section in our documentation (https://duckdb.org/docs/sql/indexes).", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_76_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 110, 210, 110, 210))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name char_length does not exist!\nDid you mean \"array_length\"?\nLINE 1: SELECT i, LENGTH(a), LENGTH(b), CHAR_LENGTH(a), CHAR_LENGTH(b) FROM t1;\n                                        ^", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "duckdb_76_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_77_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(12, 22, 22), datetime.date(1997, 1, 1), datetime.datetime(1997, 1, 2, 0, 0), '1997-01-01 12:22:22', 3, 7, 5))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(12, 22, 22), datetime.date(1997, 1, 1), datetime.datetime(1997, 1, 2, 0, 0), '1997-01-01 12:22:22', 3, 7, 5))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_78_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_78_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_78_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_79_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Sun', 'Sunday'), (datetime.date(2006, 1, 2), 'Mon', 'Monday'), (datetime.date(2006, 1, 3), 'Tue', 'Tuesday'), (datetime.date(2006, 1, 4), 'Wed', 'Wednesday'), (datetime.date(2006, 1, 5), 'Thu', 'Thursday'), (datetime.date(2006, 1, 6), 'Fri', 'Friday'), (datetime.date(2006, 1, 7), 'Sat', 'Saturday'))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Sun', 'Sunday'), (datetime.date(2006, 1, 2), 'Mon', 'Monday'), (datetime.date(2006, 1, 3), 'Tue', 'Tuesday'), (datetime.date(2006, 1, 4), 'Wed', 'Wednesday'), (datetime.date(2006, 1, 5), 'Thu', 'Thursday'), (datetime.date(2006, 1, 6), 'Fri', 'Friday'), (datetime.date(2006, 1, 7), 'Sat', 'Saturday'))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_79_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Jan', 'January'), (datetime.date(2006, 2, 1), 'Feb', 'February'), (datetime.date(2006, 3, 1), 'Mar', 'March'), (datetime.date(2006, 4, 1), 'Apr', 'April'), (datetime.date(2006, 5, 1), 'May', 'May'), (datetime.date(2006, 6, 1), 'Jun', 'June'), (datetime.date(2006, 7, 1), 'Jul', 'July'), (datetime.date(2006, 8, 1), 'Aug', 'August'), (datetime.date(2006, 9, 1), 'Sep', 'September'), (datetime.date(2006, 10, 1), 'Oct', 'October'), (datetime.date(2006, 11, 1), 'Nov', 'November'), (datetime.date(2006, 12, 1), 'Dec', 'December'))", "rowcount": 12, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Jan', 'January'), (datetime.date(2006, 2, 1), 'Feb', 'February'), (datetime.date(2006, 3, 1), 'Mar', 'March'), (datetime.date(2006, 4, 1), 'Apr', 'April'), (datetime.date(2006, 5, 1), 'May', 'May'), (datetime.date(2006, 6, 1), 'Jun', 'June'), (datetime.date(2006, 7, 1), 'Jul', 'July'), (datetime.date(2006, 8, 1), 'Aug', 'August'), (datetime.date(2006, 9, 1), 'Sep', 'September'), (datetime.date(2006, 10, 1), 'Oct', 'October'), (datetime.date(2006, 11, 1), 'Nov', 'November'), (datetime.date(2006, 12, 1), 'Dec', 'December'))", "rowcount": 12, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_79_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1 Mon 01',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('%w %a %W', '2001-01-01'); -- ...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_79_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2001-01-01 00:00:00 Jan 00',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('%m %b %M', '2001-01-01'); -- ...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_79_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Mar AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('%I %p', '2010-03-23 11:00:00'...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_8_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('', 'ae'), STRCMP('ae', ''), STR...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('ss',''), STRCMP('', 'ss'), STRC...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('', 'af'), STRCMP('a', ''), STRC...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "duckdb_8_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('ss','a'), STRCMP('','ssa'), STR...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('', 'o'), STRCMP('', 'u'), STRCM...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, -1, 1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, -1, 1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_8_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, 1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('a','ss'),STRCMP('ssa',''),STRCM...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('u','a'), STRCMP('u',''); -- STR...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "duckdb_8_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('s', 'a'), STRCMP('a', 'x'); -- ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 1, False, True), (1, 0, True, False))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 1, False, True), (1, 1, True, False))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('oe',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('oe',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_80_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xx123',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xx123',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xyxya',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xyxya',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('          I LOVE SQL',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('          I LOVE SQL',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_81_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_81_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((25165824,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((25165824,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_82_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2)), (datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1)), (datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3)))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1)), (datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3)), (datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2)))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 5, "FP": 1, "FN": 0}
{"sql_id": "duckdb_83_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('4142',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('4142',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_84_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: insert into t5 values (1, strftime('%W', '2001-01-01')); -- DATE_...\n                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_84_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: insert into t5 values (2, strftime('%W', '2001-01-01')); -- DATE_...\n                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_84_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: insert into t5 values (3, strftime('%W', '2001-01-01')); -- DATE_...\n                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_84_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_85_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_85_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_85_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_85_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_85_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_86_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, True, False, True, 1, 'TRUE', 'TRUE', False, True))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None, True, True, True, 1, 'TRUE', 'TRUE', False, True))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_86_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None, None, Decimal('1.1'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None, None, Decimal('1.1'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_86_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('', 'abababababababababab', '', None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'abababababababababab', '', None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_86_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 2:     WHEN \"a\" IS NULL THEN 1\n                 ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_86_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t2\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t2\" already exists!", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_86_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t2\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t2\" already exists!", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_86_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t2\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t2\" already exists!", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_87_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_87_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaaaaaaaa,bbbbbbbbbb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaaaaaaaa,bbbbbbbbbb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_87_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1748088855.729,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT CAST(strftime('%s', 'now') AS INTEGER); -- U...\n                    ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_88_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_88_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((100,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((100,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_88_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2000,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_88_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((100, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((100, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_89_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_89_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502        EMPTY_RESULT       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_89_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('5C783030415C7830305C783030',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5C783030415C7830305C783030',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_89_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t1\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"date_part(STRING_LITERAL, \"NULL\")\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tdate_part(VARCHAR, TIME) -> BIGINT\n\tdate_part(VARCHAR, INTERVAL) -> BIGINT\n\tdate_part(VARCHAR, TIME WITH TIME ZONE) -> BIGINT\n\tdate_part(VARCHAR, DATE) -> BIGINT\n\nLINE 1: create table t1 as select extract(epoch from null) as to_seconds;...\n                                  ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_9_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('this', 'is', 'a', 2, Decimal('2.0')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('this', 'is', 'a', 2, Decimal('2.0')))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('A',), ('AA',), ('BBB',), ('a',), ('a',), ('aa',), ('aaa',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('A',), ('AA',), ('BBB',), ('a',), ('a',), ('aa',), ('aaa',))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('A',), ('AA',), ('BBB',), ('a',), ('a',), ('aa',), ('aaa',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('A',), ('AA',), ('BBB',), ('a',), ('a',), ('aa',), ('aaa',))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 CASE  WHEN ((u = 1)) THEN \u2502\\n\u2502     (NULL) ELSE u END     \u2502\\n\u2502                           \u2502\\n\u2502          ~7 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502       Projections: u      \u2502\\n\u2502                           \u2502\\n\u2502          ~7 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((144.54,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((144.54,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6, 56))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6, 56))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, False))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, '05-03-2005', 'Day 1'), (2, '17-03-2005', 'Day 2'), (3, '28-03-2005', 'Day 3'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'strftime(STRING_LITERAL, INTEGER, STRING_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\nLINE 1: ..., CASE WHEN date IS NULL THEN '-' ELSE STRFTIME('%d-%m-%Y', date, 'unixepoch')...\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "duckdb_9_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, '28-03-2005', 'Day 3'), (2, '17-03-2005', 'Day 2'), (1, '05-03-2005', 'Day 1'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'strftime(STRING_LITERAL, INTEGER, STRING_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\nLINE 1: ..., CASE WHEN date IS NULL THEN '-' ELSE STRFTIME('%d-%m-%Y', date, 'unixepoch')...\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "duckdb_9_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1234567890123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Could not convert string '1234567890123456789' to INT32\nLINE 1: ...FROM (SELECT MAX(CAST(CASE WHEN 1 THEN CAST(c AS INTEGER) ELSE 0 END AS INTEGE...\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_9_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1234567890123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Could not convert string '1234567890123456789' to INT32\nLINE 1: SELECT * FROM (SELECT MAX(CAST(NULLIF(c, '') AS INTEGER)) FROM t1...\n                                  ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_9_29", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2001.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"year(STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tyear(TIMESTAMP) -> BIGINT\n\tyear(INTERVAL) -> BIGINT\n\tyear(TIMESTAMP WITH TIME ZONE) -> BIGINT\n\tyear(DATE) -> BIGINT\n\nLINE 1: SELECT AVG(CASE WHEN YEAR('2001-01-01') = 10 THEN NULL ELSE ...\n                             ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 2}
{"sql_id": "duckdb_90_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('10000-03-15 00:00:00', '10000-03-16 00:00:00', '10000-03-17 00:00:00'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT DATE('1899-12-31') + 3652499, DATE('189...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_90_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('117592-03-15 00:00:00', '117592-03-16 00:00:00', '117592-03-18 00:00:00'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT DATE('1900-01-01' || 42949670), DATE('1...\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_91_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_91_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((12000,), (120000,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((120000,), (12000,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_92_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502            NULL           \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         DUMMY_SCAN        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \";\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \";\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_22", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_24", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_25", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_26", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_27", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 2, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 2, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, 3, 1), (3, 2, 1), (1, 2, None))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, 3, 1), (3, 2, 1), (1, 2, None))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,), (False,), (False,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 3 columns - expected 1\nLINE 1: SELECT ROW(a,2,3) IN(SELECT 1 AS col1, b AS col2, c AS co...\n                          ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_94_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 3 columns - expected 1\nLINE 1: SELECT ROW(c,2,3) IN(SELECT 1 AS col1, b AS col2, a AS co...\n                          ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_94_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,), (True,), (True,), (True,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT ROW(1,2,3) IN(SELECT ROW(a,b,c), ROW(1,2,3) FROM t...\n                          ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True, False, False, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True, False, False, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_95_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT ROW(a, 1) IN (SELECT SUM(b), 1 FROM t1) FROM t1 G...\n                         ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_95_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT ROW(a, 1) IN (SELECT SUM(b), 3 FROM t1) FROM t1 G...\n                         ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_95_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT ROW(1,2) = (SELECT 1,2 FROM t1 WHERE 1 = 0); -- RO...\n                          ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_95_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT ROW(1,2) = (SELECT 1,3 FROM t1 WHERE 1 = 0); -- RO...\n                          ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_95_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             al            \u2502\\n\u2502                           \u2502\\n\u2502          ~0 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502   PERFECT_HASH_GROUP_BY   \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502         Groups: #0        \u2502\\n\u2502    Aggregates: min(#1)    \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             a             \u2502\\n\u2502             a             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502       Projections: a      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_95_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_96_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Invalid Input Error: Insufficient padding in RPAD.", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('axyxy',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('axyxy',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('I LOVE SQL          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('I LOVE SQL          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_97_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502     (SUBQUERY IS NULL)    \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         HASH_JOIN         \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502      Join Type: MARK      \u2502\\n\u2502     Conditions: a = #0    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502                           \u2502              \u2502\\n\u2502          ~3 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\u2502             t1            \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502        Projections:       \u2502\u2502       Projections: a      \u2502\\n\u2502             a             \u2502\u2502                           \u2502\\n\u2502             b             \u2502\u2502                           \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502          ~3 Rows          \u2502\u2502          ~3 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_97_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_98_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             x             \u2502\\n\u2502             y             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502       CROSS_PRODUCT       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502       (SUBQUERY > 0)      \u2502\u2502             t1            \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502                           \u2502\u2502        Projections:       \u2502\\n\u2502                           \u2502\u2502             x             \u2502\\n\u2502                           \u2502\u2502             y             \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\u2502          ~0 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 CASE  WHEN ((#1 > 1)) THEN\u2502\\n\u2502  (error(\\'More than one row\u2502\\n\u2502   returned by a subquery  \u2502\\n\u2502   used as an expression - \u2502\\n\u2502    scalar subqueries can  \u2502\\n\u2502  only return a single row.\u2502\\n\u2502          Use \"SET         \u2502\\n\u2502 scalar_subquery_error_on_m\u2502\\n\u2502   ultiple_rows=false\" to  \u2502\\n\u2502     revert to previous    \u2502\\n\u2502   behavior of returning a \u2502\\n\u2502 random row.\\')) ELSE #0 END\u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502    UNGROUPED_AGGREGATE    \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502        Aggregates:        \u2502\\n\u2502        \"first\"(#0)        \u2502\\n\u2502        count_star()       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             #0            \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (CAST(uuid() AS VARCHAR) =\u2502\\n\u2502     CAST(a AS VARCHAR))   \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t2            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          ~0 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             x             \u2502\\n\u2502             y             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502       CROSS_PRODUCT       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502       (SUBQUERY > 0)      \u2502\u2502             t1            \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502                           \u2502\u2502        Projections:       \u2502\\n\u2502                           \u2502\u2502             x             \u2502\\n\u2502                           \u2502\u2502             y             \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\u2502          ~0 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 CASE  WHEN ((#1 > 1)) THEN\u2502\\n\u2502  (error(\\'More than one row\u2502\\n\u2502   returned by a subquery  \u2502\\n\u2502   used as an expression - \u2502\\n\u2502    scalar subqueries can  \u2502\\n\u2502  only return a single row.\u2502\\n\u2502          Use \"SET         \u2502\\n\u2502 scalar_subquery_error_on_m\u2502\\n\u2502   ultiple_rows=false\" to  \u2502\\n\u2502     revert to previous    \u2502\\n\u2502   behavior of returning a \u2502\\n\u2502 random row.\\')) ELSE #0 END\u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502    UNGROUPED_AGGREGATE    \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502        Aggregates:        \u2502\\n\u2502        \"first\"(#0)        \u2502\\n\u2502        count_star()       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             #0            \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (CAST(uuid() AS VARCHAR) =\u2502\\n\u2502     CAST(a AS VARCHAR))   \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t2            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          ~0 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_98_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_98_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          SUBQUERY         \u2502\\n\u2502                           \u2502\\n\u2502          ~4 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502      LEFT_DELIM_JOIN      \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502     Join Type: SINGLE     \u2502\\n\u2502                           \u2502\\n\u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502  a IS NOT DISTINCT FROM a \u2502              \u2502\\n\u2502                           \u2502              \u2502\\n\u2502          ~4 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\u2502         HASH_JOIN         \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\u2502     Join Type: SINGLE     \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502       Projections: a      \u2502\u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502                           \u2502\u2502  a IS NOT DISTINCT FROM a \u2502              \u2502\\n\u2502                           \u2502\u2502                           \u2502              \u2502\\n\u2502          ~4 Rows          \u2502\u2502          ~4 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n                             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                             \u2502      COLUMN_DATA_SCAN     \u2502\u2502         PROJECTION        \u2502\\n                             \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                             \u2502                           \u2502\u2502    COALESCE(sum(b), 0)    \u2502\\n                             \u2502                           \u2502\u2502             a             \u2502\\n                             \u2502                           \u2502\u2502                           \u2502\\n                             \u2502          ~4 Rows          \u2502\u2502          ~2 Rows          \u2502\\n                             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502         HASH_JOIN         \u2502\\n                                                          \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                          \u2502      Join Type: LEFT      \u2502\\n                                                          \u2502                           \u2502\\n                                                          \u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502 a IS NOT DISTINCT FROM #0 \u2502              \u2502\\n                                                          \u2502                           \u2502              \u2502\\n                                                          \u2502          ~2 Rows          \u2502              \u2502\\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502         DELIM_SCAN        \u2502\u2502         PROJECTION        \u2502\\n                                                          \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                          \u2502       Delim Index: 1      \u2502\u2502__internal_decompress_integ\u2502\\n                                                          \u2502                           \u2502\u2502     ral_integer(#0, 5)    \u2502\\n                                                          \u2502                           \u2502\u2502             #1            \u2502\\n                                                          \u2502                           \u2502\u2502                           \u2502\\n                                                          \u2502          ~2 Rows          \u2502\u2502          ~0 Rows          \u2502\\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502   PERFECT_HASH_GROUP_BY   \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502         Groups: #0        \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502        Aggregates:        \u2502\\n                                                                                       \u2502    sum_no_overflow(#1)    \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         PROJECTION        \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502             a             \u2502\\n                                                                                       \u2502             b             \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         PROJECTION        \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502__internal_compress_integra\u2502\\n                                                                                       \u2502     l_utinyint(#0, 5)     \u2502\\n                                                                                       \u2502             #1            \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         SEQ_SCAN          \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502             t3            \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502        Projections:       \u2502\\n                                                                                       \u2502             a             \u2502\\n                                                                                       \u2502             b             \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_98_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_98_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          SUBQUERY         \u2502\\n\u2502                           \u2502\\n\u2502          ~4 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502      LEFT_DELIM_JOIN      \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502     Join Type: SINGLE     \u2502\\n\u2502                           \u2502\\n\u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502  a IS NOT DISTINCT FROM a \u2502              \u2502\\n\u2502                           \u2502              \u2502\\n\u2502          ~4 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\u2502         HASH_JOIN         \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\u2502     Join Type: SINGLE     \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502       Projections: a      \u2502\u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502                           \u2502\u2502  a IS NOT DISTINCT FROM a \u2502              \u2502\\n\u2502                           \u2502\u2502                           \u2502              \u2502\\n\u2502          ~4 Rows          \u2502\u2502          ~4 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n                             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                             \u2502      COLUMN_DATA_SCAN     \u2502\u2502         PROJECTION        \u2502\\n                             \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                             \u2502                           \u2502\u2502    COALESCE(sum(b), 0)    \u2502\\n                             \u2502                           \u2502\u2502             a             \u2502\\n                             \u2502                           \u2502\u2502                           \u2502\\n                             \u2502          ~4 Rows          \u2502\u2502          ~2 Rows          \u2502\\n                             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502         HASH_JOIN         \u2502\\n                                                          \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                          \u2502      Join Type: LEFT      \u2502\\n                                                          \u2502                           \u2502\\n                                                          \u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502 a IS NOT DISTINCT FROM #0 \u2502              \u2502\\n                                                          \u2502                           \u2502              \u2502\\n                                                          \u2502          ~2 Rows          \u2502              \u2502\\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502         DELIM_SCAN        \u2502\u2502         PROJECTION        \u2502\\n                                                          \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                          \u2502       Delim Index: 1      \u2502\u2502__internal_decompress_integ\u2502\\n                                                          \u2502                           \u2502\u2502     ral_integer(#0, 5)    \u2502\\n                                                          \u2502                           \u2502\u2502             #1            \u2502\\n                                                          \u2502                           \u2502\u2502                           \u2502\\n                                                          \u2502          ~2 Rows          \u2502\u2502          ~0 Rows          \u2502\\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502   PERFECT_HASH_GROUP_BY   \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502         Groups: #0        \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502        Aggregates:        \u2502\\n                                                                                       \u2502    sum_no_overflow(#1)    \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         PROJECTION        \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502             a             \u2502\\n                                                                                       \u2502             b             \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         PROJECTION        \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502__internal_compress_integra\u2502\\n                                                                                       \u2502     l_utinyint(#0, 5)     \u2502\\n                                                                                       \u2502             #1            \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         SEQ_SCAN          \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502             t3            \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502        Projections:       \u2502\\n                                                                                       \u2502             a             \u2502\\n                                                                                       \u2502             b             \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_99_6", "EM": 1, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ABC', 1), ('ABC', 1), ('XYZ', 1), ('XYZ', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('ABC', 1), ('XYZ', 1), ('XYZ', 1), ('ABC', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_10_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('b', 'a', 'a', 'a211'), ('c', 'a', 'a', 'a311'), ('d', 'a', 'a', 'a411'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('b', 'a', 'a', 'a211'), ('c', 'a', 'a', 'a311'), ('d', 'a', 'a', 'a411'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_10_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aa111', 'a'), ('ba211', 'a'), ('ca311', 'a'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aa111', 'a'), ('ba211', 'a'), ('ca311', 'a'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_10_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aa111', 'a', 'c111'), ('ba211', 'a', 'c211'), ('ca311', 'a', 'c311'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a', 'a111', 'a', 'c111'), ('b', 'a211', 'a', 'c211'), ('c', 'a311', 'a', 'c311'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_10_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aa', 'a', 'a111', 'c111'), ('ba', 'a', 'a211', 'c211'), ('ca', 'a', 'a311', 'c311'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aa', 'a', 'a111', 'c111'), ('ba', 'a', 'a211', 'c211'), ('ca', 'a', 'a311', 'c311'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_10_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('9797', 'a', 'a'), ('9797', 'a', 'a'), ('9797', 'a', 'a'), ('9797', 'a', 'a'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('9797', 'a', 'a'), ('9797', 'a', 'a'), ('9797', 'a', 'a'), ('9797', 'a', 'a'))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_11_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 20), (3, 50))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 20), (3, 50))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_11_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 20), (3, 50))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 20), (3, 50))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_12_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1000,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_12_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1000,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_12_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((25,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"+\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_12_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (b = repeat(chr((65 + a)),\u2502\\n\u2502            20))           \u2502\\n\u2502                           \u2502\\n\u2502          ~40 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502           filler          \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502   a<10 AND a IS NOT NULL  \u2502\\n\u2502                           \u2502\\n\u2502         ~200 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 'AAAAAAAAAAAAAAAAAAAA', 'filler'), (1, 'BBBBBBBBBBBBBBBBBBBB', 'filler'), (2, 'CCCCCCCCCCCCCCCCCCCC', 'filler'), (3, 'DDDDDDDDDDDDDDDDDDDD', 'filler'), (4, 'EEEEEEEEEEEEEEEEEEEE', 'filler'), (5, 'FFFFFFFFFFFFFFFFFFFF', 'filler'), (6, 'GGGGGGGGGGGGGGGGGGGG', 'filler'), (7, 'HHHHHHHHHHHHHHHHHHHH', 'filler'), (8, 'IIIIIIIIIIIIIIIIIIII', 'filler'), (9, 'JJJJJJJJJJJJJJJJJJJJ', 'filler'))", "rowcount": 10, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_12_25", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, 'AAAAAAAAAAAAAAAAAAAA', 'filler'), (1, 'BBBBBBBBBBBBBBBBBBBB', 'filler'), (2, 'CCCCCCCCCCCCCCCCCCCC', 'filler'), (3, 'DDDDDDDDDDDDDDDDDDDD', 'filler'), (4, 'EEEEEEEEEEEEEEEEEEEE', 'filler'), (5, 'FFFFFFFFFFFFFFFFFFFF', 'filler'), (6, 'GGGGGGGGGGGGGGGGGGGG', 'filler'), (7, 'HHHHHHHHHHHHHHHHHHHH', 'filler'), (8, 'IIIIIIIIIIIIIIIIIIII', 'filler'), (9, 'JJJJJJJJJJJJJJJJJJJJ', 'filler'))", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 'AAAAAAAAAAAAAAAAAAAA', 'filler'), (1, 'BBBBBBBBBBBBBBBBBBBB', 'filler'), (2, 'CCCCCCCCCCCCCCCCCCCC', 'filler'), (3, 'DDDDDDDDDDDDDDDDDDDD', 'filler'), (4, 'EEEEEEEEEEEEEEEEEEEE', 'filler'), (5, 'FFFFFFFFFFFFFFFFFFFF', 'filler'), (6, 'GGGGGGGGGGGGGGGGGGGG', 'filler'), (7, 'HHHHHHHHHHHHHHHHHHHH', 'filler'), (8, 'IIIIIIIIIIIIIIIIIIII', 'filler'), (9, 'JJJJJJJJJJJJJJJJJJJJ', 'filler'))", "rowcount": 10, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_13_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, '61626364656667', '61626364656667', 'boo'), (3, '71727374757677', '71727374757677', 'three'), (2, '696A6B696C6D6E', '696A6B696C6D6E', 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, '61626364656667', '61626364656667', 'boo'), (3, '71727374757677', '71727374757677', 'three'), (2, '696A6B696C6D6E', '696A6B696C6D6E', 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_14_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_14_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_14_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_14_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_14_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_14_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"SET\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_14_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_15_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1293840000.0, 0.0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT CAST(strftime('%s', '2011-01-01 00:00:00') A...\n                    ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_15_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: INSERT INTO t3 (a) VALUES (CAST(strftime('%s', 'now') AS TIMESTAMP)); -...\n                                        ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_15_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT regexp_instr('abc', 'a') AS result FROM...\n               ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_17_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 1}
{"sql_id": "duckdb_17_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'position(DECIMAL(2,1), STRING_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tposition(VARCHAR, VARCHAR) -> BIGINT\n\nLINE 1: SELECT POSITION( 'a' IN 1.1 ); -- REGEXP_INSTR\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_18", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_21", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_24", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_25", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_26", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_28", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_29", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_30", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_31", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_32", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Xaax',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Xaax',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_18_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('aaa', 'a', 'X', 1); -- ...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('aaabbccbbddaa', 'b+', '...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('aaabbccbbddaa', 'b+', '...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaa<$1>ccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('aaabbccbbddaa', '(b+)',...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaabbccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('aaabbccbbddaa', 'x+', '...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaxccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('aaabbccbbddaa', 'b+', '...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaax',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('aaab', 'b', 'x', 1, 2);...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaxccc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('aaabccc', 'b', 'x', 1, ...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('abcbdb', 'b', 'X', 3); ...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('aaabcbdb', 'b', 'X', 1)...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('aaabcbdb', 'b', 'X', 2)...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('abcbdb', 'b', 'X', 3); ...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('aaa', 'a', 'X', 2); -- ...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('XXaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('aaa', 'a', 'XX', 2); --...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_19_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_19_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_19_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((12,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Could not convert string 'b' to INT64\nLINE 1: ...LECT LENGTH(regexp_replace(repeat('a', 'b'), 'a', 'b')); -- LENGTH, REGEXP_REP...\n                                                  ^", "exec_able": false}}, "TP": 3, "FP": 1, "FN": 0}
{"sql_id": "duckdb_19_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_19_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((16384,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name char_length does not exist!\nDid you mean \"array_length\"?\nLINE 1: SELECT CHAR_LENGTH(REGEXP_REPLACE(a, 'a', 'b')...\n               ^", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "duckdb_19_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('$1',), ('$1',), ('$1',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('$1',), ('$1',), ('$1',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_19_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_20_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Invalid Input Error: Function \"length\" is a Scalar Function. \"DISTINCT\", \"FILTER\", and \"ORDER BY\" are only applicable to aggregate functions.", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_20_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Invalid Input Error: Function \"length\" is a Scalar Function. \"DISTINCT\", \"FILTER\", and \"ORDER BY\" are only applicable to aggregate functions.", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_20_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_21_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('11',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'concat_ws(INTEGER, VARCHAR)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tconcat_ws(VARCHAR, ANY, [ANY...]) -> VARCHAR\n\nLINE 1: SELECT CONCAT_WS(pkCrash, strCrash) FROM t1; -...\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_21_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1, 'one'), (2, 1, 'one'), (4, 2, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name elt does not exist!\nDid you mean \"element_at\"?\nLINE 1: SELECT one.id, two.val, ELT(two.val, 'one', 'two') FROM t1 one,...\n                                ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_22_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: timestamp field value out of range: \"01-01:02\", expected format is (YYYY-MM-DD HH:MM:SS[.US][\u00b1HH:MM| ZONE])\nLINE 1: ...T LEAST(CAST('01-01-01' AS TIMESTAMP), '01-01:02'); -- LEAST\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_22_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(2001, 12, 10),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2001, 12, 10),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_22_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_23_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \")\"", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 2}
{"sql_id": "duckdb_23_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1981, 7, 1, 8, 0, 9, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timestamp_strftime does not exist!\nDid you mean \"map\"?\nLINE 1: SELECT TIMESTAMP_STRFTIME(362793609); -- FROM_...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_23_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_23_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Unimplemented type for cast (DOUBLE -> TIMESTAMP)\nLINE 1: INSERT INTO t1 VALUES(EXTRACT(EPOCH FROM TIMESTAMP '2003-03-3...\n                              ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_23_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1048989599.0, 'Before the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT CAST(strftime('%s', '2003-03-30 01:59:59') A...\n                    ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_23_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1048991400.0, 'Inside the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP('2003-03-30 02:30:00'), ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_23_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1048993200.0, 'After the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP('2003-03-30 03:00:00'), ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_23_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 8, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 8, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_22", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-28801.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-28801.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-28800.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-28800.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_24", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-28799.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-28799.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_25", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_26", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1641052801.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1641052801.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_24_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31',), ('30',), ('31',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(a) FROM t1; -- HEX\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_24_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('30',), ('31',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('30',), ('31',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_24_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('30',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('30',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_24_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('30',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('30',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_24_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('30', '31', '30', '31'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('30', '31', '30', '31'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 3, "FP": 2, "FN": 0}
{"sql_id": "duckdb_24_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(MIN(b)) FROM t1 WHERE a = 4;\n               ^", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_24_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(MIN(c)) FROM t1 WHERE a = 4 AND b =...\n               ^", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_24_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(MAX(b)) FROM t1; -- HEX\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_24_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_24_27", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('31',), ('30',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('31',), ('30',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_25_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31', 100), ('31', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(b), i2 FROM t1 WHERE (i2>=100 AND i...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_25_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('31', 100), ('31', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('31', 100), ('31', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_25_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30', 100), ('30', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(b2), i2 FROM t2 WHERE (i2 >= 100 AN...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_25_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('31312C3030',), ('30312C3130',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('31312C3030',), ('30312C3130',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_25_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('3131',), ('3130',), ('3030',), ('3031',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('3130',), ('3030',), ('3131',), ('3031',))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_25_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, '3030'), (3, '3031'), (3, '3130'), (3, '3130'), (2, '3131'))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, '3030'), (3, '3031'), (3, '3130'), (3, '3130'), (2, '3131'))", "rowcount": 5, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_26_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('783631',), ('7836313030',), ('7836313230',), ('7836313631',), ('783632',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('783631',), ('7836313030',), ('7836313230',), ('7836313631',), ('783632',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_26_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('783030',), ('7836313030783030',), ('7836313230783030',), ('7836313631783030',), ('783631783030',), ('783632783030',))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5C5C30',), ('78363130305C5C30',), ('78363132305C5C30',), ('78363136315C5C30',), ('7836315C5C30',), ('7836325C5C30',))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_26_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('783631',), ('7836313030',), ('7836313230',), ('7836313631',), ('783632',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('783631',), ('7836313030',), ('7836313230',), ('7836313631',), ('783632',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_26_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_26_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((65535, 65535))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((65535, 65535))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_26_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_27_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-1.7976931348623157e+308,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-1.7976931348623157e+308,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_28_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_28_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2025 25', 2025, 2025))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date_format does not exist!\nDid you mean \"date_part\"?\nLINE 1: SELECT DATE_FORMAT(a, '%Y %y'), EXTRACT(year F...\n               ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 2}
{"sql_id": "duckdb_28_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1206, seconds=84012),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'2000-01-27'\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_30_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3, 2, 3, 3), (4, 3, 3, 4), (7, 3, 3, 7))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3, 2, 3, 3), (4, 3, 3, 4), (7, 3, 3, 7))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_30_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"f1\" not found in FROM clause!\nLINE 1: INSERT INTO t1 VALUES(SUBSTR(f1, 1, 3)); -- SUBSTR\n                                     ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_30_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('10', 5.0), ('30', 15.0), ('50', 25.0), ('60', 30.0))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('10', 5.0), ('30', 15.0), ('50', 25.0), ('60', 30.0))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_31_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'strftime(STRING_LITERAL, TIMESTAMP WITH TIME ZONE)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\nLINE 1: insert into t1 values (CAST(strftime('%Y', CURRENT_TIMESTAMP) AS IN...\n                                    ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_31_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_31_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_31_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((87,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'date_part(STRING_LITERAL, DOUBLE)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tdate_part(VARCHAR, DATE) -> BIGINT\n\tdate_part(VARCHAR, TIMESTAMP) -> BIGINT\n\tdate_part(VARCHAR, TIME) -> BIGINT\n\tdate_part(VARCHAR, INTERVAL) -> BIGINT\n\tdate_part(VARCHAR, TIME WITH TIME ZONE) -> BIGINT\n\tdate_part(VARCHAR[], DATE) -> STRUCT()\n\tdate_part(VARCHAR[], TIMESTAMP) -> STRUCT()\n\tdate_part(VARCHAR[], TIME) -> STRUCT()\n\tdate_part(VARCHAR[], INTERVAL) -> STRUCT()\n\tdate_part(VARCHAR[], TIME WITH TIME ZONE) -> STRUCT()\n\tdate_part(VARCHAR, TIMESTAMP WITH TIME ZONE) -> BIGINT\n\tdate_part(VARCHAR[], TIMESTAMP WITH TIME ZONE) -> STRUCT()\n\nLINE 1: SELECT CAST((CAST(EXTRACT(QUARTER FROM dbl) AS INTEGER) -...\n                          ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "duckdb_31_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2085,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'date_part(STRING_LITERAL, INTEGER)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tdate_part(VARCHAR, DATE) -> BIGINT\n\tdate_part(VARCHAR, TIMESTAMP) -> BIGINT\n\tdate_part(VARCHAR, TIME) -> BIGINT\n\tdate_part(VARCHAR, INTERVAL) -> BIGINT\n\tdate_part(VARCHAR, TIME WITH TIME ZONE) -> BIGINT\n\tdate_part(VARCHAR[], DATE) -> STRUCT()\n\tdate_part(VARCHAR[], TIMESTAMP) -> STRUCT()\n\tdate_part(VARCHAR[], TIME) -> STRUCT()\n\tdate_part(VARCHAR[], INTERVAL) -> STRUCT()\n\tdate_part(VARCHAR[], TIME WITH TIME ZONE) -> STRUCT()\n\tdate_part(VARCHAR, TIMESTAMP WITH TIME ZONE) -> BIGINT\n\tdate_part(VARCHAR[], TIMESTAMP WITH TIME ZONE) -> STRUCT()\n\nLINE 1: SELECT CAST(EXTRACT(HOUR FROM GREATEST(y1, y2)) AS ...\n                    ^", "exec_able": false}}, "TP": 2, "FP": 3, "FN": 0}
{"sql_id": "duckdb_32_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, '\"\"'), (0, '\" \"'), (0, '\"2012qwer\"'), (0, '\"qwer\"'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, ''), (0, ' '), (0, '2012qwer'), (0, 'qwer'))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_33_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"resultrowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"resultrowcount": 5, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_33_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('62303030303030303030',), ('62303030303030303031',), ('62303030303030303130',), ('62303030303030303131',), ('62303030303030313030',))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('62303030303030303030',), ('62303030303030303031',), ('62303030303030303130',), ('62303030303030303131',), ('62303030303030313030',))", "rowcount": 5, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_34_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('*a*',), ('*b*',), ('*o*',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('*a*',), ('*b*',), ('*o*',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_34_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a', '*a*', 'o', '*o*'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a', '*a*', 'o', '*o*'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_34_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('-hello -hello -',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_34_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('-hello -hello -',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_34_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_34_22", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_34_24", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',), ('62',), ('6220',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',), ('62',), ('6220',))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_35_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_35_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_35_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_35_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1F9480179366F2BF567E1C4B964C1EF029080707',), ('1F9480179366F2BF567E1C4B964C1EF029082020',), ('1F9480179366F2BF567E1C4B964C1EF029087575',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1F9480179366F2BF567E1C4B964C1EF029080707',), ('1F9480179366F2BF567E1C4B964C1EF029082020',), ('1F9480179366F2BF567E1C4B964C1EF029087575',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_35_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502          ORDER_BY         \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502           #1 ASC          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502           hex(a)          \u2502\\n\u2502             a             \u2502\\n\u2502                           \u2502\\n\u2502          ~3 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502       Projections: a      \u2502\\n\u2502                           \u2502\\n\u2502          ~3 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1F9480179366F2BF567E1C4B964C1EF029080707',), ('1F9480179366F2BF567E1C4B964C1EF029082020',), ('1F9480179366F2BF567E1C4B964C1EF029087575',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_35_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1F9480179366F2BF567E1C4B964C1EF029082020',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1F9480179366F2BF567E1C4B964C1EF029082020',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_35_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1F9480179366F2BF567E1C4B964C1EF029082020',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_36_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, 2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, 2))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_36_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_36_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_36_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False, False, False, False, 'N', 'N', 'N', 'N', 'N'), (False, False, True, False, 'N', 'Y', 'Y', 'N', 'N'), (True, False, False, False, 'N', 'N', 'N', 'Y', 'N'), (False, False, False, True, 'N', 'Y', 'Y', 'N', 'N'), (False, True, False, False, 'N', 'N', 'N', 'Y', 'N'), (False, False, True, True, 'N', 'Y', 'Y', 'N', 'Y'), (False, True, True, False, 'N', 'Y', 'Y', 'Y', 'N'), (True, False, False, True, 'N', 'Y', 'Y', 'Y', 'N'), (True, True, False, False, 'Y', 'N', 'N', 'Y', 'N'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Could not convert string 'N' to INT32\nLINE 1: SELECT IFNULL(A, 'N') AS A, IFNULL(B, 'N') AS B, IFNULL(...\n                         ^", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "duckdb_36_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False, False, False, False, False, False, False, False, False), (False, False, True, False, False, True, True, False, False), (True, False, False, False, False, False, False, True, False), (False, False, False, True, False, True, True, False, False), (False, True, False, False, False, False, False, True, False), (False, False, True, True, False, True, True, False, True), (False, True, True, False, False, True, True, True, False), (True, False, False, True, False, True, True, True, False), (True, True, False, False, True, False, False, True, False))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False, False, False, False, 'N', 'N', 'N', 'N', 'N', 'N'), (False, False, True, False, 'N', 'Y', 'Y', 'N', 'N', 'N'), (True, False, False, False, 'N', 'N', 'N', 'Y', 'N', 'N'), (False, False, False, True, 'N', 'Y', 'Y', 'N', 'N', 'N'), (False, True, False, False, 'N', 'N', 'N', 'Y', 'N', 'N'), (False, False, True, True, 'N', 'Y', 'Y', 'N', 'Y', 'Y'), (False, True, True, False, 'N', 'Y', 'Y', 'Y', 'N', 'N'), (True, False, False, True, 'N', 'Y', 'Y', 'Y', 'N', 'N'), (True, True, False, False, 'Y', 'N', 'N', 'Y', 'N', 'N'))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_37_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2004, 1, 22),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT DATE('2004-01-22 21:45:33'); -- CONVERT\n               ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_37_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_diff does not exist!\nDid you mean \"date_diff\"?\nLINE 1: SELECT TIME_DIFF(CAST('2004-12-30 12:00:00' AS...\n               ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_37_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(seconds=42480),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: timestamp field value out of range: \"1 12:00:00\", expected format is (YYYY-MM-DD HH:MM:SS[.US][\u00b1HH:MM| ZONE])", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_37_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, True))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name isnull does not exist!\nDid you mean \"isnan\"?\nLINE 1: SELECT ISNULL(NULL), ISNULL(CAST(NULL AS DATE)...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "duckdb_37_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_37_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, 0, 0), (None, None, None))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 0, 0), (None, None, None))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 1}
{"sql_id": "duckdb_37_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, 0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 1}
{"sql_id": "duckdb_37_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 1}
{"sql_id": "duckdb_37_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"date_part(STRING_LITERAL, \"NULL\")\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tdate_part(VARCHAR, TIME) -> BIGINT\n\tdate_part(VARCHAR, INTERVAL) -> BIGINT\n\tdate_part(VARCHAR, TIME WITH TIME ZONE) -> BIGINT\n\tdate_part(VARCHAR, DATE) -> BIGINT\n\nLINE 1: SELECT EXTRACT(HOUR FROM NULL), EXTRACT(MINUTE...\n               ^", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 1}
{"sql_id": "duckdb_37_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_37_22", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('value=340000.0',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('value=340000.0',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(1, 2, 1, 600000),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name maketime does not exist!\nDid you mean \"make_time\"?\nLINE 1: SELECT MAKETIME(1, 2, CAST('1.6' AS FLOAT)); -...\n               ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_38_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP(CAST(a AS VARCHAR), b) FROM t1; ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_38_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1988, '198819881988'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'repeat(SMALLINT, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\trepeat(VARCHAR, BIGINT) -> VARCHAR\n\trepeat(BLOB, BIGINT) -> BLOB\n\trepeat(ANY[], BIGINT) -> ANY[]\n\nLINE 1: SELECT CAST(1988 AS SMALLINT) AS a, REPEAT(CAST(1988 AS SMALLINT), 3) AS c2...\n                                            ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_38_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('x1988',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x1988',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_38_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((73800.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Out of Range Error: Overflow in multiplication of INT32 (2030 * 31536000)!", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_38_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1988, 1, 1, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timestampadd does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT TIMESTAMPADD(MINUTE, 1, CAST(1988 AS SM...\n               ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_38_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2025,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'strftime(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT CAST(STRFTIME('%Y', STRFTIME('%s', 'nope', 'localtime'), 'u...\n                                   ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_38_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_40_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61', 0, -1), ('615C5C30', 1, 1), ('615C5C74', 1, 1), ('6120', 1, 0))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT HEX(a), STRCMP(a, 'a'), STRCMP(a, 'a ') FROM t1...\n                       ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "duckdb_40_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12', False), ('11', False), ('22', False))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12', False), ('11', False), ('22', False))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_40_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', \"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (concat(CAST(b AS VARCHAR)\u2502\\n\u2502  , CAST(c AS VARCHAR)) =  \u2502\\n\u2502          '0101')          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             b             \u2502\\n\u2502             c             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502   b=1 AND b IS NOT NULL   \u2502\\n\u2502                           \u2502\\n\u2502          ~2 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\"))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', \"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502  ((CAST(b AS VARCHAR) ||  \u2502\\n\u2502   CAST(c AS VARCHAR)) =   \u2502\\n\u2502          '0101')          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             b             \u2502\\n\u2502             c             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502   b=1 AND b IS NOT NULL   \u2502\\n\u2502                           \u2502\\n\u2502          ~2 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\"))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_40_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_40_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_40_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,), (False,), (False,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,), (False,), (False,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_40_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,), (True,), (True,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,), (False,), (False,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_41_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_42_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_43_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('string ', 'string '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('string 1', 'string '))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 3, "FP": 1, "FN": 0}
{"sql_id": "duckdb_43_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_43_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((256,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((256,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_43_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((256,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((256,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_44_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_44_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_44_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_44_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1234567,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_44_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_44_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'lower(INTEGER)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tlower(VARCHAR) -> VARCHAR\n\nLINE 1: CREATE TABLE t2 AS SELECT LOWER(a) FROM t1; -- LCASE\n                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_44_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'upper(INTEGER)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tupper(VARCHAR) -> VARCHAR\n\nLINE 1: CREATE TABLE t2 AS SELECT UPPER(a) FROM t1; -- UCASE\n                                  ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_44_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_44_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name elt does not exist!\nDid you mean \"element_at\"?\nLINE 1: CREATE TABLE t2 AS SELECT CASE WHEN ELT(1,111,222,333) = 1 THEN 111 WHEN EL...\n                                            ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_45_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('       xxx',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('       xxx',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_45_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_45_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('x', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_18", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "duckdb_45_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_45_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name field does not exist!\nDid you mean \"filter\"?\nLINE 1: SELECT FIELD(c1, ''), FIELD('', c1) FROM t1; -...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_45_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_22", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('c1', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_45_24", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_25", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_46_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 15, 2, 59, 58, 999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('%Y-%m-%d %H:%M:%f', '15-01-20...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "duckdb_46_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2004, 12, 12, 22, 30, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2004, 12, 12, 22, 30, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_46_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('2003-01-02 08:11:02',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('2003-01-02 08:11:02',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_46_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('14',), ('14',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('14',), ('14',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_46_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('00 (Thu), 01 00 (Jan) 2004',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('2004-01-01', '%W (%a), %e %M ...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('%I:%M:%S %p', '24:00:00'); --...\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_47_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('03:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('03:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('01:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('01:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('01 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('01 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Invalid Input Error: Failed to parse format specifier %l %p: Unrecognized format for strftime/strptime: %l\nLINE 1: ...ftime(TIMESTAMP '2000-01-01 12:00:00', '%l %p');\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('11 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'strftime(TIME, STRING_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT strftime(TIME '23:00:00', '%l %p'); -- ...\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_47_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT strftime('04 /30/2004', '%m /%d/%Y'); -...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_47_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('00 01 January 2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('0000-01-01', '%W %d %M %Y') a...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('09 28 February 0000',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('0000-02-28', '%W %d %M %Y') a...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('00 01 January 2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('00 01 January 2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_48_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('\"3\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('\"3\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_48_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('\"$Barney\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_49_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('|teststring\\\\\\\\t|',), ('|teststring|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring\\\\\\\\t|',), ('|teststring|',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_49_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_49_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('nothing', 7), ('teststring', 10), ('teststring\\\\\\\\t', 13))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('nothing', 7), ('teststring', 10), ('teststring\\\\\\\\t', 13))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_49_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('|nothing|',), ('|teststring|',), ('|teststring |',), ('|teststring\\\\\\\\t|',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|nothing|',), ('|teststring|',), ('|teststring |',), ('|teststring\\\\\\\\t|',))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_49_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_49_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_49_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('|teststring |',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring |',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_50_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((\"Let's create some new events from the name of \",))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((\"Let's create some new events from the name of duckdb\",))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_51_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',), ('',), ('',), ('',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',), ('',), (None,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2023, 1, 15),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Invalid Input Error: Failed to parse format specifier %s: Unrecognized format for strftime/strptime: %s\nLINE 1: SELECT * FROM t1 ORDER BY strftime('%s', f1); -- UNIX_TIMESTAMP\n                                           ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_51_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_51_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_22", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_24", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6, 40013), (5, 40008), (4, 40005), (3, 40003), (2, 40002), (1, 40001))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6, 40013), (5, 40008), (4, 40005), (3, 40003), (2, 40002), (1, 40001))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_52_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502             vc            \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502      (length(vc) > 3)     \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             vc            \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~1029 Rows        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502             vc            \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502      (length(vc) > 3)     \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             vc            \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~1029 Rows        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_52_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502             vc            \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502      (length(vc) = 3)     \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             vc            \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~1029 Rows        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_52_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502             vc            \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502    (length(vc) IS NULL)   \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             vc            \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~1029 Rows        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_52_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502             vc            \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502  (length(vc) IS NOT NULL) \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             vc            \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~1029 Rows        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 1, 1, 1, 'america', 'america'), (2, 2, 2, 2, 'england', 'england'), (3, 3, 3, 3, 'america', 'america'), (4, 4, 4, 4, 'england', 'england'), (5, 5, 5, 5, 'america', 'america'), (6, 6, 6, 6, 'england', 'england'), (7, 7, 7, 7, 'america', 'america'), (8, 8, 8, 8, 'england', 'england'), (9, 9, 9, 9, 'america', 'america'), (10, 10, 10, 10, 'england', 'england'), (11, 11, 11, 11, 'america', 'america'), (12, 12, 12, 12, 'england', 'england'), (13, 13, 13, 13, 'america', 'america'), (14, 14, 14, 14, 'england', 'england'), (15, 15, 15, 15, 'america', 'america'), (16, 16, 16, 16, 'england', 'england'), (17, 17, 17, 17, 'america', 'america'), (18, 18, 18, 18, 'england', 'england'), (19, 19, 19, 19, 'america', 'america'), (20, 20, 20, 20, 'england', 'england'), (21, 21, 21, 21, 'america', 'america'), (22, 22, 22, 22, 'england', 'england'), (23, 23, 23, 23, 'america', 'america'), (24, 24, 24, 24, 'england', 'england'), (25, 25, 25, 25, 'america', 'america'), (26, 26, 26, 26, 'england', 'england'), (27, 27, 27, 27, 'america', 'america'), (28, 28, 28, 28, 'england', 'england'), (29, 29, 29, 29, 'america', 'america'), (30, 30, 30, 30, 'england', 'england'), (31, 31, 31, 31, 'america', 'america'), (32, 32, 32, 32, 'england', 'england'), (33, 33, 33, 33, 'america', 'america'), (34, 34, 34, 34, 'england', 'england'), (35, 35, 35, 35, 'america', 'america'), (36, 36, 36, 36, 'england', 'england'), (37, 37, 37, 37, 'america', 'america'), (38, 38, 38, 38, 'england', 'england'), (39, 39, 39, 39, 'america', 'america'), (40, 40, 40, 40, 'england', 'england'), (41, 41, 41, 41, 'america', 'america'), (42, 42, 42, 42, 'england', 'england'), (43, 43, 43, 43, 'america', 'america'), (44, 44, 44, 44, 'england', 'england'), (45, 45, 45, 45, 'america', 'america'), (46, 46, 46, 46, 'england', 'england'), (47, 47, 47, 47, 'america', 'america'), (48, 48, 48, 48, 'england', 'england'), (49, 49, 49, 49, 'america', 'america'), (50, 50, 50, 50, 'england', 'england'), (51, 51, 51, 51, 'america', 'america'), (52, 52, 52, 52, 'england', 'england'), (53, 53, 53, 53, 'america', 'america'), (54, 54, 54, 54, 'england', 'england'), (55, 55, 55, 55, 'america', 'america'), (56, 56, 56, 56, 'england', 'england'), (57, 57, 57, 57, 'america', 'america'), (58, 58, 58, 58, 'england', 'england'), (59, 59, 59, 59, 'america', 'america'), (60, 60, 60, 60, 'england', 'england'), (61, 61, 61, 61, 'america', 'america'), (62, 62, 62, 62, 'england', 'england'), (63, 63, 63, 63, 'america', 'america'), (64, 64, 64, 64, 'england', 'england'), (65, 65, 65, 65, 'america', 'america'), (66, 66, 66, 66, 'england', 'england'), (67, 67, 67, 67, 'america', 'america'), (68, 68, 68, 68, 'england', 'england'), (69, 69, 69, 69, 'america', 'america'), (70, 70, 70, 70, 'england', 'england'), (71, 71, 71, 71, 'america', 'america'), (72, 72, 72, 72, 'england', 'england'), (73, 73, 73, 73, 'america', 'america'), (74, 74, 74, 74, 'england', 'england'), (75, 75, 75, 75, 'america', 'america'), (76, 76, 76, 76, 'england', 'england'), (77, 77, 77, 77, 'america', 'america'), (78, 78, 78, 78, 'england', 'england'), (79, 79, 79, 79, 'america', 'america'), (80, 80, 80, 80, 'england', 'england'), (81, 81, 81, 81, 'america', 'america'), (82, 82, 82, 82, 'england', 'england'), (83, 83, 83, 83, 'america', 'america'), (84, 84, 84, 84, 'england', 'england'), (85, 85, 85, 85, 'america', 'america'), (86, 86, 86, 86, 'england', 'england'), (87, 87, 87, 87, 'america', 'america'), (88, 88, 88, 88, 'england', 'england'), (89, 89, 89, 89, 'america', 'america'), (90, 90, 90, 90, 'england', 'england'), (91, 91, 91, 91, 'america', 'america'), (92, 92, 92, 92, 'england', 'england'), (93, 93, 93, 93, 'america', 'america'), (94, 94, 94, 94, 'england', 'england'), (95, 95, 95, 95, 'america', 'america'), (96, 96, 96, 96, 'england', 'england'), (97, 97, 97, 97, 'america', 'america'), (98, 98, 98, 98, 'england', 'england'), (99, 99, 99, 99, 'america', 'america'), (100, 100, 100, 100, 'england', 'england'), (101, 101, 101, 101, 'america', 'america'), (102, 102, 102, 102, 'england', 'england'), (103, 103, 103, 103, 'america', 'america'), (104, 104, 104, 104, 'england', 'england'), (105, 105, 105, 105, 'america', 'america'), (106, 106, 106, 106, 'england', 'england'), (107, 107, 107, 107, 'america', 'america'), (108, 108, 108, 108, 'england', 'england'), (109, 109, 109, 109, 'america', 'america'), (110, 110, 110, 110, 'england', 'england'), (111, 111, 111, 111, 'america', 'america'), (112, 112, 112, 112, 'england', 'england'), (113, 113, 113, 113, 'america', 'america'), (114, 114, 114, 114, 'england', 'england'), (115, 115, 115, 115, 'america', 'america'), (116, 116, 116, 116, 'england', 'england'), (117, 117, 117, 117, 'america', 'america'), (118, 118, 118, 118, 'england', 'england'), (119, 119, 119, 119, 'america', 'america'), (120, 120, 120, 120, 'england', 'england'), (121, 121, 121, 121, 'america', 'america'), (122, 122, 122, 122, 'england', 'england'), (123, 123, 123, 123, 'america', 'america'), (124, 124, 124, 124, 'england', 'england'), (125, 125, 125, 125, 'america', 'america'), (126, 126, 126, 126, 'england', 'england'), (127, 127, 127, 127, 'america', 'america'), (128, 128, 128, 128, 'england', 'england'), (1, 1, 1, 1, 'america', 'america'), (2, 2, 2, 2, 'america', 'america'), (3, 3, 3, 3, 'america', 'america'), (4, 4, 4, 4, 'america', 'america'), (5, 5, 5, 5, 'america', 'america'), (6, 6, 6, 6, 'america', 'america'), (7, 7, 7, 7, 'america', 'america'), (8, 8, 8, 8, 'america', 'america'), (9, 9, 9, 9, 'america', 'america'), (10, 10, 10, 10, 'america', 'america'), (11, 11, 11, 11, 'america', 'america'), (12, 12, 12, 12, 'america', 'america'), (13, 13, 13, 13, 'america', 'america'), (14, 14, 14, 14, 'america', 'america'), (15, 15, 15, 15, 'america', 'america'), (16, 16, 16, 16, 'america', 'america'), (17, 17, 17, 17, 'america', 'america'), (18, 18, 18, 18, 'america', 'america'), (19, 19, 19, 19, 'america', 'america'), (20, 20, 20, 20, 'america', 'america'), (21, 21, 21, 21, 'america', 'america'), (22, 22, 22, 22, 'america', 'america'), (23, 23, 23, 23, 'america', 'america'), (24, 24, 24, 24, 'america', 'america'), (25, 25, 25, 25, 'america', 'america'), (26, 26, 26, 26, 'america', 'america'), (27, 27, 27, 27, 'america', 'america'), (28, 28, 28, 28, 'america', 'america'), (29, 29, 29, 29, 'america', 'america'), (30, 30, 30, 30, 'america', 'america'), (31, 31, 31, 31, 'america', 'america'), (32, 32, 32, 32, 'america', 'america'), (33, 33, 33, 33, 'america', 'america'), (34, 34, 34, 34, 'america', 'america'), (35, 35, 35, 35, 'america', 'america'), (36, 36, 36, 36, 'america', 'america'), (37, 37, 37, 37, 'america', 'america'), (38, 38, 38, 38, 'america', 'america'), (39, 39, 39, 39, 'america', 'america'), (40, 40, 40, 40, 'america', 'america'), (41, 41, 41, 41, 'america', 'america'), (42, 42, 42, 42, 'america', 'america'), (43, 43, 43, 43, 'america', 'america'), (44, 44, 44, 44, 'america', 'america'), (45, 45, 45, 45, 'america', 'america'), (46, 46, 46, 46, 'america', 'america'), (47, 47, 47, 47, 'america', 'america'), (48, 48, 48, 48, 'america', 'america'), (49, 49, 49, 49, 'america', 'america'), (50, 50, 50, 50, 'america', 'america'), (51, 51, 51, 51, 'america', 'america'), (52, 52, 52, 52, 'america', 'america'), (53, 53, 53, 53, 'america', 'america'), (54, 54, 54, 54, 'america', 'america'), (55, 55, 55, 55, 'america', 'america'), (56, 56, 56, 56, 'america', 'america'), (57, 57, 57, 57, 'america', 'america'), (58, 58, 58, 58, 'america', 'america'), (59, 59, 59, 59, 'america', 'america'), (60, 60, 60, 60, 'america', 'america'), (61, 61, 61, 61, 'america', 'america'), (62, 62, 62, 62, 'america', 'america'), (63, 63, 63, 63, 'america', 'america'), (64, 64, 64, 64, 'america', 'america'), (65, 65, 65, 65, 'america', 'america'), (66, 66, 66, 66, 'america', 'america'), (67, 67, 67, 67, 'america', 'america'), (68, 68, 68, 68, 'america', 'america'), (69, 69, 69, 69, 'america', 'america'), (70, 70, 70, 70, 'america', 'america'), (71, 71, 71, 71, 'america', 'america'), (72, 72, 72, 72, 'america', 'america'), (73, 73, 73, 73, 'america', 'america'), (74, 74, 74, 74, 'america', 'america'), (75, 75, 75, 75, 'america', 'america'), (76, 76, 76, 76, 'america', 'america'), (77, 77, 77, 77, 'america', 'america'), (78, 78, 78, 78, 'america', 'america'), (79, 79, 79, 79, 'america', 'america'), (80, 80, 80, 80, 'america', 'america'), (81, 81, 81, 81, 'america', 'america'), (82, 82, 82, 82, 'america', 'america'), (83, 83, 83, 83, 'america', 'america'), (84, 84, 84, 84, 'america', 'america'), (85, 85, 85, 85, 'america', 'america'), (86, 86, 86, 86, 'america', 'america'), (87, 87, 87, 87, 'america', 'america'), (88, 88, 88, 88, 'america', 'america'), (89, 89, 89, 89, 'america', 'america'), (90, 90, 90, 90, 'america', 'america'), (91, 91, 91, 91, 'america', 'america'), (92, 92, 92, 92, 'america', 'america'), (93, 93, 93, 93, 'america', 'america'), (94, 94, 94, 94, 'america', 'america'), (95, 95, 95, 95, 'america', 'america'), (96, 96, 96, 96, 'america', 'america'), (97, 97, 97, 97, 'america', 'america'), (98, 98, 98, 98, 'america', 'america'), (99, 99, 99, 99, 'america', 'america'), (100, 100, 100, 100, 'america', 'america'), (101, 101, 101, 101, 'america', 'america'), (102, 102, 102, 102, 'america', 'america'), (103, 103, 103, 103, 'america', 'america'), (104, 104, 104, 104, 'america', 'america'), (105, 105, 105, 105, 'america', 'america'), (106, 106, 106, 106, 'america', 'america'), (107, 107, 107, 107, 'america', 'america'), (108, 108, 108, 108, 'america', 'america'), (109, 109, 109, 109, 'america', 'america'), (110, 110, 110, 110, 'america', 'america'), (111, 111, 111, 111, 'america', 'america'), (112, 112, 112, 112, 'america', 'america'), (113, 113, 113, 113, 'america', 'america'), (114, 114, 114, 114, 'america', 'america'), (115, 115, 115, 115, 'america', 'america'), (116, 116, 116, 116, 'america', 'america'), (117, 117, 117, 117, 'america', 'america'), (118, 118, 118, 118, 'america', 'america'), (119, 119, 119, 119, 'america', 'america'), (120, 120, 120, 120, 'america', 'america'), (121, 121, 121, 121, 'america', 'america'), (122, 122, 122, 122, 'america', 'america'), (123, 123, 123, 123, 'america', 'america'), (124, 124, 124, 124, 'america', 'america'), (125, 125, 125, 125, 'america', 'america'), (126, 126, 126, 126, 'america', 'america'), (127, 127, 127, 127, 'america', 'america'), (128, 128, 128, 128, 'america', 'america'), (1, 1, 1, 1, 'england america', 'england america'), (2, 2, 2, 2, 'england america', 'england america'), (3, 3, 3, 3, 'england america', 'england america'), (4, 4, 4, 4, 'england america', 'england america'), (5, 5, 5, 5, 'england america', 'england america'), (6, 6, 6, 6, 'england america', 'england america'), (7, 7, 7, 7, 'england america', 'england america'), (8, 8, 8, 8, 'england america', 'england america'), (9, 9, 9, 9, 'england america', 'england america'), (10, 10, 10, 10, 'england america', 'england america'), (11, 11, 11, 11, 'england america', 'england america'), (12, 12, 12, 12, 'england america', 'england america'), (13, 13, 13, 13, 'england america', 'england america'), (14, 14, 14, 14, 'england america', 'england america'), (15, 15, 15, 15, 'england america', 'england america'), (16, 16, 16, 16, 'england america', 'england america'), (17, 17, 17, 17, 'england america', 'england america'), (18, 18, 18, 18, 'england america', 'england america'), (19, 19, 19, 19, 'england america', 'england america'), (20, 20, 20, 20, 'england america', 'england america'), (21, 21, 21, 21, 'england america', 'england america'), (22, 22, 22, 22, 'england america', 'england america'), (23, 23, 23, 23, 'england america', 'england america'), (24, 24, 24, 24, 'england america', 'england america'), (25, 25, 25, 25, 'england america', 'england america'), (26, 26, 26, 26, 'england america', 'england america'), (27, 27, 27, 27, 'england america', 'england america'), (28, 28, 28, 28, 'england america', 'england america'), (29, 29, 29, 29, 'england america', 'england america'), (30, 30, 30, 30, 'england america', 'england america'), (31, 31, 31, 31, 'england america', 'england america'), (32, 32, 32, 32, 'england america', 'england america'), (33, 33, 33, 33, 'england america', 'england america'), (34, 34, 34, 34, 'england america', 'england america'), (35, 35, 35, 35, 'england america', 'england america'), (36, 36, 36, 36, 'england america', 'england america'), (37, 37, 37, 37, 'england america', 'england america'), (38, 38, 38, 38, 'england america', 'england america'), (39, 39, 39, 39, 'england america', 'england america'), (40, 40, 40, 40, 'england america', 'england america'), (41, 41, 41, 41, 'england america', 'england america'), (42, 42, 42, 42, 'england america', 'england america'), (43, 43, 43, 43, 'england america', 'england america'), (44, 44, 44, 44, 'england america', 'england america'), (45, 45, 45, 45, 'england america', 'england america'), (46, 46, 46, 46, 'england america', 'england america'), (47, 47, 47, 47, 'england america', 'england america'), (48, 48, 48, 48, 'england america', 'england america'), (49, 49, 49, 49, 'england america', 'england america'), (50, 50, 50, 50, 'england america', 'england america'), (51, 51, 51, 51, 'england america', 'england america'), (52, 52, 52, 52, 'england america', 'england america'), (53, 53, 53, 53, 'england america', 'england america'), (54, 54, 54, 54, 'england america', 'england america'), (55, 55, 55, 55, 'england america', 'england america'), (56, 56, 56, 56, 'england america', 'england america'), (57, 57, 57, 57, 'england america', 'england america'), (58, 58, 58, 58, 'england america', 'england america'), (59, 59, 59, 59, 'england america', 'england america'), (60, 60, 60, 60, 'england america', 'england america'), (61, 61, 61, 61, 'england america', 'england america'), (62, 62, 62, 62, 'england america', 'england america'), (63, 63, 63, 63, 'england america', 'england america'), (64, 64, 64, 64, 'england america', 'england america'), (65, 65, 65, 65, 'england america', 'england america'), (66, 66, 66, 66, 'england america', 'england america'), (67, 67, 67, 67, 'england america', 'england america'), (68, 68, 68, 68, 'england america', 'england america'), (69, 69, 69, 69, 'england america', 'england america'), (70, 70, 70, 70, 'england america', 'england america'), (71, 71, 71, 71, 'england america', 'england america'), (72, 72, 72, 72, 'england america', 'england america'), (73, 73, 73, 73, 'england america', 'england america'), (74, 74, 74, 74, 'england america', 'england america'), (75, 75, 75, 75, 'england america', 'england america'), (76, 76, 76, 76, 'england america', 'england america'), (77, 77, 77, 77, 'england america', 'england america'), (78, 78, 78, 78, 'england america', 'england america'), (79, 79, 79, 79, 'england america', 'england america'), (80, 80, 80, 80, 'england america', 'england america'), (81, 81, 81, 81, 'england america', 'england america'), (82, 82, 82, 82, 'england america', 'england america'), (83, 83, 83, 83, 'england america', 'england america'), (84, 84, 84, 84, 'england america', 'england america'), (85, 85, 85, 85, 'england america', 'england america'), (86, 86, 86, 86, 'england america', 'england america'), (87, 87, 87, 87, 'england america', 'england america'), (88, 88, 88, 88, 'england america', 'england america'), (89, 89, 89, 89, 'england america', 'england america'), (90, 90, 90, 90, 'england america', 'england america'), (91, 91, 91, 91, 'england america', 'england america'), (92, 92, 92, 92, 'england america', 'england america'), (93, 93, 93, 93, 'england america', 'england america'), (94, 94, 94, 94, 'england america', 'england america'), (95, 95, 95, 95, 'england america', 'england america'), (96, 96, 96, 96, 'england america', 'england america'), (97, 97, 97, 97, 'england america', 'england america'), (98, 98, 98, 98, 'england america', 'england america'), (99, 99, 99, 99, 'england america', 'england america'), (100, 100, 100, 100, 'england america', 'england america'), (101, 101, 101, 101, 'england america', 'england america'), (102, 102, 102, 102, 'england america', 'england america'), (103, 103, 103, 103, 'england america', 'england america'), (104, 104, 104, 104, 'england america', 'england america'), (105, 105, 105, 105, 'england america', 'england america'), (106, 106, 106, 106, 'england america', 'england america'), (107, 107, 107, 107, 'england america', 'england america'), (108, 108, 108, 108, 'england america', 'england america'), (109, 109, 109, 109, 'england america', 'england america'), (110, 110, 110, 110, 'england america', 'england america'), (111, 111, 111, 111, 'england america', 'england america'), (112, 112, 112, 112, 'england america', 'england america'), (113, 113, 113, 113, 'england america', 'england america'), (114, 114, 114, 114, 'england america', 'england america'), (115, 115, 115, 115, 'england america', 'england america'), (116, 116, 116, 116, 'england america', 'england america'), (117, 117, 117, 117, 'england america', 'england america'), (118, 118, 118, 118, 'england america', 'england america'), (119, 119, 119, 119, 'england america', 'england america'), (120, 120, 120, 120, 'england america', 'england america'), (121, 121, 121, 121, 'england america', 'england america'), (122, 122, 122, 122, 'england america', 'england america'), (123, 123, 123, 123, 'england america', 'england america'), (124, 124, 124, 124, 'england america', 'england america'), (125, 125, 125, 125, 'england america', 'england america'), (126, 126, 126, 126, 'england america', 'england america'), (127, 127, 127, 127, 'england america', 'england america'), (128, 128, 128, 128, 'england america', 'england america'), (1, 1, 1, 1, 'england america', 'england america'), (2, 2, 2, 2, 'england america', 'england america'), (3, 3, 3, 3, 'england america', 'england america'), (4, 4, 4, 4, 'england america', 'england america'), (5, 5, 5, 5, 'england america', 'england america'), (6, 6, 6, 6, 'england america', 'england america'), (7, 7, 7, 7, 'england america', 'england america'), (8, 8, 8, 8, 'england america', 'england america'), (9, 9, 9, 9, 'england america', 'england america'), (10, 10, 10, 10, 'england america', 'england america'), (11, 11, 11, 11, 'england america', 'england america'), (12, 12, 12, 12, 'england america', 'england america'), (13, 13, 13, 13, 'england america', 'england america'), (14, 14, 14, 14, 'england america', 'england america'), (15, 15, 15, 15, 'england america', 'england america'), (16, 16, 16, 16, 'england america', 'england america'), (17, 17, 17, 17, 'england america', 'england america'), (18, 18, 18, 18, 'england america', 'england america'), (19, 19, 19, 19, 'england america', 'england america'), (20, 20, 20, 20, 'england america', 'england america'), (21, 21, 21, 21, 'england america', 'england america'), (22, 22, 22, 22, 'england america', 'england america'), (23, 23, 23, 23, 'england america', 'england america'), (24, 24, 24, 24, 'england america', 'england america'), (25, 25, 25, 25, 'england america', 'england america'), (26, 26, 26, 26, 'england america', 'england america'), (27, 27, 27, 27, 'england america', 'england america'), (28, 28, 28, 28, 'england america', 'england america'), (29, 29, 29, 29, 'england america', 'england america'), (30, 30, 30, 30, 'england america', 'england america'), (31, 31, 31, 31, 'england america', 'england america'), (32, 32, 32, 32, 'england america', 'england america'), (33, 33, 33, 33, 'england america', 'england america'), (34, 34, 34, 34, 'england america', 'england america'), (35, 35, 35, 35, 'england america', 'england america'), (36, 36, 36, 36, 'england america', 'england america'), (37, 37, 37, 37, 'england america', 'england america'), (38, 38, 38, 38, 'england america', 'england america'), (39, 39, 39, 39, 'england america', 'england america'), (40, 40, 40, 40, 'england america', 'england america'), (41, 41, 41, 41, 'england america', 'england america'), (42, 42, 42, 42, 'england america', 'england america'), (43, 43, 43, 43, 'england america', 'england america'), (44, 44, 44, 44, 'england america', 'england america'), (45, 45, 45, 45, 'england america', 'england america'), (46, 46, 46, 46, 'england america', 'england america'), (47, 47, 47, 47, 'england america', 'england america'), (48, 48, 48, 48, 'england america', 'england america'), (49, 49, 49, 49, 'england america', 'england america'), (50, 50, 50, 50, 'england america', 'england america'), (51, 51, 51, 51, 'england america', 'england america'), (52, 52, 52, 52, 'england america', 'england america'), (53, 53, 53, 53, 'england america', 'england america'), (54, 54, 54, 54, 'england america', 'england america'), (55, 55, 55, 55, 'england america', 'england america'), (56, 56, 56, 56, 'england america', 'england america'), (57, 57, 57, 57, 'england america', 'england america'), (58, 58, 58, 58, 'england america', 'england america'), (59, 59, 59, 59, 'england america', 'england america'), (60, 60, 60, 60, 'england america', 'england america'), (61, 61, 61, 61, 'england america', 'england america'), (62, 62, 62, 62, 'england america', 'england america'), (63, 63, 63, 63, 'england america', 'england america'), (64, 64, 64, 64, 'england america', 'england america'), (65, 65, 65, 65, 'england america', 'england america'), (66, 66, 66, 66, 'england america', 'england america'), (67, 67, 67, 67, 'england america', 'england america'), (68, 68, 68, 68, 'england america', 'england america'), (69, 69, 69, 69, 'england america', 'england america'), (70, 70, 70, 70, 'england america', 'england america'), (71, 71, 71, 71, 'england america', 'england america'), (72, 72, 72, 72, 'england america', 'england america'), (73, 73, 73, 73, 'england america', 'england america'), (74, 74, 74, 74, 'england america', 'england america'), (75, 75, 75, 75, 'england america', 'england america'), (76, 76, 76, 76, 'england america', 'england america'), (77, 77, 77, 77, 'england america', 'england america'), (78, 78, 78, 78, 'england america', 'england america'), (79, 79, 79, 79, 'england america', 'england america'), (80, 80, 80, 80, 'england america', 'england america'), (81, 81, 81, 81, 'england america', 'england america'), (82, 82, 82, 82, 'england america', 'england america'), (83, 83, 83, 83, 'england america', 'england america'), (84, 84, 84, 84, 'england america', 'england america'), (85, 85, 85, 85, 'england america', 'england america'), (86, 86, 86, 86, 'england america', 'england america'), (87, 87, 87, 87, 'england america', 'england america'), (88, 88, 88, 88, 'england america', 'england america'), (89, 89, 89, 89, 'england america', 'england america'), (90, 90, 90, 90, 'england america', 'england america'), (91, 91, 91, 91, 'england america', 'england america'), (92, 92, 92, 92, 'england america', 'england america'), (93, 93, 93, 93, 'england america', 'england america'), (94, 94, 94, 94, 'england america', 'england america'), (95, 95, 95, 95, 'england america', 'england america'), (96, 96, 96, 96, 'england america', 'england america'), (97, 97, 97, 97, 'england america', 'england america'), (98, 98, 98, 98, 'england america', 'england america'), (99, 99, 99, 99, 'england america', 'england america'), (100, 100, 100, 100, 'england america', 'england america'), (101, 101, 101, 101, 'england america', 'england america'), (102, 102, 102, 102, 'england america', 'england america'), (103, 103, 103, 103, 'england america', 'england america'), (104, 104, 104, 104, 'england america', 'england america'), (105, 105, 105, 105, 'england america', 'england america'), (106, 106, 106, 106, 'england america', 'england america'), (107, 107, 107, 107, 'england america', 'england america'), (108, 108, 108, 108, 'england america', 'england america'), (109, 109, 109, 109, 'england america', 'england america'), (110, 110, 110, 110, 'england america', 'england america'), (111, 111, 111, 111, 'england america', 'england america'), (112, 112, 112, 112, 'england america', 'england america'), (113, 113, 113, 113, 'england america', 'england america'), (114, 114, 114, 114, 'england america', 'england america'), (115, 115, 115, 115, 'england america', 'england america'), (116, 116, 116, 116, 'england america', 'england america'), (117, 117, 117, 117, 'england america', 'england america'), (118, 118, 118, 118, 'england america', 'england america'), (119, 119, 119, 119, 'england america', 'england america'), (120, 120, 120, 120, 'england america', 'england america'), (121, 121, 121, 121, 'england america', 'england america'), (122, 122, 122, 122, 'england america', 'england america'), (123, 123, 123, 123, 'england america', 'england america'), (124, 124, 124, 124, 'england america', 'england america'), (125, 125, 125, 125, 'england america', 'england america'), (126, 126, 126, 126, 'england america', 'england america'), (127, 127, 127, 127, 'england america', 'england america'), (128, 128, 128, 128, 'england america', 'england america'), (1, 1, 1, 1, 'germany england america', 'germany england america'), (2, 2, 2, 2, 'germany england america', 'germany england america'), (3, 3, 3, 3, 'germany england america', 'germany england america'), (4, 4, 4, 4, 'germany england america', 'germany england america'), (5, 5, 5, 5, 'germany england america', 'germany england america'), (6, 6, 6, 6, 'germany england america', 'germany england america'), (7, 7, 7, 7, 'germany england america', 'germany england america'), (8, 8, 8, 8, 'germany england america', 'germany england america'), (9, 9, 9, 9, 'germany england america', 'germany england america'), (10, 10, 10, 10, 'germany england america', 'germany england america'), (11, 11, 11, 11, 'germany england america', 'germany england america'), (12, 12, 12, 12, 'germany england america', 'germany england america'), (13, 13, 13, 13, 'germany england america', 'germany england america'), (14, 14, 14, 14, 'germany england america', 'germany england america'), (15, 15, 15, 15, 'germany england america', 'germany england america'), (16, 16, 16, 16, 'germany england america', 'germany england america'), (17, 17, 17, 17, 'germany england america', 'germany england america'), (18, 18, 18, 18, 'germany england america', 'germany england america'), (19, 19, 19, 19, 'germany england america', 'germany england america'), (20, 20, 20, 20, 'germany england america', 'germany england america'), (21, 21, 21, 21, 'germany england america', 'germany england america'), (22, 22, 22, 22, 'germany england america', 'germany england america'), (23, 23, 23, 23, 'germany england america', 'germany england america'), (24, 24, 24, 24, 'germany england america', 'germany england america'), (25, 25, 25, 25, 'germany england america', 'germany england america'), (26, 26, 26, 26, 'germany england america', 'germany england america'), (27, 27, 27, 27, 'germany england america', 'germany england america'), (28, 28, 28, 28, 'germany england america', 'germany england america'), (29, 29, 29, 29, 'germany england america', 'germany england america'), (30, 30, 30, 30, 'germany england america', 'germany england america'), (31, 31, 31, 31, 'germany england america', 'germany england america'), (32, 32, 32, 32, 'germany england america', 'germany england america'), (33, 33, 33, 33, 'germany england america', 'germany england america'), (34, 34, 34, 34, 'germany england america', 'germany england america'), (35, 35, 35, 35, 'germany england america', 'germany england america'), (36, 36, 36, 36, 'germany england america', 'germany england america'), (37, 37, 37, 37, 'germany england america', 'germany england america'), (38, 38, 38, 38, 'germany england america', 'germany england america'), (39, 39, 39, 39, 'germany england america', 'germany england america'), (40, 40, 40, 40, 'germany england america', 'germany england america'), (41, 41, 41, 41, 'germany england america', 'germany england america'), (42, 42, 42, 42, 'germany england america', 'germany england america'), (43, 43, 43, 43, 'germany england america', 'germany england america'), (44, 44, 44, 44, 'germany england america', 'germany england america'), (45, 45, 45, 45, 'germany england america', 'germany england america'), (46, 46, 46, 46, 'germany england america', 'germany england america'), (47, 47, 47, 47, 'germany england america', 'germany england america'), (48, 48, 48, 48, 'germany england america', 'germany england america'), (49, 49, 49, 49, 'germany england america', 'germany england america'), (50, 50, 50, 50, 'germany england america', 'germany england america'), (51, 51, 51, 51, 'germany england america', 'germany england america'), (52, 52, 52, 52, 'germany england america', 'germany england america'), (53, 53, 53, 53, 'germany england america', 'germany england america'), (54, 54, 54, 54, 'germany england america', 'germany england america'), (55, 55, 55, 55, 'germany england america', 'germany england america'), (56, 56, 56, 56, 'germany england america', 'germany england america'), (57, 57, 57, 57, 'germany england america', 'germany england america'), (58, 58, 58, 58, 'germany england america', 'germany england america'), (59, 59, 59, 59, 'germany england america', 'germany england america'), (60, 60, 60, 60, 'germany england america', 'germany england america'), (61, 61, 61, 61, 'germany england america', 'germany england america'), (62, 62, 62, 62, 'germany england america', 'germany england america'), (63, 63, 63, 63, 'germany england america', 'germany england america'), (64, 64, 64, 64, 'germany england america', 'germany england america'), (65, 65, 65, 65, 'germany england america', 'germany england america'), (66, 66, 66, 66, 'germany england america', 'germany england america'), (67, 67, 67, 67, 'germany england america', 'germany england america'), (68, 68, 68, 68, 'germany england america', 'germany england america'), (69, 69, 69, 69, 'germany england america', 'germany england america'), (70, 70, 70, 70, 'germany england america', 'germany england america'), (71, 71, 71, 71, 'germany england america', 'germany england america'), (72, 72, 72, 72, 'germany england america', 'germany england america'), (73, 73, 73, 73, 'germany england america', 'germany england america'), (74, 74, 74, 74, 'germany england america', 'germany england america'), (75, 75, 75, 75, 'germany england america', 'germany england america'), (76, 76, 76, 76, 'germany england america', 'germany england america'), (77, 77, 77, 77, 'germany england america', 'germany england america'), (78, 78, 78, 78, 'germany england america', 'germany england america'), (79, 79, 79, 79, 'germany england america', 'germany england america'), (80, 80, 80, 80, 'germany england america', 'germany england america'), (81, 81, 81, 81, 'germany england america', 'germany england america'), (82, 82, 82, 82, 'germany england america', 'germany england america'), (83, 83, 83, 83, 'germany england america', 'germany england america'), (84, 84, 84, 84, 'germany england america', 'germany england america'), (85, 85, 85, 85, 'germany england america', 'germany england america'), (86, 86, 86, 86, 'germany england america', 'germany england america'), (87, 87, 87, 87, 'germany england america', 'germany england america'), (88, 88, 88, 88, 'germany england america', 'germany england america'), (89, 89, 89, 89, 'germany england america', 'germany england america'), (90, 90, 90, 90, 'germany england america', 'germany england america'), (91, 91, 91, 91, 'germany england america', 'germany england america'), (92, 92, 92, 92, 'germany england america', 'germany england america'), (93, 93, 93, 93, 'germany england america', 'germany england america'), (94, 94, 94, 94, 'germany england america', 'germany england america'), (95, 95, 95, 95, 'germany england america', 'germany england america'), (96, 96, 96, 96, 'germany england america', 'germany england america'), (97, 97, 97, 97, 'germany england america', 'germany england america'), (98, 98, 98, 98, 'germany england america', 'germany england america'), (99, 99, 99, 99, 'germany england america', 'germany england america'), (100, 100, 100, 100, 'germany england america', 'germany england america'), (101, 101, 101, 101, 'germany england america', 'germany england america'), (102, 102, 102, 102, 'germany england america', 'germany england america'), (103, 103, 103, 103, 'germany england america', 'germany england america'), (104, 104, 104, 104, 'germany england america', 'germany england america'), (105, 105, 105, 105, 'germany england america', 'germany england america'), (106, 106, 106, 106, 'germany england america', 'germany england america'), (107, 107, 107, 107, 'germany england america', 'germany england america'), (108, 108, 108, 108, 'germany england america', 'germany england america'), (109, 109, 109, 109, 'germany england america', 'germany england america'), (110, 110, 110, 110, 'germany england america', 'germany england america'), (111, 111, 111, 111, 'germany england america', 'germany england america'), (112, 112, 112, 112, 'germany england america', 'germany england america'), (113, 113, 113, 113, 'germany england america', 'germany england america'), (114, 114, 114, 114, 'germany england america', 'germany england america'), (115, 115, 115, 115, 'germany england america', 'germany england america'), (116, 116, 116, 116, 'germany england america', 'germany england america'), (117, 117, 117, 117, 'germany england america', 'germany england america'), (118, 118, 118, 118, 'germany england america', 'germany england america'), (119, 119, 119, 119, 'germany england america', 'germany england america'), (120, 120, 120, 120, 'germany england america', 'germany england america'), (121, 121, 121, 121, 'germany england america', 'germany england america'), (122, 122, 122, 122, 'germany england america', 'germany england america'), (123, 123, 123, 123, 'germany england america', 'germany england america'), (124, 124, 124, 124, 'germany england america', 'germany england america'), (125, 125, 125, 125, 'germany england america', 'germany england america'), (126, 126, 126, 126, 'germany england america', 'germany england america'), (127, 127, 127, 127, 'germany england america', 'germany england america'), (128, 128, 128, 128, 'germany england america', 'germany england america'), (1, 1, 1, 1, 'germany england america', 'germany england america'), (2, 2, 2, 2, 'germany england america', 'germany england america'), (3, 3, 3, 3, 'germany england america', 'germany england america'), (4, 4, 4, 4, 'germany england america', 'germany england america'), (5, 5, 5, 5, 'germany england america', 'germany england america'), (6, 6, 6, 6, 'germany england america', 'germany england america'), (7, 7, 7, 7, 'germany england america', 'germany england america'), (8, 8, 8, 8, 'germany england america', 'germany england america'), (9, 9, 9, 9, 'germany england america', 'germany england america'), (10, 10, 10, 10, 'germany england america', 'germany england america'), (11, 11, 11, 11, 'germany england america', 'germany england america'), (12, 12, 12, 12, 'germany england america', 'germany england america'), (13, 13, 13, 13, 'germany england america', 'germany england america'), (14, 14, 14, 14, 'germany england america', 'germany england america'), (15, 15, 15, 15, 'germany england america', 'germany england america'), (16, 16, 16, 16, 'germany england america', 'germany england america'), (17, 17, 17, 17, 'germany england america', 'germany england america'), (18, 18, 18, 18, 'germany england america', 'germany england america'), (19, 19, 19, 19, 'germany england america', 'germany england america'), (20, 20, 20, 20, 'germany england america', 'germany england america'), (21, 21, 21, 21, 'germany england america', 'germany england america'), (22, 22, 22, 22, 'germany england america', 'germany england america'), (23, 23, 23, 23, 'germany england america', 'germany england america'), (24, 24, 24, 24, 'germany england america', 'germany england america'), (25, 25, 25, 25, 'germany england america', 'germany england america'), (26, 26, 26, 26, 'germany england america', 'germany england america'), (27, 27, 27, 27, 'germany england america', 'germany england america'), (28, 28, 28, 28, 'germany england america', 'germany england america'), (29, 29, 29, 29, 'germany england america', 'germany england america'), (30, 30, 30, 30, 'germany england america', 'germany england america'), (31, 31, 31, 31, 'germany england america', 'germany england america'), (32, 32, 32, 32, 'germany england america', 'germany england america'), (33, 33, 33, 33, 'germany england america', 'germany england america'), (34, 34, 34, 34, 'germany england america', 'germany england america'), (35, 35, 35, 35, 'germany england america', 'germany england america'), (36, 36, 36, 36, 'germany england america', 'germany england america'), (37, 37, 37, 37, 'germany england america', 'germany england america'), (38, 38, 38, 38, 'germany england america', 'germany england america'), (39, 39, 39, 39, 'germany england america', 'germany england america'), (40, 40, 40, 40, 'germany england america', 'germany england america'), (41, 41, 41, 41, 'germany england america', 'germany england america'), (42, 42, 42, 42, 'germany england america', 'germany england america'), (43, 43, 43, 43, 'germany england america', 'germany england america'), (44, 44, 44, 44, 'germany england america', 'germany england america'), (45, 45, 45, 45, 'germany england america', 'germany england america'), (46, 46, 46, 46, 'germany england america', 'germany england america'), (47, 47, 47, 47, 'germany england america', 'germany england america'), (48, 48, 48, 48, 'germany england america', 'germany england america'), (49, 49, 49, 49, 'germany england america', 'germany england america'), (50, 50, 50, 50, 'germany england america', 'germany england america'), (51, 51, 51, 51, 'germany england america', 'germany england america'), (52, 52, 52, 52, 'germany england america', 'germany england america'), (53, 53, 53, 53, 'germany england america', 'germany england america'), (54, 54, 54, 54, 'germany england america', 'germany england america'), (55, 55, 55, 55, 'germany england america', 'germany england america'), (56, 56, 56, 56, 'germany england america', 'germany england america'), (57, 57, 57, 57, 'germany england america', 'germany england america'), (58, 58, 58, 58, 'germany england america', 'germany england america'), (59, 59, 59, 59, 'germany england america', 'germany england america'), (60, 60, 60, 60, 'germany england america', 'germany england america'), (61, 61, 61, 61, 'germany england america', 'germany england america'), (62, 62, 62, 62, 'germany england america', 'germany england america'), (63, 63, 63, 63, 'germany england america', 'germany england america'), (64, 64, 64, 64, 'germany england america', 'germany england america'), (65, 65, 65, 65, 'germany england america', 'germany england america'), (66, 66, 66, 66, 'germany england america', 'germany england america'), (67, 67, 67, 67, 'germany england america', 'germany england america'), (68, 68, 68, 68, 'germany england america', 'germany england america'), (69, 69, 69, 69, 'germany england america', 'germany england america'), (70, 70, 70, 70, 'germany england america', 'germany england america'), (71, 71, 71, 71, 'germany england america', 'germany england america'), (72, 72, 72, 72, 'germany england america', 'germany england america'), (73, 73, 73, 73, 'germany england america', 'germany england america'), (74, 74, 74, 74, 'germany england america', 'germany england america'), (75, 75, 75, 75, 'germany england america', 'germany england america'), (76, 76, 76, 76, 'germany england america', 'germany england america'), (77, 77, 77, 77, 'germany england america', 'germany england america'), (78, 78, 78, 78, 'germany england america', 'germany england america'), (79, 79, 79, 79, 'germany england america', 'germany england america'), (80, 80, 80, 80, 'germany england america', 'germany england america'), (81, 81, 81, 81, 'germany england america', 'germany england america'), (82, 82, 82, 82, 'germany england america', 'germany england america'), (83, 83, 83, 83, 'germany england america', 'germany england america'), (84, 84, 84, 84, 'germany england america', 'germany england america'), (85, 85, 85, 85, 'germany england america', 'germany england america'), (86, 86, 86, 86, 'germany england america', 'germany england america'), (87, 87, 87, 87, 'germany england america', 'germany england america'), (88, 88, 88, 88, 'germany england america', 'germany england america'), (89, 89, 89, 89, 'germany england america', 'germany england america'), (90, 90, 90, 90, 'germany england america', 'germany england america'), (91, 91, 91, 91, 'germany england america', 'germany england america'), (92, 92, 92, 92, 'germany england america', 'germany england america'), (93, 93, 93, 93, 'germany england america', 'germany england america'), (94, 94, 94, 94, 'germany england america', 'germany england america'), (95, 95, 95, 95, 'germany england america', 'germany england america'), (96, 96, 96, 96, 'germany england america', 'germany england america'), (97, 97, 97, 97, 'germany england america', 'germany england america'), (98, 98, 98, 98, 'germany england america', 'germany england america'), (99, 99, 99, 99, 'germany england america', 'germany england america'), (100, 100, 100, 100, 'germany england america', 'germany england america'), (101, 101, 101, 101, 'germany england america', 'germany england america'), (102, 102, 102, 102, 'germany england america', 'germany england america'), (103, 103, 103, 103, 'germany england america', 'germany england america'), (104, 104, 104, 104, 'germany england america', 'germany england america'), (105, 105, 105, 105, 'germany england america', 'germany england america'), (106, 106, 106, 106, 'germany england america', 'germany england america'), (107, 107, 107, 107, 'germany england america', 'germany england america'), (108, 108, 108, 108, 'germany england america', 'germany england america'), (109, 109, 109, 109, 'germany england america', 'germany england america'), (110, 110, 110, 110, 'germany england america', 'germany england america'), (111, 111, 111, 111, 'germany england america', 'germany england america'), (112, 112, 112, 112, 'germany england america', 'germany england america'), (113, 113, 113, 113, 'germany england america', 'germany england america'), (114, 114, 114, 114, 'germany england america', 'germany england america'), (115, 115, 115, 115, 'germany england america', 'germany england america'), (116, 116, 116, 116, 'germany england america', 'germany england america'), (117, 117, 117, 117, 'germany england america', 'germany england america'), (118, 118, 118, 118, 'germany england america', 'germany england america'), (119, 119, 119, 119, 'germany england america', 'germany england america'), (120, 120, 120, 120, 'germany england america', 'germany england america'), (121, 121, 121, 121, 'germany england america', 'germany england america'), (122, 122, 122, 122, 'germany england america', 'germany england america'), (123, 123, 123, 123, 'germany england america', 'germany england america'), (124, 124, 124, 124, 'germany england america', 'germany england america'), (125, 125, 125, 125, 'germany england america', 'germany england america'), (126, 126, 126, 126, 'germany england america', 'germany england america'), (127, 127, 127, 127, 'germany england america', 'germany england america'), (128, 128, 128, 128, 'germany england america', 'germany england america'), (1, 1, 1, 1, 'germany england america', 'germany england america'), (2, 2, 2, 2, 'germany england america', 'germany england america'), (3, 3, 3, 3, 'germany england america', 'germany england america'), (4, 4, 4, 4, 'germany england america', 'germany england america'), (5, 5, 5, 5, 'germany england america', 'germany england america'), (6, 6, 6, 6, 'germany england america', 'germany england america'), (7, 7, 7, 7, 'germany england america', 'germany england america'), (8, 8, 8, 8, 'germany england america', 'germany england america'), (9, 9, 9, 9, 'germany england america', 'germany england america'), (10, 10, 10, 10, 'germany england america', 'germany england america'), (11, 11, 11, 11, 'germany england america', 'germany england america'), (12, 12, 12, 12, 'germany england america', 'germany england america'), (13, 13, 13, 13, 'germany england america', 'germany england america'), (14, 14, 14, 14, 'germany england america', 'germany england america'), (15, 15, 15, 15, 'germany england america', 'germany england america'), (16, 16, 16, 16, 'germany england america', 'germany england america'), (17, 17, 17, 17, 'germany england america', 'germany england america'), (18, 18, 18, 18, 'germany england america', 'germany england america'), (19, 19, 19, 19, 'germany england america', 'germany england america'), (20, 20, 20, 20, 'germany england america', 'germany england america'), (21, 21, 21, 21, 'germany england america', 'germany england america'), (22, 22, 22, 22, 'germany england america', 'germany england america'), (23, 23, 23, 23, 'germany england america', 'germany england america'), (24, 24, 24, 24, 'germany england america', 'germany england america'), (25, 25, 25, 25, 'germany england america', 'germany england america'), (26, 26, 26, 26, 'germany england america', 'germany england america'), (27, 27, 27, 27, 'germany england america', 'germany england america'), (28, 28, 28, 28, 'germany england america', 'germany england america'), (29, 29, 29, 29, 'germany england america', 'germany england america'), (30, 30, 30, 30, 'germany england america', 'germany england america'), (31, 31, 31, 31, 'germany england america', 'germany england america'), (32, 32, 32, 32, 'germany england america', 'germany england america'), (33, 33, 33, 33, 'germany england america', 'germany england america'), (34, 34, 34, 34, 'germany england america', 'germany england america'), (35, 35, 35, 35, 'germany england america', 'germany england america'), (36, 36, 36, 36, 'germany england america', 'germany england america'), (37, 37, 37, 37, 'germany england america', 'germany england america'), (38, 38, 38, 38, 'germany england america', 'germany england america'), (39, 39, 39, 39, 'germany england america', 'germany england america'), (40, 40, 40, 40, 'germany england america', 'germany england america'), (41, 41, 41, 41, 'germany england america', 'germany england america'), (42, 42, 42, 42, 'germany england america', 'germany england america'), (43, 43, 43, 43, 'germany england america', 'germany england america'), (44, 44, 44, 44, 'germany england america', 'germany england america'), (45, 45, 45, 45, 'germany england america', 'germany england america'), (46, 46, 46, 46, 'germany england america', 'germany england america'), (47, 47, 47, 47, 'germany england america', 'germany england america'), (48, 48, 48, 48, 'germany england america', 'germany england america'), (49, 49, 49, 49, 'germany england america', 'germany england america'), (50, 50, 50, 50, 'germany england america', 'germany england america'), (51, 51, 51, 51, 'germany england america', 'germany england america'), (52, 52, 52, 52, 'germany england america', 'germany england america'), (53, 53, 53, 53, 'germany england america', 'germany england america'), (54, 54, 54, 54, 'germany england america', 'germany england america'), (55, 55, 55, 55, 'germany england america', 'germany england america'), (56, 56, 56, 56, 'germany england america', 'germany england america'), (57, 57, 57, 57, 'germany england america', 'germany england america'), (58, 58, 58, 58, 'germany england america', 'germany england america'), (59, 59, 59, 59, 'germany england america', 'germany england america'), (60, 60, 60, 60, 'germany england america', 'germany england america'), (61, 61, 61, 61, 'germany england america', 'germany england america'), (62, 62, 62, 62, 'germany england america', 'germany england america'), (63, 63, 63, 63, 'germany england america', 'germany england america'), (64, 64, 64, 64, 'germany england america', 'germany england america'), (65, 65, 65, 65, 'germany england america', 'germany england america'), (66, 66, 66, 66, 'germany england america', 'germany england america'), (67, 67, 67, 67, 'germany england america', 'germany england america'), (68, 68, 68, 68, 'germany england america', 'germany england america'), (69, 69, 69, 69, 'germany england america', 'germany england america'), (70, 70, 70, 70, 'germany england america', 'germany england america'), (71, 71, 71, 71, 'germany england america', 'germany england america'), (72, 72, 72, 72, 'germany england america', 'germany england america'), (73, 73, 73, 73, 'germany england america', 'germany england america'), (74, 74, 74, 74, 'germany england america', 'germany england america'), (75, 75, 75, 75, 'germany england america', 'germany england america'), (76, 76, 76, 76, 'germany england america', 'germany england america'), (77, 77, 77, 77, 'germany england america', 'germany england america'), (78, 78, 78, 78, 'germany england america', 'germany england america'), (79, 79, 79, 79, 'germany england america', 'germany england america'), (80, 80, 80, 80, 'germany england america', 'germany england america'), (81, 81, 81, 81, 'germany england america', 'germany england america'), (82, 82, 82, 82, 'germany england america', 'germany england america'), (83, 83, 83, 83, 'germany england america', 'germany england america'), (84, 84, 84, 84, 'germany england america', 'germany england america'), (85, 85, 85, 85, 'germany england america', 'germany england america'), (86, 86, 86, 86, 'germany england america', 'germany england america'), (87, 87, 87, 87, 'germany england america', 'germany england america'), (88, 88, 88, 88, 'germany england america', 'germany england america'), (89, 89, 89, 89, 'germany england america', 'germany england america'), (90, 90, 90, 90, 'germany england america', 'germany england america'), (91, 91, 91, 91, 'germany england america', 'germany england america'), (92, 92, 92, 92, 'germany england america', 'germany england america'), (93, 93, 93, 93, 'germany england america', 'germany england america'), (94, 94, 94, 94, 'germany england america', 'germany england america'), (95, 95, 95, 95, 'germany england america', 'germany england america'), (96, 96, 96, 96, 'germany england america', 'germany england america'), (97, 97, 97, 97, 'germany england america', 'germany england america'), (98, 98, 98, 98, 'germany england america', 'germany england america'), (99, 99, 99, 99, 'germany england america', 'germany england america'), (100, 100, 100, 100, 'germany england america', 'germany england america'), (101, 101, 101, 101, 'germany england america', 'germany england america'), (102, 102, 102, 102, 'germany england america', 'germany england america'), (103, 103, 103, 103, 'germany england america', 'germany england america'), (104, 104, 104, 104, 'germany england america', 'germany england america'), (105, 105, 105, 105, 'germany england america', 'germany england america'), (106, 106, 106, 106, 'germany england america', 'germany england america'), (107, 107, 107, 107, 'germany england america', 'germany england america'), (108, 108, 108, 108, 'germany england america', 'germany england america'), (109, 109, 109, 109, 'germany england america', 'germany england america'), (110, 110, 110, 110, 'germany england america', 'germany england america'), (111, 111, 111, 111, 'germany england america', 'germany england america'), (112, 112, 112, 112, 'germany england america', 'germany england america'), (113, 113, 113, 113, 'germany england america', 'germany england america'), (114, 114, 114, 114, 'germany england america', 'germany england america'), (115, 115, 115, 115, 'germany england america', 'germany england america'), (116, 116, 116, 116, 'germany england america', 'germany england america'), (117, 117, 117, 117, 'germany england america', 'germany england america'), (118, 118, 118, 118, 'germany england america', 'germany england america'), (119, 119, 119, 119, 'germany england america', 'germany england america'), (120, 120, 120, 120, 'germany england america', 'germany england america'), (121, 121, 121, 121, 'germany england america', 'germany england america'), (122, 122, 122, 122, 'germany england america', 'germany england america'), (123, 123, 123, 123, 'germany england america', 'germany england america'), (124, 124, 124, 124, 'germany england america', 'germany england america'), (125, 125, 125, 125, 'germany england america', 'germany england america'), (126, 126, 126, 126, 'germany england america', 'germany england america'), (127, 127, 127, 127, 'germany england america', 'germany england america'), (128, 128, 128, 128, 'germany england america', 'germany england america'), (1, 1, 1, 1, 'germany england america', 'germany england america'), (2, 2, 2, 2, 'germany england america', 'germany england america'), (3, 3, 3, 3, 'germany england america', 'germany england america'), (4, 4, 4, 4, 'germany england america', 'germany england america'), (5, 5, 5, 5, 'germany england america', 'germany england america'), (6, 6, 6, 6, 'germany england america', 'germany england america'), (7, 7, 7, 7, 'germany england america', 'germany england america'), (8, 8, 8, 8, 'germany england america', 'germany england america'), (9, 9, 9, 9, 'germany england america', 'germany england america'), (10, 10, 10, 10, 'germany england america', 'germany england america'), (11, 11, 11, 11, 'germany england america', 'germany england america'), (12, 12, 12, 12, 'germany england america', 'germany england america'), (13, 13, 13, 13, 'germany england america', 'germany england america'), (14, 14, 14, 14, 'germany england america', 'germany england america'), (15, 15, 15, 15, 'germany england america', 'germany england america'), (16, 16, 16, 16, 'germany england america', 'germany england america'), (17, 17, 17, 17, 'germany england america', 'germany england america'), (18, 18, 18, 18, 'germany england america', 'germany england america'), (19, 19, 19, 19, 'germany england america', 'germany england america'), (20, 20, 20, 20, 'germany england america', 'germany england america'), (21, 21, 21, 21, 'germany england america', 'germany england america'), (22, 22, 22, 22, 'germany england america', 'germany england america'), (23, 23, 23, 23, 'germany england america', 'germany england america'), (24, 24, 24, 24, 'germany england america', 'germany england america'), (25, 25, 25, 25, 'germany england america', 'germany england america'), (26, 26, 26, 26, 'germany england america', 'germany england america'), (27, 27, 27, 27, 'germany england america', 'germany england america'), (28, 28, 28, 28, 'germany england america', 'germany england america'), (29, 29, 29, 29, 'germany england america', 'germany england america'), (30, 30, 30, 30, 'germany england america', 'germany england america'), (31, 31, 31, 31, 'germany england america', 'germany england america'), (32, 32, 32, 32, 'germany england america', 'germany england america'), (33, 33, 33, 33, 'germany england america', 'germany england america'), (34, 34, 34, 34, 'germany england america', 'germany england america'), (35, 35, 35, 35, 'germany england america', 'germany england america'), (36, 36, 36, 36, 'germany england america', 'germany england america'), (37, 37, 37, 37, 'germany england america', 'germany england america'), (38, 38, 38, 38, 'germany england america', 'germany england america'), (39, 39, 39, 39, 'germany england america', 'germany england america'), (40, 40, 40, 40, 'germany england america', 'germany england america'), (41, 41, 41, 41, 'germany england america', 'germany england america'), (42, 42, 42, 42, 'germany england america', 'germany england america'), (43, 43, 43, 43, 'germany england america', 'germany england america'), (44, 44, 44, 44, 'germany england america', 'germany england america'), (45, 45, 45, 45, 'germany england america', 'germany england america'), (46, 46, 46, 46, 'germany england america', 'germany england america'), (47, 47, 47, 47, 'germany england america', 'germany england america'), (48, 48, 48, 48, 'germany england america', 'germany england america'), (49, 49, 49, 49, 'germany england america', 'germany england america'), (50, 50, 50, 50, 'germany england america', 'germany england america'), (51, 51, 51, 51, 'germany england america', 'germany england america'), (52, 52, 52, 52, 'germany england america', 'germany england america'), (53, 53, 53, 53, 'germany england america', 'germany england america'), (54, 54, 54, 54, 'germany england america', 'germany england america'), (55, 55, 55, 55, 'germany england america', 'germany england america'), (56, 56, 56, 56, 'germany england america', 'germany england america'), (57, 57, 57, 57, 'germany england america', 'germany england america'), (58, 58, 58, 58, 'germany england america', 'germany england america'), (59, 59, 59, 59, 'germany england america', 'germany england america'), (60, 60, 60, 60, 'germany england america', 'germany england america'), (61, 61, 61, 61, 'germany england america', 'germany england america'), (62, 62, 62, 62, 'germany england america', 'germany england america'), (63, 63, 63, 63, 'germany england america', 'germany england america'), (64, 64, 64, 64, 'germany england america', 'germany england america'), (65, 65, 65, 65, 'germany england america', 'germany england america'), (66, 66, 66, 66, 'germany england america', 'germany england america'), (67, 67, 67, 67, 'germany england america', 'germany england america'), (68, 68, 68, 68, 'germany england america', 'germany england america'), (69, 69, 69, 69, 'germany england america', 'germany england america'), (70, 70, 70, 70, 'germany england america', 'germany england america'), (71, 71, 71, 71, 'germany england america', 'germany england america'), (72, 72, 72, 72, 'germany england america', 'germany england america'), (73, 73, 73, 73, 'germany england america', 'germany england america'), (74, 74, 74, 74, 'germany england america', 'germany england america'), (75, 75, 75, 75, 'germany england america', 'germany england america'), (76, 76, 76, 76, 'germany england america', 'germany england america'), (77, 77, 77, 77, 'germany england america', 'germany england america'), (78, 78, 78, 78, 'germany england america', 'germany england america'), (79, 79, 79, 79, 'germany england america', 'germany england america'), (80, 80, 80, 80, 'germany england america', 'germany england america'), (81, 81, 81, 81, 'germany england america', 'germany england america'), (82, 82, 82, 82, 'germany england america', 'germany england america'), (83, 83, 83, 83, 'germany england america', 'germany england america'), (84, 84, 84, 84, 'germany england america', 'germany england america'), (85, 85, 85, 85, 'germany england america', 'germany england america'), (86, 86, 86, 86, 'germany england america', 'germany england america'), (87, 87, 87, 87, 'germany england america', 'germany england america'), (88, 88, 88, 88, 'germany england america', 'germany england america'), (89, 89, 89, 89, 'germany england america', 'germany england america'), (90, 90, 90, 90, 'germany england america', 'germany england america'), (91, 91, 91, 91, 'germany england america', 'germany england america'), (92, 92, 92, 92, 'germany england america', 'germany england america'), (93, 93, 93, 93, 'germany england america', 'germany england america'), (94, 94, 94, 94, 'germany england america', 'germany england america'), (95, 95, 95, 95, 'germany england america', 'germany england america'), (96, 96, 96, 96, 'germany england america', 'germany england america'), (97, 97, 97, 97, 'germany england america', 'germany england america'), (98, 98, 98, 98, 'germany england america', 'germany england america'), (99, 99, 99, 99, 'germany england america', 'germany england america'), (100, 100, 100, 100, 'germany england america', 'germany england america'), (101, 101, 101, 101, 'germany england america', 'germany england america'), (102, 102, 102, 102, 'germany england america', 'germany england america'), (103, 103, 103, 103, 'germany england america', 'germany england america'), (104, 104, 104, 104, 'germany england america', 'germany england america'), (105, 105, 105, 105, 'germany england america', 'germany england america'), (106, 106, 106, 106, 'germany england america', 'germany england america'), (107, 107, 107, 107, 'germany england america', 'germany england america'), (108, 108, 108, 108, 'germany england america', 'germany england america'), (109, 109, 109, 109, 'germany england america', 'germany england america'), (110, 110, 110, 110, 'germany england america', 'germany england america'), (111, 111, 111, 111, 'germany england america', 'germany england america'), (112, 112, 112, 112, 'germany england america', 'germany england america'), (113, 113, 113, 113, 'germany england america', 'germany england america'), (114, 114, 114, 114, 'germany england america', 'germany england america'), (115, 115, 115, 115, 'germany england america', 'germany england america'), (116, 116, 116, 116, 'germany england america', 'germany england america'), (117, 117, 117, 117, 'germany england america', 'germany england america'), (118, 118, 118, 118, 'germany england america', 'germany england america'), (119, 119, 119, 119, 'germany england america', 'germany england america'), (120, 120, 120, 120, 'germany england america', 'germany england america'), (121, 121, 121, 121, 'germany england america', 'germany england america'), (122, 122, 122, 122, 'germany england america', 'germany england america'), (123, 123, 123, 123, 'germany england america', 'germany england america'), (124, 124, 124, 124, 'germany england america', 'germany england america'), (125, 125, 125, 125, 'germany england america', 'germany england america'), (126, 126, 126, 126, 'germany england america', 'germany england america'), (127, 127, 127, 127, 'germany england america', 'germany england america'), (128, 128, 128, 128, 'germany england america', 'germany england america'), (1, 1, 1, 1, 'norway sweden', 'norway sweden'), (2, 2, 2, 2, 'norway sweden', 'norway sweden'), (3, 3, 3, 3, 'norway sweden', 'norway sweden'), (4, 4, 4, 4, 'norway sweden', 'norway sweden'), (5, 5, 5, 5, 'norway sweden', 'norway sweden'))", "rowcount": 1029, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_53_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_53_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_53_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_53_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_54_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Invalid hex escape code encountered in string -> blob conversion of string \"A\\0\\0\\0BBBBBBBB\": \\0\\0\nLINE 1: insert into t1 values (NULL), ('A\\0\\0\\0BBBBBBBB'), (REPEAT(' ', 50000)...\n                                       ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_54_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,), (25,), (50000,), (50000,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'length(BLOB)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tlength(VARCHAR) -> BIGINT\n\tlength(BIT) -> BIGINT\n\tlength(ANY[]) -> BIGINT\n\nLINE 1: SELECT LENGTH(a) FROM t1; -- LENGTH\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_55_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a-4',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a-4',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a-4.5',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a-4',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_55_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a-5',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a-5',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_55_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a-1',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a-1',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a0',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a0',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_55_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a0.0',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a0.0',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_55_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a0.0000',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a0.0000',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_55_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('ab',), ('ab',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('ab',), ('ab',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_55_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1234562',), ('x',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1234562',), ('x',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_like does not exist!\nDid you mean \"regexp_replace\"?\nLINE 1: SELECT * FROM t1 WHERE REGEXP_LIKE(c1 || ' ' || c2, 'First.*')...\n                               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_56_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name dateadd does not exist!\nDid you mean \"date_add\"?\nLINE 1: insert into t1 values (dateadd(NULL, INTERVAL 1 DAY)); -- DATE...\n                               ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_56_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_56_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_56_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_56_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False, datetime.time(0, 0)))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"ts\"", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_57_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name t1 does not exist!\nDid you mean \"pg_tables\"?\nLINE 1: SELECT * FROM t1 WHERE mydate IS NULL AND DATEDIFF('d...\n                      ^", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name t1 does not exist!\nDid you mean \"pg_tables\"?\nLINE 1: SELECT * FROM t1 WHERE mydate IS NULL;\n                      ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "duckdb_57_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \")\"", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced table \"outr\" not found!\nCandidate tables: \"unnamed_subquery\"\nLINE 9: ) ON outr.pk = t3.pk AND t1.col_int_key = t3.pk AND t1.col_date_key IS NULL AND outr2.pk <> t3.pk;...\n             ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_57_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \")\"", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \")\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_58_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', \"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502      prefix(a, 'abc')     \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502       Projections: a      \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a>='abc' AND a<'abd' AND a\u2502\\n\u2502         IS NOT NULL       \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\"))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('abc',), ('abcd',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_58_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('abc',), ('abcd',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('abc',), ('abcd',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_59_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((10.0, 10.000000000000002, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((10.0, 10.000000000000002, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_59_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3.0, 3.9068905956085187, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0.33333333333333337, 0.25595802480981544, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_59_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((10.0, 16.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((10.0, 16.0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_59_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_59_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_59_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_59_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('http://www.foo.com/',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Invalid Input Error: Failed to parse format specifier %s: Unrecognized format for strftime/strptime: %s\nLINE 1: ...://www.foo.com/' ORDER BY ABS(strftime('%s', ts) - strftime('%s', '0000-00-00 ...\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_59_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-2, 2, -2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Type with name unsigned does not exist!\nDid you mean \"union\"?", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_59_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 5, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-2, 2, -2))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_59_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-32.0, 2.13598703592091e+96, -32.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-32.0, 2.13598703592091e+96, -32.0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_60_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('-4939092'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('-4939092'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_60_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_60_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_60_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_60_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((9223372036854774784,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Type DOUBLE with value 9.223372036854775e+18 can't be cast because the value is out of range for the destination type INT32\nLINE 1: SELECT CAST(POW(2,63)-1024 AS INTEGER) AS pp; ...\n               ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_60_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-9223372036854775808,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-9223372036854775808,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_60_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_60_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_60_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_60_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_61_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('0cc175b9c0f1b6a831c399e269772661', '3063633137356239633066316236613833316333393965323639373732363631'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('0cc175b9c0f1b6a831c399e269772661', '3063633137356239633066316236613833316333393965323639373732363631'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "duckdb_61_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_61_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('5d41402abc4b2a76b9719d911017c592',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5d41402abc4b2a76b9719d911017c592',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_61_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('physical_plan', \"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502'5d41402abc4b2a76b9719d9110\u2502\\n\u2502          17c592'          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         DUMMY_SCAN        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\"))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', \"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502'5d41402abc4b2a76b9719d9110\u2502\\n\u2502          17c592'          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         DUMMY_SCAN        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\"))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_61_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((46,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'length(BLOB)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tlength(VARCHAR) -> BIGINT\n\tlength(BIT) -> BIGINT\n\tlength(ANY[]) -> BIGINT\n\nLINE 1: select length(UNHEX(MD5('abrakadabra')));\n               ^", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 1}
{"sql_id": "duckdb_61_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_61_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_61_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_62_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2004, 1, 6, 12, 34),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2004, 1, 6, 12, 34),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_62_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2004, 1, 6, 12, 34),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2004, 1, 6, 12, 34),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_62_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,), (2,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Cannot combine types of INTEGER and VARCHAR - an explicit cast is required\nLINE 1: SELECT LEAST(a, (SELECT b FROM t1 LIMIT 1)) FROM t1 UNI...\n                        ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_62_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,), (2,), (1,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_63_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, 0, 3, 1.6, 3, 3, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, 0, 3, 1.6, 3, 3, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_63_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3, 1, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3, 1, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_63_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 1, 7, 3), (3, 3, 7, 3), (2, None, None, None))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 1, 7, 3), (3, 3, 7, 3), (2, None, None, None))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_64_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('000002',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT strftime('%f', '1997-12-31 23:59:59.000...\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_64_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT CAST(STRFTIME('%s', '1997-12-31 23:59:59.000...\n                    ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_64_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'datediff(TIMESTAMP, \"NULL\")'. You might need to add explicit type casts.\n\tCandidate functions:\n\tdatediff(VARCHAR, DATE, DATE) -> BIGINT\n\tdatediff(VARCHAR, TIMESTAMP, TIMESTAMP) -> BIGINT\n\tdatediff(VARCHAR, TIME, TIME) -> BIGINT\n\tdatediff(VARCHAR, TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH TIME ZONE) -> BIGINT\n\nLINE 1: SELECT DATEDIFF(TIMESTAMP '1997-11-30 23:59:59...\n               ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_64_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(3, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name dateadd does not exist!\nDid you mean \"date_add\"?\nLINE 1: SELECT DATEADD('day', 03, DATE '0001-01-01'); ...\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_64_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1997, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(1997, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1996, 12, 31, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name makedate does not exist!\nDid you mean \"make_date\"?\nLINE 1: SELECT MAKEDATE(1997, 0); -- MAKEDATE\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_64_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(9999, 12, 31, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('10000-12-29 00:00:00',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('10000-01-01 00:00:00',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('10000-01-01 00:00:00',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(100, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(100, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1997, 12, 30, 22, 58, 57, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"HOUR_SECOND\"", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_64_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1, seconds=82738),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name subtime does not exist!\nDid you mean \"substring\"?\nLINE 1: SELECT SUBTIME(TIMESTAMP '1997-12-31 23:59:59....\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_64_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 0, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name subtime does not exist!\nDid you mean \"substring\"?\nLINE 1: SELECT SUBTIME(TIME '01:00:00.999999', TIME '0...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_64_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(1, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types '-(TIME, TIME)'. You might need to add explicit type casts.\n\tCandidate functions:\n\t-(TINYINT) -> TINYINT\n\t-(TINYINT, TINYINT) -> TINYINT\n\t-(SMALLINT) -> SMALLINT\n\t-(SMALLINT, SMALLINT) -> SMALLINT\n\t-(INTEGER) -> INTEGER\n\t-(INTEGER, INTEGER) -> INTEGER\n\t-(BIGINT) -> BIGINT\n\t-(BIGINT, BIGINT) -> BIGINT\n\t-(HUGEINT) -> HUGEINT\n\t-(HUGEINT, HUGEINT) -> HUGEINT\n\t-(FLOAT) -> FLOAT\n\t-(FLOAT, FLOAT) -> FLOAT\n\t-(DOUBLE) -> DOUBLE\n\t-(DOUBLE, DOUBLE) -> DOUBLE\n\t-(DECIMAL) -> DECIMAL\n\t-(DECIMAL, DECIMAL) -> DECIMAL\n\t-(UTINYINT) -> UTINYINT\n\t-(UTINYINT, UTINYINT) -> UTINYINT\n\t-(USMALLINT) -> USMALLINT\n\t-(USMALLINT, USMALLINT) -> USMALLINT\n\t-(UINTEGER) -> UINTEGER\n\t-(UINTEGER, UINTEGER) -> UINTEGER\n\t-(UBIGINT) -> UBIGINT\n\t-(UBIGINT, UBIGINT) -> UBIGINT\n\t-(UHUGEINT) -> UHUGEINT\n\t-(UHUGEINT, UHUGEINT) -> UHUGEINT\n\t-(DATE, DATE) -> BIGINT\n\t-(DATE, INTEGER) -> DATE\n\t-(TIMESTAMP, TIMESTAMP) -> INTERVAL\n\t-(INTERVAL, INTERVAL) -> INTERVAL\n\t-(DATE, INTERVAL) -> TIMESTAMP\n\t-(TIME, INTERVAL) -> TIME\n\t-(TIMESTAMP, INTERVAL) -> TIMESTAMP\n\t-(TIME WITH TIME ZONE, INTERVAL) -> TIME WITH TIME ZONE\n\t-(INTERVAL) -> INTERVAL\n\t-(TIMESTAMP WITH TIME ZONE, INTERVAL) -> TIMESTAMP WITH TIME ZONE\n\t-(TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH TIME ZONE) -> INTERVAL\n\nLINE 1: SELECT TIME '02:01:01.999999' - TIME '01:01:01.999999'; -- SUBTIME\n                                      ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_64_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=366, seconds=86399, microseconds=999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_diff does not exist!\nDid you mean \"date_diff\"?\nLINE 1: SELECT TIME_DIFF(TIMESTAMP '1997-01-01 23:59:5...\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_64_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=1, seconds=82737, microseconds=999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_diff does not exist!\nDid you mean \"date_diff\"?\nLINE 1: SELECT TIME_DIFF(TIMESTAMP '1997-12-31 23:59:5...\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_64_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1, seconds=86399, microseconds=999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_diff does not exist!\nDid you mean \"date_diff\"?\nLINE 1: SELECT TIME_DIFF(TIMESTAMP '2005-01-11 15:48:4...\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_65_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_65_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(20, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(20, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 1, 1, 1, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'2001-12-01 01:01:01.999999'\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_65_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2001, 10, 1, 1, 1, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2001, 10, 1, 1, 1, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 20, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 20, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((31,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((31,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_65_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:59:59.000001',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'1997-12-31 23:59:59.000001'\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_65_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-31), None, None, datetime.timedelta(days=-11354)), (datetime.timedelta(days=1096, seconds=3661, microseconds=999999), datetime.timedelta(seconds=86338), datetime.timedelta(days=-1, seconds=62), datetime.timedelta(days=-10227, seconds=86339, microseconds=999999)), (datetime.timedelta(days=-1097, seconds=82738, microseconds=1), datetime.timedelta(days=-1, seconds=62), datetime.timedelta(seconds=86338), datetime.timedelta(days=-11324, seconds=82740)), (None, None, None, None))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_diff does not exist!\nDid you mean \"date_diff\"?\nLINE 1: SELECT TIME_DIFF(t1, t4) AS ttt, TIME_DIFF(t2,...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_65_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2003, 1, 2, 10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: select strftime('%Y-%m-%d %H:%M:%S.%f', '2003-...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_65_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1), '00:00:00'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_diff does not exist!\nDid you mean \"date_diff\"?\nLINE 1: SELECT TIME_DIFF('2008-09-29 20:10:10','2008-0...\n               ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "duckdb_65_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Cannot compare values of type INTERVAL and type VARCHAR - an explicit cast is required\nLINE 1: ...10' - TIMESTAMP '2008-09-30 20:10:10') > strftime('%H:%M:%S', TIMESTAMP '1970-...\n                                                  ^", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_65_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "duckdb_66_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'23:59:59'\"", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "duckdb_66_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_66_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_66_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'strftime(STRING_LITERAL, TIME)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT strftime('%H:%M:%S', CAST('01:00:01' AS...\n               ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_66_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_67_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2', 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name elt does not exist!\nDid you mean \"element_at\"?\nLINE 1: SELECT ELT(2,1),POSITION('a' IN 'a,b,c') + 1; ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "duckdb_67_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 0, Decimal('0.0'), 0.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('b', 1, Decimal('1.0'), 10.0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_67_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 0, Decimal('0.0'), 0.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 1: SELECT COALESCE(CASE WHEN \"a\" IS NULL THEN NULL ELSE \"a\" END, 0),...\n                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_67_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'one'), (2, 'one'), (4, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name elt does not exist!\nDid you mean \"element_at\"?\nLINE 1: SELECT one.id, ELT(two.val + 1, 'one', 'two') FROM t1 ...\n                       ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_67_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 'one'), (2, 'one'), (4, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 'one'), (2, 'one'), (4, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_68_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16\";\"0\";\"4\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16\";\"0\";\"4\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_68_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\";\"0\";\"4\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16\";\"0\";\"4\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 4, "FN": 0}
{"sql_id": "duckdb_68_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16\";\"0\";\"4',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16\";\"0\";\"4\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_68_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('</a>',), ('</a>..........................',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'rpad(STRING_LITERAL, BIGINT, STRING_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\trpad(VARCHAR, INTEGER, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT CONCAT(\"</a>\",RPAD('',(55-LENGTH(title)),'.')) from t...\n                             ^", "exec_able": false}}, "TP": 3, "FP": 2, "FN": 0}
{"sql_id": "duckdb_69_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, True, True, False, False, True, -1, 1, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT 0=0,1>0,1>=1,1<0,1<=0,1<>0,STRCMP('abc','abcd'),STRCMP('b','a'),ST...\n                                          ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_69_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('abc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('abc',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_70_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('5',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('11',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('11',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_70_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_70_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_70_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('5.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('5.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18446744073709551615,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18446744073709551615,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_27", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_70_28", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_1_33", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_10_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((200,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((200,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_12_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(([1, 2, 3],))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_12_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 3), (3, 4), (3, 5))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Duplicate alias \"generate_series\" in query!", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_12_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1), (1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (2, 4))", "rowcount": 8, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(([1, 2], [1, 2, 3, 4]))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_2_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_2_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_3_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name current_timestamp does not exist!\nDid you mean \"current_localtimestamp\"?\nLINE 1: SELECT current_timestamp() = NOW(); -- NOW\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_5_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(([],))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(([],))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_6_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name sequence does not exist!\nDid you mean \"has_sequence_privilege\"?\nLINE 1: CREATE TABLE simple1 AS SELECT sequence(1, 200) AS id;\n                                       ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_6_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_6_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name extremely_skewed does not exist!\nDid you mean \"sqlite_temp_master\"?", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name extremely_skewed does not exist!\nDid you mean \"sqlite_temp_master\"?", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_6_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name sequence does not exist!\nDid you mean \"has_sequence_privilege\"?\nLINE 1: CREATE TABLE wide AS SELECT sequence(1, 2) AS id, lpad('', 320000, ...\n                                    ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "duckdb_6_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_6_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_7_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types '%(STRUCT(generate_series BIGINT), INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\t%(TINYINT, TINYINT) -> TINYINT\n\t%(SMALLINT, SMALLINT) -> SMALLINT\n\t%(INTEGER, INTEGER) -> INTEGER\n\t%(BIGINT, BIGINT) -> BIGINT\n\t%(HUGEINT, HUGEINT) -> HUGEINT\n\t%(FLOAT, FLOAT) -> FLOAT\n\t%(DOUBLE, DOUBLE) -> DOUBLE\n\t%(DECIMAL, DECIMAL) -> DECIMAL\n\t%(UTINYINT, UTINYINT) -> UTINYINT\n\t%(USMALLINT, USMALLINT) -> USMALLINT\n\t%(UINTEGER, UINTEGER) -> UINTEGER\n\t%(UBIGINT, UBIGINT) -> UBIGINT\n\t%(UHUGEINT, UHUGEINT) -> UHUGEINT\n\nLINE 1: INSERT INTO pagg_tab SELECT i % 20, i % 30, LPAD(CAST(i % 12 AS VARCH...\n                                      ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "duckdb_7_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((30000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((30000,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_7_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, 0, ['0002', '0000'], 1000), (1, 1000, ['0001', '0003'], 1000), (2, 2000, ['0000', '0002'], 1000), (10, 0, ['0000', '0002'], 1000), (11, 1000, ['0003', '0001'], 1000), (12, 2000, ['0000', '0002'], 1000), (20, 0, ['0000', '0002'], 1000), (21, 1000, ['0003', '0001'], 1000), (22, 2000, ['0000', '0002'], 1000))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 0, ['0002', '0000'], 1000), (1, 1000, ['0001', '0003'], 1000), (2, 2000, ['0000', '0002'], 1000), (10, 0, ['0000', '0002'], 1000), (11, 1000, ['0003', '0001'], 1000), (12, 2000, ['0000', '0002'], 1000), (20, 0, ['0000', '0002'], 1000), (21, 1000, ['0003', '0001'], 1000), (22, 2000, ['0000', '0002'], 1000))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_8_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((300,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types '%(STRUCT(generate_series BIGINT), INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\t%(TINYINT, TINYINT) -> TINYINT\n\t%(SMALLINT, SMALLINT) -> SMALLINT\n\t%(INTEGER, INTEGER) -> INTEGER\n\t%(BIGINT, BIGINT) -> BIGINT\n\t%(HUGEINT, HUGEINT) -> HUGEINT\n\t%(FLOAT, FLOAT) -> FLOAT\n\t%(DOUBLE, DOUBLE) -> DOUBLE\n\t%(DECIMAL, DECIMAL) -> DECIMAL\n\t%(UTINYINT, UTINYINT) -> UTINYINT\n\t%(USMALLINT, USMALLINT) -> USMALLINT\n\t%(UINTEGER, UINTEGER) -> UINTEGER\n\t%(UBIGINT, UBIGINT) -> UBIGINT\n\t%(UHUGEINT, UHUGEINT) -> UHUGEINT\n\nLINE 1: ...FROM generate_series(0, 599) i WHERE i % 2 = 0;\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 2}
{"sql_id": "duckdb_8_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((200,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((200,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 2}
{"sql_id": "duckdb_9_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Sequence with name seq3 does not exist!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Sequence with name seq3 does not exist!", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}

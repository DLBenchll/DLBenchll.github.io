{"sql_id": "monetdb_100_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_100_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '2007-12-31 23:59:59' unknown\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_100_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_100_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('W MM YYYY',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('W MM YYYY',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_100_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:59:59',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_100_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2003, 1, 3, 0, 0, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_100_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((89,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!types sec_interval(13,0) and month_interval(32,0) are not equal\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "monetdb_100_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected IDENT in: \"because\"\n!42000!syntax error, unexpected IDENT in: \"which\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected INTO in: \"into\"\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected IDENT in: \"this\"\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "monetdb_101_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "monetdb_101_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_102_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "monetdb_102_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!types date(0,0) and timestamptz(7,0) are not equal for column 'a'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!types date(0,0) and timestamptz(7,0) are not equal for column 'a'\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "monetdb_102_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "monetdb_102_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!types date(0,0) and timestamptz(7,0) are not equal for column 'a'\n", "exec_able": false}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "monetdb_102_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!types date(0,0) and timestamptz(7,0) are not equal for column 'a'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!types date(0,0) and timestamptz(7,0) are not equal for column 'a'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "monetdb_102_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S01!CREATE TABLE: name 't1' already in use\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S01!CREATE TABLE: name 't1' already in use\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_102_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!types date(0,0) and sec_interval(13,0) are not equal for column 'f1'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Unexpected symbol (\\)\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 1}
{"sql_id": "monetdb_102_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_2_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT, expecting AS in: \"with recursive qn\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT, expecting AS in: \"with recursive qn\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_3_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('NO',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'YES' unknown\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_4_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!CHARACTER VARYING needs a mandatory length specification in: \"explain select 1 from t1 where a = 9223372036854775807 and trim(cast(a as varcha\"\n!42000!syntax error, unexpected ')' in: \")\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!CHARACTER VARYING needs a mandatory length specification in: \"explain select 1 from t1 where a = 9223372036854775807 and trim(cast(a as varcha\"\n!42000!syntax error, unexpected ')' in: \")\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_4_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!CHARACTER VARYING needs a mandatory length specification in: \"explain select 1 from t1 where a = 9223372036854775806 and trim(cast(a as varcha\"\n!42000!syntax error, unexpected ')' in: \")\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!CHARACTER VARYING needs a mandatory length specification in: \"explain select 1 from t1 where a = 9223372036854775806 and trim(cast(a as varcha\"\n!42000!syntax error, unexpected ')' in: \")\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_4_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!CHARACTER VARYING needs a mandatory length specification in: \"explain select 1 from t1 where a = 9223372036854775805 and trim(cast(a as varcha\"\n!42000!syntax error, unexpected ')' in: \")\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!CHARACTER VARYING needs a mandatory length specification in: \"explain select 1 from t1 where a = 9223372036854775805 and trim(cast(a as varcha\"\n!42000!syntax error, unexpected ')' in: \")\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_4_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!CHARACTER VARYING needs a mandatory length specification in: \"explain select 1 from t1 where a = 0 and trim(cast(a as varchar)\"\n!42000!syntax error, unexpected ')' in: \")\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!CHARACTER VARYING needs a mandatory length specification in: \"explain select 1 from t1 where a = 0 and trim(cast(a as varchar)\"\n!42000!syntax error, unexpected ')' in: \")\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_4_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_4_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "monetdb_4_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ')', expecting ',' in: \"select * from t1 where coalesce(a)\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_6_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S01!CREATE TABLE: name 't1' already in use\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S01!CREATE TABLE: name 't1' already in use\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_6_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S01!CREATE TABLE: name 'head' already in use\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S01!CREATE TABLE: name 'head' already in use\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_6_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S01!CREATE TABLE: name 'tail' already in use\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S01!CREATE TABLE: name 'tail' already in use\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_6_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Unexpected symbol (!)\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_6_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_6_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_7_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc', 3), ('\u07f0', 2), ('\u02ae', 2), ('', 0), ('50515253', 8), ('31', 2), ('h31', 3), ('2805', 4))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc', 3), ('\u07f0', 2), ('\u02ae', 2), ('', 0), ('50515253', 8), ('31', 2), ('h31', 3), ('2805', 4))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_7_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_7_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc', 'h\u04bc525252525252525252'), ('\u07f0', '\u07f05252525252525252525'), ('\u02ae', '\u02ae5252525252525252525'), ('', '52525252525252525252'), ('50515253', '50515253525252525252'), ('31', '31525252525252525252'), ('h31', 'h3152525252525252525'), ('2805', '28055252525252525252'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 9, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_7_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_7_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_7_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_7_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_7_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_7_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('h315253', 'h315253'), ('h31525352', 'h31525352'), ('h3152535252', 'h3152535252'), ('h315253525252', 'h315253525252'), ('52h315253', '52h315253'), ('5252h315253', '5252h315253'), ('525252h315253', '525252h315253'), ('   h315253   ', 'h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('h315253', 'h315253'), ('h31525352', 'h31525352'), ('h3152535252', 'h3152535252'), ('h315253525252', 'h315253525252'), ('52h315253', '52h315253'), ('5252h315253', '5252h315253'), ('525252h315253', '525252h315253'), ('   h315253   ', 'h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_71_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1973, 11, 29, 21, 33, 9),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1973, 11, 29, 21, 33, 9),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_71_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1977, 6, 7, 21, 44, 50),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected STRING, expecting IDENT or sqlINT in: \"select timestamp('1970-01-01 00:00:00'\"\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_71_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 0, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 0, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_72_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_2:void := querylog.define(\"explain select * from t where x || x = \\\\\\\\\\'XX\\\\\\\\\\';\":str, \"default_pipe\":str, 26:int);',), ('barrier X_95:bit := language.dataflow();',), ('    X_30:bat[:str] := bat.new(nil:str);',), ('    X_36:bat[:int] := bat.new(nil:int);',), ('    X_34:bat[:int] := bat.new(nil:int);',), ('    X_33:bat[:str] := bat.new(nil:str);',), ('    X_32:bat[:str] := bat.new(nil:str);',), ('    X_5:int := sql.mvc();',), ('    X_9:bat[:str] := sql.bind(X_5:int, \"sys\":str, \"t\":str, \"x\":str, 0:int);',), ('    X_19:bat[:str] := batcalc.+(X_9:bat[:str], X_9:bat[:str]);',), ('    C_6:bat[:oid] := sql.tid(X_5:int, \"sys\":str, \"t\":str);',), ('    C_26:bat[:oid] := algebra.thetaselect(X_19:bat[:str], C_6:bat[:oid], \"XX\":str, \"==\":str);',), ('    X_28:bat[:str] := algebra.projection(C_26:bat[:oid], X_9:bat[:str]);',), ('    X_37:bat[:str] := bat.append(X_30:bat[:str], \"sys.t\":str);',), ('    X_39:bat[:str] := bat.append(X_32:bat[:str], \"x\":str);',), ('    X_40:bat[:str] := bat.append(X_33:bat[:str], \"varchar\":str);',), ('    X_42:bat[:int] := bat.append(X_34:bat[:int], 10:int);',), ('    X_44:bat[:int] := bat.append(X_36:bat[:int], 0:int);',), ('    language.pass(X_9:bat[:str]);',), ('exit X_95:bit;',), ('    sql.resultSet(X_37:bat[:str], X_39:bat[:str], X_40:bat[:str], X_42:bat[:int], X_44:bat[:int], X_28:bat[:str]);',), ('end user.s2_1;',), ('#inline               actions= 0 time=1 usec ',), ('#remap                actions= 1 time=9 usec ',), ('#costmodel            actions= 1 time=0 usec ',), ('#coercion             actions= 0 time=0 usec ',), ('#evaluate             actions= 2 time=8 usec ',), ('#emptybind            actions= 1 time=3 usec ',), ('#pushselect           actions= 2 time=3 usec ',), ('#aliases              actions= 4 time=1 usec ',), ('#mergetable           actions= 0 time=8 usec ',), ('#deadcode             actions= 2 time=2 usec ',), ('#aliases              actions= 0 time=0 usec ',), ('#constants            actions= 3 time=2 usec ',), ('#commonTerms          actions= 0 time=1 usec ',), ('#projectionpath       actions= 0 time=1 usec ',), ('#deadcode             actions= 0 time=2 usec ',), ('#reorder              actions= 1 time=6 usec ',), ('#matpack              actions= 0 time=0 usec ',), ('#dataflow             actions= 1 time=6 usec ',), ('#multiplex            actions= 0 time=0 usec ',), ('#profiler             actions=1 time=0 usec ',), ('#candidates           actions=1 time=0 usec ',), ('#deadcode             actions= 0 time=2 usec ',), ('#wlc                  actions= 0 time=0 usec ',), ('#garbagecollector     actions= 1 time=13 usec ',), ('#total                actions=28 time=106 usec ',))", "rowcount": 48, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 48, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_74_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "monetdb_74_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((13,), (13,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_74_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_74_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Unexpected symbol (\\)\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_75_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "M0M29!INSERT INTO: PRIMARY KEY constraint 't1.t1_pk_pkey' violated\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "M0M29!INSERT INTO: PRIMARY KEY constraint 't1.t1_pk_pkey' violated\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_75_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 12, 12), (2, None, None))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 12, 12), (2, None, None))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "monetdb_76_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "M0M29!INSERT INTO: UNIQUE constraint 't1.t1_a_unique' violated\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT, expecting INTO in: \"insert ignore\"\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "monetdb_76_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 110, 210, 110, 210))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 110, 110, 210, 210))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "monetdb_76_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_77_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(12, 22, 22), datetime.date(1997, 1, 1), datetime.datetime(1997, 1, 2, 0, 0), '1997-01-01 12:22:22', 3, 7, 5))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(12, 22, 22), datetime.date(1997, 1, 1), datetime.datetime(1997, 1, 2, 0, 0), '1997-01-01 12:22:22', 3, 7, 5))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_78_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected IDENT in: \"it\"\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected sqlIN in: \"in\"\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected IDENT in: \"this\"\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "monetdb_79_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'timestamp_to_str(date,char)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'timestamp_to_str(date,char)'\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "monetdb_79_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'timestamp_to_str(date,char)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'timestamp_to_str(date,char)'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "monetdb_79_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('D DY WW',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!syntax error, unexpected IDENT in: \"i\"\n!42000!syntax error, unexpected IDENT in: \"here\"\n!42000!syntax error, unexpected IDENT in: \"which\"\n!42000!syntax error, unexpected IDENT in: \"here\"\n!42000!syntax error, unexpected IDENT in: \"which\"\n!42000!syntax error, unexpected IDENT in: \"which\"\n!42000!syntax error, unexpected TO in: \"to\"\n!42000!syntax error, unexpected IDENT in: \"which\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"even\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "monetdb_79_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('MM MON MONTH',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('D MON M',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_79_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('HH12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('HH12 MM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_8_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Unexpected symbol (\\)\n!42000!Unexpected symbol (\\)\n!42000!syntax error, unexpected IDENT in: \"n\"\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_8_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_8_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 0, 0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 2}
{"sql_id": "monetdb_8_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Unexpected symbol (\\)\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 0}
{"sql_id": "monetdb_8_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_8_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, 1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_8_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, 1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_8_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'compara(char,char)'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "monetdb_8_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_8_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('oe',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_80_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_80_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,int)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_80_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,int)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,int)'\n!42000!syntax error, unexpected STRING in: \"'.\n!</think>\n!\n!{'\"\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_80_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,int)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,int)'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_80_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,int)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected IDENT in: \"i\"\n!42000!syntax error, unexpected IDENT in: \"becomes\"\n!42000!syntax error, unexpected IDENT in: \"here\"\n!42000!syntax error, unexpected IDENT in: \"wait\"\n!42000!syntax error, unexpected IDENT in: \"wait\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"which\"\n!42000!syntax error, unexpected IDENT in: \"because\"\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "monetdb_80_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected IDENT in: \"which\"\n!42000!syntax error, unexpected IDENT in: \"becomes\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"becomes\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"would\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected IDENT in: \"this\"\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "monetdb_80_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_80_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_80_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_80_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_80_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_80_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_80_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_80_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_80_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'I LOVE SQL' unknown\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_80_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'I LOVE SQL in the morning' unknown\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_81_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 6, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_81_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((25165824,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_82_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(date,date)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IF in: \"select coalesce(d, d), ifnull(d, d), if\"\n", "exec_able": false}}, "TP": 5, "FP": 1, "FN": 0}
{"sql_id": "monetdb_84_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_84_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Unexpected symbol (\\)", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_84_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_85_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'ManyMegaByteBlck' unknown\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_85_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'ManyMegaByteBlck' unknown\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_85_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_85_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_85_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_86_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None, None, Decimal('1.1'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None, None, Decimal('1.1'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_86_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'field'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected SCOLON, expecting ')' or ',' in: \"select coalesce('a', coalesce('b', coalesce('c', null));\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_86_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S01!CREATE TABLE: name 't2' already in use\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S01!CREATE TABLE: name 't2' already in use\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_86_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S01!CREATE TABLE: name 't2' already in use\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S01!CREATE TABLE: name 't2' already in use\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_86_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S01!CREATE TABLE: name 't2' already in use\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S01!CREATE TABLE: name 't2' already in use\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_87_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_87_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaaaaaaaa,bbbbbbbbbb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such aggregate 'string_agg'\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_88_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'st_repeat(char,smallint)'\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_88_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((100,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'a' unknown\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_88_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2000,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "monetdb_88_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((100, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((100, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_89_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"create table t1 as select case when null is null then null else extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"create table t1 as select case when null is null then null else extract(epoch\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_9_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('this', 'is', 'a', 2, Decimal('2.0')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'ERROR' unknown\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "monetdb_9_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('A',), ('AA',), ('BBB',), ('a',), ('a',), ('aa',), ('aaa',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "22018!conversion of string 'a' to type bte failed.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_9_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('A',), ('AA',), ('BBB',), ('a',), ('a',), ('aa',), ('aaa',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('A',), ('AA',), ('BBB',), ('a',), ('a',), ('aa',), ('aaa',))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_9_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_9_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_2:void := querylog.define(\"explain select nullif(u, 1) from t1;\":str, \"default_pipe\":str, 32:int);',), ('    X_37:bat[:str] := bat.new(nil:str);',), ('    X_42:bat[:int] := bat.new(nil:int);',), ('    X_41:bat[:int] := bat.new(nil:int);',), ('    X_40:bat[:str] := bat.new(nil:str);',), ('    X_39:bat[:str] := bat.new(nil:str);',), ('    X_5:int := sql.mvc();',), ('    C_6:bat[:oid] := sql.tid(X_5:int, \"sys\":str, \"t1\":str);',), ('    X_9:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"u\":str, 0:int);',), ('    X_18:bat[:int] := algebra.projection(C_6:bat[:oid], X_9:bat[:int]);',), ('    X_21:bat[:bit] := batcalc.==(X_18:bat[:int], 1:int);',), ('    X_24:bat[:bit] := batcalc.isnil(X_21:bat[:bit]);',), ('    X_31:bat[:bit] := batcalc.ifthenelse(X_24:bat[:bit], false:bit, X_21:bat[:bit]);',), ('    X_35:bat[:int] := batcalc.ifthenelse(X_31:bat[:bit], nil:int, X_18:bat[:int]);',), ('    X_43:bat[:str] := bat.append(X_37:bat[:str], \"sys.L2\":str);',), ('    X_45:bat[:str] := bat.append(X_39:bat[:str], \"L2\":str);',), ('    X_47:bat[:str] := bat.append(X_40:bat[:str], \"int\":str);',), ('    X_49:bat[:int] := bat.append(X_41:bat[:int], 32:int);',), ('    X_51:bat[:int] := bat.append(X_42:bat[:int], 0:int);',), ('    sql.resultSet(X_43:bat[:str], X_45:bat[:str], X_47:bat[:str], X_49:bat[:int], X_51:bat[:int], X_35:bat[:int]);',), ('end user.s2_1;',), ('# optimizer.mitosis()',), ('# optimizer.dataflow()',), ('#inline               actions= 0 time=0 usec ',), ('#remap                actions= 5 time=18 usec ',), ('#costmodel            actions= 1 time=0 usec ',), ('#coercion             actions= 2 time=2 usec ',), ('#evaluate             actions= 4 time=7 usec ',), ('#emptybind            actions= 1 time=3 usec ',), ('#pushselect           actions= 0 time=1 usec ',), ('#aliases              actions= 5 time=2 usec ',), ('#mergetable           actions= 0 time=9 usec ',), ('#deadcode             actions= 2 time=2 usec ',), ('#aliases              actions= 0 time=0 usec ',), ('#constants            actions= 4 time=2 usec ',), ('#commonTerms          actions= 1 time=2 usec ',), ('#projectionpath       actions= 0 time=1 usec ',), ('#deadcode             actions= 1 time=2 usec ',), ('#reorder              actions= 1 time=7 usec ',), ('#matpack              actions= 0 time=1 usec ',), ('#multiplex            actions= 0 time=0 usec ',), ('#profiler             actions=1 time=1 usec ',), ('#candidates           actions=1 time=0 usec ',), ('#deadcode             actions= 0 time=2 usec ',), ('#wlc                  actions= 0 time=1 usec ',), ('#garbagecollector     actions= 1 time=14 usec ',), ('#total                actions=26 time=110 usec ',))", "rowcount": 48, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_9_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('144.54'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('144.54'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_9_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((6, 56))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ')', expecting END in: \"select min(case when (y - x) > 5 then y else null)\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_9_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, False))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected '[', expecting SCOLON in: \"select case when nullif(5,5) is null then 1 else 0 end as [\"\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "monetdb_9_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, '2005-03-05 05:20:00.000000', 'Day 3'), (2, '2005-03-05 05:20:00.000000', 'Day 2'), (1, '2005-03-05 05:20:00.000000', 'Day 1'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected SECOND, expecting AS in: \"select id, case when date is null then '-' else cast(timestamp '1970-01-01 00:00\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "monetdb_9_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, '2005-03-05 05:20:00.000000', 'Day 3'), (2, '2005-03-05 05:20:00.000000', 'Day 2'), (1, '2005-03-05 05:20:00.000000', 'Day 1'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Interval type miss match '@date'\n!42000!syntax error, unexpected CLOB in: \"string\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "monetdb_9_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1234567890123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_9_27", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1234567890123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1234567890123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "monetdb_9_29", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2001.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected YEAR in: \"select avg(case when year\"\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 2}
{"sql_id": "monetdb_90_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "22007!Incorrect date value (0000-01-01) in: \"select sql_add(date '0000-01-01',\"\n!42000!syntax error, unexpected INTERVAL in: \"interval\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "22007!Incorrect date value (0000-01-01) in: \"select sql_add(date '0000-01-01',\"\n!42000!syntax error, unexpected INTERVAL in: \"interval\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_90_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "22007!Incorrect date value (0000-01-01) in: \"select sql_add(date '0000-01-01',\"\n!42000!syntax error, unexpected INTERVAL in: \"interval\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "22007!Incorrect date value (0000-01-01) in: \"select sql_add(date '0000-01-01',\"\n!42000!syntax error, unexpected INTERVAL in: \"interval\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_91_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_91_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((120000,), (12000,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_92_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "42000!Unexpected symbol (\\)", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_96_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT, expecting ')' or ',' in: \"select rpad(null, 5, ''x\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_96_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'x' unknown\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_96_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_96_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'x' unknown\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_96_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Illegal argument: pad string is empty\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_96_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Unexpected symbol (:)\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_96_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_96_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_96_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Illegal argument: pad string is empty\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Illegal argument: pad string is empty\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_96_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'x' unknown\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_96_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Illegal argument: pad string is empty\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Illegal argument: pad string is empty\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_96_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_96_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_96_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('axyxy',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'pad'\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_96_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('I LOVE SQL          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'I LOVE SQL' unknown\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_96_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_97_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_1:void := querylog.define(\"explain select * from t1 where (t1.a in (select t3.a from t1 t3)) is null;\":str, \"default_pipe\":str, 70:int);',), ('barrier X_149:bit := language.dataflow();',), ('    X_45:bat[:int] := bat.new(nil:int);',), ('    X_4:int := sql.mvc();',), ('    C_5:bat[:oid] := sql.tid(X_4:int, \"sys\":str, \"t1\":str);',), ('    X_8:bat[:int] := sql.bind(X_4:int, \"sys\":str, \"t1\":str, \"a\":str, 0:int);',), ('    X_17:bat[:int] := algebra.projection(C_5:bat[:oid], X_8:bat[:int]);',), ('    (X_32:bat[:oid], C_33:bat[:oid], X_34:bat[:lng]) := group.groupdone(X_17:bat[:int]);',), ('    X_35:bat[:int] := algebra.projection(C_33:bat[:oid], X_17:bat[:int]);',), ('    (X_36:bat[:oid], X_37:bat[:oid]) := algebra.join(X_17:bat[:int], X_35:bat[:int], nil:BAT, nil:BAT, false:bit, nil:lng);',), ('    X_44:bat[:int] := algebra.projection(X_36:bat[:oid], X_17:bat[:int]);',), ('    C_42:bat[:oid] := bat.mirror(X_17:bat[:int]);',), ('    C_43:bat[:oid] := algebra.difference(C_42:bat[:oid], X_36:bat[:oid], nil:BAT, nil:BAT, false:bit, nil:lng);',), ('    X_18:bat[:int] := sql.bind(X_4:int, \"sys\":str, \"t1\":str, \"b\":str, 0:int);',), ('    X_24:bat[:int] := algebra.projection(C_5:bat[:oid], X_18:bat[:int]);',), ('    X_47:bat[:int] := bat.append(X_45:bat[:int], X_44:bat[:int], true:bit);',), ('    X_49:bat[:int] := algebra.projection(C_43:bat[:oid], X_17:bat[:int]);',), ('    X_50:bat[:int] := bat.append(X_47:bat[:int], X_49:bat[:int], true:bit);',), ('    X_52:bat[:int] := bat.new(nil:int);',), ('    X_51:bat[:int] := algebra.projection(X_36:bat[:oid], X_24:bat[:int]);',), ('    X_53:bat[:int] := bat.append(X_52:bat[:int], X_51:bat[:int], true:bit);',), ('    X_54:bat[:int] := algebra.projection(C_43:bat[:oid], X_24:bat[:int]);',), ('    X_55:bat[:int] := bat.append(X_53:bat[:int], X_54:bat[:int], true:bit);',), ('    X_57:bat[:int] := bat.new(nil:int);',), ('    X_56:bat[:int] := algebra.projection(X_37:bat[:oid], X_35:bat[:int]);',), ('    X_58:bat[:int] := bat.append(X_57:bat[:int], X_56:bat[:int], true:bit);',), ('    X_60:bat[:int] := algebra.project(C_43:bat[:oid], nil:int);',), ('    X_61:bat[:int] := bat.append(X_58:bat[:int], X_60:bat[:int], true:bit);',), ('    X_73:bat[:str] := bat.new(nil:str);',), ('    X_78:bat[:int] := bat.new(nil:int);',), ('    X_77:bat[:int] := bat.new(nil:int);',), ('    X_76:bat[:str] := bat.new(nil:str);',), ('    X_75:bat[:str] := bat.new(nil:str);',), ('    X_62:bat[:bit] := batcalc.==(X_50:bat[:int], X_61:bat[:int]);',), ('    C_68:bat[:oid] := algebra.select(X_62:bat[:bit], nil:bit, nil:bit, true:bit, true:bit, false:bit);',), ('    X_71:bat[:int] := algebra.projection(C_68:bat[:oid], X_61:bat[:int]);',), ('    X_70:bat[:int] := algebra.projection(C_68:bat[:oid], X_55:bat[:int]);',), ('    X_69:bat[:int] := algebra.projection(C_68:bat[:oid], X_50:bat[:int]);',), ('    X_80:bat[:str] := bat.append(X_73:bat[:str], \".t1\":str);',), ('    X_82:bat[:str] := bat.append(X_75:bat[:str], \"a\":str);',), ('    X_84:bat[:str] := bat.append(X_76:bat[:str], \"int\":str);',), ('    X_86:bat[:int] := bat.append(X_77:bat[:int], 32:int);',), ('    X_88:bat[:int] := bat.append(X_78:bat[:int], 0:int);',), ('    X_90:bat[:str] := bat.append(X_80:bat[:str], \".t1\":str);',), ('    X_91:bat[:str] := bat.append(X_82:bat[:str], \"b\":str);',), ('    X_93:bat[:str] := bat.append(X_84:bat[:str], \"int\":str);',), ('    X_94:bat[:int] := bat.append(X_86:bat[:int], 32:int);',), ('    X_95:bat[:int] := bat.append(X_88:bat[:int], 0:int);',), ('    X_96:bat[:str] := bat.append(X_90:bat[:str], \".L3\":str);',), ('    X_98:bat[:str] := bat.append(X_91:bat[:str], \"L3\":str);',), ('    X_100:bat[:str] := bat.append(X_93:bat[:str], \"int\":str);',), ('    X_101:bat[:int] := bat.append(X_94:bat[:int], 32:int);',), ('    X_102:bat[:int] := bat.append(X_95:bat[:int], 0:int);',), ('    language.pass(C_5:bat[:oid]);',), ('    language.pass(X_17:bat[:int]);',), ('    language.pass(X_36:bat[:oid]);',), ('    language.pass(X_24:bat[:int]);',), ('    language.pass(X_35:bat[:int]);',), ('    language.pass(C_43:bat[:oid]);',), ('    language.pass(X_61:bat[:int]);',), ('    language.pass(C_68:bat[:oid]);',), ('    language.pass(X_50:bat[:int]);',), ('exit X_149:bit;',), ('    sql.resultSet(X_96:bat[:str], X_98:bat[:str], X_100:bat[:str], X_101:bat[:int], X_102:bat[:int], X_69:bat[:int], X_70:bat[:int], X_71:bat[:int]);',), ('end user.s2_1;',), ('#inline               actions= 0 time=0 usec ',), ('#remap                actions= 1 time=13 usec ',), ('#costmodel            actions= 1 time=1 usec ',), ('#coercion             actions= 3 time=2 usec ',), ('#evaluate             actions= 0 time=3 usec ',), ('#emptybind            actions= 3 time=4 usec ',), ('#pushselect           actions= 0 time=0 usec ',), ('#aliases              actions= 3 time=3 usec ',), ('#mergetable           actions= 0 time=13 usec ',), ('#deadcode             actions= 6 time=4 usec ',), ('#aliases              actions= 0 time=0 usec ',), ('#constants            actions= 5 time=2 usec ',), ('#commonTerms          actions= 3 time=4 usec ',), ('#projectionpath       actions= 0 time=2 usec ',), ('#deadcode             actions= 3 time=3 usec ',), ('#reorder              actions= 1 time=13 usec ',), ('#matpack              actions= 0 time=0 usec ',), ('#dataflow             actions= 1 time=15 usec ',), ('#multiplex            actions= 0 time=1 usec ',), ('#profiler             actions=1 time=0 usec ',), ('#candidates           actions=1 time=1 usec ',), ('#deadcode             actions= 0 time=3 usec ',), ('#wlc                  actions= 0 time=0 usec ',), ('#garbagecollector     actions= 1 time=24 usec ',), ('#total                actions=28 time=150 usec ',))", "rowcount": 91, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_1:void := querylog.define(\"explain select * from t1 where (t1.a in (select t3.a from t1 t3)) is null;\":str, \"default_pipe\":str, 70:int);',), ('barrier X_149:bit := language.dataflow();',), ('    X_45:bat[:int] := bat.new(nil:int);',), ('    X_4:int := sql.mvc();',), ('    C_5:bat[:oid] := sql.tid(X_4:int, \"sys\":str, \"t1\":str);',), ('    X_8:bat[:int] := sql.bind(X_4:int, \"sys\":str, \"t1\":str, \"a\":str, 0:int);',), ('    X_17:bat[:int] := algebra.projection(C_5:bat[:oid], X_8:bat[:int]);',), ('    (X_32:bat[:oid], C_33:bat[:oid], X_34:bat[:lng]) := group.groupdone(X_17:bat[:int]);',), ('    X_35:bat[:int] := algebra.projection(C_33:bat[:oid], X_17:bat[:int]);',), ('    (X_36:bat[:oid], X_37:bat[:oid]) := algebra.join(X_17:bat[:int], X_35:bat[:int], nil:BAT, nil:BAT, false:bit, nil:lng);',), ('    X_44:bat[:int] := algebra.projection(X_36:bat[:oid], X_17:bat[:int]);',), ('    C_42:bat[:oid] := bat.mirror(X_17:bat[:int]);',), ('    C_43:bat[:oid] := algebra.difference(C_42:bat[:oid], X_36:bat[:oid], nil:BAT, nil:BAT, false:bit, nil:lng);',), ('    X_18:bat[:int] := sql.bind(X_4:int, \"sys\":str, \"t1\":str, \"b\":str, 0:int);',), ('    X_24:bat[:int] := algebra.projection(C_5:bat[:oid], X_18:bat[:int]);',), ('    X_47:bat[:int] := bat.append(X_45:bat[:int], X_44:bat[:int], true:bit);',), ('    X_49:bat[:int] := algebra.projection(C_43:bat[:oid], X_17:bat[:int]);',), ('    X_50:bat[:int] := bat.append(X_47:bat[:int], X_49:bat[:int], true:bit);',), ('    X_52:bat[:int] := bat.new(nil:int);',), ('    X_51:bat[:int] := algebra.projection(X_36:bat[:oid], X_24:bat[:int]);',), ('    X_53:bat[:int] := bat.append(X_52:bat[:int], X_51:bat[:int], true:bit);',), ('    X_54:bat[:int] := algebra.projection(C_43:bat[:oid], X_24:bat[:int]);',), ('    X_55:bat[:int] := bat.append(X_53:bat[:int], X_54:bat[:int], true:bit);',), ('    X_57:bat[:int] := bat.new(nil:int);',), ('    X_56:bat[:int] := algebra.projection(X_37:bat[:oid], X_35:bat[:int]);',), ('    X_58:bat[:int] := bat.append(X_57:bat[:int], X_56:bat[:int], true:bit);',), ('    X_60:bat[:int] := algebra.project(C_43:bat[:oid], nil:int);',), ('    X_61:bat[:int] := bat.append(X_58:bat[:int], X_60:bat[:int], true:bit);',), ('    X_73:bat[:str] := bat.new(nil:str);',), ('    X_78:bat[:int] := bat.new(nil:int);',), ('    X_77:bat[:int] := bat.new(nil:int);',), ('    X_76:bat[:str] := bat.new(nil:str);',), ('    X_75:bat[:str] := bat.new(nil:str);',), ('    X_62:bat[:bit] := batcalc.==(X_50:bat[:int], X_61:bat[:int]);',), ('    C_68:bat[:oid] := algebra.select(X_62:bat[:bit], nil:bit, nil:bit, true:bit, true:bit, false:bit);',), ('    X_71:bat[:int] := algebra.projection(C_68:bat[:oid], X_61:bat[:int]);',), ('    X_70:bat[:int] := algebra.projection(C_68:bat[:oid], X_55:bat[:int]);',), ('    X_69:bat[:int] := algebra.projection(C_68:bat[:oid], X_50:bat[:int]);',), ('    X_80:bat[:str] := bat.append(X_73:bat[:str], \".t1\":str);',), ('    X_82:bat[:str] := bat.append(X_75:bat[:str], \"a\":str);',), ('    X_84:bat[:str] := bat.append(X_76:bat[:str], \"int\":str);',), ('    X_86:bat[:int] := bat.append(X_77:bat[:int], 32:int);',), ('    X_88:bat[:int] := bat.append(X_78:bat[:int], 0:int);',), ('    X_90:bat[:str] := bat.append(X_80:bat[:str], \".t1\":str);',), ('    X_91:bat[:str] := bat.append(X_82:bat[:str], \"b\":str);',), ('    X_93:bat[:str] := bat.append(X_84:bat[:str], \"int\":str);',), ('    X_94:bat[:int] := bat.append(X_86:bat[:int], 32:int);',), ('    X_95:bat[:int] := bat.append(X_88:bat[:int], 0:int);',), ('    X_96:bat[:str] := bat.append(X_90:bat[:str], \".L3\":str);',), ('    X_98:bat[:str] := bat.append(X_91:bat[:str], \"L3\":str);',), ('    X_100:bat[:str] := bat.append(X_93:bat[:str], \"int\":str);',), ('    X_101:bat[:int] := bat.append(X_94:bat[:int], 32:int);',), ('    X_102:bat[:int] := bat.append(X_95:bat[:int], 0:int);',), ('    language.pass(C_5:bat[:oid]);',), ('    language.pass(X_17:bat[:int]);',), ('    language.pass(X_36:bat[:oid]);',), ('    language.pass(X_24:bat[:int]);',), ('    language.pass(X_35:bat[:int]);',), ('    language.pass(C_43:bat[:oid]);',), ('    language.pass(X_61:bat[:int]);',), ('    language.pass(C_68:bat[:oid]);',), ('    language.pass(X_50:bat[:int]);',), ('exit X_149:bit;',), ('    sql.resultSet(X_96:bat[:str], X_98:bat[:str], X_100:bat[:str], X_101:bat[:int], X_102:bat[:int], X_69:bat[:int], X_70:bat[:int], X_71:bat[:int]);',), ('end user.s2_1;',), ('#inline               actions= 0 time=0 usec ',), ('#remap                actions= 1 time=13 usec ',), ('#costmodel            actions= 1 time=1 usec ',), ('#coercion             actions= 3 time=2 usec ',), ('#evaluate             actions= 0 time=3 usec ',), ('#emptybind            actions= 3 time=4 usec ',), ('#pushselect           actions= 0 time=0 usec ',), ('#aliases              actions= 3 time=3 usec ',), ('#mergetable           actions= 0 time=13 usec ',), ('#deadcode             actions= 6 time=3 usec ',), ('#aliases              actions= 0 time=0 usec ',), ('#constants            actions= 5 time=2 usec ',), ('#commonTerms          actions= 3 time=4 usec ',), ('#projectionpath       actions= 0 time=3 usec ',), ('#deadcode             actions= 3 time=3 usec ',), ('#reorder              actions= 1 time=12 usec ',), ('#matpack              actions= 0 time=0 usec ',), ('#dataflow             actions= 1 time=14 usec ',), ('#multiplex            actions= 0 time=1 usec ',), ('#profiler             actions=1 time=0 usec ',), ('#candidates           actions=1 time=0 usec ',), ('#deadcode             actions= 0 time=3 usec ',), ('#wlc                  actions= 0 time=1 usec ',), ('#garbagecollector     actions= 1 time=31 usec ',), ('#total                actions=28 time=170 usec ',))", "rowcount": 91, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_97_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_98_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_2:void := querylog.define(\"explain select * from t1 where (select b from t2 where cast(uuid() as text) = cast(t2.a as text) ) > 0;\":str, \"default_pipe\":str, 68:int);',), ('barrier X_157:bit := language.dataflow();',), ('    X_83:bat[:str] := bat.new(nil:str);',), ('    X_89:bat[:int] := bat.new(nil:int);',), ('    X_87:bat[:int] := bat.new(nil:int);',), ('    X_86:bat[:str] := bat.new(nil:str);',), ('    X_85:bat[:str] := bat.new(nil:str);',), ('    X_81:bat[:int] := bat.new(nil:int);',), ('    X_80:bat[:int] := bat.new(nil:int);',), ('    X_90:bat[:str] := bat.append(X_83:bat[:str], \"sys.t1\":str);',), ('    X_92:bat[:str] := bat.append(X_85:bat[:str], \"x\":str);',), ('    X_94:bat[:str] := bat.append(X_86:bat[:str], \"int\":str);',), ('    X_96:bat[:int] := bat.append(X_87:bat[:int], 32:int);',), ('    X_98:bat[:int] := bat.append(X_89:bat[:int], 0:int);',), ('    X_100:bat[:str] := bat.append(X_90:bat[:str], \"sys.t1\":str);',), ('    X_101:bat[:str] := bat.append(X_92:bat[:str], \"y\":str);',), ('    X_103:bat[:str] := bat.append(X_94:bat[:str], \"int\":str);',), ('    X_104:bat[:int] := bat.append(X_96:bat[:int], 32:int);',), ('    X_105:bat[:int] := bat.append(X_98:bat[:int], 0:int);',), ('exit X_157:bit;',), ('    sql.resultSet(X_100:bat[:str], X_101:bat[:str], X_103:bat[:str], X_104:bat[:int], X_105:bat[:int], X_80:bat[:int], X_81:bat[:int]);',), ('end user.s2_1;',), ('#inline               actions= 0 time=0 usec ',), ('#remap                actions= 1 time=3 usec ',), ('#costmodel            actions= 1 time=1 usec ',), ('#coercion             actions= 1 time=2 usec ',), ('#evaluate             actions= 4 time=10 usec ',), ('#emptybind            actions=15 time=6 usec ',), ('#pushselect           actions= 0 time=2 usec ',), ('#aliases              actions= 8 time=4 usec ',), ('#mergetable           actions= 0 time=12 usec ',), ('#deadcode             actions=38 time=4 usec ',), ('#aliases              actions= 0 time=0 usec ',), ('#constants            actions=12 time=3 usec ',), ('#commonTerms          actions= 0 time=1 usec ',), ('#projectionpath       actions= 0 time=1 usec ',), ('#deadcode             actions= 0 time=2 usec ',), ('#reorder              actions= 1 time=6 usec ',), ('#matpack              actions= 0 time=0 usec ',), ('#dataflow             actions= 1 time=5 usec ',), ('#multiplex            actions= 0 time=1 usec ',), ('#profiler             actions=1 time=0 usec ',), ('#candidates           actions=1 time=0 usec ',), ('#deadcode             actions= 0 time=2 usec ',), ('#wlc                  actions= 0 time=0 usec ',), ('#garbagecollector     actions= 1 time=18 usec ',), ('#total                actions=28 time=121 usec ',))", "rowcount": 48, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'id'\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_98_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_98_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_2:void := querylog.define(\"explain select (select coalesce(sum(t3.b), 0) from t3 where t1.a=t3.a) from t1;\":str, \"default_pipe\":str, 66:int);',), ('barrier X_150:bit := language.dataflow();',), ('    X_53:bat[:oid] := bat.new(nil:oid);',), ('    X_5:int := sql.mvc();',), ('    C_6:bat[:oid] := sql.tid(X_5:int, \"sys\":str, \"t1\":str);',), ('    X_9:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"a\":str, 0:int);',), ('    X_18:bat[:int] := algebra.projection(C_6:bat[:oid], X_9:bat[:int]);',), ('    C_22:bat[:oid] := sql.tid(X_5:int, \"sys\":str, \"t3\":str);',), ('    X_24:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t3\":str, \"a\":str, 0:int);',), ('    X_29:bat[:int] := algebra.projection(C_22:bat[:oid], X_24:bat[:int]);',), ('    (X_37:bat[:oid], X_38:bat[:oid]) := algebra.join(X_18:bat[:int], X_29:bat[:int], nil:BAT, nil:BAT, false:bit, nil:lng);',), ('    X_19:bat[:oid] := batcalc.identity(X_18:bat[:int]);',), ('    X_52:bat[:oid] := algebra.projection(X_37:bat[:oid], X_19:bat[:oid]);',), ('    C_43:bat[:oid] := bat.mirror(X_18:bat[:int]);',), ('    C_44:bat[:oid] := algebra.difference(C_43:bat[:oid], X_37:bat[:oid], nil:BAT, nil:BAT, false:bit, nil:lng);',), ('    X_30:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t3\":str, \"b\":str, 0:int);',), ('    X_55:bat[:oid] := bat.append(X_53:bat[:oid], X_52:bat[:oid], true:bit);',), ('    X_56:bat[:oid] := algebra.projection(C_44:bat[:oid], X_19:bat[:oid]);',), ('    X_57:bat[:oid] := bat.append(X_55:bat[:oid], X_56:bat[:oid], true:bit);',), ('    X_65:bat[:int] := bat.new(nil:int);',), ('    X_64:bat[:int] := algebra.projectionpath(X_38:bat[:oid], C_22:bat[:oid], X_30:bat[:int]);',), ('    X_66:bat[:int] := bat.append(X_65:bat[:int], X_64:bat[:int], true:bit);',), ('    X_68:bat[:int] := algebra.project(C_44:bat[:oid], nil:int);',), ('    X_69:bat[:int] := bat.append(X_66:bat[:int], X_68:bat[:int], true:bit);',), ('    X_85:bat[:str] := bat.new(nil:str);',), ('    X_91:bat[:int] := bat.new(nil:int);',), ('    X_89:bat[:int] := bat.new(nil:int);',), ('    X_88:bat[:str] := bat.new(nil:str);',), ('    X_87:bat[:str] := bat.new(nil:str);',), ('    (X_70:bat[:oid], C_71:bat[:oid], X_72:bat[:lng]) := group.groupdone(X_57:bat[:oid]);',), ('    X_74:bat[:hge] := aggr.subsum(X_69:bat[:int], X_70:bat[:oid], C_71:bat[:oid], true:bit, true:bit);',), ('    X_75:bat[:bit] := batcalc.isnil(X_74:bat[:hge]);',), ('    X_78:bat[:bit] := batcalc.not(X_75:bat[:bit]);',), ('    X_82:bat[:hge] := batcalc.ifthenelse(X_78:bat[:bit], X_74:bat[:hge], 0:hge);',), ('    X_92:bat[:str] := bat.append(X_85:bat[:str], \".L6\":str);',), ('    X_94:bat[:str] := bat.append(X_87:bat[:str], \"L6\":str);',), ('    X_96:bat[:str] := bat.append(X_88:bat[:str], \"hugeint\":str);',), ('    X_98:bat[:int] := bat.append(X_89:bat[:int], 128:int);',), ('    X_100:bat[:int] := bat.append(X_91:bat[:int], 0:int);',), ('    language.pass(X_18:bat[:int]);',), ('    language.pass(X_37:bat[:oid]);',), ('    language.pass(X_19:bat[:oid]);',), ('    language.pass(C_22:bat[:oid]);',), ('    language.pass(C_44:bat[:oid]);',), ('    language.pass(X_74:bat[:hge]);',), ('exit X_150:bit;',), ('    sql.resultSet(X_92:bat[:str], X_94:bat[:str], X_96:bat[:str], X_98:bat[:int], X_100:bat[:int], X_82:bat[:hge]);',), ('end user.s2_1;',), ('#inline               actions= 0 time=0 usec ',), ('#remap                actions= 4 time=11 usec ',), ('#costmodel            actions= 1 time=1 usec ',), ('#coercion             actions= 2 time=2 usec ',), ('#evaluate             actions= 2 time=8 usec ',), ('#emptybind            actions= 3 time=4 usec ',), ('#pushselect           actions= 0 time=1 usec ',), ('#aliases              actions= 5 time=3 usec ',), ('#mergetable           actions= 0 time=12 usec ',), ('#deadcode             actions=17 time=5 usec ',), ('#aliases              actions= 0 time=0 usec ',), ('#constants            actions= 5 time=3 usec ',), ('#commonTerms          actions= 0 time=2 usec ',), ('#projectionpath       actions= 1 time=3 usec ',), ('#deadcode             actions= 1 time=3 usec ',), ('#reorder              actions= 1 time=10 usec ',), ('#matpack              actions= 0 time=0 usec ',), ('#dataflow             actions= 1 time=9 usec ',), ('#multiplex            actions= 0 time=1 usec ',), ('#profiler             actions=1 time=1 usec ',), ('#candidates           actions=1 time=0 usec ',), ('#deadcode             actions= 0 time=3 usec ',), ('#wlc                  actions= 0 time=0 usec ',), ('#garbagecollector     actions= 1 time=22 usec ',), ('#total                actions=28 time=144 usec ',))", "rowcount": 74, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_2:void := querylog.define(\"explain select (select coalesce(sum(t3.b), 0) from t3 where t1.a = t3.a) from t1;\":str, \"default_pipe\":str, 66:int);',), ('barrier X_150:bit := language.dataflow();',), ('    X_53:bat[:oid] := bat.new(nil:oid);',), ('    X_5:int := sql.mvc();',), ('    C_6:bat[:oid] := sql.tid(X_5:int, \"sys\":str, \"t1\":str);',), ('    X_9:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"a\":str, 0:int);',), ('    X_18:bat[:int] := algebra.projection(C_6:bat[:oid], X_9:bat[:int]);',), ('    C_22:bat[:oid] := sql.tid(X_5:int, \"sys\":str, \"t3\":str);',), ('    X_24:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t3\":str, \"a\":str, 0:int);',), ('    X_29:bat[:int] := algebra.projection(C_22:bat[:oid], X_24:bat[:int]);',), ('    (X_37:bat[:oid], X_38:bat[:oid]) := algebra.join(X_18:bat[:int], X_29:bat[:int], nil:BAT, nil:BAT, false:bit, nil:lng);',), ('    X_19:bat[:oid] := batcalc.identity(X_18:bat[:int]);',), ('    X_52:bat[:oid] := algebra.projection(X_37:bat[:oid], X_19:bat[:oid]);',), ('    C_43:bat[:oid] := bat.mirror(X_18:bat[:int]);',), ('    C_44:bat[:oid] := algebra.difference(C_43:bat[:oid], X_37:bat[:oid], nil:BAT, nil:BAT, false:bit, nil:lng);',), ('    X_30:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t3\":str, \"b\":str, 0:int);',), ('    X_55:bat[:oid] := bat.append(X_53:bat[:oid], X_52:bat[:oid], true:bit);',), ('    X_56:bat[:oid] := algebra.projection(C_44:bat[:oid], X_19:bat[:oid]);',), ('    X_57:bat[:oid] := bat.append(X_55:bat[:oid], X_56:bat[:oid], true:bit);',), ('    X_65:bat[:int] := bat.new(nil:int);',), ('    X_64:bat[:int] := algebra.projectionpath(X_38:bat[:oid], C_22:bat[:oid], X_30:bat[:int]);',), ('    X_66:bat[:int] := bat.append(X_65:bat[:int], X_64:bat[:int], true:bit);',), ('    X_68:bat[:int] := algebra.project(C_44:bat[:oid], nil:int);',), ('    X_69:bat[:int] := bat.append(X_66:bat[:int], X_68:bat[:int], true:bit);',), ('    X_85:bat[:str] := bat.new(nil:str);',), ('    X_91:bat[:int] := bat.new(nil:int);',), ('    X_89:bat[:int] := bat.new(nil:int);',), ('    X_88:bat[:str] := bat.new(nil:str);',), ('    X_87:bat[:str] := bat.new(nil:str);',), ('    (X_70:bat[:oid], C_71:bat[:oid], X_72:bat[:lng]) := group.groupdone(X_57:bat[:oid]);',), ('    X_74:bat[:hge] := aggr.subsum(X_69:bat[:int], X_70:bat[:oid], C_71:bat[:oid], true:bit, true:bit);',), ('    X_75:bat[:bit] := batcalc.isnil(X_74:bat[:hge]);',), ('    X_78:bat[:bit] := batcalc.not(X_75:bat[:bit]);',), ('    X_82:bat[:hge] := batcalc.ifthenelse(X_78:bat[:bit], X_74:bat[:hge], 0:hge);',), ('    X_92:bat[:str] := bat.append(X_85:bat[:str], \".L6\":str);',), ('    X_94:bat[:str] := bat.append(X_87:bat[:str], \"L6\":str);',), ('    X_96:bat[:str] := bat.append(X_88:bat[:str], \"hugeint\":str);',), ('    X_98:bat[:int] := bat.append(X_89:bat[:int], 128:int);',), ('    X_100:bat[:int] := bat.append(X_91:bat[:int], 0:int);',), ('    language.pass(X_18:bat[:int]);',), ('    language.pass(X_37:bat[:oid]);',), ('    language.pass(X_19:bat[:oid]);',), ('    language.pass(C_22:bat[:oid]);',), ('    language.pass(C_44:bat[:oid]);',), ('    language.pass(X_74:bat[:hge]);',), ('exit X_150:bit;',), ('    sql.resultSet(X_92:bat[:str], X_94:bat[:str], X_96:bat[:str], X_98:bat[:int], X_100:bat[:int], X_82:bat[:hge]);',), ('end user.s2_1;',), ('#inline               actions= 0 time=1 usec ',), ('#remap                actions= 4 time=9 usec ',), ('#costmodel            actions= 1 time=0 usec ',), ('#coercion             actions= 2 time=3 usec ',), ('#evaluate             actions= 2 time=8 usec ',), ('#emptybind            actions= 3 time=4 usec ',), ('#pushselect           actions= 0 time=1 usec ',), ('#aliases              actions= 5 time=3 usec ',), ('#mergetable           actions= 0 time=21 usec ',), ('#deadcode             actions=17 time=4 usec ',), ('#aliases              actions= 0 time=0 usec ',), ('#constants            actions= 5 time=3 usec ',), ('#commonTerms          actions= 0 time=2 usec ',), ('#projectionpath       actions= 1 time=3 usec ',), ('#deadcode             actions= 1 time=3 usec ',), ('#reorder              actions= 1 time=10 usec ',), ('#matpack              actions= 0 time=0 usec ',), ('#dataflow             actions= 1 time=16 usec ',), ('#multiplex            actions= 0 time=10 usec ',), ('#profiler             actions=1 time=0 usec ',), ('#candidates           actions=1 time=1 usec ',), ('#deadcode             actions= 0 time=5 usec ',), ('#wlc                  actions= 0 time=1 usec ',), ('#garbagecollector     actions= 1 time=44 usec ',), ('#total                actions=28 time=202 usec ',))", "rowcount": 74, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_98_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_98_17", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_2:void := querylog.define(\"explain select (select coalesce(sum(t3.b), 0) from t3 where t1.a=t3.a) from t1;\":str, \"default_pipe\":str, 66:int);',), ('barrier X_150:bit := language.dataflow();',), ('    X_53:bat[:oid] := bat.new(nil:oid);',), ('    X_5:int := sql.mvc();',), ('    C_6:bat[:oid] := sql.tid(X_5:int, \"sys\":str, \"t1\":str);',), ('    X_9:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"a\":str, 0:int);',), ('    X_18:bat[:int] := algebra.projection(C_6:bat[:oid], X_9:bat[:int]);',), ('    C_22:bat[:oid] := sql.tid(X_5:int, \"sys\":str, \"t3\":str);',), ('    X_24:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t3\":str, \"a\":str, 0:int);',), ('    X_29:bat[:int] := algebra.projection(C_22:bat[:oid], X_24:bat[:int]);',), ('    (X_37:bat[:oid], X_38:bat[:oid]) := algebra.join(X_18:bat[:int], X_29:bat[:int], nil:BAT, nil:BAT, false:bit, nil:lng);',), ('    X_19:bat[:oid] := batcalc.identity(X_18:bat[:int]);',), ('    X_52:bat[:oid] := algebra.projection(X_37:bat[:oid], X_19:bat[:oid]);',), ('    C_43:bat[:oid] := bat.mirror(X_18:bat[:int]);',), ('    C_44:bat[:oid] := algebra.difference(C_43:bat[:oid], X_37:bat[:oid], nil:BAT, nil:BAT, false:bit, nil:lng);',), ('    X_30:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t3\":str, \"b\":str, 0:int);',), ('    X_55:bat[:oid] := bat.append(X_53:bat[:oid], X_52:bat[:oid], true:bit);',), ('    X_56:bat[:oid] := algebra.projection(C_44:bat[:oid], X_19:bat[:oid]);',), ('    X_57:bat[:oid] := bat.append(X_55:bat[:oid], X_56:bat[:oid], true:bit);',), ('    X_65:bat[:int] := bat.new(nil:int);',), ('    X_64:bat[:int] := algebra.projectionpath(X_38:bat[:oid], C_22:bat[:oid], X_30:bat[:int]);',), ('    X_66:bat[:int] := bat.append(X_65:bat[:int], X_64:bat[:int], true:bit);',), ('    X_68:bat[:int] := algebra.project(C_44:bat[:oid], nil:int);',), ('    X_69:bat[:int] := bat.append(X_66:bat[:int], X_68:bat[:int], true:bit);',), ('    X_85:bat[:str] := bat.new(nil:str);',), ('    X_91:bat[:int] := bat.new(nil:int);',), ('    X_89:bat[:int] := bat.new(nil:int);',), ('    X_88:bat[:str] := bat.new(nil:str);',), ('    X_87:bat[:str] := bat.new(nil:str);',), ('    (X_70:bat[:oid], C_71:bat[:oid], X_72:bat[:lng]) := group.groupdone(X_57:bat[:oid]);',), ('    X_74:bat[:hge] := aggr.subsum(X_69:bat[:int], X_70:bat[:oid], C_71:bat[:oid], true:bit, true:bit);',), ('    X_75:bat[:bit] := batcalc.isnil(X_74:bat[:hge]);',), ('    X_78:bat[:bit] := batcalc.not(X_75:bat[:bit]);',), ('    X_82:bat[:hge] := batcalc.ifthenelse(X_78:bat[:bit], X_74:bat[:hge], 0:hge);',), ('    X_92:bat[:str] := bat.append(X_85:bat[:str], \".L6\":str);',), ('    X_94:bat[:str] := bat.append(X_87:bat[:str], \"L6\":str);',), ('    X_96:bat[:str] := bat.append(X_88:bat[:str], \"hugeint\":str);',), ('    X_98:bat[:int] := bat.append(X_89:bat[:int], 128:int);',), ('    X_100:bat[:int] := bat.append(X_91:bat[:int], 0:int);',), ('    language.pass(X_18:bat[:int]);',), ('    language.pass(X_37:bat[:oid]);',), ('    language.pass(X_19:bat[:oid]);',), ('    language.pass(C_22:bat[:oid]);',), ('    language.pass(C_44:bat[:oid]);',), ('    language.pass(X_74:bat[:hge]);',), ('exit X_150:bit;',), ('    sql.resultSet(X_92:bat[:str], X_94:bat[:str], X_96:bat[:str], X_98:bat[:int], X_100:bat[:int], X_82:bat[:hge]);',), ('end user.s2_1;',), ('#inline               actions= 0 time=1 usec ',), ('#remap                actions= 4 time=10 usec ',), ('#costmodel            actions= 1 time=0 usec ',), ('#coercion             actions= 2 time=3 usec ',), ('#evaluate             actions= 2 time=8 usec ',), ('#emptybind            actions= 3 time=4 usec ',), ('#pushselect           actions= 0 time=1 usec ',), ('#aliases              actions= 5 time=2 usec ',), ('#mergetable           actions= 0 time=13 usec ',), ('#deadcode             actions=17 time=4 usec ',), ('#aliases              actions= 0 time=0 usec ',), ('#constants            actions= 5 time=3 usec ',), ('#commonTerms          actions= 0 time=2 usec ',), ('#projectionpath       actions= 1 time=3 usec ',), ('#deadcode             actions= 1 time=3 usec ',), ('#reorder              actions= 1 time=10 usec ',), ('#matpack              actions= 0 time=0 usec ',), ('#dataflow             actions= 1 time=8 usec ',), ('#multiplex            actions= 0 time=0 usec ',), ('#profiler             actions=1 time=0 usec ',), ('#candidates           actions=1 time=0 usec ',), ('#deadcode             actions= 0 time=3 usec ',), ('#wlc                  actions= 0 time=0 usec ',), ('#garbagecollector     actions= 1 time=22 usec ',), ('#total                actions=28 time=148 usec ',))", "rowcount": 74, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_2:void := querylog.define(\"explain select (select coalesce(sum(t3.b), 0) from t3 where t1.a=t3.a) from t1;\":str, \"default_pipe\":str, 66:int);',), ('barrier X_150:bit := language.dataflow();',), ('    X_53:bat[:oid] := bat.new(nil:oid);',), ('    X_5:int := sql.mvc();',), ('    C_6:bat[:oid] := sql.tid(X_5:int, \"sys\":str, \"t1\":str);',), ('    X_9:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"a\":str, 0:int);',), ('    X_18:bat[:int] := algebra.projection(C_6:bat[:oid], X_9:bat[:int]);',), ('    C_22:bat[:oid] := sql.tid(X_5:int, \"sys\":str, \"t3\":str);',), ('    X_24:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t3\":str, \"a\":str, 0:int);',), ('    X_29:bat[:int] := algebra.projection(C_22:bat[:oid], X_24:bat[:int]);',), ('    (X_37:bat[:oid], X_38:bat[:oid]) := algebra.join(X_18:bat[:int], X_29:bat[:int], nil:BAT, nil:BAT, false:bit, nil:lng);',), ('    X_19:bat[:oid] := batcalc.identity(X_18:bat[:int]);',), ('    X_52:bat[:oid] := algebra.projection(X_37:bat[:oid], X_19:bat[:oid]);',), ('    C_43:bat[:oid] := bat.mirror(X_18:bat[:int]);',), ('    C_44:bat[:oid] := algebra.difference(C_43:bat[:oid], X_37:bat[:oid], nil:BAT, nil:BAT, false:bit, nil:lng);',), ('    X_30:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t3\":str, \"b\":str, 0:int);',), ('    X_55:bat[:oid] := bat.append(X_53:bat[:oid], X_52:bat[:oid], true:bit);',), ('    X_56:bat[:oid] := algebra.projection(C_44:bat[:oid], X_19:bat[:oid]);',), ('    X_57:bat[:oid] := bat.append(X_55:bat[:oid], X_56:bat[:oid], true:bit);',), ('    X_65:bat[:int] := bat.new(nil:int);',), ('    X_64:bat[:int] := algebra.projectionpath(X_38:bat[:oid], C_22:bat[:oid], X_30:bat[:int]);',), ('    X_66:bat[:int] := bat.append(X_65:bat[:int], X_64:bat[:int], true:bit);',), ('    X_68:bat[:int] := algebra.project(C_44:bat[:oid], nil:int);',), ('    X_69:bat[:int] := bat.append(X_66:bat[:int], X_68:bat[:int], true:bit);',), ('    X_85:bat[:str] := bat.new(nil:str);',), ('    X_91:bat[:int] := bat.new(nil:int);',), ('    X_89:bat[:int] := bat.new(nil:int);',), ('    X_88:bat[:str] := bat.new(nil:str);',), ('    X_87:bat[:str] := bat.new(nil:str);',), ('    (X_70:bat[:oid], C_71:bat[:oid], X_72:bat[:lng]) := group.groupdone(X_57:bat[:oid]);',), ('    X_74:bat[:hge] := aggr.subsum(X_69:bat[:int], X_70:bat[:oid], C_71:bat[:oid], true:bit, true:bit);',), ('    X_75:bat[:bit] := batcalc.isnil(X_74:bat[:hge]);',), ('    X_78:bat[:bit] := batcalc.not(X_75:bat[:bit]);',), ('    X_82:bat[:hge] := batcalc.ifthenelse(X_78:bat[:bit], X_74:bat[:hge], 0:hge);',), ('    X_92:bat[:str] := bat.append(X_85:bat[:str], \".L6\":str);',), ('    X_94:bat[:str] := bat.append(X_87:bat[:str], \"L6\":str);',), ('    X_96:bat[:str] := bat.append(X_88:bat[:str], \"hugeint\":str);',), ('    X_98:bat[:int] := bat.append(X_89:bat[:int], 128:int);',), ('    X_100:bat[:int] := bat.append(X_91:bat[:int], 0:int);',), ('    language.pass(X_18:bat[:int]);',), ('    language.pass(X_37:bat[:oid]);',), ('    language.pass(X_19:bat[:oid]);',), ('    language.pass(C_22:bat[:oid]);',), ('    language.pass(C_44:bat[:oid]);',), ('    language.pass(X_74:bat[:hge]);',), ('exit X_150:bit;',), ('    sql.resultSet(X_92:bat[:str], X_94:bat[:str], X_96:bat[:str], X_98:bat[:int], X_100:bat[:int], X_82:bat[:hge]);',), ('end user.s2_1;',), ('#inline               actions= 0 time=0 usec ',), ('#remap                actions= 4 time=9 usec ',), ('#costmodel            actions= 1 time=1 usec ',), ('#coercion             actions= 2 time=2 usec ',), ('#evaluate             actions= 2 time=9 usec ',), ('#emptybind            actions= 3 time=4 usec ',), ('#pushselect           actions= 0 time=0 usec ',), ('#aliases              actions= 5 time=3 usec ',), ('#mergetable           actions= 0 time=13 usec ',), ('#deadcode             actions=17 time=5 usec ',), ('#aliases              actions= 0 time=0 usec ',), ('#constants            actions= 5 time=3 usec ',), ('#commonTerms          actions= 0 time=2 usec ',), ('#projectionpath       actions= 1 time=3 usec ',), ('#deadcode             actions= 1 time=3 usec ',), ('#reorder              actions= 1 time=11 usec ',), ('#matpack              actions= 0 time=1 usec ',), ('#dataflow             actions= 1 time=9 usec ',), ('#multiplex            actions= 0 time=0 usec ',), ('#profiler             actions=1 time=0 usec ',), ('#candidates           actions=1 time=1 usec ',), ('#deadcode             actions= 0 time=3 usec ',), ('#wlc                  actions= 0 time=0 usec ',), ('#garbagecollector     actions= 1 time=22 usec ',), ('#total                actions=28 time=143 usec ',))", "rowcount": 74, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_99_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('ABC', 1), ('XYZ', 1), ('XYZ', 1), ('ABC', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('ABC', 1), ('XYZ', 1), ('XYZ', 1), ('ABC', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "monetdb_10_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('b', 'a', 'a', 'a211'), ('c', 'a', 'a', 'a311'), ('d', 'a', 'a', 'a411'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!syntax error, unexpected IDENT in: \"i\"\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "monetdb_10_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aa111', 'a'), ('ba211', 'a'), ('ca311', 'a'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "22007!Daytime (a) has incorrect format\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "monetdb_10_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aa111', 'a', 'c111'), ('ba211', 'a', 'c211'), ('ca311', 'a', 'c311'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 3, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_10_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aa', 'a', 'a111', 'c111'), ('ba', 'a', 'a211', 'c211'), ('ca', 'a', 'a311', 'c311'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aa', 'a', 'a111', 'c111'), ('ba', 'a', 'a211', 'c211'), ('ca', 'a', 'a311', 'c311'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_10_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('9797', 'a', 'a'), ('9797', 'a', 'a'), ('9797', 'a', 'a'), ('9797', 'a', 'a'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected CONCATSTRING in: \"select (||\"\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "monetdb_11_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 20), (3, 50))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 20), (3, 50))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "monetdb_12_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1000, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected CHARACTER in: \"insert into t3 select concat('c-', char\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_12_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1000, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'c-' unknown\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "monetdb_12_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected CHARACTER in: \"update t1 set b = repeat(char\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "monetdb_12_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_4:void := querylog.define(\"explain select * from t1 where a < 10 and b = repeat(cast(65+a as char), 20);\":str, \"default_pipe\":str, 63:int);',), ('barrier X_161:bit := language.dataflow();',), ('    X_72:bat[:str] := bat.new(nil:str);',), ('    X_78:bat[:int] := bat.new(nil:int);',), ('    X_76:bat[:int] := bat.new(nil:int);',), ('    X_75:bat[:str] := bat.new(nil:str);',), ('    X_74:bat[:str] := bat.new(nil:str);',), ('    X_68:bat[:str] := bat.new(nil:str);',), ('    X_67:bat[:str] := bat.new(nil:str);',), ('    X_66:bat[:int] := bat.new(nil:int);',), ('    X_79:bat[:str] := bat.append(X_72:bat[:str], \"sys.t1\":str);',), ('    X_81:bat[:str] := bat.append(X_74:bat[:str], \"a\":str);',), ('    X_83:bat[:str] := bat.append(X_75:bat[:str], \"int\":str);',), ('    X_85:bat[:int] := bat.append(X_76:bat[:int], 32:int);',), ('    X_87:bat[:int] := bat.append(X_78:bat[:int], 0:int);',), ('    X_89:bat[:str] := bat.append(X_79:bat[:str], \"sys.t1\":str);',), ('    X_90:bat[:str] := bat.append(X_81:bat[:str], \"b\":str);',), ('    X_92:bat[:str] := bat.append(X_83:bat[:str], \"char\":str);',), ('    X_94:bat[:int] := bat.append(X_85:bat[:int], 20:int);',), ('    X_96:bat[:int] := bat.append(X_87:bat[:int], 0:int);',), ('    X_97:bat[:str] := bat.append(X_89:bat[:str], \"sys.t1\":str);',), ('    X_98:bat[:str] := bat.append(X_90:bat[:str], \"filler\":str);',), ('    X_100:bat[:str] := bat.append(X_92:bat[:str], \"char\":str);',), ('    X_101:bat[:int] := bat.append(X_94:bat[:int], 200:int);',), ('    X_103:bat[:int] := bat.append(X_96:bat[:int], 0:int);',), ('exit X_161:bit;',), ('    sql.resultSet(X_97:bat[:str], X_98:bat[:str], X_100:bat[:str], X_101:bat[:int], X_103:bat[:int], X_66:bat[:int], X_67:bat[:str], X_68:bat[:str]);',), ('end user.s2_1;',), ('#inline               actions= 0 time=1 usec ',), ('#remap                actions= 3 time=48 usec ',), ('#costmodel            actions= 1 time=0 usec ',), ('#coercion             actions= 0 time=0 usec ',), ('#evaluate             actions= 7 time=13 usec ',), ('#emptybind            actions=14 time=8 usec ',), ('#pushselect           actions= 0 time=2 usec ',), ('#aliases              actions=10 time=3 usec ',), ('#mergetable           actions= 0 time=14 usec ',), ('#deadcode             actions=26 time=4 usec ',), ('#aliases              actions= 0 time=0 usec ',), ('#constants            actions=15 time=4 usec ',), ('#commonTerms          actions= 0 time=1 usec ',), ('#projectionpath       actions= 0 time=1 usec ',), ('#deadcode             actions= 0 time=2 usec ',), ('#reorder              actions= 1 time=7 usec ',), ('#matpack              actions= 0 time=0 usec ',), ('#dataflow             actions= 1 time=6 usec ',), ('#multiplex            actions= 0 time=1 usec ',), ('#profiler             actions=1 time=0 usec ',), ('#candidates           actions=1 time=0 usec ',), ('#deadcode             actions= 0 time=2 usec ',), ('#wlc                  actions= 0 time=0 usec ',), ('#garbagecollector     actions= 1 time=21 usec ',), ('#total                actions=28 time=182 usec ',))", "rowcount": 54, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected IDENT in: \"it\"\n!42000!syntax error, unexpected IDENT in: \"a\"\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected IDENT in: \"but\"\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "monetdb_12_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected CHARACTER in: \"select * from t1 where a < 10 and b = repeat(char\"\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_14_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'a' unknown\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_14_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'bytesize(blob)'\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_14_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_14_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_14_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_14_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_14_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((17408,), (17408,), (18432,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((17408,), (17408,), (18432,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_15_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select '2011-01-01 00:00:00' as time_t, extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected STRING, expecting IDENT or sqlINT in: \"select time('2011-01-01 00:00:00'\"\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_15_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"insert into t3 (a) values (extract(epoch\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_15_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_17_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'regexp_instr(char,char)'\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_17_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_17_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_17_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!Unexpected symbol (\\)", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_17_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_17_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!Unexpected symbol (\\)", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_17_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ',' in: \"select position('',\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_17_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'a' unknown\n", "exec_able": false}}, "TP": 2, "FP": 4, "FN": 1}
{"sql_id": "monetdb_17_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_17_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_17_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_17_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_17_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ',' in: \"select position(pattern,\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_17_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_17_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'a+' unknown\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_17_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ',' in: \"select position('abcabcabc',\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_17_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_17_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_17_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ',' in: \"select position('abcabcabc',\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_17_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_17_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ',' in: \"select position('a+',\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_17_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected IS in: \"is\"\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected AND in: \"and\"\n!42000!syntax error, unexpected IDENT in: \"it\"\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "monetdb_17_24", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_17_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'abcabcabc' unknown\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_17_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_17_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ',' in: \"select case when regmatch('aaabcabcabc', 'a+') then position('aaabcabcabc',\"\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_17_28", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected IDENT in: \"it\"\n!42000!syntax error, unexpected IDENT in: \"it\"\n!42000!syntax error, unexpected IDENT in: \"which\"\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected IDENT in: \"this\"\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "monetdb_17_29", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'aaabcabcabc' unknown\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_17_30", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select position(? i\"\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "monetdb_17_31", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ',' in: \"select position(\"A+\",\"\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "monetdb_17_32", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ',' in: \"select position('a',\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_18_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'aaa' unknown\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "monetdb_18_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_18_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_18_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_18_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_18_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "monetdb_18_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_18_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_18_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'aaabbccbbddaa' unknown\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "monetdb_18_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_18_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!syntax error, unexpected IDENT in: \"i\"\n!42000!syntax error, unexpected AND in: \"and\"\n!42000!syntax error, unexpected IDENT in: \"which\"\n!42000!syntax error, unexpected IDENT, expecting AS in: \"with four arguments\"\n!42000!syntax error, unexpected IDENT in: \"this\"\n!42000!syntax error, unexpected IDENT in: \"we\"\n!42000!syntax error, unexpected IDENT in: \"instead\"\n!42000!syntax error, unexpected IDENT in: \"maybe\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "monetdb_18_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_18_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_18_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_18_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_18_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!syntax error, unexpected IDENT in: \"-- REGEXP_REPLACE`. Let me break it down step by step.\n!\n!first\"\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected IDENT in: \"this\"\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "monetdb_18_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_18_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_18_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'aaabcbdb' unknown\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "monetdb_18_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_18_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_18_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_19_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "monetdb_19_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "monetdb_19_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'string_repeat(char,char)'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 2, "FP": 3, "FN": 1}
{"sql_id": "monetdb_19_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S22!INSERT INTO: no such column 't1.c'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_19_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "monetdb_19_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '^([[:alpha:]]+)[[:space:]].*$' unknown\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_19_21", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'regexp_replace'\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "monetdb_20_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!subquery table reference needs alias, use AS xxx in: \"select sum(length(name)) as s1 from (select distinct name from t1);\"\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_20_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'slidingwindow(varchar,tinyint)'\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_20_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_20_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '18:19:29' unknown\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_22_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'strtodate(char,char)'\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_22_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2001, 12, 10),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "22000!Type (datetime) unknown in: \"select case when cast('2001-12-10' as datetime)\"\n!42000!syntax error, unexpected COMPARISON in: \"<=\"\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_22_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ',', expecting ')' in: \"select min(cast('10:11:12' as time),\"\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_23_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"insert into t1 (i, ts) values (cast(extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '2003-03-01 00:00:00' unknown\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_23_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"insert into t1 (i, ts) values (cast(extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"insert into t1 (i, ts) values (cast(extract(epoch\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_23_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"insert into t1 (i, ts) values (cast(extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"insert into t1 (i, ts) values(cast(extract(epoch\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_23_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"insert into t1 (i, ts) values (cast(extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"insert into t1 (i, ts) values(cast(extract(epoch\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_23_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1981, 7, 1, 0, 0, 9),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Invalid identifier '%Y-%m-%d %H:%M:%S'\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "monetdb_23_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_23_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"insert into t1 values(cast(extract(epoch\"\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "monetdb_23_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select cast(extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select cast(extract(epoch\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_23_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select cast(extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select cast(extract(epoch\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_23_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select cast(extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select cast(extract(epoch\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_23_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select cast(extract(epoch\"\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_23_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select cast(extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select cast(extract(epoch\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_23_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select cast(extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected CAST in: \"cast\"\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_23_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select cast(extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected IDENT in: \"which\"\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected IS in: \"is\"\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected IDENT in: \"this\"\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "monetdb_23_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select cast(extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select cast(extract(epoch\"\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_23_26", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select cast(extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select cast(extract(epoch\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_24_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected TO in: \"select to\"\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_24_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Unexpected symbol (:)\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_24_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ',', expecting ')' in: \"select num_to_hex(min(byte_value(a, 0),\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 2, "FP": 4, "FN": 0}
{"sql_id": "monetdb_24_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'hex(blob)'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "monetdb_24_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'hex(blob)'\n", "exec_able": false}}, "TP": 3, "FP": 3, "FN": 0}
{"sql_id": "monetdb_24_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'hex(blob)'\n", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "monetdb_24_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'hex(blob)'\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_25_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, 100), (True, 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '0x01' unknown\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_25_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, 100), (True, 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'hex(boolean)'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_25_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False, 100), (False, 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'bit_to_hex(boolean)'\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_25_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT, expecting ')' or ',' in: \"select group_concat(distinct b\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT, expecting ')' or ',' in: \"select hex(group_concat(distinct b\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "monetdb_25_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,), (3,), (0,), (1,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'hex(int)'\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_25_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 0), (3, 1), (3, 2), (3, 2), (2, 3))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'hex(smallint)'\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_26_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'hex(blob)'\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_26_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected IDENT in: \"breaking\"\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected IDENT in: \"wait\"\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected IDENT in: \"this\"\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected IDENT in: \"but\"\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "monetdb_26_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'hex(blob)'\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_26_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'str_repeat(char,int)'\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_26_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((65535, 65535))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((65535, 65535))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "monetdb_26_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_27_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Wrong format (1.7976931348623157e+308)\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ',', expecting AS in: \"select least(-1.1111111111111111, -min(cast(split(group_concat(\"column\"), ','),\"\n", "exec_able": false}}, "TP": 1, "FP": 5, "FN": 1}
{"sql_id": "monetdb_28_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S22!INSERT INTO: no such column 't1.value'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_28_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('YYYY YY', 2025, 2025))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Invalid identifier '%Y %y'\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 2}
{"sql_id": "monetdb_28_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1206, seconds=84012),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "22000!Constant (2000-01-27) unknown in: \"select timestamp(\"2000-01-27\"\"\n!42000!syntax error, unexpected ',' in: \",\"\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "monetdb_30_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3, 2, 3, 3), (4, 3, 3, 4), (7, 3, 3, 7))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3, 2, 3, 3), (4, 3, 3, 4), (7, 3, 3, 7))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_30_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'f1' unknown\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_30_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('10', 5.0), ('30', 15.0), ('50', 25.0), ('60', 30.0))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Unexpected symbol (:)\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "monetdb_31_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!types int(32,0) and date(0,0) are not equal\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_31_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!types date(0,0) and timestamptz(7,0) are not equal for column 'y'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IF in: \"select if\"\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "monetdb_31_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected YEAR in: \"select * from t4 where yyyy = year\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_31_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(1901, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(1901, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_31_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(1901, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'least(date,date)'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_31_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-85359,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected AND in: \"and\"\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected '*' in: \"*\"\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "monetdb_32_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, '\"\"'), (0, '\" \"'), (0, '\"2012qwer\"'), (0, '\"qwer\"'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'concat'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_34_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('*a*',), ('*b*',), ('*o*',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '*' unknown\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_34_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a', '*a*', 'o', '*o*'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '*' unknown\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "monetdb_34_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT, expecting SCOLON in: \"select \"-\",\"||\"a\",\"\"\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "monetdb_34_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'hello' unknown\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_35_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "22000!type (x) unknown in: \"insert into t1 (a) values (x'1F9480179366F2BF567E1C4B964C1EF029087575')\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected SET, expecting SCOLON in: \"insert into t1 set\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_35_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "22000!type (x) unknown in: \"insert into t1 (a) values (x'1F9480179366F2BF567E1C4B964C1EF029082020')\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected SET, expecting SCOLON in: \"insert into t1 set\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_35_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "22000!type (x) unknown in: \"insert into t1 (a) values (x'1F9480179366F2BF567E1C4B964C1EF029080707')\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "22000!type (x) unknown in: \"insert into t1 (a) values (x'1F9480179366F2BF567E1C4B964C1EF029080707')\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_35_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'hex(blob)'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_35_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_1:void := querylog.define(\"explain select a from t1 order by a;\":str, \"default_pipe\":str, 23:int);',), ('    X_25:bat[:str] := bat.new(nil:str);',), ('    X_31:bat[:int] := bat.new(nil:int);',), ('    X_29:bat[:int] := bat.new(nil:int);',), ('    X_28:bat[:str] := bat.new(nil:str);',), ('    X_27:bat[:str] := bat.new(nil:str);',), ('    X_23:bat[:sqlblob] := bat.new(nil:sqlblob);',), ('    X_32:bat[:str] := bat.append(X_25:bat[:str], \"sys.t1\":str);',), ('    X_34:bat[:str] := bat.append(X_27:bat[:str], \"a\":str);',), ('    X_35:bat[:str] := bat.append(X_28:bat[:str], \"blob\":str);',), ('    X_37:bat[:int] := bat.append(X_29:bat[:int], 0:int);',), ('    X_38:bat[:int] := bat.append(X_31:bat[:int], 0:int);',), ('    sql.resultSet(X_32:bat[:str], X_34:bat[:str], X_35:bat[:str], X_37:bat[:int], X_38:bat[:int], X_23:bat[:sqlblob]);',), ('end user.s2_1;',), ('# optimizer.mitosis()',), ('# optimizer.dataflow()',), ('#inline               actions= 0 time=1 usec ',), ('#remap                actions= 0 time=1 usec ',), ('#costmodel            actions= 1 time=0 usec ',), ('#coercion             actions= 0 time=0 usec ',), ('#evaluate             actions= 0 time=2 usec ',), ('#emptybind            actions= 3 time=4 usec ',), ('#pushselect           actions= 0 time=1 usec ',), ('#aliases              actions= 1 time=8 usec ',), ('#mergetable           actions= 0 time=7 usec ',), ('#deadcode             actions= 7 time=3 usec ',), ('#aliases              actions= 0 time=0 usec ',), ('#constants            actions= 2 time=1 usec ',), ('#commonTerms          actions= 0 time=1 usec ',), ('#projectionpath       actions= 0 time=1 usec ',), ('#deadcode             actions= 0 time=1 usec ',), ('#reorder              actions= 1 time=6 usec ',), ('#matpack              actions= 0 time=0 usec ',), ('#multiplex            actions= 0 time=1 usec ',), ('#profiler             actions=1 time=0 usec ',), ('#candidates           actions=1 time=0 usec ',), ('#deadcode             actions= 0 time=1 usec ',), ('#wlc                  actions= 0 time=0 usec ',), ('#garbagecollector     actions= 1 time=11 usec ',), ('#total                actions=26 time=87 usec ',))", "rowcount": 41, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'hex(blob)'\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_35_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Unexpected symbol (\\)\n", "exec_able": false}}, "TP": 2, "FP": 3, "FN": 0}
{"sql_id": "monetdb_35_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'hex(blob)'\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "monetdb_36_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IF in: \"select if\"\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "monetdb_36_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected IDENT in: \"this\"\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "monetdb_36_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_36_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected NOT in: \"select coalesce(a, 'N') as a, coalesce(b, 'N') as b, coalesce(not a\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!syntax error, unexpected IDENT in: \"monetdb\"\n!42000!syntax error, unexpected IDENT in: \"otherwise\"\n!42000!syntax error, unexpected ELSE in: \"else\"\n!42000!syntax error, unexpected ELSE in: \"else\"\n!42000!syntax error, unexpected ELSE in: \"else\"\n!42000!syntax error, unexpected IDENT in: \"otherwise\"\n!42000!syntax error, unexpected ELSE in: \"else\"\n!42000!syntax error, unexpected IDENT in: \"otherwise\"\n!42000!syntax error, unexpected IDENT in: \"i\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected IDENT in: \"this\"\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "monetdb_36_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected '=', expecting ',' in: \"select coalesce(a=\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "monetdb_37_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2004, 1, 22),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected CAST in: \"cast\"\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "monetdb_37_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '2004-12-30 12:00:00' unknown\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_37_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "monetdb_37_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "22000!Type (unsigned) unknown in: \"select cast(\"12345\" + \"6789\" as unsigned)\"\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_37_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '12345' unknown\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_37_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '1' unknown\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_37_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_37_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, True))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False, False))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "monetdb_37_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2007, 7, 19, 8, 30),), (None,), (datetime.datetime(2007, 7, 19, 8, 34),), (None,), (datetime.datetime(2007, 7, 19, 8, 36),))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select cast(extract(epoch\"\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "monetdb_37_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!types date(0,0) and sec_interval(13,0) are not equal for column 'f1'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!25005!Current transaction is aborted (please ROLLBACK)\n!42000!syntax error, unexpected IDENT in: \"so\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected '.', expecting '(' in: \"insert into t1(d1) values ('2007-07-19 08:30:00'), (null), .\"\n!42000!syntax error, unexpected THEN in: \"then\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"which\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"however\"\n", "exec_able": false}}, "TP": 2, "FP": 6, "FN": 1}
{"sql_id": "monetdb_37_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!types date(0,0) and sec_interval(13,0) are not equal\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 1}
{"sql_id": "monetdb_37_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!types date(0,0) and sec_interval(13,0) are not equal\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '2004-01-22 21:45:33' unknown\n", "exec_able": false}}, "TP": 2, "FP": 3, "FN": 1}
{"sql_id": "monetdb_37_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 2, "FN": 1}
{"sql_id": "monetdb_37_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "22000!Type (charset) unknown in: \"select cast('a' as charset(2049)\"\n!42000!syntax error, unexpected ')' in: \")\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_37_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('value=3.4e+05',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Unexpected symbol (\\)\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_37_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(1, 2, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_38_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'strcmp(int,varchar)'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_38_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1988, '198819881988'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected YEAR in: \"select cast(1988 as year\"\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "monetdb_38_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x1988',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'str(char,smallint)'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_38_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "22000!Type (datetime) unknown in: \"select time_to_sec(cast('2030-01-01 00:00:00' as datetime)\"\n!42000!syntax error, unexpected ')' in: \")\"\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_38_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(1988, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "22000!Type (datetime) unknown in: \"select extract(year from (cast('1988-01-01 00:00:00' as datetime)\"\n!42000!syntax error, unexpected ')' in: \")\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "monetdb_38_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(1997, 5, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select cast(extract(epoch\"\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_38_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"your\"\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_40_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, 0, -1), (None, 1, 1), (None, 1, 1), (None, 1, 0))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'to_hex(char)'\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 1}
{"sql_id": "monetdb_40_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12', False), ('11', False), ('22', False))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected sqlINT, expecting SCOLON in: \"select (b||c) as bc from t1 where (b||c) = ''0101\"\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_40_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_3:void := querylog.define(\"explain select b, c from t1 where b = 1 and b || c = \\\\\\\\\\'0101\\\\\\\\\\';\":str, \"default_pipe\":str, 44:int);',), ('barrier X_120:bit := language.dataflow();',), ('    X_47:bat[:str] := bat.new(nil:str);',), ('    X_53:bat[:int] := bat.new(nil:int);',), ('    X_51:bat[:int] := bat.new(nil:int);',), ('    X_50:bat[:str] := bat.new(nil:str);',), ('    X_49:bat[:str] := bat.new(nil:str);',), ('    X_6:int := sql.mvc();',), ('    X_10:bat[:int] := sql.bind(X_6:int, \"sys\":str, \"t1\":str, \"b\":str, 0:int);',), ('    C_7:bat[:oid] := sql.tid(X_6:int, \"sys\":str, \"t1\":str);',), ('    C_29:bat[:oid] := algebra.thetaselect(X_10:bat[:int], C_7:bat[:oid], 1:int, \"==\":str);',), ('    X_31:bat[:int] := algebra.projection(C_29:bat[:oid], X_10:bat[:int]);',), ('    X_33:bat[:str] := batcalc.str(7:int, 32:int, 0:int, 0:int, X_31:bat[:int], 0:int);',), ('    X_20:bat[:int] := sql.bind(X_6:int, \"sys\":str, \"t1\":str, \"c\":str, 0:int);',), ('    X_32:bat[:int] := algebra.projection(C_29:bat[:oid], X_20:bat[:int]);',), ('    X_38:bat[:str] := batcalc.str(7:int, 32:int, 0:int, 0:int, X_32:bat[:int], 0:int);',), ('    X_39:bat[:str] := batcalc.+(X_33:bat[:str], X_38:bat[:str]);',), ('    C_42:bat[:oid] := algebra.thetaselect(X_39:bat[:str], \"0101\":str, \"==\":str);',), ('    X_44:bat[:int] := algebra.projection(C_42:bat[:oid], X_32:bat[:int]);',), ('    X_43:bat[:int] := algebra.projection(C_42:bat[:oid], X_31:bat[:int]);',), ('    X_54:bat[:str] := bat.append(X_47:bat[:str], \"sys.t1\":str);',), ('    X_56:bat[:str] := bat.append(X_49:bat[:str], \"b\":str);',), ('    X_58:bat[:str] := bat.append(X_50:bat[:str], \"int\":str);',), ('    X_60:bat[:int] := bat.append(X_51:bat[:int], 32:int);',), ('    X_61:bat[:int] := bat.append(X_53:bat[:int], 0:int);',), ('    X_63:bat[:str] := bat.append(X_54:bat[:str], \"sys.t1\":str);',), ('    X_64:bat[:str] := bat.append(X_56:bat[:str], \"c\":str);',), ('    X_66:bat[:str] := bat.append(X_58:bat[:str], \"int\":str);',), ('    X_67:bat[:int] := bat.append(X_60:bat[:int], 32:int);',), ('    X_68:bat[:int] := bat.append(X_61:bat[:int], 0:int);',), ('    language.pass(X_10:bat[:int]);',), ('    language.pass(C_29:bat[:oid]);',), ('    language.pass(X_32:bat[:int]);',), ('    language.pass(C_42:bat[:oid]);',), ('    language.pass(X_31:bat[:int]);',), ('exit X_120:bit;',), ('    sql.resultSet(X_63:bat[:str], X_64:bat[:str], X_66:bat[:str], X_67:bat[:int], X_68:bat[:int], X_43:bat[:int], X_44:bat[:int]);',), ('end user.s2_1;',), ('#inline               actions= 0 time=1 usec ',), ('#remap                actions= 3 time=5 usec ',), ('#costmodel            actions= 1 time=0 usec ',), ('#coercion             actions= 0 time=0 usec ',), ('#evaluate             actions= 3 time=10 usec ',), ('#emptybind            actions= 2 time=3 usec ',), ('#pushselect           actions= 3 time=4 usec ',), ('#aliases              actions= 7 time=3 usec ',), ('#mergetable           actions= 0 time=10 usec ',), ('#deadcode             actions= 5 time=3 usec ',), ('#aliases              actions= 0 time=0 usec ',), ('#constants            actions= 6 time=3 usec ',), ('#commonTerms          actions= 0 time=1 usec ',), ('#projectionpath       actions= 0 time=2 usec ',), ('#deadcode             actions= 0 time=2 usec ',), ('#reorder              actions= 1 time=9 usec ',), ('#matpack              actions= 0 time=0 usec ',), ('#dataflow             actions= 1 time=11 usec ',), ('#multiplex            actions= 0 time=1 usec ',), ('#profiler             actions=1 time=1 usec ',), ('#candidates           actions=1 time=0 usec ',), ('#deadcode             actions= 0 time=3 usec ',), ('#wlc                  actions= 0 time=0 usec ',), ('#garbagecollector     actions= 1 time=19 usec ',), ('#total                actions=28 time=130 usec ',))", "rowcount": 64, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 64, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_40_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_40_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 3, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_41_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "monetdb_43_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('string ', 'string '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('string ', 'string '))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 3, "FN": 1}
{"sql_id": "monetdb_43_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected SELECT, expecting AS in: \"create table t1 select\"\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_43_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_43_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_44_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'string_agg(int,char)'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "monetdb_44_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: cannot use non GROUP BY column 'a' in query results without an aggregate function\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "monetdb_44_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_44_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected sqlINT in: \"select coalesce(a,'') from t1 group by 1\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected sqlINT in: \"select coalesce(a, '') from t1 group by 1\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_44_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'tolower(int)'\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_44_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_44_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_45_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,bigint)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT, expecting SCOLON in: \"select * from t1 where a = ''       xxx\"\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_45_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'ifnull(char,char)'\n", "exec_able": false}, "predict_exec_result": {"result": "(('', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_45_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IF in: \"select if\"\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "monetdb_45_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'ifnull(char,char)'\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_45_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(char,char)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ',', expecting ')' in: \"select min(c1,\"\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 2}
{"sql_id": "monetdb_45_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected IDENT in: \"otherwise\"\n!42000!syntax error, unexpected ELSE in: \"else\"\n!42000!syntax error, unexpected ELSE in: \"else\"\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "monetdb_45_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_45_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Illegal argument: pad string is empty\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "monetdb_45_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Illegal argument: pad string is empty\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Illegal argument: pad string is empty\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_46_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('2003-01-02 10:11:12', '%Y-%m-%d %H:%M:%S', datetime.date(2003, 1, 2)))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('2003-01-02 10:11:12', '%Y-%m-%d %H:%M:%S', datetime.date(2003, 1, 2)))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_46_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2003-01-02 10:11:12', '%Y-%m-%d %H:%M:%S', '2003-01-02'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('2003-01-02 10:11:12', '%Y-%m-%d %H:%M:%S', datetime.date(2003, 1, 2)))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "monetdb_46_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2003-01-02 10:11:12', '%Y-%m-%d %H:%M:%S', datetime.date(2003, 1, 2)))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'date(date)'\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "monetdb_46_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'timestamp_to_str(date,char)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected STRING in: \"select extract('%d'\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_46_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Day (DY), DD Month (MON) YYYY',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'strftime(date,char)'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_47_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2004, 4, 30),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'to_timestamp(char,char)'\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_47_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2004, 4, 30),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Invalid identifier '%m/%d/%Y'\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_47_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(2004, 4, 30),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2004, 4, 30),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_47_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "22007!Incorrect timestamp value (0000-01-01) in: \"select sys.timestamp_to_str(timestamp '0000-01-01',\"\n!42000!syntax error, unexpected STRING in: \"'Day DD Month YYYY'\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "format '%d-%m-%Y', doesn't match date '0000-01-01'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_47_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "22007!Incorrect timestamp value (0000-02-28) in: \"select sys.timestamp_to_str(timestamp '0000-02-28',\"\n!42000!syntax error, unexpected STRING in: \"'Day DD Month YYYY'\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(\"Weekday\"\"\n", "exec_able": false}}, "TP": 0, "FP": 9, "FN": 1}
{"sql_id": "monetdb_47_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Day DD Month YYYY',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Invalid identifier '%Y-%m-%d'\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "monetdb_49_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring\\\\t|',), ('|teststring|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT, expecting SCOLON in: \"select concat('|', text1, '|') as c from t1 where text1 = ''teststring\"\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_49_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'teststring' unknown\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "monetdb_49_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('nothing', 7), ('teststring', 10), ('teststring\\\\t', 12))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'len(varchar)'\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_49_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|nothing|',), ('|teststring|',), ('|teststring |',), ('|teststring\\\\t|',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '|' unknown\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_49_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_49_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Unexpected symbol (\\)\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_49_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring |',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_50_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((\"Let's create some new events from the name of \",))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Unexpected symbol (\\)\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 1}
{"sql_id": "monetdb_51_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_51_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'x' unknown\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_51_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,), (None,), ('',), ('',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 4, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_51_18", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_51_19", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_51_20", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_51_21", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_51_22", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_51_23", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_51_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((6, 40013), (5, 40008), (4, 40005), (3, 40003), (2, 40002), (1, 40001))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6, 1), (5, 1), (4, 1), (3, 1), (2, 1), (1, 1))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_52_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_2:void := querylog.define(\"explain select * from t1 where octet_length(t1.vc) > 3;\":str, \"default_pipe\":str, 81:int);',), ('barrier X_173:bit := language.dataflow();',), ('    X_68:bat[:str] := bat.new(nil:str);',), ('    X_74:bat[:int] := bat.new(nil:int);',), ('    X_72:bat[:int] := bat.new(nil:int);',), ('    X_71:bat[:str] := bat.new(nil:str);',), ('    X_70:bat[:str] := bat.new(nil:str);',), ('    X_5:int := sql.mvc();',), ('    X_40:bat[:str] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"vc\":str, 0:int);',), ('    X_54:bat[:int] := batstr.nbytes(X_40:bat[:str]);',), ('    C_6:bat[:oid] := sql.tid(X_5:int, \"sys\":str, \"t1\":str);',), ('    C_59:bat[:oid] := algebra.thetaselect(X_54:bat[:int], C_6:bat[:oid], 3:int, \">\":str);',), ('    X_47:bat[:str] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"vc_ft\":str, 0:int);',), ('    X_66:bat[:str] := algebra.projection(C_59:bat[:oid], X_47:bat[:str]);',), ('    X_65:bat[:str] := algebra.projection(C_59:bat[:oid], X_40:bat[:str]);',), ('    X_33:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"col4\":str, 0:int);',), ('    X_64:bat[:int] := algebra.projection(C_59:bat[:oid], X_33:bat[:int]);',), ('    X_26:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"col3\":str, 0:int);',), ('    X_63:bat[:int] := algebra.projection(C_59:bat[:oid], X_26:bat[:int]);',), ('    X_19:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"col2_idx\":str, 0:int);',), ('    X_62:bat[:int] := algebra.projection(C_59:bat[:oid], X_19:bat[:int]);',), ('    X_9:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"col1_idx\":str, 0:int);',), ('    X_61:bat[:int] := algebra.projection(C_59:bat[:oid], X_9:bat[:int]);',), ('    X_75:bat[:str] := bat.append(X_68:bat[:str], \"sys.t1\":str);',), ('    X_77:bat[:str] := bat.append(X_70:bat[:str], \"col1_idx\":str);',), ('    X_79:bat[:str] := bat.append(X_71:bat[:str], \"int\":str);',), ('    X_81:bat[:int] := bat.append(X_72:bat[:int], 32:int);',), ('    X_83:bat[:int] := bat.append(X_74:bat[:int], 0:int);',), ('    X_85:bat[:str] := bat.append(X_75:bat[:str], \"sys.t1\":str);',), ('    X_86:bat[:str] := bat.append(X_77:bat[:str], \"col2_idx\":str);',), ('    X_88:bat[:str] := bat.append(X_79:bat[:str], \"int\":str);',), ('    X_89:bat[:int] := bat.append(X_81:bat[:int], 32:int);',), ('    X_90:bat[:int] := bat.append(X_83:bat[:int], 0:int);',), ('    X_91:bat[:str] := bat.append(X_85:bat[:str], \"sys.t1\":str);',), ('    X_92:bat[:str] := bat.append(X_86:bat[:str], \"col3\":str);',), ('    X_94:bat[:str] := bat.append(X_88:bat[:str], \"int\":str);',), ('    X_95:bat[:int] := bat.append(X_89:bat[:int], 32:int);',), ('    X_96:bat[:int] := bat.append(X_90:bat[:int], 0:int);',), ('    X_97:bat[:str] := bat.append(X_91:bat[:str], \"sys.t1\":str);',), ('    X_98:bat[:str] := bat.append(X_92:bat[:str], \"col4\":str);',), ('    X_100:bat[:str] := bat.append(X_94:bat[:str], \"int\":str);',), ('    X_101:bat[:int] := bat.append(X_95:bat[:int], 32:int);',), ('    X_102:bat[:int] := bat.append(X_96:bat[:int], 0:int);',), ('    X_103:bat[:str] := bat.append(X_97:bat[:str], \"sys.t1\":str);',), ('    X_104:bat[:str] := bat.append(X_98:bat[:str], \"vc\":str);',), ('    X_106:bat[:str] := bat.append(X_100:bat[:str], \"varchar\":str);',), ('    X_108:bat[:int] := bat.append(X_101:bat[:int], 30:int);',), ('    X_110:bat[:int] := bat.append(X_102:bat[:int], 0:int);',), ('    X_111:bat[:str] := bat.append(X_103:bat[:str], \"sys.t1\":str);',), ('    X_113:bat[:str] := bat.append(X_104:bat[:str], \"vc_ft\":str);',), ('    X_115:bat[:str] := bat.append(X_106:bat[:str], \"varchar\":str);',), ('    X_116:bat[:int] := bat.append(X_108:bat[:int], 30:int);',), ('    X_117:bat[:int] := bat.append(X_110:bat[:int], 0:int);',), ('    language.pass(X_40:bat[:str]);',), ('    language.pass(C_59:bat[:oid]);',), ('exit X_173:bit;',), ('    sql.resultSet(X_111:bat[:str], X_113:bat[:str], X_115:bat[:str], X_116:bat[:int], X_117:bat[:int], X_61:bat[:int], X_62:bat[:int], X_63:bat[:int], X_64:bat[:int], X_65:bat[:str], X_66:bat[:str]);',), ('end user.s2_1;',), ('#inline               actions= 0 time=1 usec ',), ('#remap                actions= 1 time=4 usec ',), ('#costmodel            actions= 1 time=1 usec ',), ('#coercion             actions= 0 time=0 usec ',), ('#evaluate             actions= 2 time=9 usec ',), ('#emptybind            actions= 6 time=4 usec ',), ('#pushselect           actions= 7 time=5 usec ',), ('#aliases              actions=14 time=3 usec ',), ('#mergetable           actions= 0 time=14 usec ',), ('#deadcode             actions=12 time=4 usec ',), ('#aliases              actions= 0 time=0 usec ',), ('#constants            actions=10 time=3 usec ',), ('#commonTerms          actions= 0 time=2 usec ',), ('#projectionpath       actions= 0 time=2 usec ',), ('#deadcode             actions= 0 time=3 usec ',), ('#reorder              actions= 1 time=33 usec ',), ('#matpack              actions= 0 time=0 usec ',), ('#dataflow             actions= 1 time=11 usec ',), ('#multiplex            actions= 0 time=0 usec ',), ('#profiler             actions=1 time=0 usec ',), ('#candidates           actions=1 time=1 usec ',), ('#deadcode             actions= 0 time=3 usec ',), ('#wlc                  actions= 0 time=0 usec ',), ('#garbagecollector     actions= 1 time=24 usec ',), ('#total                actions=28 time=172 usec ',))", "rowcount": 84, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 1, 1, 1, 'america', 'america'), (2, 2, 2, 2, 'england', 'england'), (3, 3, 3, 3, 'america', 'america'), (4, 4, 4, 4, 'england', 'england'), (5, 5, 5, 5, 'america', 'america'), (6, 6, 6, 6, 'england', 'england'), (7, 7, 7, 7, 'america', 'america'), (8, 8, 8, 8, 'england', 'england'), (9, 9, 9, 9, 'america', 'america'), (10, 10, 10, 10, 'england', 'england'), (11, 11, 11, 11, 'america', 'america'), (12, 12, 12, 12, 'england', 'england'), (13, 13, 13, 13, 'america', 'america'), (14, 14, 14, 14, 'england', 'england'), (15, 15, 15, 15, 'america', 'america'), (16, 16, 16, 16, 'england', 'england'), (17, 17, 17, 17, 'america', 'america'), (18, 18, 18, 18, 'england', 'england'), (19, 19, 19, 19, 'america', 'america'), (20, 20, 20, 20, 'england', 'england'), (21, 21, 21, 21, 'america', 'america'), (22, 22, 22, 22, 'england', 'england'), (23, 23, 23, 23, 'america', 'america'), (24, 24, 24, 24, 'england', 'england'), (25, 25, 25, 25, 'america', 'america'), (26, 26, 26, 26, 'england', 'england'), (27, 27, 27, 27, 'america', 'america'), (28, 28, 28, 28, 'england', 'england'), (29, 29, 29, 29, 'america', 'america'), (30, 30, 30, 30, 'england', 'england'), (31, 31, 31, 31, 'america', 'america'), (32, 32, 32, 32, 'england', 'england'), (33, 33, 33, 33, 'america', 'america'), (34, 34, 34, 34, 'england', 'england'), (35, 35, 35, 35, 'america', 'america'), (36, 36, 36, 36, 'england', 'england'), (37, 37, 37, 37, 'america', 'america'), (38, 38, 38, 38, 'england', 'england'), (39, 39, 39, 39, 'america', 'america'), (40, 40, 40, 40, 'england', 'england'), (41, 41, 41, 41, 'america', 'america'), (42, 42, 42, 42, 'england', 'england'), (43, 43, 43, 43, 'america', 'america'), (44, 44, 44, 44, 'england', 'england'), (45, 45, 45, 45, 'america', 'america'), (46, 46, 46, 46, 'england', 'england'), (47, 47, 47, 47, 'america', 'america'), (48, 48, 48, 48, 'england', 'england'), (49, 49, 49, 49, 'america', 'america'), (50, 50, 50, 50, 'england', 'england'), (51, 51, 51, 51, 'america', 'america'), (52, 52, 52, 52, 'england', 'england'), (53, 53, 53, 53, 'america', 'america'), (54, 54, 54, 54, 'england', 'england'), (55, 55, 55, 55, 'america', 'america'), (56, 56, 56, 56, 'england', 'england'), (57, 57, 57, 57, 'america', 'america'), (58, 58, 58, 58, 'england', 'england'), (59, 59, 59, 59, 'america', 'america'), (60, 60, 60, 60, 'england', 'england'), (61, 61, 61, 61, 'america', 'america'), (62, 62, 62, 62, 'england', 'england'), (63, 63, 63, 63, 'america', 'america'), (64, 64, 64, 64, 'england', 'england'), (65, 65, 65, 65, 'america', 'america'), (66, 66, 66, 66, 'england', 'england'), (67, 67, 67, 67, 'america', 'america'), (68, 68, 68, 68, 'england', 'england'), (69, 69, 69, 69, 'america', 'america'), (70, 70, 70, 70, 'england', 'england'), (71, 71, 71, 71, 'america', 'america'), (72, 72, 72, 72, 'england', 'england'), (73, 73, 73, 73, 'america', 'america'), (74, 74, 74, 74, 'england', 'england'), (75, 75, 75, 75, 'america', 'america'), (76, 76, 76, 76, 'england', 'england'), (77, 77, 77, 77, 'america', 'america'), (78, 78, 78, 78, 'england', 'england'), (79, 79, 79, 79, 'america', 'america'), (80, 80, 80, 80, 'england', 'england'), (81, 81, 81, 81, 'america', 'america'), (82, 82, 82, 82, 'england', 'england'), (83, 83, 83, 83, 'america', 'america'), (84, 84, 84, 84, 'england', 'england'), (85, 85, 85, 85, 'america', 'america'), (86, 86, 86, 86, 'england', 'england'), (87, 87, 87, 87, 'america', 'america'), (88, 88, 88, 88, 'england', 'england'), (89, 89, 89, 89, 'america', 'america'), (90, 90, 90, 90, 'england', 'england'), (91, 91, 91, 91, 'america', 'america'), (92, 92, 92, 92, 'england', 'england'), (93, 93, 93, 93, 'america', 'america'), (94, 94, 94, 94, 'england', 'england'), (95, 95, 95, 95, 'america', 'america'), (96, 96, 96, 96, 'england', 'england'), (97, 97, 97, 97, 'america', 'america'), (98, 98, 98, 98, 'england', 'england'), (99, 99, 99, 99, 'america', 'america'), (100, 100, 100, 100, 'england', 'england'), (101, 101, 101, 101, 'america', 'america'), (102, 102, 102, 102, 'england', 'england'), (103, 103, 103, 103, 'america', 'america'), (104, 104, 104, 104, 'england', 'england'), (105, 105, 105, 105, 'america', 'america'), (106, 106, 106, 106, 'england', 'england'), (107, 107, 107, 107, 'america', 'america'), (108, 108, 108, 108, 'england', 'england'), (109, 109, 109, 109, 'america', 'america'), (110, 110, 110, 110, 'england', 'england'), (111, 111, 111, 111, 'america', 'america'), (112, 112, 112, 112, 'england', 'england'), (113, 113, 113, 113, 'america', 'america'), (114, 114, 114, 114, 'england', 'england'), (115, 115, 115, 115, 'america', 'america'), (116, 116, 116, 116, 'england', 'england'), (117, 117, 117, 117, 'america', 'america'), (118, 118, 118, 118, 'england', 'england'), (119, 119, 119, 119, 'america', 'america'), (120, 120, 120, 120, 'england', 'england'), (121, 121, 121, 121, 'america', 'america'), (122, 122, 122, 122, 'england', 'england'), (123, 123, 123, 123, 'america', 'america'), (124, 124, 124, 124, 'england', 'england'), (125, 125, 125, 125, 'america', 'america'), (126, 126, 126, 126, 'england', 'england'), (127, 127, 127, 127, 'america', 'america'), (128, 128, 128, 128, 'england', 'england'), (1, 1, 1, 1, 'america', 'america'), (2, 2, 2, 2, 'america', 'america'), (3, 3, 3, 3, 'america', 'america'), (4, 4, 4, 4, 'america', 'america'), (5, 5, 5, 5, 'america', 'america'), (6, 6, 6, 6, 'america', 'america'), (7, 7, 7, 7, 'america', 'america'), (8, 8, 8, 8, 'america', 'america'), (9, 9, 9, 9, 'america', 'america'), (10, 10, 10, 10, 'america', 'america'), (11, 11, 11, 11, 'america', 'america'), (12, 12, 12, 12, 'america', 'america'), (13, 13, 13, 13, 'america', 'america'), (14, 14, 14, 14, 'america', 'america'), (15, 15, 15, 15, 'america', 'america'), (16, 16, 16, 16, 'america', 'america'), (17, 17, 17, 17, 'america', 'america'), (18, 18, 18, 18, 'america', 'america'), (19, 19, 19, 19, 'america', 'america'), (20, 20, 20, 20, 'america', 'america'), (21, 21, 21, 21, 'america', 'america'), (22, 22, 22, 22, 'america', 'america'), (23, 23, 23, 23, 'america', 'america'), (24, 24, 24, 24, 'america', 'america'), (25, 25, 25, 25, 'america', 'america'), (26, 26, 26, 26, 'america', 'america'), (27, 27, 27, 27, 'america', 'america'), (28, 28, 28, 28, 'america', 'america'), (29, 29, 29, 29, 'america', 'america'), (30, 30, 30, 30, 'america', 'america'), (31, 31, 31, 31, 'america', 'america'), (32, 32, 32, 32, 'america', 'america'), (33, 33, 33, 33, 'america', 'america'), (34, 34, 34, 34, 'america', 'america'), (35, 35, 35, 35, 'america', 'america'), (36, 36, 36, 36, 'america', 'america'), (37, 37, 37, 37, 'america', 'america'), (38, 38, 38, 38, 'america', 'america'), (39, 39, 39, 39, 'america', 'america'), (40, 40, 40, 40, 'america', 'america'), (41, 41, 41, 41, 'america', 'america'), (42, 42, 42, 42, 'america', 'america'), (43, 43, 43, 43, 'america', 'america'), (44, 44, 44, 44, 'america', 'america'), (45, 45, 45, 45, 'america', 'america'), (46, 46, 46, 46, 'america', 'america'), (47, 47, 47, 47, 'america', 'america'), (48, 48, 48, 48, 'america', 'america'), (49, 49, 49, 49, 'america', 'america'), (50, 50, 50, 50, 'america', 'america'), (51, 51, 51, 51, 'america', 'america'), (52, 52, 52, 52, 'america', 'america'), (53, 53, 53, 53, 'america', 'america'), (54, 54, 54, 54, 'america', 'america'), (55, 55, 55, 55, 'america', 'america'), (56, 56, 56, 56, 'america', 'america'), (57, 57, 57, 57, 'america', 'america'), (58, 58, 58, 58, 'america', 'america'), (59, 59, 59, 59, 'america', 'america'), (60, 60, 60, 60, 'america', 'america'), (61, 61, 61, 61, 'america', 'america'), (62, 62, 62, 62, 'america', 'america'), (63, 63, 63, 63, 'america', 'america'), (64, 64, 64, 64, 'america', 'america'), (65, 65, 65, 65, 'america', 'america'), (66, 66, 66, 66, 'america', 'america'), (67, 67, 67, 67, 'america', 'america'), (68, 68, 68, 68, 'america', 'america'), (69, 69, 69, 69, 'america', 'america'), (70, 70, 70, 70, 'america', 'america'), (71, 71, 71, 71, 'america', 'america'), (72, 72, 72, 72, 'america', 'america'), (73, 73, 73, 73, 'america', 'america'), (74, 74, 74, 74, 'america', 'america'), (75, 75, 75, 75, 'america', 'america'), (76, 76, 76, 76, 'america', 'america'), (77, 77, 77, 77, 'america', 'america'), (78, 78, 78, 78, 'america', 'america'), (79, 79, 79, 79, 'america', 'america'), (80, 80, 80, 80, 'america', 'america'), (81, 81, 81, 81, 'america', 'america'), (82, 82, 82, 82, 'america', 'america'), (83, 83, 83, 83, 'america', 'america'), (84, 84, 84, 84, 'america', 'america'), (85, 85, 85, 85, 'america', 'america'), (86, 86, 86, 86, 'america', 'america'), (87, 87, 87, 87, 'america', 'america'), (88, 88, 88, 88, 'america', 'america'), (89, 89, 89, 89, 'america', 'america'), (90, 90, 90, 90, 'america', 'america'), (91, 91, 91, 91, 'america', 'america'), (92, 92, 92, 92, 'america', 'america'), (93, 93, 93, 93, 'america', 'america'), (94, 94, 94, 94, 'america', 'america'), (95, 95, 95, 95, 'america', 'america'), (96, 96, 96, 96, 'america', 'america'), (97, 97, 97, 97, 'america', 'america'), (98, 98, 98, 98, 'america', 'america'), (99, 99, 99, 99, 'america', 'america'), (100, 100, 100, 100, 'america', 'america'), (101, 101, 101, 101, 'america', 'america'), (102, 102, 102, 102, 'america', 'america'), (103, 103, 103, 103, 'america', 'america'), (104, 104, 104, 104, 'america', 'america'), (105, 105, 105, 105, 'america', 'america'), (106, 106, 106, 106, 'america', 'america'), (107, 107, 107, 107, 'america', 'america'), (108, 108, 108, 108, 'america', 'america'), (109, 109, 109, 109, 'america', 'america'), (110, 110, 110, 110, 'america', 'america'), (111, 111, 111, 111, 'america', 'america'), (112, 112, 112, 112, 'america', 'america'), (113, 113, 113, 113, 'america', 'america'), (114, 114, 114, 114, 'america', 'america'), (115, 115, 115, 115, 'america', 'america'), (116, 116, 116, 116, 'america', 'america'), (117, 117, 117, 117, 'america', 'america'), (118, 118, 118, 118, 'america', 'america'), (119, 119, 119, 119, 'america', 'america'), (120, 120, 120, 120, 'america', 'america'), (121, 121, 121, 121, 'america', 'america'), (122, 122, 122, 122, 'america', 'america'), (123, 123, 123, 123, 'america', 'america'), (124, 124, 124, 124, 'america', 'america'), (125, 125, 125, 125, 'america', 'america'), (126, 126, 126, 126, 'america', 'america'), (127, 127, 127, 127, 'america', 'america'), (128, 128, 128, 128, 'america', 'america'), (1, 1, 1, 1, 'england america', 'england america'), (2, 2, 2, 2, 'england america', 'england america'), (3, 3, 3, 3, 'england america', 'england america'), (4, 4, 4, 4, 'england america', 'england america'), (5, 5, 5, 5, 'england america', 'england america'), (6, 6, 6, 6, 'england america', 'england america'), (7, 7, 7, 7, 'england america', 'england america'), (8, 8, 8, 8, 'england america', 'england america'), (9, 9, 9, 9, 'england america', 'england america'), (10, 10, 10, 10, 'england america', 'england america'), (11, 11, 11, 11, 'england america', 'england america'), (12, 12, 12, 12, 'england america', 'england america'), (13, 13, 13, 13, 'england america', 'england america'), (14, 14, 14, 14, 'england america', 'england america'), (15, 15, 15, 15, 'england america', 'england america'), (16, 16, 16, 16, 'england america', 'england america'), (17, 17, 17, 17, 'england america', 'england america'), (18, 18, 18, 18, 'england america', 'england america'), (19, 19, 19, 19, 'england america', 'england america'), (20, 20, 20, 20, 'england america', 'england america'), (21, 21, 21, 21, 'england america', 'england america'), (22, 22, 22, 22, 'england america', 'england america'), (23, 23, 23, 23, 'england america', 'england america'), (24, 24, 24, 24, 'england america', 'england america'), (25, 25, 25, 25, 'england america', 'england america'), (26, 26, 26, 26, 'england america', 'england america'), (27, 27, 27, 27, 'england america', 'england america'), (28, 28, 28, 28, 'england america', 'england america'), (29, 29, 29, 29, 'england america', 'england america'), (30, 30, 30, 30, 'england america', 'england america'), (31, 31, 31, 31, 'england america', 'england america'), (32, 32, 32, 32, 'england america', 'england america'), (33, 33, 33, 33, 'england america', 'england america'), (34, 34, 34, 34, 'england america', 'england america'), (35, 35, 35, 35, 'england america', 'england america'), (36, 36, 36, 36, 'england america', 'england america'), (37, 37, 37, 37, 'england america', 'england america'), (38, 38, 38, 38, 'england america', 'england america'), (39, 39, 39, 39, 'england america', 'england america'), (40, 40, 40, 40, 'england america', 'england america'), (41, 41, 41, 41, 'england america', 'england america'), (42, 42, 42, 42, 'england america', 'england america'), (43, 43, 43, 43, 'england america', 'england america'), (44, 44, 44, 44, 'england america', 'england america'), (45, 45, 45, 45, 'england america', 'england america'), (46, 46, 46, 46, 'england america', 'england america'), (47, 47, 47, 47, 'england america', 'england america'), (48, 48, 48, 48, 'england america', 'england america'), (49, 49, 49, 49, 'england america', 'england america'), (50, 50, 50, 50, 'england america', 'england america'), (51, 51, 51, 51, 'england america', 'england america'), (52, 52, 52, 52, 'england america', 'england america'), (53, 53, 53, 53, 'england america', 'england america'), (54, 54, 54, 54, 'england america', 'england america'), (55, 55, 55, 55, 'england america', 'england america'), (56, 56, 56, 56, 'england america', 'england america'), (57, 57, 57, 57, 'england america', 'england america'), (58, 58, 58, 58, 'england america', 'england america'), (59, 59, 59, 59, 'england america', 'england america'), (60, 60, 60, 60, 'england america', 'england america'), (61, 61, 61, 61, 'england america', 'england america'), (62, 62, 62, 62, 'england america', 'england america'), (63, 63, 63, 63, 'england america', 'england america'), (64, 64, 64, 64, 'england america', 'england america'), (65, 65, 65, 65, 'england america', 'england america'), (66, 66, 66, 66, 'england america', 'england america'), (67, 67, 67, 67, 'england america', 'england america'), (68, 68, 68, 68, 'england america', 'england america'), (69, 69, 69, 69, 'england america', 'england america'), (70, 70, 70, 70, 'england america', 'england america'), (71, 71, 71, 71, 'england america', 'england america'), (72, 72, 72, 72, 'england america', 'england america'), (73, 73, 73, 73, 'england america', 'england america'), (74, 74, 74, 74, 'england america', 'england america'), (75, 75, 75, 75, 'england america', 'england america'), (76, 76, 76, 76, 'england america', 'england america'), (77, 77, 77, 77, 'england america', 'england america'), (78, 78, 78, 78, 'england america', 'england america'), (79, 79, 79, 79, 'england america', 'england america'), (80, 80, 80, 80, 'england america', 'england america'), (81, 81, 81, 81, 'england america', 'england america'), (82, 82, 82, 82, 'england america', 'england america'), (83, 83, 83, 83, 'england america', 'england america'), (84, 84, 84, 84, 'england america', 'england america'), (85, 85, 85, 85, 'england america', 'england america'), (86, 86, 86, 86, 'england america', 'england america'), (87, 87, 87, 87, 'england america', 'england america'), (88, 88, 88, 88, 'england america', 'england america'), (89, 89, 89, 89, 'england america', 'england america'), (90, 90, 90, 90, 'england america', 'england america'), (91, 91, 91, 91, 'england america', 'england america'), (92, 92, 92, 92, 'england america', 'england america'), (93, 93, 93, 93, 'england america', 'england america'), (94, 94, 94, 94, 'england america', 'england america'), (95, 95, 95, 95, 'england america', 'england america'), (96, 96, 96, 96, 'england america', 'england america'), (97, 97, 97, 97, 'england america', 'england america'), (98, 98, 98, 98, 'england america', 'england america'), (99, 99, 99, 99, 'england america', 'england america'), (100, 100, 100, 100, 'england america', 'england america'), (101, 101, 101, 101, 'england america', 'england america'), (102, 102, 102, 102, 'england america', 'england america'), (103, 103, 103, 103, 'england america', 'england america'), (104, 104, 104, 104, 'england america', 'england america'), (105, 105, 105, 105, 'england america', 'england america'), (106, 106, 106, 106, 'england america', 'england america'), (107, 107, 107, 107, 'england america', 'england america'), (108, 108, 108, 108, 'england america', 'england america'), (109, 109, 109, 109, 'england america', 'england america'), (110, 110, 110, 110, 'england america', 'england america'), (111, 111, 111, 111, 'england america', 'england america'), (112, 112, 112, 112, 'england america', 'england america'), (113, 113, 113, 113, 'england america', 'england america'), (114, 114, 114, 114, 'england america', 'england america'), (115, 115, 115, 115, 'england america', 'england america'), (116, 116, 116, 116, 'england america', 'england america'), (117, 117, 117, 117, 'england america', 'england america'), (118, 118, 118, 118, 'england america', 'england america'), (119, 119, 119, 119, 'england america', 'england america'), (120, 120, 120, 120, 'england america', 'england america'), (121, 121, 121, 121, 'england america', 'england america'), (122, 122, 122, 122, 'england america', 'england america'), (123, 123, 123, 123, 'england america', 'england america'), (124, 124, 124, 124, 'england america', 'england america'), (125, 125, 125, 125, 'england america', 'england america'), (126, 126, 126, 126, 'england america', 'england america'), (127, 127, 127, 127, 'england america', 'england america'), (128, 128, 128, 128, 'england america', 'england america'), (1, 1, 1, 1, 'england america', 'england america'), (2, 2, 2, 2, 'england america', 'england america'), (3, 3, 3, 3, 'england america', 'england america'), (4, 4, 4, 4, 'england america', 'england america'), (5, 5, 5, 5, 'england america', 'england america'), (6, 6, 6, 6, 'england america', 'england america'), (7, 7, 7, 7, 'england america', 'england america'), (8, 8, 8, 8, 'england america', 'england america'), (9, 9, 9, 9, 'england america', 'england america'), (10, 10, 10, 10, 'england america', 'england america'), (11, 11, 11, 11, 'england america', 'england america'), (12, 12, 12, 12, 'england america', 'england america'), (13, 13, 13, 13, 'england america', 'england america'), (14, 14, 14, 14, 'england america', 'england america'), (15, 15, 15, 15, 'england america', 'england america'), (16, 16, 16, 16, 'england america', 'england america'), (17, 17, 17, 17, 'england america', 'england america'), (18, 18, 18, 18, 'england america', 'england america'), (19, 19, 19, 19, 'england america', 'england america'), (20, 20, 20, 20, 'england america', 'england america'), (21, 21, 21, 21, 'england america', 'england america'), (22, 22, 22, 22, 'england america', 'england america'), (23, 23, 23, 23, 'england america', 'england america'), (24, 24, 24, 24, 'england america', 'england america'), (25, 25, 25, 25, 'england america', 'england america'), (26, 26, 26, 26, 'england america', 'england america'), (27, 27, 27, 27, 'england america', 'england america'), (28, 28, 28, 28, 'england america', 'england america'), (29, 29, 29, 29, 'england america', 'england america'), (30, 30, 30, 30, 'england america', 'england america'), (31, 31, 31, 31, 'england america', 'england america'), (32, 32, 32, 32, 'england america', 'england america'), (33, 33, 33, 33, 'england america', 'england america'), (34, 34, 34, 34, 'england america', 'england america'), (35, 35, 35, 35, 'england america', 'england america'), (36, 36, 36, 36, 'england america', 'england america'), (37, 37, 37, 37, 'england america', 'england america'), (38, 38, 38, 38, 'england america', 'england america'), (39, 39, 39, 39, 'england america', 'england america'), (40, 40, 40, 40, 'england america', 'england america'), (41, 41, 41, 41, 'england america', 'england america'), (42, 42, 42, 42, 'england america', 'england america'), (43, 43, 43, 43, 'england america', 'england america'), (44, 44, 44, 44, 'england america', 'england america'), (45, 45, 45, 45, 'england america', 'england america'), (46, 46, 46, 46, 'england america', 'england america'), (47, 47, 47, 47, 'england america', 'england america'), (48, 48, 48, 48, 'england america', 'england america'), (49, 49, 49, 49, 'england america', 'england america'), (50, 50, 50, 50, 'england america', 'england america'), (51, 51, 51, 51, 'england america', 'england america'), (52, 52, 52, 52, 'england america', 'england america'), (53, 53, 53, 53, 'england america', 'england america'), (54, 54, 54, 54, 'england america', 'england america'), (55, 55, 55, 55, 'england america', 'england america'), (56, 56, 56, 56, 'england america', 'england america'), (57, 57, 57, 57, 'england america', 'england america'), (58, 58, 58, 58, 'england america', 'england america'), (59, 59, 59, 59, 'england america', 'england america'), (60, 60, 60, 60, 'england america', 'england america'), (61, 61, 61, 61, 'england america', 'england america'), (62, 62, 62, 62, 'england america', 'england america'), (63, 63, 63, 63, 'england america', 'england america'), (64, 64, 64, 64, 'england america', 'england america'), (65, 65, 65, 65, 'england america', 'england america'), (66, 66, 66, 66, 'england america', 'england america'), (67, 67, 67, 67, 'england america', 'england america'), (68, 68, 68, 68, 'england america', 'england america'), (69, 69, 69, 69, 'england america', 'england america'), (70, 70, 70, 70, 'england america', 'england america'), (71, 71, 71, 71, 'england america', 'england america'), (72, 72, 72, 72, 'england america', 'england america'), (73, 73, 73, 73, 'england america', 'england america'), (74, 74, 74, 74, 'england america', 'england america'), (75, 75, 75, 75, 'england america', 'england america'), (76, 76, 76, 76, 'england america', 'england america'), (77, 77, 77, 77, 'england america', 'england america'), (78, 78, 78, 78, 'england america', 'england america'), (79, 79, 79, 79, 'england america', 'england america'), (80, 80, 80, 80, 'england america', 'england america'), (81, 81, 81, 81, 'england america', 'england america'), (82, 82, 82, 82, 'england america', 'england america'), (83, 83, 83, 83, 'england america', 'england america'), (84, 84, 84, 84, 'england america', 'england america'), (85, 85, 85, 85, 'england america', 'england america'), (86, 86, 86, 86, 'england america', 'england america'), (87, 87, 87, 87, 'england america', 'england america'), (88, 88, 88, 88, 'england america', 'england america'), (89, 89, 89, 89, 'england america', 'england america'), (90, 90, 90, 90, 'england america', 'england america'), (91, 91, 91, 91, 'england america', 'england america'), (92, 92, 92, 92, 'england america', 'england america'), (93, 93, 93, 93, 'england america', 'england america'), (94, 94, 94, 94, 'england america', 'england america'), (95, 95, 95, 95, 'england america', 'england america'), (96, 96, 96, 96, 'england america', 'england america'), (97, 97, 97, 97, 'england america', 'england america'), (98, 98, 98, 98, 'england america', 'england america'), (99, 99, 99, 99, 'england america', 'england america'), (100, 100, 100, 100, 'england america', 'england america'), (101, 101, 101, 101, 'england america', 'england america'), (102, 102, 102, 102, 'england america', 'england america'), (103, 103, 103, 103, 'england america', 'england america'), (104, 104, 104, 104, 'england america', 'england america'), (105, 105, 105, 105, 'england america', 'england america'), (106, 106, 106, 106, 'england america', 'england america'), (107, 107, 107, 107, 'england america', 'england america'), (108, 108, 108, 108, 'england america', 'england america'), (109, 109, 109, 109, 'england america', 'england america'), (110, 110, 110, 110, 'england america', 'england america'), (111, 111, 111, 111, 'england america', 'england america'), (112, 112, 112, 112, 'england america', 'england america'), (113, 113, 113, 113, 'england america', 'england america'), (114, 114, 114, 114, 'england america', 'england america'), (115, 115, 115, 115, 'england america', 'england america'), (116, 116, 116, 116, 'england america', 'england america'), (117, 117, 117, 117, 'england america', 'england america'), (118, 118, 118, 118, 'england america', 'england america'), (119, 119, 119, 119, 'england america', 'england america'), (120, 120, 120, 120, 'england america', 'england america'), (121, 121, 121, 121, 'england america', 'england america'), (122, 122, 122, 122, 'england america', 'england america'), (123, 123, 123, 123, 'england america', 'england america'), (124, 124, 124, 124, 'england america', 'england america'), (125, 125, 125, 125, 'england america', 'england america'), (126, 126, 126, 126, 'england america', 'england america'), (127, 127, 127, 127, 'england america', 'england america'), (128, 128, 128, 128, 'england america', 'england america'), (1, 1, 1, 1, 'germany england america', 'germany england america'), (2, 2, 2, 2, 'germany england america', 'germany england america'), (3, 3, 3, 3, 'germany england america', 'germany england america'), (4, 4, 4, 4, 'germany england america', 'germany england america'), (5, 5, 5, 5, 'germany england america', 'germany england america'), (6, 6, 6, 6, 'germany england america', 'germany england america'), (7, 7, 7, 7, 'germany england america', 'germany england america'), (8, 8, 8, 8, 'germany england america', 'germany england america'), (9, 9, 9, 9, 'germany england america', 'germany england america'), (10, 10, 10, 10, 'germany england america', 'germany england america'), (11, 11, 11, 11, 'germany england america', 'germany england america'), (12, 12, 12, 12, 'germany england america', 'germany england america'), (13, 13, 13, 13, 'germany england america', 'germany england america'), (14, 14, 14, 14, 'germany england america', 'germany england america'), (15, 15, 15, 15, 'germany england america', 'germany england america'), (16, 16, 16, 16, 'germany england america', 'germany england america'), (17, 17, 17, 17, 'germany england america', 'germany england america'), (18, 18, 18, 18, 'germany england america', 'germany england america'), (19, 19, 19, 19, 'germany england america', 'germany england america'), (20, 20, 20, 20, 'germany england america', 'germany england america'), (21, 21, 21, 21, 'germany england america', 'germany england america'), (22, 22, 22, 22, 'germany england america', 'germany england america'), (23, 23, 23, 23, 'germany england america', 'germany england america'), (24, 24, 24, 24, 'germany england america', 'germany england america'), (25, 25, 25, 25, 'germany england america', 'germany england america'), (26, 26, 26, 26, 'germany england america', 'germany england america'), (27, 27, 27, 27, 'germany england america', 'germany england america'), (28, 28, 28, 28, 'germany england america', 'germany england america'), (29, 29, 29, 29, 'germany england america', 'germany england america'), (30, 30, 30, 30, 'germany england america', 'germany england america'), (31, 31, 31, 31, 'germany england america', 'germany england america'), (32, 32, 32, 32, 'germany england america', 'germany england america'), (33, 33, 33, 33, 'germany england america', 'germany england america'), (34, 34, 34, 34, 'germany england america', 'germany england america'), (35, 35, 35, 35, 'germany england america', 'germany england america'), (36, 36, 36, 36, 'germany england america', 'germany england america'), (37, 37, 37, 37, 'germany england america', 'germany england america'), (38, 38, 38, 38, 'germany england america', 'germany england america'), (39, 39, 39, 39, 'germany england america', 'germany england america'), (40, 40, 40, 40, 'germany england america', 'germany england america'), (41, 41, 41, 41, 'germany england america', 'germany england america'), (42, 42, 42, 42, 'germany england america', 'germany england america'), (43, 43, 43, 43, 'germany england america', 'germany england america'), (44, 44, 44, 44, 'germany england america', 'germany england america'), (45, 45, 45, 45, 'germany england america', 'germany england america'), (46, 46, 46, 46, 'germany england america', 'germany england america'), (47, 47, 47, 47, 'germany england america', 'germany england america'), (48, 48, 48, 48, 'germany england america', 'germany england america'), (49, 49, 49, 49, 'germany england america', 'germany england america'), (50, 50, 50, 50, 'germany england america', 'germany england america'), (51, 51, 51, 51, 'germany england america', 'germany england america'), (52, 52, 52, 52, 'germany england america', 'germany england america'), (53, 53, 53, 53, 'germany england america', 'germany england america'), (54, 54, 54, 54, 'germany england america', 'germany england america'), (55, 55, 55, 55, 'germany england america', 'germany england america'), (56, 56, 56, 56, 'germany england america', 'germany england america'), (57, 57, 57, 57, 'germany england america', 'germany england america'), (58, 58, 58, 58, 'germany england america', 'germany england america'), (59, 59, 59, 59, 'germany england america', 'germany england america'), (60, 60, 60, 60, 'germany england america', 'germany england america'), (61, 61, 61, 61, 'germany england america', 'germany england america'), (62, 62, 62, 62, 'germany england america', 'germany england america'), (63, 63, 63, 63, 'germany england america', 'germany england america'), (64, 64, 64, 64, 'germany england america', 'germany england america'), (65, 65, 65, 65, 'germany england america', 'germany england america'), (66, 66, 66, 66, 'germany england america', 'germany england america'), (67, 67, 67, 67, 'germany england america', 'germany england america'), (68, 68, 68, 68, 'germany england america', 'germany england america'), (69, 69, 69, 69, 'germany england america', 'germany england america'), (70, 70, 70, 70, 'germany england america', 'germany england america'), (71, 71, 71, 71, 'germany england america', 'germany england america'), (72, 72, 72, 72, 'germany england america', 'germany england america'), (73, 73, 73, 73, 'germany england america', 'germany england america'), (74, 74, 74, 74, 'germany england america', 'germany england america'), (75, 75, 75, 75, 'germany england america', 'germany england america'), (76, 76, 76, 76, 'germany england america', 'germany england america'), (77, 77, 77, 77, 'germany england america', 'germany england america'), (78, 78, 78, 78, 'germany england america', 'germany england america'), (79, 79, 79, 79, 'germany england america', 'germany england america'), (80, 80, 80, 80, 'germany england america', 'germany england america'), (81, 81, 81, 81, 'germany england america', 'germany england america'), (82, 82, 82, 82, 'germany england america', 'germany england america'), (83, 83, 83, 83, 'germany england america', 'germany england america'), (84, 84, 84, 84, 'germany england america', 'germany england america'), (85, 85, 85, 85, 'germany england america', 'germany england america'), (86, 86, 86, 86, 'germany england america', 'germany england america'), (87, 87, 87, 87, 'germany england america', 'germany england america'), (88, 88, 88, 88, 'germany england america', 'germany england america'), (89, 89, 89, 89, 'germany england america', 'germany england america'), (90, 90, 90, 90, 'germany england america', 'germany england america'), (91, 91, 91, 91, 'germany england america', 'germany england america'), (92, 92, 92, 92, 'germany england america', 'germany england america'), (93, 93, 93, 93, 'germany england america', 'germany england america'), (94, 94, 94, 94, 'germany england america', 'germany england america'), (95, 95, 95, 95, 'germany england america', 'germany england america'), (96, 96, 96, 96, 'germany england america', 'germany england america'), (97, 97, 97, 97, 'germany england america', 'germany england america'), (98, 98, 98, 98, 'germany england america', 'germany england america'), (99, 99, 99, 99, 'germany england america', 'germany england america'), (100, 100, 100, 100, 'germany england america', 'germany england america'), (101, 101, 101, 101, 'germany england america', 'germany england america'), (102, 102, 102, 102, 'germany england america', 'germany england america'), (103, 103, 103, 103, 'germany england america', 'germany england america'), (104, 104, 104, 104, 'germany england america', 'germany england america'), (105, 105, 105, 105, 'germany england america', 'germany england america'), (106, 106, 106, 106, 'germany england america', 'germany england america'), (107, 107, 107, 107, 'germany england america', 'germany england america'), (108, 108, 108, 108, 'germany england america', 'germany england america'), (109, 109, 109, 109, 'germany england america', 'germany england america'), (110, 110, 110, 110, 'germany england america', 'germany england america'), (111, 111, 111, 111, 'germany england america', 'germany england america'), (112, 112, 112, 112, 'germany england america', 'germany england america'), (113, 113, 113, 113, 'germany england america', 'germany england america'), (114, 114, 114, 114, 'germany england america', 'germany england america'), (115, 115, 115, 115, 'germany england america', 'germany england america'), (116, 116, 116, 116, 'germany england america', 'germany england america'), (117, 117, 117, 117, 'germany england america', 'germany england america'), (118, 118, 118, 118, 'germany england america', 'germany england america'), (119, 119, 119, 119, 'germany england america', 'germany england america'), (120, 120, 120, 120, 'germany england america', 'germany england america'), (121, 121, 121, 121, 'germany england america', 'germany england america'), (122, 122, 122, 122, 'germany england america', 'germany england america'), (123, 123, 123, 123, 'germany england america', 'germany england america'), (124, 124, 124, 124, 'germany england america', 'germany england america'), (125, 125, 125, 125, 'germany england america', 'germany england america'), (126, 126, 126, 126, 'germany england america', 'germany england america'), (127, 127, 127, 127, 'germany england america', 'germany england america'), (128, 128, 128, 128, 'germany england america', 'germany england america'), (1, 1, 1, 1, 'germany england america', 'germany england america'), (2, 2, 2, 2, 'germany england america', 'germany england america'), (3, 3, 3, 3, 'germany england america', 'germany england america'), (4, 4, 4, 4, 'germany england america', 'germany england america'), (5, 5, 5, 5, 'germany england america', 'germany england america'), (6, 6, 6, 6, 'germany england america', 'germany england america'), (7, 7, 7, 7, 'germany england america', 'germany england america'), (8, 8, 8, 8, 'germany england america', 'germany england america'), (9, 9, 9, 9, 'germany england america', 'germany england america'), (10, 10, 10, 10, 'germany england america', 'germany england america'), (11, 11, 11, 11, 'germany england america', 'germany england america'), (12, 12, 12, 12, 'germany england america', 'germany england america'), (13, 13, 13, 13, 'germany england america', 'germany england america'), (14, 14, 14, 14, 'germany england america', 'germany england america'), (15, 15, 15, 15, 'germany england america', 'germany england america'), (16, 16, 16, 16, 'germany england america', 'germany england america'), (17, 17, 17, 17, 'germany england america', 'germany england america'), (18, 18, 18, 18, 'germany england america', 'germany england america'), (19, 19, 19, 19, 'germany england america', 'germany england america'), (20, 20, 20, 20, 'germany england america', 'germany england america'), (21, 21, 21, 21, 'germany england america', 'germany england america'), (22, 22, 22, 22, 'germany england america', 'germany england america'), (23, 23, 23, 23, 'germany england america', 'germany england america'), (24, 24, 24, 24, 'germany england america', 'germany england america'), (25, 25, 25, 25, 'germany england america', 'germany england america'), (26, 26, 26, 26, 'germany england america', 'germany england america'), (27, 27, 27, 27, 'germany england america', 'germany england america'), (28, 28, 28, 28, 'germany england america', 'germany england america'), (29, 29, 29, 29, 'germany england america', 'germany england america'), (30, 30, 30, 30, 'germany england america', 'germany england america'), (31, 31, 31, 31, 'germany england america', 'germany england america'), (32, 32, 32, 32, 'germany england america', 'germany england america'), (33, 33, 33, 33, 'germany england america', 'germany england america'), (34, 34, 34, 34, 'germany england america', 'germany england america'), (35, 35, 35, 35, 'germany england america', 'germany england america'), (36, 36, 36, 36, 'germany england america', 'germany england america'), (37, 37, 37, 37, 'germany england america', 'germany england america'), (38, 38, 38, 38, 'germany england america', 'germany england america'), (39, 39, 39, 39, 'germany england america', 'germany england america'), (40, 40, 40, 40, 'germany england america', 'germany england america'), (41, 41, 41, 41, 'germany england america', 'germany england america'), (42, 42, 42, 42, 'germany england america', 'germany england america'), (43, 43, 43, 43, 'germany england america', 'germany england america'), (44, 44, 44, 44, 'germany england america', 'germany england america'), (45, 45, 45, 45, 'germany england america', 'germany england america'), (46, 46, 46, 46, 'germany england america', 'germany england america'), (47, 47, 47, 47, 'germany england america', 'germany england america'), (48, 48, 48, 48, 'germany england america', 'germany england america'), (49, 49, 49, 49, 'germany england america', 'germany england america'), (50, 50, 50, 50, 'germany england america', 'germany england america'), (51, 51, 51, 51, 'germany england america', 'germany england america'), (52, 52, 52, 52, 'germany england america', 'germany england america'), (53, 53, 53, 53, 'germany england america', 'germany england america'), (54, 54, 54, 54, 'germany england america', 'germany england america'), (55, 55, 55, 55, 'germany england america', 'germany england america'), (56, 56, 56, 56, 'germany england america', 'germany england america'), (57, 57, 57, 57, 'germany england america', 'germany england america'), (58, 58, 58, 58, 'germany england america', 'germany england america'), (59, 59, 59, 59, 'germany england america', 'germany england america'), (60, 60, 60, 60, 'germany england america', 'germany england america'), (61, 61, 61, 61, 'germany england america', 'germany england america'), (62, 62, 62, 62, 'germany england america', 'germany england america'), (63, 63, 63, 63, 'germany england america', 'germany england america'), (64, 64, 64, 64, 'germany england america', 'germany england america'), (65, 65, 65, 65, 'germany england america', 'germany england america'), (66, 66, 66, 66, 'germany england america', 'germany england america'), (67, 67, 67, 67, 'germany england america', 'germany england america'), (68, 68, 68, 68, 'germany england america', 'germany england america'), (69, 69, 69, 69, 'germany england america', 'germany england america'), (70, 70, 70, 70, 'germany england america', 'germany england america'), (71, 71, 71, 71, 'germany england america', 'germany england america'), (72, 72, 72, 72, 'germany england america', 'germany england america'), (73, 73, 73, 73, 'germany england america', 'germany england america'), (74, 74, 74, 74, 'germany england america', 'germany england america'), (75, 75, 75, 75, 'germany england america', 'germany england america'), (76, 76, 76, 76, 'germany england america', 'germany england america'), (77, 77, 77, 77, 'germany england america', 'germany england america'), (78, 78, 78, 78, 'germany england america', 'germany england america'), (79, 79, 79, 79, 'germany england america', 'germany england america'), (80, 80, 80, 80, 'germany england america', 'germany england america'), (81, 81, 81, 81, 'germany england america', 'germany england america'), (82, 82, 82, 82, 'germany england america', 'germany england america'), (83, 83, 83, 83, 'germany england america', 'germany england america'), (84, 84, 84, 84, 'germany england america', 'germany england america'), (85, 85, 85, 85, 'germany england america', 'germany england america'), (86, 86, 86, 86, 'germany england america', 'germany england america'), (87, 87, 87, 87, 'germany england america', 'germany england america'), (88, 88, 88, 88, 'germany england america', 'germany england america'), (89, 89, 89, 89, 'germany england america', 'germany england america'), (90, 90, 90, 90, 'germany england america', 'germany england america'), (91, 91, 91, 91, 'germany england america', 'germany england america'), (92, 92, 92, 92, 'germany england america', 'germany england america'), (93, 93, 93, 93, 'germany england america', 'germany england america'), (94, 94, 94, 94, 'germany england america', 'germany england america'), (95, 95, 95, 95, 'germany england america', 'germany england america'), (96, 96, 96, 96, 'germany england america', 'germany england america'), (97, 97, 97, 97, 'germany england america', 'germany england america'), (98, 98, 98, 98, 'germany england america', 'germany england america'), (99, 99, 99, 99, 'germany england america', 'germany england america'), (100, 100, 100, 100, 'germany england america', 'germany england america'), (101, 101, 101, 101, 'germany england america', 'germany england america'), (102, 102, 102, 102, 'germany england america', 'germany england america'), (103, 103, 103, 103, 'germany england america', 'germany england america'), (104, 104, 104, 104, 'germany england america', 'germany england america'), (105, 105, 105, 105, 'germany england america', 'germany england america'), (106, 106, 106, 106, 'germany england america', 'germany england america'), (107, 107, 107, 107, 'germany england america', 'germany england america'), (108, 108, 108, 108, 'germany england america', 'germany england america'), (109, 109, 109, 109, 'germany england america', 'germany england america'), (110, 110, 110, 110, 'germany england america', 'germany england america'), (111, 111, 111, 111, 'germany england america', 'germany england america'), (112, 112, 112, 112, 'germany england america', 'germany england america'), (113, 113, 113, 113, 'germany england america', 'germany england america'), (114, 114, 114, 114, 'germany england america', 'germany england america'), (115, 115, 115, 115, 'germany england america', 'germany england america'), (116, 116, 116, 116, 'germany england america', 'germany england america'), (117, 117, 117, 117, 'germany england america', 'germany england america'), (118, 118, 118, 118, 'germany england america', 'germany england america'), (119, 119, 119, 119, 'germany england america', 'germany england america'), (120, 120, 120, 120, 'germany england america', 'germany england america'), (121, 121, 121, 121, 'germany england america', 'germany england america'), (122, 122, 122, 122, 'germany england america', 'germany england america'), (123, 123, 123, 123, 'germany england america', 'germany england america'), (124, 124, 124, 124, 'germany england america', 'germany england america'), (125, 125, 125, 125, 'germany england america', 'germany england america'), (126, 126, 126, 126, 'germany england america', 'germany england america'), (127, 127, 127, 127, 'germany england america', 'germany england america'), (128, 128, 128, 128, 'germany england america', 'germany england america'), (1, 1, 1, 1, 'germany england america', 'germany england america'), (2, 2, 2, 2, 'germany england america', 'germany england america'), (3, 3, 3, 3, 'germany england america', 'germany england america'), (4, 4, 4, 4, 'germany england america', 'germany england america'), (5, 5, 5, 5, 'germany england america', 'germany england america'), (6, 6, 6, 6, 'germany england america', 'germany england america'), (7, 7, 7, 7, 'germany england america', 'germany england america'), (8, 8, 8, 8, 'germany england america', 'germany england america'), (9, 9, 9, 9, 'germany england america', 'germany england america'), (10, 10, 10, 10, 'germany england america', 'germany england america'), (11, 11, 11, 11, 'germany england america', 'germany england america'), (12, 12, 12, 12, 'germany england america', 'germany england america'), (13, 13, 13, 13, 'germany england america', 'germany england america'), (14, 14, 14, 14, 'germany england america', 'germany england america'), (15, 15, 15, 15, 'germany england america', 'germany england america'), (16, 16, 16, 16, 'germany england america', 'germany england america'), (17, 17, 17, 17, 'germany england america', 'germany england america'), (18, 18, 18, 18, 'germany england america', 'germany england america'), (19, 19, 19, 19, 'germany england america', 'germany england america'), (20, 20, 20, 20, 'germany england america', 'germany england america'), (21, 21, 21, 21, 'germany england america', 'germany england america'), (22, 22, 22, 22, 'germany england america', 'germany england america'), (23, 23, 23, 23, 'germany england america', 'germany england america'), (24, 24, 24, 24, 'germany england america', 'germany england america'), (25, 25, 25, 25, 'germany england america', 'germany england america'), (26, 26, 26, 26, 'germany england america', 'germany england america'), (27, 27, 27, 27, 'germany england america', 'germany england america'), (28, 28, 28, 28, 'germany england america', 'germany england america'), (29, 29, 29, 29, 'germany england america', 'germany england america'), (30, 30, 30, 30, 'germany england america', 'germany england america'), (31, 31, 31, 31, 'germany england america', 'germany england america'), (32, 32, 32, 32, 'germany england america', 'germany england america'), (33, 33, 33, 33, 'germany england america', 'germany england america'), (34, 34, 34, 34, 'germany england america', 'germany england america'), (35, 35, 35, 35, 'germany england america', 'germany england america'), (36, 36, 36, 36, 'germany england america', 'germany england america'), (37, 37, 37, 37, 'germany england america', 'germany england america'), (38, 38, 38, 38, 'germany england america', 'germany england america'), (39, 39, 39, 39, 'germany england america', 'germany england america'), (40, 40, 40, 40, 'germany england america', 'germany england america'), (41, 41, 41, 41, 'germany england america', 'germany england america'), (42, 42, 42, 42, 'germany england america', 'germany england america'), (43, 43, 43, 43, 'germany england america', 'germany england america'), (44, 44, 44, 44, 'germany england america', 'germany england america'), (45, 45, 45, 45, 'germany england america', 'germany england america'), (46, 46, 46, 46, 'germany england america', 'germany england america'), (47, 47, 47, 47, 'germany england america', 'germany england america'), (48, 48, 48, 48, 'germany england america', 'germany england america'), (49, 49, 49, 49, 'germany england america', 'germany england america'), (50, 50, 50, 50, 'germany england america', 'germany england america'), (51, 51, 51, 51, 'germany england america', 'germany england america'), (52, 52, 52, 52, 'germany england america', 'germany england america'), (53, 53, 53, 53, 'germany england america', 'germany england america'), (54, 54, 54, 54, 'germany england america', 'germany england america'), (55, 55, 55, 55, 'germany england america', 'germany england america'), (56, 56, 56, 56, 'germany england america', 'germany england america'), (57, 57, 57, 57, 'germany england america', 'germany england america'), (58, 58, 58, 58, 'germany england america', 'germany england america'), (59, 59, 59, 59, 'germany england america', 'germany england america'), (60, 60, 60, 60, 'germany england america', 'germany england america'), (61, 61, 61, 61, 'germany england america', 'germany england america'), (62, 62, 62, 62, 'germany england america', 'germany england america'), (63, 63, 63, 63, 'germany england america', 'germany england america'), (64, 64, 64, 64, 'germany england america', 'germany england america'), (65, 65, 65, 65, 'germany england america', 'germany england america'), (66, 66, 66, 66, 'germany england america', 'germany england america'), (67, 67, 67, 67, 'germany england america', 'germany england america'), (68, 68, 68, 68, 'germany england america', 'germany england america'), (69, 69, 69, 69, 'germany england america', 'germany england america'), (70, 70, 70, 70, 'germany england america', 'germany england america'), (71, 71, 71, 71, 'germany england america', 'germany england america'), (72, 72, 72, 72, 'germany england america', 'germany england america'), (73, 73, 73, 73, 'germany england america', 'germany england america'), (74, 74, 74, 74, 'germany england america', 'germany england america'), (75, 75, 75, 75, 'germany england america', 'germany england america'), (76, 76, 76, 76, 'germany england america', 'germany england america'), (77, 77, 77, 77, 'germany england america', 'germany england america'), (78, 78, 78, 78, 'germany england america', 'germany england america'), (79, 79, 79, 79, 'germany england america', 'germany england america'), (80, 80, 80, 80, 'germany england america', 'germany england america'), (81, 81, 81, 81, 'germany england america', 'germany england america'), (82, 82, 82, 82, 'germany england america', 'germany england america'), (83, 83, 83, 83, 'germany england america', 'germany england america'), (84, 84, 84, 84, 'germany england america', 'germany england america'), (85, 85, 85, 85, 'germany england america', 'germany england america'), (86, 86, 86, 86, 'germany england america', 'germany england america'), (87, 87, 87, 87, 'germany england america', 'germany england america'), (88, 88, 88, 88, 'germany england america', 'germany england america'), (89, 89, 89, 89, 'germany england america', 'germany england america'), (90, 90, 90, 90, 'germany england america', 'germany england america'), (91, 91, 91, 91, 'germany england america', 'germany england america'), (92, 92, 92, 92, 'germany england america', 'germany england america'), (93, 93, 93, 93, 'germany england america', 'germany england america'), (94, 94, 94, 94, 'germany england america', 'germany england america'), (95, 95, 95, 95, 'germany england america', 'germany england america'), (96, 96, 96, 96, 'germany england america', 'germany england america'), (97, 97, 97, 97, 'germany england america', 'germany england america'), (98, 98, 98, 98, 'germany england america', 'germany england america'), (99, 99, 99, 99, 'germany england america', 'germany england america'), (100, 100, 100, 100, 'germany england america', 'germany england america'), (101, 101, 101, 101, 'germany england america', 'germany england america'), (102, 102, 102, 102, 'germany england america', 'germany england america'), (103, 103, 103, 103, 'germany england america', 'germany england america'), (104, 104, 104, 104, 'germany england america', 'germany england america'), (105, 105, 105, 105, 'germany england america', 'germany england america'), (106, 106, 106, 106, 'germany england america', 'germany england america'), (107, 107, 107, 107, 'germany england america', 'germany england america'), (108, 108, 108, 108, 'germany england america', 'germany england america'), (109, 109, 109, 109, 'germany england america', 'germany england america'), (110, 110, 110, 110, 'germany england america', 'germany england america'), (111, 111, 111, 111, 'germany england america', 'germany england america'), (112, 112, 112, 112, 'germany england america', 'germany england america'), (113, 113, 113, 113, 'germany england america', 'germany england america'), (114, 114, 114, 114, 'germany england america', 'germany england america'), (115, 115, 115, 115, 'germany england america', 'germany england america'), (116, 116, 116, 116, 'germany england america', 'germany england america'), (117, 117, 117, 117, 'germany england america', 'germany england america'), (118, 118, 118, 118, 'germany england america', 'germany england america'), (119, 119, 119, 119, 'germany england america', 'germany england america'), (120, 120, 120, 120, 'germany england america', 'germany england america'), (121, 121, 121, 121, 'germany england america', 'germany england america'), (122, 122, 122, 122, 'germany england america', 'germany england america'), (123, 123, 123, 123, 'germany england america', 'germany england america'), (124, 124, 124, 124, 'germany england america', 'germany england america'), (125, 125, 125, 125, 'germany england america', 'germany england america'), (126, 126, 126, 126, 'germany england america', 'germany england america'), (127, 127, 127, 127, 'germany england america', 'germany england america'), (128, 128, 128, 128, 'germany england america', 'germany england america'), (1, 1, 1, 1, 'germany england america', 'germany england america'), (2, 2, 2, 2, 'germany england america', 'germany england america'), (3, 3, 3, 3, 'germany england america', 'germany england america'), (4, 4, 4, 4, 'germany england america', 'germany england america'), (5, 5, 5, 5, 'germany england america', 'germany england america'), (6, 6, 6, 6, 'germany england america', 'germany england america'), (7, 7, 7, 7, 'germany england america', 'germany england america'), (8, 8, 8, 8, 'germany england america', 'germany england america'), (9, 9, 9, 9, 'germany england america', 'germany england america'), (10, 10, 10, 10, 'germany england america', 'germany england america'), (11, 11, 11, 11, 'germany england america', 'germany england america'), (12, 12, 12, 12, 'germany england america', 'germany england america'), (13, 13, 13, 13, 'germany england america', 'germany england america'), (14, 14, 14, 14, 'germany england america', 'germany england america'), (15, 15, 15, 15, 'germany england america', 'germany england america'), (16, 16, 16, 16, 'germany england america', 'germany england america'), (17, 17, 17, 17, 'germany england america', 'germany england america'), (18, 18, 18, 18, 'germany england america', 'germany england america'), (19, 19, 19, 19, 'germany england america', 'germany england america'), (20, 20, 20, 20, 'germany england america', 'germany england america'), (21, 21, 21, 21, 'germany england america', 'germany england america'), (22, 22, 22, 22, 'germany england america', 'germany england america'), (23, 23, 23, 23, 'germany england america', 'germany england america'), (24, 24, 24, 24, 'germany england america', 'germany england america'), (25, 25, 25, 25, 'germany england america', 'germany england america'), (26, 26, 26, 26, 'germany england america', 'germany england america'), (27, 27, 27, 27, 'germany england america', 'germany england america'), (28, 28, 28, 28, 'germany england america', 'germany england america'), (29, 29, 29, 29, 'germany england america', 'germany england america'), (30, 30, 30, 30, 'germany england america', 'germany england america'), (31, 31, 31, 31, 'germany england america', 'germany england america'), (32, 32, 32, 32, 'germany england america', 'germany england america'), (33, 33, 33, 33, 'germany england america', 'germany england america'), (34, 34, 34, 34, 'germany england america', 'germany england america'), (35, 35, 35, 35, 'germany england america', 'germany england america'), (36, 36, 36, 36, 'germany england america', 'germany england america'), (37, 37, 37, 37, 'germany england america', 'germany england america'), (38, 38, 38, 38, 'germany england america', 'germany england america'), (39, 39, 39, 39, 'germany england america', 'germany england america'), (40, 40, 40, 40, 'germany england america', 'germany england america'), (41, 41, 41, 41, 'germany england america', 'germany england america'), (42, 42, 42, 42, 'germany england america', 'germany england america'), (43, 43, 43, 43, 'germany england america', 'germany england america'), (44, 44, 44, 44, 'germany england america', 'germany england america'), (45, 45, 45, 45, 'germany england america', 'germany england america'), (46, 46, 46, 46, 'germany england america', 'germany england america'), (47, 47, 47, 47, 'germany england america', 'germany england america'), (48, 48, 48, 48, 'germany england america', 'germany england america'), (49, 49, 49, 49, 'germany england america', 'germany england america'), (50, 50, 50, 50, 'germany england america', 'germany england america'), (51, 51, 51, 51, 'germany england america', 'germany england america'), (52, 52, 52, 52, 'germany england america', 'germany england america'), (53, 53, 53, 53, 'germany england america', 'germany england america'), (54, 54, 54, 54, 'germany england america', 'germany england america'), (55, 55, 55, 55, 'germany england america', 'germany england america'), (56, 56, 56, 56, 'germany england america', 'germany england america'), (57, 57, 57, 57, 'germany england america', 'germany england america'), (58, 58, 58, 58, 'germany england america', 'germany england america'), (59, 59, 59, 59, 'germany england america', 'germany england america'), (60, 60, 60, 60, 'germany england america', 'germany england america'), (61, 61, 61, 61, 'germany england america', 'germany england america'), (62, 62, 62, 62, 'germany england america', 'germany england america'), (63, 63, 63, 63, 'germany england america', 'germany england america'), (64, 64, 64, 64, 'germany england america', 'germany england america'), (65, 65, 65, 65, 'germany england america', 'germany england america'), (66, 66, 66, 66, 'germany england america', 'germany england america'), (67, 67, 67, 67, 'germany england america', 'germany england america'), (68, 68, 68, 68, 'germany england america', 'germany england america'), (69, 69, 69, 69, 'germany england america', 'germany england america'), (70, 70, 70, 70, 'germany england america', 'germany england america'), (71, 71, 71, 71, 'germany england america', 'germany england america'), (72, 72, 72, 72, 'germany england america', 'germany england america'), (73, 73, 73, 73, 'germany england america', 'germany england america'), (74, 74, 74, 74, 'germany england america', 'germany england america'), (75, 75, 75, 75, 'germany england america', 'germany england america'), (76, 76, 76, 76, 'germany england america', 'germany england america'), (77, 77, 77, 77, 'germany england america', 'germany england america'), (78, 78, 78, 78, 'germany england america', 'germany england america'), (79, 79, 79, 79, 'germany england america', 'germany england america'), (80, 80, 80, 80, 'germany england america', 'germany england america'), (81, 81, 81, 81, 'germany england america', 'germany england america'), (82, 82, 82, 82, 'germany england america', 'germany england america'), (83, 83, 83, 83, 'germany england america', 'germany england america'), (84, 84, 84, 84, 'germany england america', 'germany england america'), (85, 85, 85, 85, 'germany england america', 'germany england america'), (86, 86, 86, 86, 'germany england america', 'germany england america'), (87, 87, 87, 87, 'germany england america', 'germany england america'), (88, 88, 88, 88, 'germany england america', 'germany england america'), (89, 89, 89, 89, 'germany england america', 'germany england america'), (90, 90, 90, 90, 'germany england america', 'germany england america'), (91, 91, 91, 91, 'germany england america', 'germany england america'), (92, 92, 92, 92, 'germany england america', 'germany england america'), (93, 93, 93, 93, 'germany england america', 'germany england america'), (94, 94, 94, 94, 'germany england america', 'germany england america'), (95, 95, 95, 95, 'germany england america', 'germany england america'), (96, 96, 96, 96, 'germany england america', 'germany england america'), (97, 97, 97, 97, 'germany england america', 'germany england america'), (98, 98, 98, 98, 'germany england america', 'germany england america'), (99, 99, 99, 99, 'germany england america', 'germany england america'), (100, 100, 100, 100, 'germany england america', 'germany england america'), (101, 101, 101, 101, 'germany england america', 'germany england america'), (102, 102, 102, 102, 'germany england america', 'germany england america'), (103, 103, 103, 103, 'germany england america', 'germany england america'), (104, 104, 104, 104, 'germany england america', 'germany england america'), (105, 105, 105, 105, 'germany england america', 'germany england america'), (106, 106, 106, 106, 'germany england america', 'germany england america'), (107, 107, 107, 107, 'germany england america', 'germany england america'), (108, 108, 108, 108, 'germany england america', 'germany england america'), (109, 109, 109, 109, 'germany england america', 'germany england america'), (110, 110, 110, 110, 'germany england america', 'germany england america'), (111, 111, 111, 111, 'germany england america', 'germany england america'), (112, 112, 112, 112, 'germany england america', 'germany england america'), (113, 113, 113, 113, 'germany england america', 'germany england america'), (114, 114, 114, 114, 'germany england america', 'germany england america'), (115, 115, 115, 115, 'germany england america', 'germany england america'), (116, 116, 116, 116, 'germany england america', 'germany england america'), (117, 117, 117, 117, 'germany england america', 'germany england america'), (118, 118, 118, 118, 'germany england america', 'germany england america'), (119, 119, 119, 119, 'germany england america', 'germany england america'), (120, 120, 120, 120, 'germany england america', 'germany england america'), (121, 121, 121, 121, 'germany england america', 'germany england america'), (122, 122, 122, 122, 'germany england america', 'germany england america'), (123, 123, 123, 123, 'germany england america', 'germany england america'), (124, 124, 124, 124, 'germany england america', 'germany england america'), (125, 125, 125, 125, 'germany england america', 'germany england america'), (126, 126, 126, 126, 'germany england america', 'germany england america'), (127, 127, 127, 127, 'germany england america', 'germany england america'), (128, 128, 128, 128, 'germany england america', 'germany england america'), (1, 1, 1, 1, 'norway sweden', 'norway sweden'), (2, 2, 2, 2, 'norway sweden', 'norway sweden'), (3, 3, 3, 3, 'norway sweden', 'norway sweden'), (4, 4, 4, 4, 'norway sweden', 'norway sweden'), (5, 5, 5, 5, 'norway sweden', 'norway sweden'))", "rowcount": 1029, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_52_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_2:void := querylog.define(\"explain select * from t1 where octet_length(t1.vc) = 3;\":str, \"default_pipe\":str, 81:int);',), ('barrier X_173:bit := language.dataflow();',), ('    X_68:bat[:str] := bat.new(nil:str);',), ('    X_74:bat[:int] := bat.new(nil:int);',), ('    X_72:bat[:int] := bat.new(nil:int);',), ('    X_71:bat[:str] := bat.new(nil:str);',), ('    X_70:bat[:str] := bat.new(nil:str);',), ('    X_5:int := sql.mvc();',), ('    X_40:bat[:str] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"vc\":str, 0:int);',), ('    X_54:bat[:int] := batstr.nbytes(X_40:bat[:str]);',), ('    C_6:bat[:oid] := sql.tid(X_5:int, \"sys\":str, \"t1\":str);',), ('    C_59:bat[:oid] := algebra.thetaselect(X_54:bat[:int], C_6:bat[:oid], 3:int, \"==\":str);',), ('    X_47:bat[:str] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"vc_ft\":str, 0:int);',), ('    X_66:bat[:str] := algebra.projection(C_59:bat[:oid], X_47:bat[:str]);',), ('    X_65:bat[:str] := algebra.projection(C_59:bat[:oid], X_40:bat[:str]);',), ('    X_33:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"col4\":str, 0:int);',), ('    X_64:bat[:int] := algebra.projection(C_59:bat[:oid], X_33:bat[:int]);',), ('    X_26:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"col3\":str, 0:int);',), ('    X_63:bat[:int] := algebra.projection(C_59:bat[:oid], X_26:bat[:int]);',), ('    X_19:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"col2_idx\":str, 0:int);',), ('    X_62:bat[:int] := algebra.projection(C_59:bat[:oid], X_19:bat[:int]);',), ('    X_9:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"col1_idx\":str, 0:int);',), ('    X_61:bat[:int] := algebra.projection(C_59:bat[:oid], X_9:bat[:int]);',), ('    X_75:bat[:str] := bat.append(X_68:bat[:str], \"sys.t1\":str);',), ('    X_77:bat[:str] := bat.append(X_70:bat[:str], \"col1_idx\":str);',), ('    X_79:bat[:str] := bat.append(X_71:bat[:str], \"int\":str);',), ('    X_81:bat[:int] := bat.append(X_72:bat[:int], 32:int);',), ('    X_83:bat[:int] := bat.append(X_74:bat[:int], 0:int);',), ('    X_85:bat[:str] := bat.append(X_75:bat[:str], \"sys.t1\":str);',), ('    X_86:bat[:str] := bat.append(X_77:bat[:str], \"col2_idx\":str);',), ('    X_88:bat[:str] := bat.append(X_79:bat[:str], \"int\":str);',), ('    X_89:bat[:int] := bat.append(X_81:bat[:int], 32:int);',), ('    X_90:bat[:int] := bat.append(X_83:bat[:int], 0:int);',), ('    X_91:bat[:str] := bat.append(X_85:bat[:str], \"sys.t1\":str);',), ('    X_92:bat[:str] := bat.append(X_86:bat[:str], \"col3\":str);',), ('    X_94:bat[:str] := bat.append(X_88:bat[:str], \"int\":str);',), ('    X_95:bat[:int] := bat.append(X_89:bat[:int], 32:int);',), ('    X_96:bat[:int] := bat.append(X_90:bat[:int], 0:int);',), ('    X_97:bat[:str] := bat.append(X_91:bat[:str], \"sys.t1\":str);',), ('    X_98:bat[:str] := bat.append(X_92:bat[:str], \"col4\":str);',), ('    X_100:bat[:str] := bat.append(X_94:bat[:str], \"int\":str);',), ('    X_101:bat[:int] := bat.append(X_95:bat[:int], 32:int);',), ('    X_102:bat[:int] := bat.append(X_96:bat[:int], 0:int);',), ('    X_103:bat[:str] := bat.append(X_97:bat[:str], \"sys.t1\":str);',), ('    X_104:bat[:str] := bat.append(X_98:bat[:str], \"vc\":str);',), ('    X_106:bat[:str] := bat.append(X_100:bat[:str], \"varchar\":str);',), ('    X_108:bat[:int] := bat.append(X_101:bat[:int], 30:int);',), ('    X_110:bat[:int] := bat.append(X_102:bat[:int], 0:int);',), ('    X_111:bat[:str] := bat.append(X_103:bat[:str], \"sys.t1\":str);',), ('    X_113:bat[:str] := bat.append(X_104:bat[:str], \"vc_ft\":str);',), ('    X_115:bat[:str] := bat.append(X_106:bat[:str], \"varchar\":str);',), ('    X_116:bat[:int] := bat.append(X_108:bat[:int], 30:int);',), ('    X_117:bat[:int] := bat.append(X_110:bat[:int], 0:int);',), ('    language.pass(X_40:bat[:str]);',), ('    language.pass(C_59:bat[:oid]);',), ('exit X_173:bit;',), ('    sql.resultSet(X_111:bat[:str], X_113:bat[:str], X_115:bat[:str], X_116:bat[:int], X_117:bat[:int], X_61:bat[:int], X_62:bat[:int], X_63:bat[:int], X_64:bat[:int], X_65:bat[:str], X_66:bat[:str]);',), ('end user.s2_1;',), ('#inline               actions= 0 time=1 usec ',), ('#remap                actions= 1 time=5 usec ',), ('#costmodel            actions= 1 time=1 usec ',), ('#coercion             actions= 0 time=0 usec ',), ('#evaluate             actions= 2 time=13 usec ',), ('#emptybind            actions= 6 time=6 usec ',), ('#pushselect           actions= 7 time=6 usec ',), ('#aliases              actions=14 time=4 usec ',), ('#mergetable           actions= 0 time=63 usec ',), ('#deadcode             actions=12 time=6 usec ',), ('#aliases              actions= 0 time=1 usec ',), ('#constants            actions=10 time=6 usec ',), ('#commonTerms          actions= 0 time=3 usec ',), ('#projectionpath       actions= 0 time=2 usec ',), ('#deadcode             actions= 0 time=3 usec ',), ('#reorder              actions= 1 time=18 usec ',), ('#matpack              actions= 0 time=0 usec ',), ('#dataflow             actions= 1 time=14 usec ',), ('#multiplex            actions= 0 time=0 usec ',), ('#profiler             actions=1 time=1 usec ',), ('#candidates           actions=1 time=1 usec ',), ('#deadcode             actions= 0 time=4 usec ',), ('#wlc                  actions= 0 time=0 usec ',), ('#garbagecollector     actions= 1 time=54 usec ',), ('#total                actions=28 time=280 usec ',))", "rowcount": 84, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_2:void := querylog.define(\"explain select * from t1 where octet_length(t1.vc) = 3;\":str, \"default_pipe\":str, 81:int);',), ('barrier X_173:bit := language.dataflow();',), ('    X_68:bat[:str] := bat.new(nil:str);',), ('    X_74:bat[:int] := bat.new(nil:int);',), ('    X_72:bat[:int] := bat.new(nil:int);',), ('    X_71:bat[:str] := bat.new(nil:str);',), ('    X_70:bat[:str] := bat.new(nil:str);',), ('    X_5:int := sql.mvc();',), ('    X_40:bat[:str] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"vc\":str, 0:int);',), ('    X_54:bat[:int] := batstr.nbytes(X_40:bat[:str]);',), ('    C_6:bat[:oid] := sql.tid(X_5:int, \"sys\":str, \"t1\":str);',), ('    C_59:bat[:oid] := algebra.thetaselect(X_54:bat[:int], C_6:bat[:oid], 3:int, \"==\":str);',), ('    X_47:bat[:str] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"vc_ft\":str, 0:int);',), ('    X_66:bat[:str] := algebra.projection(C_59:bat[:oid], X_47:bat[:str]);',), ('    X_65:bat[:str] := algebra.projection(C_59:bat[:oid], X_40:bat[:str]);',), ('    X_33:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"col4\":str, 0:int);',), ('    X_64:bat[:int] := algebra.projection(C_59:bat[:oid], X_33:bat[:int]);',), ('    X_26:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"col3\":str, 0:int);',), ('    X_63:bat[:int] := algebra.projection(C_59:bat[:oid], X_26:bat[:int]);',), ('    X_19:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"col2_idx\":str, 0:int);',), ('    X_62:bat[:int] := algebra.projection(C_59:bat[:oid], X_19:bat[:int]);',), ('    X_9:bat[:int] := sql.bind(X_5:int, \"sys\":str, \"t1\":str, \"col1_idx\":str, 0:int);',), ('    X_61:bat[:int] := algebra.projection(C_59:bat[:oid], X_9:bat[:int]);',), ('    X_75:bat[:str] := bat.append(X_68:bat[:str], \"sys.t1\":str);',), ('    X_77:bat[:str] := bat.append(X_70:bat[:str], \"col1_idx\":str);',), ('    X_79:bat[:str] := bat.append(X_71:bat[:str], \"int\":str);',), ('    X_81:bat[:int] := bat.append(X_72:bat[:int], 32:int);',), ('    X_83:bat[:int] := bat.append(X_74:bat[:int], 0:int);',), ('    X_85:bat[:str] := bat.append(X_75:bat[:str], \"sys.t1\":str);',), ('    X_86:bat[:str] := bat.append(X_77:bat[:str], \"col2_idx\":str);',), ('    X_88:bat[:str] := bat.append(X_79:bat[:str], \"int\":str);',), ('    X_89:bat[:int] := bat.append(X_81:bat[:int], 32:int);',), ('    X_90:bat[:int] := bat.append(X_83:bat[:int], 0:int);',), ('    X_91:bat[:str] := bat.append(X_85:bat[:str], \"sys.t1\":str);',), ('    X_92:bat[:str] := bat.append(X_86:bat[:str], \"col3\":str);',), ('    X_94:bat[:str] := bat.append(X_88:bat[:str], \"int\":str);',), ('    X_95:bat[:int] := bat.append(X_89:bat[:int], 32:int);',), ('    X_96:bat[:int] := bat.append(X_90:bat[:int], 0:int);',), ('    X_97:bat[:str] := bat.append(X_91:bat[:str], \"sys.t1\":str);',), ('    X_98:bat[:str] := bat.append(X_92:bat[:str], \"col4\":str);',), ('    X_100:bat[:str] := bat.append(X_94:bat[:str], \"int\":str);',), ('    X_101:bat[:int] := bat.append(X_95:bat[:int], 32:int);',), ('    X_102:bat[:int] := bat.append(X_96:bat[:int], 0:int);',), ('    X_103:bat[:str] := bat.append(X_97:bat[:str], \"sys.t1\":str);',), ('    X_104:bat[:str] := bat.append(X_98:bat[:str], \"vc\":str);',), ('    X_106:bat[:str] := bat.append(X_100:bat[:str], \"varchar\":str);',), ('    X_108:bat[:int] := bat.append(X_101:bat[:int], 30:int);',), ('    X_110:bat[:int] := bat.append(X_102:bat[:int], 0:int);',), ('    X_111:bat[:str] := bat.append(X_103:bat[:str], \"sys.t1\":str);',), ('    X_113:bat[:str] := bat.append(X_104:bat[:str], \"vc_ft\":str);',), ('    X_115:bat[:str] := bat.append(X_106:bat[:str], \"varchar\":str);',), ('    X_116:bat[:int] := bat.append(X_108:bat[:int], 30:int);',), ('    X_117:bat[:int] := bat.append(X_110:bat[:int], 0:int);',), ('    language.pass(X_40:bat[:str]);',), ('    language.pass(C_59:bat[:oid]);',), ('exit X_173:bit;',), ('    sql.resultSet(X_111:bat[:str], X_113:bat[:str], X_115:bat[:str], X_116:bat[:int], X_117:bat[:int], X_61:bat[:int], X_62:bat[:int], X_63:bat[:int], X_64:bat[:int], X_65:bat[:str], X_66:bat[:str]);',), ('end user.s2_1;',), ('#inline               actions= 0 time=1 usec ',), ('#remap                actions= 1 time=7 usec ',), ('#costmodel            actions= 1 time=1 usec ',), ('#coercion             actions= 0 time=0 usec ',), ('#evaluate             actions= 2 time=8 usec ',), ('#emptybind            actions= 6 time=4 usec ',), ('#pushselect           actions= 7 time=5 usec ',), ('#aliases              actions=14 time=3 usec ',), ('#mergetable           actions= 0 time=14 usec ',), ('#deadcode             actions=12 time=4 usec ',), ('#aliases              actions= 0 time=0 usec ',), ('#constants            actions=10 time=4 usec ',), ('#commonTerms          actions= 0 time=2 usec ',), ('#projectionpath       actions= 0 time=2 usec ',), ('#deadcode             actions= 0 time=3 usec ',), ('#reorder              actions= 1 time=12 usec ',), ('#matpack              actions= 0 time=0 usec ',), ('#dataflow             actions= 1 time=10 usec ',), ('#multiplex            actions= 0 time=0 usec ',), ('#profiler             actions=1 time=1 usec ',), ('#candidates           actions=1 time=0 usec ',), ('#deadcode             actions= 0 time=3 usec ',), ('#wlc                  actions= 0 time=1 usec ',), ('#garbagecollector     actions= 1 time=34 usec ',), ('#total                actions=28 time=173 usec ',))", "rowcount": 84, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_52_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_1:void := querylog.define(\"explain select * from t1 where octet_length(t1.vc) is null;\":str, \"default_pipe\":str, 81:int);',), ('barrier X_172:bit := language.dataflow();',), ('    X_70:bat[:str] := bat.new(nil:str);',), ('    X_75:bat[:int] := bat.new(nil:int);',), ('    X_74:bat[:int] := bat.new(nil:int);',), ('    X_73:bat[:str] := bat.new(nil:str);',), ('    X_72:bat[:str] := bat.new(nil:str);',), ('    X_4:int := sql.mvc();',), ('    X_39:bat[:str] := sql.bind(X_4:int, \"sys\":str, \"t1\":str, \"vc\":str, 0:int);',), ('    X_53:bat[:int] := batstr.nbytes(X_39:bat[:str]);',), ('    C_5:bat[:oid] := sql.tid(X_4:int, \"sys\":str, \"t1\":str);',), ('    C_59:bat[:oid] := algebra.select(X_53:bat[:int], C_5:bat[:oid], nil:int, nil:int, true:bit, true:bit, false:bit);',), ('    X_46:bat[:str] := sql.bind(X_4:int, \"sys\":str, \"t1\":str, \"vc_ft\":str, 0:int);',), ('    X_68:bat[:str] := algebra.projection(C_59:bat[:oid], X_46:bat[:str]);',), ('    X_67:bat[:str] := algebra.projection(C_59:bat[:oid], X_39:bat[:str]);',), ('    X_32:bat[:int] := sql.bind(X_4:int, \"sys\":str, \"t1\":str, \"col4\":str, 0:int);',), ('    X_66:bat[:int] := algebra.projection(C_59:bat[:oid], X_32:bat[:int]);',), ('    X_25:bat[:int] := sql.bind(X_4:int, \"sys\":str, \"t1\":str, \"col3\":str, 0:int);',), ('    X_65:bat[:int] := algebra.projection(C_59:bat[:oid], X_25:bat[:int]);',), ('    X_18:bat[:int] := sql.bind(X_4:int, \"sys\":str, \"t1\":str, \"col2_idx\":str, 0:int);',), ('    X_64:bat[:int] := algebra.projection(C_59:bat[:oid], X_18:bat[:int]);',), ('    X_8:bat[:int] := sql.bind(X_4:int, \"sys\":str, \"t1\":str, \"col1_idx\":str, 0:int);',), ('    X_63:bat[:int] := algebra.projection(C_59:bat[:oid], X_8:bat[:int]);',), ('    X_76:bat[:str] := bat.append(X_70:bat[:str], \"sys.t1\":str);',), ('    X_78:bat[:str] := bat.append(X_72:bat[:str], \"col1_idx\":str);',), ('    X_80:bat[:str] := bat.append(X_73:bat[:str], \"int\":str);',), ('    X_82:bat[:int] := bat.append(X_74:bat[:int], 32:int);',), ('    X_84:bat[:int] := bat.append(X_75:bat[:int], 0:int);',), ('    X_86:bat[:str] := bat.append(X_76:bat[:str], \"sys.t1\":str);',), ('    X_87:bat[:str] := bat.append(X_78:bat[:str], \"col2_idx\":str);',), ('    X_89:bat[:str] := bat.append(X_80:bat[:str], \"int\":str);',), ('    X_90:bat[:int] := bat.append(X_82:bat[:int], 32:int);',), ('    X_91:bat[:int] := bat.append(X_84:bat[:int], 0:int);',), ('    X_92:bat[:str] := bat.append(X_86:bat[:str], \"sys.t1\":str);',), ('    X_93:bat[:str] := bat.append(X_87:bat[:str], \"col3\":str);',), ('    X_95:bat[:str] := bat.append(X_89:bat[:str], \"int\":str);',), ('    X_96:bat[:int] := bat.append(X_90:bat[:int], 32:int);',), ('    X_97:bat[:int] := bat.append(X_91:bat[:int], 0:int);',), ('    X_98:bat[:str] := bat.append(X_92:bat[:str], \"sys.t1\":str);',), ('    X_99:bat[:str] := bat.append(X_93:bat[:str], \"col4\":str);',), ('    X_101:bat[:str] := bat.append(X_95:bat[:str], \"int\":str);',), ('    X_102:bat[:int] := bat.append(X_96:bat[:int], 32:int);',), ('    X_103:bat[:int] := bat.append(X_97:bat[:int], 0:int);',), ('    X_104:bat[:str] := bat.append(X_98:bat[:str], \"sys.t1\":str);',), ('    X_105:bat[:str] := bat.append(X_99:bat[:str], \"vc\":str);',), ('    X_107:bat[:str] := bat.append(X_101:bat[:str], \"varchar\":str);',), ('    X_109:bat[:int] := bat.append(X_102:bat[:int], 30:int);',), ('    X_111:bat[:int] := bat.append(X_103:bat[:int], 0:int);',), ('    X_112:bat[:str] := bat.append(X_104:bat[:str], \"sys.t1\":str);',), ('    X_114:bat[:str] := bat.append(X_105:bat[:str], \"vc_ft\":str);',), ('    X_116:bat[:str] := bat.append(X_107:bat[:str], \"varchar\":str);',), ('    X_117:bat[:int] := bat.append(X_109:bat[:int], 30:int);',), ('    X_118:bat[:int] := bat.append(X_111:bat[:int], 0:int);',), ('    language.pass(X_39:bat[:str]);',), ('    language.pass(C_59:bat[:oid]);',), ('exit X_172:bit;',), ('    sql.resultSet(X_112:bat[:str], X_114:bat[:str], X_116:bat[:str], X_117:bat[:int], X_118:bat[:int], X_63:bat[:int], X_64:bat[:int], X_65:bat[:int], X_66:bat[:int], X_67:bat[:str], X_68:bat[:str]);',), ('end user.s2_1;',), ('#inline               actions= 0 time=1 usec ',), ('#remap                actions= 1 time=4 usec ',), ('#costmodel            actions= 1 time=1 usec ',), ('#coercion             actions= 2 time=2 usec ',), ('#evaluate             actions= 0 time=3 usec ',), ('#emptybind            actions= 6 time=5 usec ',), ('#pushselect           actions= 7 time=4 usec ',), ('#aliases              actions=12 time=4 usec ',), ('#mergetable           actions= 0 time=15 usec ',), ('#deadcode             actions=12 time=4 usec ',), ('#aliases              actions= 0 time=0 usec ',), ('#constants            actions=10 time=3 usec ',), ('#commonTerms          actions= 0 time=2 usec ',), ('#projectionpath       actions= 0 time=2 usec ',), ('#deadcode             actions= 0 time=3 usec ',), ('#reorder              actions= 1 time=13 usec ',), ('#matpack              actions= 0 time=0 usec ',), ('#dataflow             actions= 1 time=8 usec ',), ('#multiplex            actions= 0 time=1 usec ',), ('#profiler             actions=1 time=0 usec ',), ('#candidates           actions=1 time=1 usec ',), ('#deadcode             actions= 0 time=3 usec ',), ('#wlc                  actions= 0 time=0 usec ',), ('#garbagecollector     actions= 1 time=25 usec ',), ('#total                actions=28 time=147 usec ',))", "rowcount": 84, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 84, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_52_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_1:void := querylog.define(\"explain select * from t1 where octet_length(t1.vc) is not null;\":str, \"default_pipe\":str, 81:int);',), ('barrier X_171:bit := language.dataflow();',), ('    X_69:bat[:str] := bat.new(nil:str);',), ('    X_74:bat[:int] := bat.new(nil:int);',), ('    X_73:bat[:int] := bat.new(nil:int);',), ('    X_72:bat[:str] := bat.new(nil:str);',), ('    X_71:bat[:str] := bat.new(nil:str);',), ('    X_4:int := sql.mvc();',), ('    X_39:bat[:str] := sql.bind(X_4:int, \"sys\":str, \"t1\":str, \"vc\":str, 0:int);',), ('    X_53:bat[:int] := batstr.nbytes(X_39:bat[:str]);',), ('    C_5:bat[:oid] := sql.tid(X_4:int, \"sys\":str, \"t1\":str);',), ('    C_59:bat[:oid] := algebra.select(X_53:bat[:int], C_5:bat[:oid], nil:int, nil:int, true:bit, true:bit, true:bit);',), ('    X_46:bat[:str] := sql.bind(X_4:int, \"sys\":str, \"t1\":str, \"vc_ft\":str, 0:int);',), ('    X_67:bat[:str] := algebra.projection(C_59:bat[:oid], X_46:bat[:str]);',), ('    X_66:bat[:str] := algebra.projection(C_59:bat[:oid], X_39:bat[:str]);',), ('    X_32:bat[:int] := sql.bind(X_4:int, \"sys\":str, \"t1\":str, \"col4\":str, 0:int);',), ('    X_65:bat[:int] := algebra.projection(C_59:bat[:oid], X_32:bat[:int]);',), ('    X_25:bat[:int] := sql.bind(X_4:int, \"sys\":str, \"t1\":str, \"col3\":str, 0:int);',), ('    X_64:bat[:int] := algebra.projection(C_59:bat[:oid], X_25:bat[:int]);',), ('    X_18:bat[:int] := sql.bind(X_4:int, \"sys\":str, \"t1\":str, \"col2_idx\":str, 0:int);',), ('    X_63:bat[:int] := algebra.projection(C_59:bat[:oid], X_18:bat[:int]);',), ('    X_8:bat[:int] := sql.bind(X_4:int, \"sys\":str, \"t1\":str, \"col1_idx\":str, 0:int);',), ('    X_62:bat[:int] := algebra.projection(C_59:bat[:oid], X_8:bat[:int]);',), ('    X_75:bat[:str] := bat.append(X_69:bat[:str], \"sys.t1\":str);',), ('    X_77:bat[:str] := bat.append(X_71:bat[:str], \"col1_idx\":str);',), ('    X_79:bat[:str] := bat.append(X_72:bat[:str], \"int\":str);',), ('    X_81:bat[:int] := bat.append(X_73:bat[:int], 32:int);',), ('    X_83:bat[:int] := bat.append(X_74:bat[:int], 0:int);',), ('    X_85:bat[:str] := bat.append(X_75:bat[:str], \"sys.t1\":str);',), ('    X_86:bat[:str] := bat.append(X_77:bat[:str], \"col2_idx\":str);',), ('    X_88:bat[:str] := bat.append(X_79:bat[:str], \"int\":str);',), ('    X_89:bat[:int] := bat.append(X_81:bat[:int], 32:int);',), ('    X_90:bat[:int] := bat.append(X_83:bat[:int], 0:int);',), ('    X_91:bat[:str] := bat.append(X_85:bat[:str], \"sys.t1\":str);',), ('    X_92:bat[:str] := bat.append(X_86:bat[:str], \"col3\":str);',), ('    X_94:bat[:str] := bat.append(X_88:bat[:str], \"int\":str);',), ('    X_95:bat[:int] := bat.append(X_89:bat[:int], 32:int);',), ('    X_96:bat[:int] := bat.append(X_90:bat[:int], 0:int);',), ('    X_97:bat[:str] := bat.append(X_91:bat[:str], \"sys.t1\":str);',), ('    X_98:bat[:str] := bat.append(X_92:bat[:str], \"col4\":str);',), ('    X_100:bat[:str] := bat.append(X_94:bat[:str], \"int\":str);',), ('    X_101:bat[:int] := bat.append(X_95:bat[:int], 32:int);',), ('    X_102:bat[:int] := bat.append(X_96:bat[:int], 0:int);',), ('    X_103:bat[:str] := bat.append(X_97:bat[:str], \"sys.t1\":str);',), ('    X_104:bat[:str] := bat.append(X_98:bat[:str], \"vc\":str);',), ('    X_106:bat[:str] := bat.append(X_100:bat[:str], \"varchar\":str);',), ('    X_108:bat[:int] := bat.append(X_101:bat[:int], 30:int);',), ('    X_110:bat[:int] := bat.append(X_102:bat[:int], 0:int);',), ('    X_111:bat[:str] := bat.append(X_103:bat[:str], \"sys.t1\":str);',), ('    X_113:bat[:str] := bat.append(X_104:bat[:str], \"vc_ft\":str);',), ('    X_115:bat[:str] := bat.append(X_106:bat[:str], \"varchar\":str);',), ('    X_116:bat[:int] := bat.append(X_108:bat[:int], 30:int);',), ('    X_117:bat[:int] := bat.append(X_110:bat[:int], 0:int);',), ('    language.pass(X_39:bat[:str]);',), ('    language.pass(C_59:bat[:oid]);',), ('exit X_171:bit;',), ('    sql.resultSet(X_111:bat[:str], X_113:bat[:str], X_115:bat[:str], X_116:bat[:int], X_117:bat[:int], X_62:bat[:int], X_63:bat[:int], X_64:bat[:int], X_65:bat[:int], X_66:bat[:str], X_67:bat[:str]);',), ('end user.s2_1;',), ('#inline               actions= 0 time=0 usec ',), ('#remap                actions= 1 time=4 usec ',), ('#costmodel            actions= 1 time=0 usec ',), ('#coercion             actions= 2 time=2 usec ',), ('#evaluate             actions= 0 time=3 usec ',), ('#emptybind            actions= 6 time=5 usec ',), ('#pushselect           actions= 7 time=4 usec ',), ('#aliases              actions=12 time=4 usec ',), ('#mergetable           actions= 0 time=15 usec ',), ('#deadcode             actions=12 time=4 usec ',), ('#aliases              actions= 0 time=0 usec ',), ('#constants            actions=10 time=3 usec ',), ('#commonTerms          actions= 0 time=2 usec ',), ('#projectionpath       actions= 0 time=2 usec ',), ('#deadcode             actions= 0 time=3 usec ',), ('#reorder              actions= 1 time=12 usec ',), ('#matpack              actions= 0 time=0 usec ',), ('#dataflow             actions= 1 time=8 usec ',), ('#multiplex            actions= 0 time=0 usec ',), ('#profiler             actions=1 time=0 usec ',), ('#candidates           actions=1 time=0 usec ',), ('#deadcode             actions= 0 time=4 usec ',), ('#wlc                  actions= 0 time=0 usec ',), ('#garbagecollector     actions= 1 time=24 usec ',), ('#total                actions=28 time=148 usec ',))", "rowcount": 84, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 84, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_53_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "22000!type (x) unknown in: \"insert into t values(repeat(x'0a',\"\n!42000!syntax error, unexpected sqlINT in: \"1000\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!syntax error, unexpected '.' in: \".\"\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "monetdb_53_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "22000!type (x) unknown in: \"insert into t values(1, repeat(x'2',\"\n!42000!syntax error, unexpected sqlINT in: \"32750\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_54_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "22000!type (x) unknown in: \"insert into t1 values (null), (x'410000004242424242424242')\"\n!42000!syntax error, unexpected ',' in: \",\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_54_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'byte_length(blob)'\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_55_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('AAAA', 105.0, datetime.date(2003, 3, 1), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'AAAA' unknown\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_55_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a-4',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_55_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a-4.5',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'a' unknown\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_55_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a-5',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_55_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a-1',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'a' unknown\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_55_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a-3',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'a' unknown\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_55_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a-34000',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_55_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a0',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_55_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a0.0',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_55_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a0.0',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a0.0',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_55_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ab',), ('ab',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"so\"\n!42000!syntax error, unexpected IDENT in: \"which\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"this\"\n!42000!syntax error, unexpected IDENT in: \"so\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected IDENT in: \"this\"\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "monetdb_55_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234562',), ('x',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_56_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"adddate\"\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_56_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_56_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected CAST in: \"cast\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_56_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_56_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False, datetime.time(0, 0)))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!syntax error, unexpected IDENT in: \"because\"\n!42000!syntax error, unexpected CURRENT_TIMESTAMP in: \"now\"\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "monetdb_57_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'to_date(date)'\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "monetdb_57_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ')', expecting JOIN in: \"select * from t3 left join (t2 outr2 join t2 outr join t1)\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!subquery table reference needs alias, use AS xxx in: \"select * from t3 left join (select t2.pk as outr_pk, t1.* from t2 left join t1 o\"\n!42000!syntax error, unexpected IDENT, expecting SELECT or '(' in: \"(outr_pk\"\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_57_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ')', expecting JOIN in: \"select * from t3 join (t2 outr2 join t2 outr join t1)\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!subquery table reference needs alias, use AS xxx in: \"select * from t3 left join (select * from t2 left join (t2 as outr2 left join t1\"\n!42000!syntax error, unexpected IDENT, expecting SELECT or '(' in: \"(outr\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_58_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_3:void := querylog.define(\"explain select * from t1 where a like \\\\\\\\\\'abc\\\\\\\\\\' || \\\\\\\\\\'%\\\\\\\\\\';\":str, \"default_pipe\":str, 27:int);',), ('barrier X_96:bit := language.dataflow();',), ('    X_30:bat[:str] := bat.new(nil:str);',), ('    X_36:bat[:int] := bat.new(nil:int);',), ('    X_34:bat[:int] := bat.new(nil:int);',), ('    X_33:bat[:str] := bat.new(nil:str);',), ('    X_32:bat[:str] := bat.new(nil:str);',), ('    X_6:int := sql.mvc();',), ('    X_10:bat[:str] := sql.bind(X_6:int, \"sys\":str, \"t1\":str, \"a\":str, 0:int);',), ('    C_7:bat[:oid] := sql.tid(X_6:int, \"sys\":str, \"t1\":str);',), ('    C_25:bat[:oid] := algebra.likeselect(X_10:bat[:str], C_7:bat[:oid], \"abc%\":str, \"\":str, false:bit);',), ('    X_28:bat[:str] := algebra.projection(C_25:bat[:oid], X_10:bat[:str]);',), ('    X_37:bat[:str] := bat.append(X_30:bat[:str], \"sys.t1\":str);',), ('    X_39:bat[:str] := bat.append(X_32:bat[:str], \"a\":str);',), ('    X_40:bat[:str] := bat.append(X_33:bat[:str], \"varchar\":str);',), ('    X_42:bat[:int] := bat.append(X_34:bat[:int], 10:int);',), ('    X_44:bat[:int] := bat.append(X_36:bat[:int], 0:int);',), ('    language.pass(X_10:bat[:str]);',), ('exit X_96:bit;',), ('    sql.resultSet(X_37:bat[:str], X_39:bat[:str], X_40:bat[:str], X_42:bat[:int], X_44:bat[:int], X_28:bat[:str]);',), ('end user.s2_1;',), ('#inline               actions= 0 time=0 usec ',), ('#remap                actions= 0 time=0 usec ',), ('#costmodel            actions= 1 time=0 usec ',), ('#coercion             actions= 1 time=2 usec ',), ('#evaluate             actions= 3 time=7 usec ',), ('#emptybind            actions= 1 time=3 usec ',), ('#pushselect           actions= 2 time=2 usec ',), ('#aliases              actions= 5 time=2 usec ',), ('#mergetable           actions= 0 time=8 usec ',), ('#deadcode             actions= 2 time=2 usec ',), ('#aliases              actions= 0 time=0 usec ',), ('#constants            actions= 3 time=2 usec ',), ('#commonTerms          actions= 0 time=1 usec ',), ('#projectionpath       actions= 0 time=1 usec ',), ('#deadcode             actions= 0 time=2 usec ',), ('#reorder              actions= 1 time=6 usec ',), ('#matpack              actions= 0 time=0 usec ',), ('#dataflow             actions= 1 time=8 usec ',), ('#multiplex            actions= 0 time=0 usec ',), ('#profiler             actions=1 time=0 usec ',), ('#candidates           actions=1 time=0 usec ',), ('#deadcode             actions= 0 time=2 usec ',), ('#wlc                  actions= 0 time=0 usec ',), ('#garbagecollector     actions= 1 time=14 usec ',), ('#total                actions=28 time=99 usec ',))", "rowcount": 47, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Invalid identifier '%'\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_58_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('abc',), ('abcd',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'abc%' unknown\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_59_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'ln(double)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'ln(any)'\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "monetdb_59_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3.0, 3.9068905956085187, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'ln(tinyint)'\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_59_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((10.0, 16.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'pow(tinyint,double)'\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "monetdb_59_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('0.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_59_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_59_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_59_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select a from t1 where a='http://www.foo.com/' order by abs(extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'http://www.foo.com/' unknown\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_59_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-2, 2, -2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "22000!Type (unsigned) unknown in: \"select mod(cast(2 as unsigned)\"\n!42000!syntax error, unexpected ',' in: \",\"\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_59_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 5, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_59_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-32.0, 2.13598703592091e+96, -32.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-32.0, 2.13598703592091e+96, -32.0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_59_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected THEN in: \"select case(sarg(1)) then\"\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_60_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT, expecting ')' or OR in: \"select (1.175494351E-37 div\"\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_60_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'ln(tinyint)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'ln(tinyint)'\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_60_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_60_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((9223372036854774784,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "22000!Type (signed) unknown in: \"select cast(pow(2,63)-1024 as signed)\"\n!42000!syntax error, unexpected AS in: \"as\"\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_60_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_60_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_60_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Unexpected symbol (!)\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected BOOL_TRUE, expecting sqlNULL or NOT in: \"select cast(coalesce(t0.c0, -1) as bigint) is true\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_60_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_61_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('0cc175b9c0f1b6a831c399e269772661',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'hash_md5(char)'\n", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "monetdb_61_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_61_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('5d41402abc4b2a76b9719d911017c592',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_61_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_2:void := querylog.define(\"explain select md5(\\\\\\\\\\'hello\\\\\\\\\\');\":str, \"default_pipe\":str, 7:int);',), ('    X_7:str := clients.md5sum(\"hello\":str);',), ('    sql.resultSet(\".L2\":str, \"L2\":str, \"clob\":str, 0:int, 0:int, 4:int, X_7:str);',), ('end user.s2_1;',), ('# optimizer.mitosis()',), ('# optimizer.dataflow()',), ('#inline               actions= 0 time=0 usec ',), ('#remap                actions= 0 time=0 usec ',), ('#costmodel            actions= 1 time=0 usec ',), ('#coercion             actions= 0 time=0 usec ',), ('#evaluate             actions= 1 time=4 usec ',), ('#emptybind            actions= 0 time=0 usec ',), ('#pushselect           actions= 0 time=1 usec ',), ('#aliases              actions= 1 time=1 usec ',), ('#mergetable           actions= 0 time=4 usec ',), ('#deadcode             actions= 1 time=1 usec ',), ('#aliases              actions= 0 time=0 usec ',), ('#constants            actions= 2 time=1 usec ',), ('#commonTerms          actions= 0 time=1 usec ',), ('#projectionpath       actions= 0 time=1 usec ',), ('#deadcode             actions= 0 time=1 usec ',), ('#reorder              actions= 1 time=4 usec ',), ('#matpack              actions= 0 time=0 usec ',), ('#multiplex            actions= 0 time=1 usec ',), ('#profiler             actions=1 time=0 usec ',), ('#candidates           actions=1 time=0 usec ',), ('#deadcode             actions= 0 time=1 usec ',), ('#wlc                  actions= 0 time=0 usec ',), ('#garbagecollector     actions= 1 time=8 usec ',), ('#total                actions=26 time=63 usec ',))", "rowcount": 31, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('function user.s2_1():void;',), ('    X_2:void := querylog.define(\"explain select md5(\\\\\\\\\\'hello\\\\\\\\\\');\":str, \"default_pipe\":str, 7:int);',), ('    X_7:str := clients.md5sum(\"hello\":str);',), ('    sql.resultSet(\".L2\":str, \"L2\":str, \"clob\":str, 0:int, 0:int, 4:int, X_7:str);',), ('end user.s2_1;',), ('# optimizer.mitosis()',), ('# optimizer.dataflow()',), ('#inline               actions= 0 time=0 usec ',), ('#remap                actions= 0 time=0 usec ',), ('#costmodel            actions= 1 time=0 usec ',), ('#coercion             actions= 0 time=0 usec ',), ('#evaluate             actions= 1 time=5 usec ',), ('#emptybind            actions= 0 time=0 usec ',), ('#pushselect           actions= 0 time=1 usec ',), ('#aliases              actions= 1 time=1 usec ',), ('#mergetable           actions= 0 time=5 usec ',), ('#deadcode             actions= 1 time=2 usec ',), ('#aliases              actions= 0 time=1 usec ',), ('#constants            actions= 2 time=1 usec ',), ('#commonTerms          actions= 0 time=1 usec ',), ('#projectionpath       actions= 0 time=1 usec ',), ('#deadcode             actions= 0 time=1 usec ',), ('#reorder              actions= 1 time=4 usec ',), ('#matpack              actions= 0 time=0 usec ',), ('#multiplex            actions= 0 time=0 usec ',), ('#profiler             actions=1 time=0 usec ',), ('#candidates           actions=1 time=0 usec ',), ('#deadcode             actions= 0 time=1 usec ',), ('#wlc                  actions= 0 time=0 usec ',), ('#garbagecollector     actions= 1 time=8 usec ',), ('#total                actions=26 time=94 usec ',))", "rowcount": 31, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_61_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((32,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'abrakadabra' unknown\n", "exec_able": false}}, "TP": 2, "FP": 4, "FN": 1}
{"sql_id": "monetdb_61_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "query didn't result in a resultset", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_61_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_61_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Unexpected symbol (\\)\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "monetdb_62_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 1, 6, 12, 34),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '20040106123400' unknown\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_62_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 1, 6, 12, 34),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Invalid identifier '%Y%m%d%H%i%s'\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_62_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected LIMIT, expecting UNION or EXCEPT or INTERSECT or ')' in: \"select distinct case when a <= (select b from t1 limit\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!syntax error, unexpected IDENT in: \"hmm\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"perhaps\"\n!42000!syntax error, unexpected IDENT in: \"so\"\n!42000!syntax error, unexpected IDENT in: \"a\"\n!42000!syntax error, unexpected IDENT in: \"a\"\n!42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected IDENT in: \"this\"\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "monetdb_62_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected LIMIT, expecting UNION or EXCEPT or INTERSECT or ')' in: \"select distinct greatest(a, (select b from t1 limit\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected LIMIT, expecting UNION or EXCEPT or INTERSECT or ')' in: \"select distinct greatest(a, (select b from t1 limit\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_63_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 0, 3, 1, 3, 3, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_64_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('FF6',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '1997-12-31 23:59:59.000002' unknown\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_64_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'get_fraction(timestamp)'\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "monetdb_64_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ',', expecting AS in: \"select cast(sys.timestamp_to_str(timestamp '1997-11-30 23:59:59.000001'),\"\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "monetdb_64_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(3, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'date(char)'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_64_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(1997, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '1997-01-01' unknown\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_64_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(1996, 12, 31),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'date(char)'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_64_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(9999, 12, 31),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected DAY, expecting SCOLON in: \"select date(\"9999-01-01\") + interval \"0\" day\"\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_64_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "year 10000 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'date(char)'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_64_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(100, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'date(char)'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_64_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1997, 12, 30, 22, 58, 58),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected sqlDECIMAL in: \"select decimal\"\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_64_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1, seconds=82737, microseconds=999000),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT, expecting ')' or ',' in: \"select timestamp_to_str(timestamp \"1997-12-31 23:59:59.999999\"\"\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "monetdb_64_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1, seconds=82800),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "22000!Constant (1970-01-01 01:00:00.999999) unknown in: \"select timestamp(\"1970-01-01 01:00:00.999999\"\"\n!42000!syntax error, unexpected ')' in: \")\"\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_64_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(seconds=3600),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '02:01:01.999999' unknown\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "monetdb_64_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '1997-01-01 23:59:59.000001' unknown\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_64_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected '-', expecting SCOLON in: \"select timestamp \"1997-12-31 23:59:59.000001\" -\"\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_64_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_64_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_64_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n!42000!Unexpected symbol (\\)\n!42000!syntax error, unexpected IDENT in: \"n\"\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_65_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ',', expecting ')' in: \"select time(10,\"\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_65_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(20, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(20, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_65_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 1, 1, 2),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "22000!Constant (2001-12-01) unknown in: \"select timestamp(\"2001-12-01\"\"\n!42000!syntax error, unexpected ')' in: \")\"\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "monetdb_65_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 10, 1, 1, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '2001-10-01 01:01:01.000001' unknown\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_65_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 20, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 20, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_65_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_65_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((31,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '1997-12-31 23:59:59.000001' unknown\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_65_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:59:59',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "22000!Constant (1997-12-31 23:59:59.000001) unknown in: \"select time(\"1997-12-31 23:59:59.000001\"\"\n!42000!syntax error, unexpected ')' in: \")\"\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_65_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "((datetime.timedelta(days=-31), None, None, datetime.timedelta(0)), (datetime.timedelta(days=1096, seconds=3662), datetime.timedelta(seconds=86338), datetime.timedelta(days=-1, seconds=62), datetime.timedelta(days=-1, seconds=86340)), (datetime.timedelta(days=-1097, seconds=82738), datetime.timedelta(days=-1, seconds=62), datetime.timedelta(seconds=86338), datetime.timedelta(days=-1, seconds=82740)), (None, None, None, None))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "monetdb_65_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2003, 1, 2),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '2003-01-02 10:11:12.0012' unknown\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_65_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 9, "FN": 1}
{"sql_id": "monetdb_65_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "monetdb_65_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected IDENT in: \"select extract(epoch\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "monetdb_66_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected STRING, expecting IDENT or sqlINT in: \"select sec_to_time(86399) = time('23:59:59'\"\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "monetdb_66_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '0' unknown\n", "exec_able": false}}, "TP": 1, "FP": 5, "FN": 0}
{"sql_id": "monetdb_66_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!unexpected end of input", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "monetdb_66_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "42000!Unexpected symbol (\\)", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "monetdb_66_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected STRING, expecting IDENT or sqlINT in: \"select time('01:00:01'\"\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "monetdb_66_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '0' unknown\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "monetdb_69_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Unexpected symbol (!)\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Unexpected symbol (!)\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "monetdb_69_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(varchar,varchar)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'compare(varchar,varchar)'\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_69_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(int,int)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(int,int)'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_69_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'least(int,int)'\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_69_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greatest'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greatest'\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_69_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'least'\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_69_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(tinyint,int)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S02!SELECT: no such table 'dual'\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_70_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greatest'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ',', expecting ')' in: \"select max(\"11\",\"\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "monetdb_70_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greatest'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greater'\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_70_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greatest'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greatest'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_70_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('11',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected ',', expecting ')' in: \"select min(cast('11' as int),\"\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_70_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '11' unknown\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "monetdb_70_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier '11' unknown\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_70_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greatest'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greatest'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_70_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greatest'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greatest'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_70_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greatest'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greatest'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_70_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greatest'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greatest'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_70_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greatest'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greatest'\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_70_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greatest'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'greatest'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_70_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(hugeint,any)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(hugeint,any)'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_70_20", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(int,int)'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'greatest(int,int)'\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "monetdb_70_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected '.' in: \".\"\n!42000!syntax error, unexpected IDENT in: \"this\"\n!42000!syntax error, unexpected IDENT in: \"it\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected NO in: \"no,\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "monetdb_70_28", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'least(int,int)'\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_1_33", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!Unexpected symbol (:)\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "monetdb_10_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'i' unknown\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'i' unknown\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "monetdb_12_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "monetdb_12_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 3), (3, 4), (3, 5))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'generate_series(tinyint,tinyint)'\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "monetdb_12_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1), (1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (2, 4))", "rowcount": 8, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!Unexpected symbol (\\)\n!42000!syntax error, unexpected IDENT in: \"n\"\n!42000!Unexpected symbol (\\)\n!42000!syntax error, unexpected IDENT in: \"n\"\n!42000!syntax error, unexpected IDENT in: \"which\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"which\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!Unexpected symbol (\\)\n!42000!syntax error, unexpected IDENT in: \"n\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n!42000!syntax error, unexpected IDENT in: \"but\"\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "monetdb_2_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'string_repeat(char,smallint)'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_2_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected '.' in: \"insert into cmdata1 values('1234567890' || '1234567890' || '1234567890' || .\"\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "monetdb_3_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'x' unknown\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "monetdb_4_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "monetdb_5_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('sys',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'list_schemas(boolean)'\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_6_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!syntax error, unexpected COMPARISON in: \"<\"\n!42000!syntax error, unexpected IF in: \"if\"\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!Unexpected symbol (`)\n!42000!syntax error, unexpected IDENT in: \"this\"\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "monetdb_6_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such binary operator 'generate_series(tinyint,smallint)'\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "monetdb_6_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 200, "error_message": "query didn't result in a resultset", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' unknown\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "monetdb_7_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'i' unknown\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such operator 'generate_range'\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 2}
{"sql_id": "monetdb_7_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'i' unknown\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: identifier 'i' unknown\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "monetdb_8_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S02!INSERT INTO: no such table 'prt1'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S02!INSERT INTO: no such table 'prt1'\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "monetdb_8_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S02!INSERT INTO: no such table 'prt2'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42S02!INSERT INTO: no such table 'prt2'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 2}
{"sql_id": "monetdb_9_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!NEXT VALUE FOR: no such sequence 'sys'.'seq3'\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "42000!SELECT: no such unary operator 'nextval(char)'\n!42000!unexpected end of input\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}

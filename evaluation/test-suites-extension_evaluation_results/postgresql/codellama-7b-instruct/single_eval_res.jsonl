{"sql_id": "postgresql_1_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 10))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 10))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_1_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 10), (2, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 10), (2, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_1_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, 20))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, 20))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_1_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_100_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"ts\" is of type integer but expression is of type timestamp with time zone\nLINE 2: INSERT INTO t1 (ts) VALUES (date_trunc('second', to_timestam...\n                                    ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_100_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 2: INSERT INTO t1 (ts) VALUES (Unix_timestamp('2002-10-27 02:00...\n                                    ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translation from MySQL to PostgreSQL is as follows:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_100_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1035680400, datetime.datetime(2002, 10, 27, 1, 0, tzinfo=datetime.timezone.utc)), (1035684000, datetime.datetime(2002, 10, 27, 2, 0, tzinfo=datetime.timezone.utc)), (1035687600, datetime.datetime(2002, 10, 27, 3, 0, tzinfo=datetime.timezone.utc)))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "multiple decimal points\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translation of this SQL statement from MySQL to PostgreS...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_100_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((730851,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((730851,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type timestamp without time zone to integer\nLINE 1: ...DATE_TRUNC('day', TIMESTAMP '2001-01-01 00:00:00')::INTEGER;\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_100_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function pg_catalog.extract(unknown, unknown) is not unique\nLINE 2: SELECT extract(epoch from '2007-12-31 23:59:59') - extract(e...\n               ^\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_100_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.timedelta(0),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_100_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Saturday October 2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL query `SELECT DATE_FORMAT( '2009-10-10 23:59:59', ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_100_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:59:59',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2003, 12, 31, 23, 59, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_100_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 1, 1, 11, 59, 59, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_100_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2003, 1, 3, 0, 0, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The MySQL statement `TIMESTAMPADD(MINUTE, 1, '2003-01-02 23:...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_100_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('2'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translation of the MySQL statement to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 7, "FN": 0}
{"sql_id": "postgresql_100_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('63426758399.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1259539199.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1447459199.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent PostgreSQL statement for the given MySQL stat...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_101_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',), ('6120',), ('612020',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The HEX function in MySQL returns the hexadecimal representa...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_101_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((7,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 4: The MySQL `LENGTH` function returns the number of characters...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 2}
{"sql_id": "postgresql_101_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('41', 'a'), ('41', 'c'), ('4100', 'b'), ('4100', 'd'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's the translated SQL statement from MySQL to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_101_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 0}
{"sql_id": "postgresql_102_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"date\" of relation \"t1\" does not exist\nLINE 1: INSERT INTO t1 (date, b) VALUES (CURRENT_DATE, 1);\n                        ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_102_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_102_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The SQL statement you provided is:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 2}
{"sql_id": "postgresql_102_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 4: The above SQL statement is equivalent to the following in Po...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_102_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_102_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_102_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_2_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The SQL statement is a recursive query that uses the WITH cl...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_3_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('NO',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('NO',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_39_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"b\" does not exist\nLINE 2: ... 1 THEN a ELSE a END) AS b FROM t1 ORDER BY field(b + 1, 1);\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_39_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,), (3,), (1,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"b\" does not exist\nLINE 1: SELECT a AS b FROM t1 ORDER BY field( b, 1 );\n                                              ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "postgresql_4_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_4_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's the translated SQL statement from MySQL to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_4_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_4_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_4_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The SQL statement you provided is equivalent to the followin...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_4_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_4_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_5_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('postgres',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The `USER()` function in MySQL returns the current user name...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_6_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('3a',), ('3b',), ('3c',), ('3d',), ('3e',), ('3f',), ('40',), ('5b',), ('5c',), ('5d',), ('5e',), ('5f',), ('60',), ('7b',), ('7c',), ('7d',), ('7e',))", "rowcount": 17, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('3a',), ('3b',), ('3c',), ('3d',), ('3e',), ('3f',), ('40',), ('5b',), ('5c',), ('5d',), ('5e',), ('5f',), ('60',), ('7b',), ('7c',), ('7d',), ('7e',))", "rowcount": 17, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_6_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 0}
{"sql_id": "postgresql_6_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"head\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"TRANSLATED\"\nLINE 4: TRANSLATED SQL:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_6_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"tail\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"tail\" already exists\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_6_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_6_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_6_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_6_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_7_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc                  ', 21), ('\u07f0                   ', 21), ('\u02ae                   ', 21), ('                    ', 20), ('50515253            ', 20), ('31                  ', 20), ('h31                 ', 20), ('2805                ', 20))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc                  ', 2), ('\u07f0                   ', 1), ('\u02ae                   ', 1), ('                    ', 0), ('50515253            ', 8), ('31                  ', 2), ('h31                 ', 3), ('2805                ', 4))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_7_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc                  ', '                  h\u04bc'), ('\u07f0                   ', '                   \u07f0'), ('\u02ae                   ', '                   \u02ae'), ('                    ', '                    '), ('50515253            ', '            50515253'), ('31                  ', '                  31'), ('h31                 ', '                 h31'), ('2805                ', '                2805'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc                  ', 'h\u04bc                  '), ('\u07f0                   ', '\u07f0                   '), ('\u02ae                   ', '\u02ae                   '), ('                    ', '                    '), ('50515253            ', '50515253            '), ('31                  ', '31                  '), ('h31                 ', 'h31                 '), ('2805                ', '2805                '))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_7_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc                  ', 'h\u04bc525252525252525252'), ('\u07f0                   ', '\u07f05252525252525252525'), ('\u02ae                   ', '\u02ae5252525252525252525'), ('                    ', '52525252525252525252'), ('50515253            ', '50515253525252525252'), ('31                  ', '31525252525252525252'), ('h31                 ', 'h3152525252525252525'), ('2805                ', '28055252525252525252'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc                  ', 'h\u04bc525252525252525252'), ('\u07f0                   ', '\u07f05252525252525252525'), ('\u02ae                   ', '\u02ae5252525252525252525'), ('                    ', '52525252525252525252'), ('50515253            ', '50515253525252525252'), ('31                  ', '31525252525252525252'), ('h31                 ', 'h3152525252525252525'), ('2805                ', '28055252525252525252'))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_7_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_7_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_7_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_7_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('h315253             ', 'h315253'), ('h31525352           ', 'h31525352'), ('h3152535252         ', 'h3152535252'), ('h315253525252       ', 'h315253525252'), ('52h315253           ', '52h315253'), ('5252h315253         ', '5252h315253'), ('525252h315253       ', '525252h315253'), ('   h315253          ', 'h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('h315253', 'h315253'), ('h31525352', 'h31525352'), ('h3152535252', 'h3152535252'), ('h315253525252', 'h315253525252'), ('52h315253', '52h315253'), ('5252h315253', '5252h315253'), ('525252h315253', '525252h315253'), ('   h315253', 'h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1973, 11, 29, 21, 33, 9, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "multiple decimal points\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_71_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1977, 6, 7, 21, 44, 50, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The MySQL `FROM_UNIXTIME()` function is used to convert a Un...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_71_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 0, 0, 1, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 0, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_71_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('123456789.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_71_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('234567890.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL statement you provided can be translated to Postgr...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_71_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('2179098000.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translation of the MySQL statement to P...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_71_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('2149376400.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('2149376400.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_7", "EM": 1, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('3600.000000'), Decimal('3601.000000'), Decimal('2147487247.000000'), Decimal('2147487248.000000')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_71_11", "EM": 1, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 12280 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 12280 is out of range", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('32536803599.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The provided MySQL query uses the `UNIX_TIMESTAMP` function ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_72_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_74_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_74_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((13,), (13,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"This\"\nLINE 4: This SQL statement is a subquery that selects the sum of the...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_74_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Translated\"\nLINE 5: Translated SQL:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_74_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_74_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'abc-def', '6162632d646566'), (2, \"'(),-.\", '2728292c2d2e'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 'abc-def'), (2, \"'(),-.\"))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_74_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'abc-def', '6162632d646566'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's the translated SQL statement from MySQL to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_75_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "duplicate key value violates unique constraint \"t1_pkey\"\nDETAIL:  Key (pk)=(1) already exists.\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 0}
{"sql_id": "postgresql_75_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 12, 12), (2, 4, 4))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 12, 12), (2, 4, 4))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_76_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's the translated SQL statement from MySQL to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "postgresql_76_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 200, 210, 110, 210))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 110, 210, 110, 210))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_76_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_77_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(12, 22, 22), datetime.date(1997, 1, 1), datetime.datetime(1997, 1, 2, 0, 0), '1997-01-01 12:22:22', 3, 7, 5))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function timestampadd(timestamp without time zone, integer) does not exist\nLINE 2: ...quarter + t1.week AS quarter_plus_week, t1.year + timestampa...\n                                                             ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_78_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_78_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function encode(text, unknown) does not exist\nLINE 2: SELECT encode(val,'hex') FROM t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_78_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function encode(character varying, unknown) does not exist\nLINE 2: SELECT encode(a, 'hex') FROM t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_79_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Sun', 'Sunday   '), (datetime.date(2006, 1, 2), 'Mon', 'Monday   '), (datetime.date(2006, 1, 3), 'Tue', 'Tuesday  '), (datetime.date(2006, 1, 4), 'Wed', 'Wednesday'), (datetime.date(2006, 1, 5), 'Thu', 'Thursday '), (datetime.date(2006, 1, 6), 'Fri', 'Friday   '), (datetime.date(2006, 1, 7), 'Sat', 'Saturday '))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Sunday   ', 'Sun'), (datetime.date(2006, 1, 2), 'Monday   ', 'Mon'), (datetime.date(2006, 1, 3), 'Tuesday  ', 'Tue'), (datetime.date(2006, 1, 4), 'Wednesday', 'Wed'), (datetime.date(2006, 1, 5), 'Thursday ', 'Thu'), (datetime.date(2006, 1, 6), 'Friday   ', 'Fri'), (datetime.date(2006, 1, 7), 'Saturday ', 'Sat'))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_79_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Jan', 'January  '), (datetime.date(2006, 2, 1), 'Feb', 'February '), (datetime.date(2006, 3, 1), 'Mar', 'March    '), (datetime.date(2006, 4, 1), 'Apr', 'April    '), (datetime.date(2006, 5, 1), 'May', 'May      '), (datetime.date(2006, 6, 1), 'Jun', 'June     '), (datetime.date(2006, 7, 1), 'Jul', 'July     '), (datetime.date(2006, 8, 1), 'Aug', 'August   '), (datetime.date(2006, 9, 1), 'Sep', 'September'), (datetime.date(2006, 10, 1), 'Oct', 'October  '), (datetime.date(2006, 11, 1), 'Nov', 'November '), (datetime.date(2006, 12, 1), 'Dec', 'December '))", "rowcount": 12, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function monthname(date) does not exist\nLINE 1: SELECT a, TO_CHAR(a,'Mon') as abmon, monthname(a) as mon FRO...\n                                             ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_79_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1 Mon 01',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_char(unknown, unknown) is not unique\nLINE 1: SELECT TO_CHAR('2001-01-01', 'Day') as day_name;\n               ^\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_79_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('01 Jan January  ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translation of the MySQL SQL statement ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 9, "FN": 0}
{"sql_id": "postgresql_79_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('11 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_8_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \")\"\nLINE 1: ..., NULLIF('aeq'='q', ''), NULLIF('q'='aeq', '')), 0) -- STRCM...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_8_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL `STRCMP` function compares two strings and returns...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_8_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The provided MySQL statement uses the `STRCMP` function, whi...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_8_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The following is the translation of the provided MySQL query...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_8_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent SQL statement in PostgreSQL is:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_8_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, 1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given MySQL statement uses the `STRCMP` function, which ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_8_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, 1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here's the translation of the SQL statement from MySQL to Po...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_8_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The given MySQL query is:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_8_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translation of the given SQL statement ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_8_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 1, False, True), (1, 0, True, False))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function field(unknown, character) does not exist\nLINE 2: SELECT FIELD('ue', s1) AS field_ue, FIELD('', s1) AS field_e...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "postgresql_8_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement from MySQL to PostgreSQL is as ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_80_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translated SQL statement from MySQL to ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_80_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_80_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The given MySQL statement translates to the following Postgr...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_80_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"In\"\nLINE 4: In MySQL, the `LPAD` function takes three arguments: a strin...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_80_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_80_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translation of the MySQL statement to P...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 0}
{"sql_id": "postgresql_80_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translation of the SQL statement from MySQL to P...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_80_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The following is the translated SQL statement from MySQL to ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_80_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given MySQL query is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_80_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The MySQL statement you provided is a simple query that retu...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_80_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translation of the SQL statement from MySQL to P...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_80_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The SQL statement you provided is syntactically incorrect, a...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_80_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('xx123',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translation of the MySQL statement to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_80_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('xyxya',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The equivalent PostgreSQL statement for the given MySQL stat...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_80_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('          I LOVE SQL',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The `LPAD` function in MySQL pads a string with spaces on th...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_80_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_81_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translated SQL statement from MySQL to ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_81_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((25165824,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((25165824,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_82_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3)), (datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2)), (datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1)))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1)), (datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2)), (datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3)))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 4, "FP": 0, "FN": 1}
{"sql_id": "postgresql_83_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('41422020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function encode(character, unknown) does not exist\nLINE 1: SELECT encode(c1,'hex') FROM ab;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_84_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_char(unknown, unknown) is not unique\nLINE 2: insert into t5 values (1, to_char('2001-01-01', 'DAY'));\n                                  ^\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_84_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 0}
{"sql_id": "postgresql_84_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's the translated SQL statement from MySQL to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_84_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 0}
{"sql_id": "postgresql_84_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"[\"\nLINE 2: [Translated SQL]:INSERT INTO t1 VALUES (1, current_user);\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_85_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The SQL statement is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_85_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_85_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_85_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"[\"\nLINE 4: [Output]:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_85_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_86_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, None, Decimal('1.1'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_86_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, None, None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translation of the given MySQL query to...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_86_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('', 'abababababababababab', '', None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here's the translation of the SQL statement from MySQL to Po...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_86_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent PostgreSQL query for the MySQL query you prov...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_86_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t2\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t2\" already exists\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_86_11", "EM": 1, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t2\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t2\" already exists\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_86_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t2\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_87_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement for PostgreSQL:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 7, "FN": 0}
{"sql_id": "postgresql_87_3", "EM": 1, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaaaaaaaa,bbbbbbbbbb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaaaaaaaa, bbbbbbbbbb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_87_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1748095884.966213'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1748095885.122364'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "postgresql_88_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's the translated SQL statement in PostgreSQL:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_88_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((100,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_88_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_88_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((100, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"This\"\nLINE 4: This SQL statement is selecting two columns from a table: `c...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_89_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function encode(character varying, unknown) does not exist\nLINE 2: SELECT encode(a,'hex') FROM t1 WHERE a LIKE 'A_';\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_89_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The translated SQL statement in PostgreSQL is as follows:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_89_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('00410000',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The translated SQL statement in PostgreSQL is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_89_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following SQL statement is a create table statement in M...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_9_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('this', 'is', 'a', 2, Decimal('2.0')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The following is a translation of the given MySQL statement ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_9_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a',), ('A',), ('aa',), ('AA',), ('aaa',), ('BBB',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of CASE/WHEN must be type boolean, not type integer\nLINE 1: SELECT CASE WHEN 1 THEN st ELSE st END AS s FROM t1 ORDER BY...\n                         ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a',), ('A',), ('aa',), ('AA',), ('aaa',), ('BBB',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a',), ('A',), ('aa',), ('AA',), ('aaa',), ('BBB',))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement for PostgreSQL:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 7, "FN": 0}
{"sql_id": "postgresql_9_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The MySQL statement:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_9_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('144.54'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_9_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((6, 56))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_9_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True, False))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True, False))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, '05-03-2005', 'Day 1'), (2, '16-03-2005', 'Day 2'), (3, '28-03-2005', 'Day 3'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_9_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, '28-03-2005', 'Day 3'), (2, '16-03-2005', 'Day 2'), (1, '05-03-2005', 'Day 1'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3, '1112000000', 'Day 3'), (2, '1111000000', 'Day 2'), (1, '1110000000', 'Day 1'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "postgresql_9_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1234567890123456789'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_9_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1234567890123456789'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"unsigned\" does not exist\nLINE 1: SELECT MAX(COALESCE(CAST(c AS UNSIGNED), 0)) FROM t1;\n                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_9_29", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('2001.0000000000000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent PostgreSQL query to the given MySQL query wou...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_90_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 10000 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The original MySQL query uses the `FROM_DAYS` function to co...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_90_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 117592 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given MySQL statement translates to the following Postgr...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 9, "FN": 1}
{"sql_id": "postgresql_91_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"i\" is of type integer but expression is of type record\nLINE 3: ((0, 'x'), 120000),\n         ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_91_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((120000,), (12000,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 3: The above SQL statement is functionally equivalent to the fo...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_92_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_93_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL syntax for creating a `ROW` object is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_93_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translated SQL statement from MySQL to ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 9, "FN": 1}
{"sql_id": "postgresql_93_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_93_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_93_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_93_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is a translation of the provided MySQL SQL statement in...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_93_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given MySQL statement translates to PostgreSQL as follow...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_93_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('(1,2,3)', '(2,2,3)'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_93_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_93_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The original MySQL statement uses the `ROW` function to cons...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_93_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translation of the given SQL statement ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_93_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "could not identify an equality operator for type unknown\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_93_24", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Note\"\nLINE 4: Note that the `ROW` function in PostgreSQL is used to create...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_93_26", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_94_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 2, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 2, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_94_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_94_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 3, 1), (3, 2, 1))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement for PostgreSQL is as follows:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 7, "FN": 1}
{"sql_id": "postgresql_94_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,), (False,), (False,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,), (False,), (False,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_94_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,), (False,), (True,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement from MySQL to PostgreSQL is as ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_94_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,), (True,), (True,), (True,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_94_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, False, False, False, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The following is the translation of the MySQL statement to P...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_95_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"a\" does not exist\nLINE 2: SELECT ROW(a, 1) IN (SELECT SUM(b), 1 FROM t1 GROUP BY a);\n                   ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_95_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_95_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_95_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "subquery has too few columns\nLINE 2: SELECT (ROW(1, 2)) = (SELECT i FROM t1 WHERE i = 0);\n                           ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_95_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "subquery has too few columns\nLINE 2: SELECT (ROW(1,2) = ANY(SELECT ROW(1,3) FROM t1 WHERE 1=0));\n                         ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_95_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translated SQL statement from MySQL to ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_95_19", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Note\"\nLINE 3: Note that in PostgreSQL, you can use the `NULL` keyword to r...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_96_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translated SQL statement from MySQL to ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_96_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translation of the given SQL statement from MySQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_96_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's a translation of the MySQL statement to PostgreSQL:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_96_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function right_padd(unknown, integer, unknown) does not exist\nLINE 2: SELECT RIGHT_PADD('a', 5, NULL) AS result; -- RPAD\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent SQL statement in PostgreSQL is as follows:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_96_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement in PostgreSQL would be as follo...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_96_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_96_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The equivalent SQL statement in PostgreSQL would be:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_96_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"dual\" does not exist\nLINE 2: SELECT RIGHT('a', 1) FROM DUAL;\n                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The given MySQL statement is used to pad a string with anoth...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_96_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('axyxy',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('axyxy',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_96_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('I LOVE SQL          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function space(integer) does not exist\nLINE 2: SELECT RIGHT('I LOVE SQL', 20) || SPACE(20) AS \"I LOVE SQL\";\n                                          ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_96_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The `RPAD` function in MySQL pads a string with spaces to a ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_97_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's the translated SQL statement from MySQL to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_97_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 1), (2, 2), (3, 3))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_98_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's the translated SQL statement from MySQL to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 9, "FN": 1}
{"sql_id": "postgresql_98_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_98_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_98_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_98_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_99_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ABC', 1), ('XYZ', 1), ('ABC', 1), ('XYZ', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('ABC  ', 1), ('XYZ ', 1), ('ABC ', 1), ('XYZ', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "postgresql_10_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('b                                                               ', 'a                                                               ', 'a               ', 'a211            '), ('c                                                               ', 'a                                                               ', 'a               ', 'a311            '), ('d                                                               ', 'a                                                               ', 'a               ', 'a411            '))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's the translated SQL statement in PostgreSQL:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_10_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ca311', 'a               '), ('ba211', 'a               '), ('aa111', 'a               '))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement from MySQL to PostgreSQL is:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_10_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ca311', 'a               ', 'c311            '), ('ba211', 'a               ', 'c211            '), ('aa111', 'a               ', 'c111            '))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('c                                                               a311            ', 'a               ', 'c311            '), ('b                                                               a211            ', 'a               ', 'c211            '), ('a                                                               a111            ', 'a               ', 'c111            '))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_10_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ca', 'a               ', 'a311            ', 'c311            '), ('ba', 'a               ', 'a211            ', 'c211            '), ('aa', 'a               ', 'a111            ', 'c111            '))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('c                                                               a                                                               ', 'a               ', 'a311            ', 'c311            '), ('b                                                               a                                                               ', 'a               ', 'a211            ', 'c211            '), ('a                                                               a                                                               ', 'a               ', 'a111            ', 'c111            '))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_10_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('9797', 'a               ', 'a               '), ('9797', 'a               ', 'a               '), ('9797', 'a               ', 'a               '), ('9797', 'a               ', 'a               '))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Translated\"\nLINE 2: Translated SQL in PostgreSQL:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_11_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, 50), (1, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement in PostgreSQL:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 7, "FN": 1}
{"sql_id": "postgresql_11_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3, 50), (1, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3, 50), (1, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_12_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1000, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's the translated SQL statement from MySQL to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "postgresql_12_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1000, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"[\"\nLINE 1: [SQL statement]:insert into t3 select concat('c-', 1000+A.a,...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_12_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 25, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 0}
{"sql_id": "postgresql_12_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Translation\"\nLINE 2: Translation from MySQL to PostgreSQL:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_12_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (1, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (2, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (3, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (4, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (5, '77777777777777777777', 'filler                                                                                                                                                                                                  '), (6, '77777777777777777777', 'filler                                                                                                                                                                                                  '), (7, '77777777777777777777', 'filler                                                                                                                                                                                                  '), (8, '77777777777777777777', 'filler                                                                                                                                                                                                  '), (9, '77777777777777777777', 'filler                                                                                                                                                                                                  '))", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 0}
{"sql_id": "postgresql_14_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"data\" is of type bytea but expression is of type text\nLINE 2: INSERT INTO t1 (data) VALUES (repeat('a', 1024));\n                                      ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"data\" is of type bytea but expression is of type text\nLINE 2: INSERT INTO t1 (data) VALUES (repeat('b', 16*1024-1024));\n                                      ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"data\" is of type bytea but expression is of type text\nLINE 1: UPDATE t1 set data=repeat('c', 17 * length('c'));\n                           ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_14_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"data\" is of type bytea but expression is of type text\nLINE 2: INSERT INTO t1 (data) VALUES (repeat('a', 18*1024))\n                                      ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((17408,), (17408,), (18432,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((17408,), (17408,), (18432,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_15_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1293840000.000000'), Decimal('0.000000'), 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The translated SQL statement in PostgreSQL is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_15_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_15_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_16_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('postgres', 'postgres'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('postgres',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_17_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_17_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_17_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_17_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_17_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_17_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_17_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"This\"\nLINE 4: This SQL statement is functionally equivalent to the origina...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_17_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('6131',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \")\"\nLINE 2: ...ELECT encode(concat(position(regexp_like('a', 'a'))), 'hex')...\n                                                             ^\n", "exec_able": false}}, "TP": 2, "FP": 3, "FN": 1}
{"sql_id": "postgresql_17_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_17_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The provided SQL statement is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_17_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL function REGEXP_INSTR returns the position of a re...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_17_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The SQL statement you provided is using the `regexp_instr` f...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_17_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_17_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Translated\"\nLINE 4: Translated SQL:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_17_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement from MySQL to PostgreSQL is as ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_17_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "postgresql_17_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \",\"\nLINE 2: SELECT position('b+', 'abcabcabc') FROM t1;\n                            ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_17_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_17_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "postgresql_17_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 4: The above SQL statement uses the `regexp_instr` function to ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_17_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_17_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translation of the SQL statement from M...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_17_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 5, "FN": 0}
{"sql_id": "postgresql_17_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_17_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_17_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"This\"\nLINE 4: This translates the SQL statement from MySQL to PostgreSQL b...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_17_28", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \",\"\nLINE 1: SELECT position( 'A+', 1, 1, 1, 'c' ) AS regexp_instr FROM t...\n                             ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_17_29", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The translated SQL statement is:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "postgresql_17_30", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \")\"\nLINE 2: ...p_split_to_array('aaabcabcabc', 'A+', 1, 1, 1, 'ci')::text);\n                                                                     ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_17_31", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_17_32", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \")\"\nLINE 1: SELECT position(substring('a' from 'a+'))\n                                                ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_18_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('XXX',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('XXX',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_18_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL function `regexp_replace()` is equivalent to the P...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_18_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_18_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement from MySQL to PostgreSQL is as ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_18_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_18_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('XXXx',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The following is the translation of the given MySQL statemen...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 9, "FN": 1}
{"sql_id": "postgresql_18_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The following SQL statement in MySQL can be translated to Po...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_18_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The MySQL function `regexp_replace()` takes four arguments: ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_18_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translation of the MySQL query to PostgreSQL is as follo...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 7, "FN": 1}
{"sql_id": "postgresql_18_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaa<bb>ccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_18_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaabbccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaabbccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_18_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaxccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_18_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaax',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function replace(unknown, unknown, unknown, integer, integer) does not exist\nLINE 2: SELECT replace( 'aaab', 'b', 'x', 1, 2 );\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_18_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaxccc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given SQL statement is a call to the `regexp_replace` fu...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_18_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The MySQL function `regexp_replace()` is equivalent to the P...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_18_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aXcXdX',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translation of the MySQL statement into PostgreSQL is as...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_18_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL function `REGEXP_REPLACE` replaces all occurrences...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_18_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The given MySQL statement uses the `regexp_replace` function...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_18_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_18_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent SQL statement in PostgreSQL for the given MyS...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_18_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('XXaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXXa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_19_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"This\"\nLINE 4: This SQL statement inserts a row into the `t1` table with va...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_19_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"This\"\nLINE 4: This SQL statement inserts a new row into the `t1` table wit...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_19_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type integer: \"b\"\nLINE 1: SELECT length(regexp_replace( repeat('a', 'b'), 'a', 'b' ));\n                                                  ^\n", "exec_able": false}}, "TP": 2, "FP": 3, "FN": 1}
{"sql_id": "postgresql_19_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_19_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((16384,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((16384,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_19_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('b',), ('c',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('$1',), ('$1',), ('$1',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_19_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_20_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_20_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"This\"\nLINE 4: This SQL statement will be translated to the following Postg...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_20_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"In\"\nLINE 4: In PostgreSQL, the equivalent query would be:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_20_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_21_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1-1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 4: The above SQL statement uses the MySQL function `CONCAT_WS` ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_21_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1, 'one'), (2, 1, 'one'), (4, 2, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_22_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_22_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2001, 12, 10),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_22_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The following query translates the MySQL statement to Postgr...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 0}
{"sql_id": "postgresql_23_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('0.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \")\"\nLINE 2: ...MESTAMP()) - EXTRACT(EPOCH FROM CURRENT_TIMESTAMP())) :: INT...\n                                                             ^\n", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 1}
{"sql_id": "postgresql_23_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 5, "FN": 0}
{"sql_id": "postgresql_23_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_23_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_23_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement for PostgreSQL:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_23_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_23_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1981, 7, 1, 0, 0, 9, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The provided SQL statement is a call to the `FROM_UNIXTIME` ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_23_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 4: The above SQL statement can be translated to PostgreSQL as f...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_23_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_23_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1048989599.000000'), 'Before the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1048989599.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_23_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1048991400.000000'), 'Inside the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given MySQL statement can be translated to PostgreSQL as...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_23_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1048993200.000000'), 'After the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL statement you provided is equivalent to the follow...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_23_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translation of the MySQL statement to PostgreSQL is as f...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_23_22", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('-28801.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('-28801.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_23_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('-28800.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL query you provided uses the `UNIX_TIMESTAMP` funct...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_23_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('-28799.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translation of the MySQL query to PostgreSQL is as follo...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_23_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 0, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_23_26", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1641052801.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1641052801.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_24_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"resultrowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here's the translated SQL statement from MySQL to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_24_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',), ('31',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 0}
{"sql_id": "postgresql_24_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('18af7',), ('2b67',), ('1b1fd',), ('1870f',), ('3f3',), ('1b1fd',), ('0',), ('f4633',), ('2b03',), ('f4697',), ('1b1a3',), ('2711',), ('1adb1',), ('1b1a3',), ('10cd37',), ('18af7',), ('6f',), ('f468d',), ('2b5d',), ('3e9',), ('277f',), ('2b5d',), ('10f05f',), ('f69bf',), ('10f3e3',), ('b',), ('2711',), ('6f',), ('457',), ('65',), ('457',), ('1',), ('44d',), ('1ae15',), ('10f447',), ('3f3',), ('2711',), ('1b199',))", "rowcount": 38, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 2, "FP": 6, "FN": 0}
{"sql_id": "postgresql_24_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('277f',), ('10cd2d',), ('271b',), ('10f3e3',), ('a7dcb3',), ('1b1a3',), ('9a4431',), ('2775',), ('f424b',), ('9a216d',), ('18af7',), ('10c94f',), ('9a2109',), ('18af7',), ('277f',), ('10f055',), ('9a487d',), ('f424b',), ('a7d92f',), ('9a443b',), ('3e9',), ('10c8eb',), ('277f',), ('9a2177',), ('a7dcb3',), ('10c8eb',), ('10c945',), ('a98a63',), ('9a1d8f',), ('f6d39',), ('9a2113',), ('a986d5',), ('2711',), ('10cd37',), ('a7dcb3',), ('98c183',), ('10eff1',), ('f424b',))", "rowcount": 38, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement from MySQL to PostgreSQL is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_24_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('18af7', '18af7', '277f', '277f'), ('2b67', '2b67', '10cd2d', '10cd2d'), ('1b1fd', '1b1fd', '271b', '271b'), ('1870f', '1870f', '10f3e3', '10f3e3'), ('3f3', '3f3', 'a7dcb3', 'a7dcb3'), ('1b1fd', '1b1fd', '1b1a3', '1b1a3'), ('0', '0', '9a4431', '9a4431'), ('f4633', 'f4633', '2775', '2775'), ('2b03', '2b03', 'f424b', 'f424b'), ('f4697', 'f4697', '9a216d', '9a216d'), ('1b1a3', '1b1a3', '18af7', '18af7'), ('2711', '2711', '10c94f', '10c94f'), ('1adb1', '1adb1', '9a2109', '9a2109'), ('1b1a3', '1b1a3', '18af7', '18af7'), ('10cd37', '10cd37', '277f', '277f'), ('18af7', '18af7', '10f055', '10f055'), ('6f', '6f', '9a487d', '9a487d'), ('f468d', 'f468d', 'f424b', 'f424b'), ('2b5d', '2b5d', 'a7d92f', 'a7d92f'), ('3e9', '3e9', '9a443b', '9a443b'), ('277f', '277f', '3e9', '3e9'), ('2b5d', '2b5d', '10c8eb', '10c8eb'), ('10f05f', '10f05f', '277f', '277f'), ('f69bf', 'f69bf', '9a2177', '9a2177'), ('10f3e3', '10f3e3', 'a7dcb3', 'a7dcb3'), ('b', 'b', '10c8eb', '10c8eb'), ('2711', '2711', '10c945', '10c945'), ('6f', '6f', 'a98a63', 'a98a63'), ('457', '457', '9a1d8f', '9a1d8f'), ('65', '65', 'f6d39', 'f6d39'), ('457', '457', '9a2113', '9a2113'), ('1', '1', 'a986d5', 'a986d5'), ('44d', '44d', '2711', '2711'), ('1ae15', '1ae15', '10cd37', '10cd37'), ('10f447', '10f447', 'a7dcb3', 'a7dcb3'), ('3f3', '3f3', '98c183', '98c183'), ('2711', '2711', '10eff1', '10eff1'), ('1b199', '1b199', 'f424b', 'f424b'))", "rowcount": 38, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 3, "FP": 8, "FN": 0}
{"sql_id": "postgresql_24_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,), ('0',), ('0',), ('0',), ('1',), ('0',))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function min(bit) does not exist\nLINE 2: SELECT to_hex(MIN(b)) FROM t1 WHERE a = 4;\n                      ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_24_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('b',), ('277f',), ('2b03',), ('2711',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function min(bit) does not exist\nLINE 2: SELECT hex_int(min(c)) FROM t1 WHERE a = 4 AND b = 0;\n                       ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_24_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,), ('0',), ('1',), ('1',), ('0',), ('0',), ('0',), ('1',), ('0',), ('0',))", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The given SQL statement is a query that retrieves the maximu...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_24_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here's the translated SQL statement in PostgreSQL:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_24_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30302c3131',), ('30312c3130',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((['00', '11'],), (['01', '10'],))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "postgresql_25_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31', 100), ('31', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's the translated SQL statement from MySQL to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 9, "FN": 1}
{"sql_id": "postgresql_25_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31', 100), ('31', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 4: The above SQL statement from MySQL needs to be translated in...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_25_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30', 100), ('30', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The SQL statement you provided is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_25_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30302c3131',), ('30312c3130',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((['00', '11'],), (['01', '10'],))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "postgresql_25_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('3030',), ('3031',), ('3130',), ('3131',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_hex(bit) does not exist\nLINE 1: SELECT TO_HEX(t2.b) FROM t2;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_25_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, '3030'), (3, '3031'), (3, '3130'), (3, '3130'), (2, '3131'))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, '00'), (3, '01'), (3, '10'), (3, '10'), (2, '11'))", "rowcount": 5, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_26_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',), ('615c30',), ('6161',), ('62',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',), ('615c30',), ('6161',), ('62',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_26_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61205c30',), ('615c30',), ('615c305c30',), ('61615c30',), ('625c30',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement is as follows:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_26_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',), ('6120',), ('615c30',), ('6161',), ('62',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's the translated SQL statement from MySQL to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_26_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The equivalent PostgreSQL query would be:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_26_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((65535, 65535))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((65535, 65535))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 1}
{"sql_id": "postgresql_26_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_27_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1.7976931348623157e+308,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given MySQL query is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_28_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 4: The above SQL statement is functionally equivalent to the fo...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_28_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2025 25', Decimal('2025'), Decimal('2025')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 3, "FP": 6, "FN": 0}
{"sql_id": "postgresql_28_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1206, seconds=84012),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's the translation of the SQL statement from MySQL to Po...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "postgresql_30_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, 3, 3, 3), (4, 3, 3, 4), (7, 3, 3, 7))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The SQL statement you provided is a SELECT query that retrie...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_30_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translated SQL statement from MySQL to ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_30_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('10', 5.0), ('30', 15.0), ('50', 25.0), ('60', 30.0))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('10', 5), ('30', 15), ('50', 25), ('60', 30))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_31_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"This\"\nLINE 4: This SQL statement inserts the current date and time into a ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_31_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 1}
{"sql_id": "postgresql_31_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: smallint = timestamp with time zone\nLINE 2: SELECT * FROM t4 WHERE yyyy = NOW();\n                                    ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_31_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('3'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: smallint - date\nLINE 1: SELECT EXTRACT(QUARTER FROM (LEAST(y1, y2) - d))FROM t1;\n                                                   ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_31_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2085,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"This\"\nLINE 3: This SQL statement is functionally equivalent to the origina...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 9, "FN": 2}
{"sql_id": "postgresql_32_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, '\"0\"'), (0, '\"0\"'), (2012, '\"2012\"'), (0, '\"0\"'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 0}
{"sql_id": "postgresql_33_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1111111111111111111111111111111111111111111111111111111111111111',), ('1000000000000000000000000000000000000000000000000000000000000000',), ('0000000000000000000000000000000000000000000000000000000000000000',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_33_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('0000000000000000',), ('0000000000000001',), ('0000000000000010',), ('0000000000000011',), ('0000000000000100',))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" does not exist\nLINE 2: SELECT encode(b,'hex') from t1 order by pk1;\n                                    ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_34_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('*a*',), ('*b*',), ('*o*',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('*a                   *',), ('*b                   *',), ('*o                   *',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_34_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a                   ', '*a*', 'o                   ', '*o*'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a                   ', '*a                   *', 'o                   ', '*o                   *'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 7, "FN": 1}
{"sql_id": "postgresql_34_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('-hello-hello-',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The translated SQL statement in PostgreSQL is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_34_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('-hello-hello-',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement is:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "postgresql_34_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement in PostgreSQL is as follows:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_34_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 0}
{"sql_id": "postgresql_34_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',), ('6120',), ('62',), ('6220',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_35_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL statement to insert a binary value into the column...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_35_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unhex(unknown) does not exist\nLINE 1:  INSERT INTO t1 (a) VALUES (unhex('1F9480179366F2BF567E1C4B9...\n                                    ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_35_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The SQL statement you provided is an INSERT query that inser...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_35_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1f9480179366f2bf567e1c4b964c1ef029080707',), ('1f9480179366f2bf567e1c4b964c1ef029082020',), ('1f9480179366f2bf567e1c4b964c1ef029087575',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1f9480179366f2bf567e1c4b964c1ef029080707',), ('1f9480179366f2bf567e1c4b964c1ef029082020',), ('1f9480179366f2bf567e1c4b964c1ef029087575',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_35_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Translated\"\nLINE 2: Translated SQL (PostgreSQL):\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "postgresql_35_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1f9480179366f2bf567e1c4b964c1ef029082020',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1f9480179366f2bf567e1c4b964c1ef029082020',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_35_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_36_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of AND must be type boolean, not type integer\nLINE 1: SELECT CASE WHEN NULL::boolean AND 1 THEN 1 ELSE 2 END, CASE...\n                                           ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_36_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_36_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_36_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N'), ('N', 'N', 'Y', 'N', 'N', 'Y', 'Y', 'N', 'N'), ('Y', 'N', 'N', 'N', 'N', 'N', 'N', 'Y', 'N'), ('N', 'N', 'N', 'Y', 'N', 'Y', 'Y', 'N', 'N'), ('N', 'Y', 'N', 'N', 'N', 'N', 'N', 'Y', 'N'), ('N', 'N', 'Y', 'Y', 'N', 'Y', 'Y', 'N', 'Y'), ('N', 'Y', 'Y', 'N', 'N', 'Y', 'Y', 'Y', 'N'), ('Y', 'N', 'N', 'Y', 'N', 'Y', 'Y', 'Y', 'N'), ('Y', 'Y', 'N', 'N', 'Y', 'N', 'N', 'Y', 'N'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement in PostgreSQL is as follows:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 7, "FN": 1}
{"sql_id": "postgresql_37_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2004, 1, 22),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's the translated SQL statement from MySQL to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_37_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given SQL statement is a simple query that calculates th...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_37_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The following is the translated SQL statement from MySQL to ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 9, "FN": 1}
{"sql_id": "postgresql_37_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement from MySQL to PostgreSQL is:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_37_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"signed\" does not exist\nLINE 2: SELECT CAST(('12345' || '6789') AS SIGNED);\n                                           ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_37_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The following is the translation of the MySQL statement into...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 0}
{"sql_id": "postgresql_37_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL query `SELECT CAST(REPEAT('1', 9) AS SIGNED);` can...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_37_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, True))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 1}
{"sql_id": "postgresql_37_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The MySQL `hex()` function converts a string to its hexadeci...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_37_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((20070719,), (None,), (20070719,), (None,), (20070719,))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2007, 7, 19),), (None,), (datetime.date(2007, 7, 19),), (None,), (datetime.date(2007, 7, 19),))", "rowcount": 5, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_37_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('0'), Decimal('0'), Decimal('0.000000')), (None, None, None))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unit \"hour\" not supported for type date\n", "exec_able": false}}, "TP": 3, "FP": 3, "FN": 0}
{"sql_id": "postgresql_37_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('0'), Decimal('0'), Decimal('0.000000')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unit \"hour\" not supported for type date\n", "exec_able": false}}, "TP": 3, "FP": 1, "FN": 0}
{"sql_id": "postgresql_37_19", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 3, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 3, "FP": 8, "FN": 0}
{"sql_id": "postgresql_37_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('arowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The SQL statement you provided is a simple query that conver...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_37_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('value=340000',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((340000.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_37_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(1, 2, 1, 600000),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given MySQL statement can be translated to PostgreSQL as...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_38_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: text <-> character varying\nLINE 1: SELECT CAST(a AS text) <-> b FROM t1;\n                               ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_38_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1934,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL function `JSON_EXTRACT()` returns a value from a J...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_38_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1988, '198819881988'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1988, 5964))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_38_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x1988',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translation of the given MySQL query to...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_38_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('73800.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The given MySQL statement can be translated to PostgreSQL as...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_38_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1988, 1, 1, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.timedelta(seconds=60),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_38_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2025,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_38_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_40_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61202020202020202020', 0, 0), ('615c30202020202020', 1, 1), ('615c74202020202020', 1, 1), ('61202020202020202020', 0, 0))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function encode(character, unknown) does not exist\nLINE 2: SELECT encode(a, 'hex'), a <=> 'a', a <=> 'a ' FROM t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "postgresql_40_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12', False), ('11', False), ('22', False))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: integer || integer\nLINE 1: SELECT b || c AS concat_b_and_c, (b || c)::text = '0101' FRO...\n                 ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_40_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translated SQL statement from MySQL to ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 9, "FN": 0}
{"sql_id": "postgresql_40_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_40_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here's the translated SQL statement for PostgreSQL:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_40_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,), (False,), (False,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_40_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,), (True,), (True,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,), (True,), (True,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_41_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of CASE/WHEN must be type boolean, not type integer\nLINE 2: SELECT COUNT(DISTINCT CASE WHEN f1 THEN 3 ELSE f2 END) FROM ...\n                                        ^\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_42_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('0.0.0.1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function inet_ntoa(unknown) does not exist\nLINE 2: SELECT inet_ntoa('1');\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "postgresql_42_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function encode(character varying, unknown) does not exist\nLINE 1: SELECT encode(v,'hex') FROM t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_43_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('string ', 'string '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The given SQL statement is a query that uses the CONCAT func...\n        ^\n", "exec_able": false}}, "TP": 3, "FP": 6, "FN": 0}
{"sql_id": "postgresql_43_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_43_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 256, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 0}
{"sql_id": "postgresql_43_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 256, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 256, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_43_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('0.0.0.1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function inet_ntoa(unknown) does not exist\nLINE 1: SELECT inet6_ntoa(inet_ntoa('1')) AS \"head\";\n                          ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 2}
{"sql_id": "postgresql_44_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type integer: \"\"\nLINE 1: SELECT STRING_AGG(COALESCE(a, ''), '') FROM t1;\n                                      ^\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(([1234567],))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "postgresql_44_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of CASE/WHEN must be type boolean, not type integer\nLINE 1: SELECT string_agg(CASE WHEN a THEN a ELSE '' END::text, '') ...\n                                    ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_44_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type integer: \"\"\nLINE 2: SELECT COALESCE(a::integer,'') FROM t1 GROUP BY 1; -- COALES...\n                                   ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement in PostgreSQL:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_44_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function lower(integer) does not exist\nLINE 2: CREATE TABLE t2 AS SELECT LOWER(a) FROM t1; -- LOWER\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function upper(integer) does not exist\nLINE 2: CREATE TABLE t2 AS SELECT UPPER(a) FROM t1;\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_44_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function elt(integer, integer, integer, integer) does not exist\nLINE 2: CREATE TABLE t2 AS SELECT ELT(1, 111, 222, 333) FROM t1;\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_45_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function encode(text, unknown) does not exist\nLINE 2: SELECT encode(a, 'hex') FROM t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('20202020202020202020',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function encode(character, unknown) does not exist\nLINE 2: SELECT encode(a,'hex')::text FROM t2;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('       xxx          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('       xxx          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_45_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('x         ', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x         ', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_45_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x         ', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_45_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_45_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x         ', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "postgresql_45_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \")\"\nLINE 2:     position(null) AS locate_null,\n                         ^\n", "exec_able": false}}, "TP": 1, "FP": 5, "FN": 0}
{"sql_id": "postgresql_45_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_45_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translated SQL statement from MySQL to ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 9, "FN": 1}
{"sql_id": "postgresql_45_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_45_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x         ', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_45_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_45_25", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_46_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 15, 2, 59, 58, 999000, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translation of the MySQL statement to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 2}
{"sql_id": "postgresql_46_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 12, 12, 22, 30, 59, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent PostgreSQL query for this MySQL query is as f...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_46_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2003-01-02 08:11:02+00',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 2}
{"sql_id": "postgresql_46_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('14',), ('14',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_46_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Thursday (Thu), 1 January (Jan) 2004',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here's the translation of the SQL statement from MySQL to Po...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_47_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"24:00:00\" does not exist\nLINE 1: SELECT TO_CHAR(\"24:00:00\", 'AM') AS \"TIME_FORMAT\";\n                       ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_47_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The following is the translation of the MySQL query to Postg...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 7, "FN": 1}
{"sql_id": "postgresql_47_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent of the MySQL statement in PostgreSQL is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_47_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('03:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The MySQL `TIME_FORMAT` function is used to format a time va...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_47_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('01:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The following is the translated SQL statement from MySQL to ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_47_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The SQL statement you provided is a valid MySQL query, and i...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_47_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('01 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL function `TIME_FORMAT` is used to format a time va...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_47_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"dual\" does not exist\nLINE 2: SELECT TO_CHAR(\"12:00:00\", 'HH24') AS \"HH24\" FROM DUAL;\n                                                          ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_47_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('11 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function format_time(unknown, unknown) does not exist\nLINE 2: SELECT FORMAT_TIME('23:00:00', '%I %p') AS time;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_47_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given MySQL statement is used to format a time value int...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_47_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_47_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2004, 4, 30),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_47_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The equivalent PostgreSQL statement for the given MySQL stat...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_47_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Thursday  01 January   2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"2009-01-01\" does not exist\nLINE 1: SELECT TO_CHAR(\"2009-01-01\", 'Day') as valid_date;\n                       ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_48_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('3',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The SQL statement you provided is a valid MySQL query, but i...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_48_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('$Barney',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translation of the SQL statement from MySQL to P...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_49_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',), ('|teststring\\\\\\\\t|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring                      |',), ('|teststring\\\\\\\\t                   |',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_49_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's the translated SQL statement for PostgreSQL:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 9, "FN": 1}
{"sql_id": "postgresql_49_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('nothing                         ', 32), ('teststring                      ', 32), ('teststring\\\\\\\\t                   ', 32))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('nothing                         ', 7), ('teststring                      ', 10), ('teststring\\\\\\\\t                   ', 13))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_49_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|nothing|',), ('|teststring|',), ('|teststring|',), ('|teststring\\\\\\\\t|',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_49_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',), ('|teststring|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translated SQL statement from MySQL to ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_49_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',), ('|teststring|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement from MySQL to PostgreSQL is:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_49_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',), ('|teststring|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The SQL statement you provided is a SELECT query that uses t...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_50_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((\"Let's create some new events from the name of postgres\",))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Explanation\"\nLINE 4: Explanation:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_51_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_51_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function encode(text, unknown) does not exist\nLINE 2: INSERT INTO t1 VALUES ( 1, encode(repeat('x', 104), 'hex') )...\n                                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_51_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',), ('',), (None,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',), ('',), (None,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_51_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(2023, 1, 15),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2023, 1, 15),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_51_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The SQL statement you provided is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_51_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement in PostgreSQL is as follows:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 7, "FN": 0}
{"sql_id": "postgresql_51_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_51_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"In\"\nLINE 4: In MySQL, the `REPEAT` function is used to concatenate a str...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_51_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted string at or near \"'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\nLINE 2: INSERT INTO t1 VALUES (5, 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx...\n                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_51_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_51_24", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6, 40013), (5, 40008), (4, 40005), (3, 40003), (2, 40002), (1, 40001))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6, 40013), (5, 40008), (4, 40005), (3, 40003), (2, 40002), (1, 40001))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_52_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"TRANSLATED\"\nLINE 4: TRANSLATED SQL:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_52_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Translated\"\nLINE 4: Translated SQL:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_52_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Explanation\"\nLINE 6: Explanation: In MySQL, the `length` function returns the num...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_52_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 1, 1, 1, 'america', 'america'), (2, 2, 2, 2, 'england', 'england'), (3, 3, 3, 3, 'america', 'america'), (4, 4, 4, 4, 'england', 'england'), (5, 5, 5, 5, 'america', 'america'), (6, 6, 6, 6, 'england', 'england'), (7, 7, 7, 7, 'america', 'america'), (8, 8, 8, 8, 'england', 'england'), (9, 9, 9, 9, 'america', 'america'), (10, 10, 10, 10, 'england', 'england'), (11, 11, 11, 11, 'america', 'america'), (12, 12, 12, 12, 'england', 'england'), (13, 13, 13, 13, 'america', 'america'), (14, 14, 14, 14, 'england', 'england'), (15, 15, 15, 15, 'america', 'america'), (16, 16, 16, 16, 'england', 'england'), (17, 17, 17, 17, 'america', 'america'), (18, 18, 18, 18, 'england', 'england'), (19, 19, 19, 19, 'america', 'america'), (20, 20, 20, 20, 'england', 'england'), (21, 21, 21, 21, 'america', 'america'), (22, 22, 22, 22, 'england', 'england'), (23, 23, 23, 23, 'america', 'america'), (24, 24, 24, 24, 'england', 'england'), (25, 25, 25, 25, 'america', 'america'), (26, 26, 26, 26, 'england', 'england'), (27, 27, 27, 27, 'america', 'america'), (28, 28, 28, 28, 'england', 'england'), (29, 29, 29, 29, 'america', 'america'), (30, 30, 30, 30, 'england', 'england'), (31, 31, 31, 31, 'america', 'america'), (32, 32, 32, 32, 'england', 'england'), (33, 33, 33, 33, 'america', 'america'), (34, 34, 34, 34, 'england', 'england'), (35, 35, 35, 35, 'america', 'america'), (36, 36, 36, 36, 'england', 'england'), (37, 37, 37, 37, 'america', 'america'), (38, 38, 38, 38, 'england', 'england'), (39, 39, 39, 39, 'america', 'america'), (40, 40, 40, 40, 'england', 'england'), (41, 41, 41, 41, 'america', 'america'), (42, 42, 42, 42, 'england', 'england'), (43, 43, 43, 43, 'america', 'america'), (44, 44, 44, 44, 'england', 'england'), (45, 45, 45, 45, 'america', 'america'), (46, 46, 46, 46, 'england', 'england'), (47, 47, 47, 47, 'america', 'america'), (48, 48, 48, 48, 'england', 'england'), (49, 49, 49, 49, 'america', 'america'), (50, 50, 50, 50, 'england', 'england'), (51, 51, 51, 51, 'america', 'america'), (52, 52, 52, 52, 'england', 'england'), (53, 53, 53, 53, 'america', 'america'), (54, 54, 54, 54, 'england', 'england'), (55, 55, 55, 55, 'america', 'america'), (56, 56, 56, 56, 'england', 'england'), (57, 57, 57, 57, 'america', 'america'), (58, 58, 58, 58, 'england', 'england'), (59, 59, 59, 59, 'america', 'america'), (60, 60, 60, 60, 'england', 'england'), (61, 61, 61, 61, 'america', 'america'), (62, 62, 62, 62, 'england', 'england'), (63, 63, 63, 63, 'america', 'america'), (64, 64, 64, 64, 'england', 'england'), (65, 65, 65, 65, 'america', 'america'), (66, 66, 66, 66, 'england', 'england'), (67, 67, 67, 67, 'america', 'america'), (68, 68, 68, 68, 'england', 'england'), (69, 69, 69, 69, 'america', 'america'), (70, 70, 70, 70, 'england', 'england'), (71, 71, 71, 71, 'america', 'america'), (72, 72, 72, 72, 'england', 'england'), (73, 73, 73, 73, 'america', 'america'), (74, 74, 74, 74, 'england', 'england'), (75, 75, 75, 75, 'america', 'america'), (76, 76, 76, 76, 'england', 'england'), (77, 77, 77, 77, 'america', 'america'), (78, 78, 78, 78, 'england', 'england'), (79, 79, 79, 79, 'america', 'america'), (80, 80, 80, 80, 'england', 'england'), (81, 81, 81, 81, 'america', 'america'), (82, 82, 82, 82, 'england', 'england'), (83, 83, 83, 83, 'america', 'america'), (84, 84, 84, 84, 'england', 'england'), (85, 85, 85, 85, 'america', 'america'), (86, 86, 86, 86, 'england', 'england'), (87, 87, 87, 87, 'america', 'america'), (88, 88, 88, 88, 'england', 'england'), (89, 89, 89, 89, 'america', 'america'), (90, 90, 90, 90, 'england', 'england'), (91, 91, 91, 91, 'america', 'america'), (92, 92, 92, 92, 'england', 'england'), (93, 93, 93, 93, 'america', 'america'), (94, 94, 94, 94, 'england', 'england'), (95, 95, 95, 95, 'america', 'america'), (96, 96, 96, 96, 'england', 'england'), (97, 97, 97, 97, 'america', 'america'), (98, 98, 98, 98, 'england', 'england'), (99, 99, 99, 99, 'america', 'america'), (100, 100, 100, 100, 'england', 'england'), (101, 101, 101, 101, 'america', 'america'), (102, 102, 102, 102, 'england', 'england'), (103, 103, 103, 103, 'america', 'america'), (104, 104, 104, 104, 'england', 'england'), (105, 105, 105, 105, 'america', 'america'), (106, 106, 106, 106, 'england', 'england'), (107, 107, 107, 107, 'america', 'america'), (108, 108, 108, 108, 'england', 'england'), (109, 109, 109, 109, 'america', 'america'), (110, 110, 110, 110, 'england', 'england'), (111, 111, 111, 111, 'america', 'america'), (112, 112, 112, 112, 'england', 'england'), (113, 113, 113, 113, 'america', 'america'), (114, 114, 114, 114, 'england', 'england'), (115, 115, 115, 115, 'america', 'america'), (116, 116, 116, 116, 'england', 'england'), (117, 117, 117, 117, 'america', 'america'), (118, 118, 118, 118, 'england', 'england'), (119, 119, 119, 119, 'america', 'america'), (120, 120, 120, 120, 'england', 'england'), (121, 121, 121, 121, 'america', 'america'), (122, 122, 122, 122, 'england', 'england'), (123, 123, 123, 123, 'america', 'america'), (124, 124, 124, 124, 'england', 'england'), (125, 125, 125, 125, 'america', 'america'), (126, 126, 126, 126, 'england', 'england'), (127, 127, 127, 127, 'america', 'america'), (128, 128, 128, 128, 'england', 'england'), (1, 1, 1, 1, 'america', 'america'), (2, 2, 2, 2, 'america', 'america'), (3, 3, 3, 3, 'america', 'america'), (4, 4, 4, 4, 'america', 'america'), (5, 5, 5, 5, 'america', 'america'), (6, 6, 6, 6, 'america', 'america'), (7, 7, 7, 7, 'america', 'america'), (8, 8, 8, 8, 'america', 'america'), (9, 9, 9, 9, 'america', 'america'), (10, 10, 10, 10, 'america', 'america'), (11, 11, 11, 11, 'america', 'america'), (12, 12, 12, 12, 'america', 'america'), (13, 13, 13, 13, 'america', 'america'), (14, 14, 14, 14, 'america', 'america'), (15, 15, 15, 15, 'america', 'america'), (16, 16, 16, 16, 'america', 'america'), (17, 17, 17, 17, 'america', 'america'), (18, 18, 18, 18, 'america', 'america'), (19, 19, 19, 19, 'america', 'america'), (20, 20, 20, 20, 'america', 'america'), (21, 21, 21, 21, 'america', 'america'), (22, 22, 22, 22, 'america', 'america'), (23, 23, 23, 23, 'america', 'america'), (24, 24, 24, 24, 'america', 'america'), (25, 25, 25, 25, 'america', 'america'), (26, 26, 26, 26, 'america', 'america'), (27, 27, 27, 27, 'america', 'america'), (28, 28, 28, 28, 'america', 'america'), (29, 29, 29, 29, 'america', 'america'), (30, 30, 30, 30, 'america', 'america'), (31, 31, 31, 31, 'america', 'america'), (32, 32, 32, 32, 'america', 'america'), (33, 33, 33, 33, 'america', 'america'), (34, 34, 34, 34, 'america', 'america'), (35, 35, 35, 35, 'america', 'america'), (36, 36, 36, 36, 'america', 'america'), (37, 37, 37, 37, 'america', 'america'), (38, 38, 38, 38, 'america', 'america'), (39, 39, 39, 39, 'america', 'america'), (40, 40, 40, 40, 'america', 'america'), (41, 41, 41, 41, 'america', 'america'), (42, 42, 42, 42, 'america', 'america'), (43, 43, 43, 43, 'america', 'america'), (44, 44, 44, 44, 'america', 'america'), (45, 45, 45, 45, 'america', 'america'), (46, 46, 46, 46, 'america', 'america'), (47, 47, 47, 47, 'america', 'america'), (48, 48, 48, 48, 'america', 'america'), (49, 49, 49, 49, 'america', 'america'), (50, 50, 50, 50, 'america', 'america'), (51, 51, 51, 51, 'america', 'america'), (52, 52, 52, 52, 'america', 'america'), (53, 53, 53, 53, 'america', 'america'), (54, 54, 54, 54, 'america', 'america'), (55, 55, 55, 55, 'america', 'america'), (56, 56, 56, 56, 'america', 'america'), (57, 57, 57, 57, 'america', 'america'), (58, 58, 58, 58, 'america', 'america'), (59, 59, 59, 59, 'america', 'america'), (60, 60, 60, 60, 'america', 'america'), (61, 61, 61, 61, 'america', 'america'), (62, 62, 62, 62, 'america', 'america'), (63, 63, 63, 63, 'america', 'america'), (64, 64, 64, 64, 'america', 'america'), (65, 65, 65, 65, 'america', 'america'), (66, 66, 66, 66, 'america', 'america'), (67, 67, 67, 67, 'america', 'america'), (68, 68, 68, 68, 'america', 'america'), (69, 69, 69, 69, 'america', 'america'), (70, 70, 70, 70, 'america', 'america'), (71, 71, 71, 71, 'america', 'america'), (72, 72, 72, 72, 'america', 'america'), (73, 73, 73, 73, 'america', 'america'), (74, 74, 74, 74, 'america', 'america'), (75, 75, 75, 75, 'america', 'america'), (76, 76, 76, 76, 'america', 'america'), (77, 77, 77, 77, 'america', 'america'), (78, 78, 78, 78, 'america', 'america'), (79, 79, 79, 79, 'america', 'america'), (80, 80, 80, 80, 'america', 'america'), (81, 81, 81, 81, 'america', 'america'), (82, 82, 82, 82, 'america', 'america'), (83, 83, 83, 83, 'america', 'america'), (84, 84, 84, 84, 'america', 'america'), (85, 85, 85, 85, 'america', 'america'), (86, 86, 86, 86, 'america', 'america'), (87, 87, 87, 87, 'america', 'america'), (88, 88, 88, 88, 'america', 'america'), (89, 89, 89, 89, 'america', 'america'), (90, 90, 90, 90, 'america', 'america'), (91, 91, 91, 91, 'america', 'america'), (92, 92, 92, 92, 'america', 'america'), (93, 93, 93, 93, 'america', 'america'), (94, 94, 94, 94, 'america', 'america'), (95, 95, 95, 95, 'america', 'america'), (96, 96, 96, 96, 'america', 'america'), (97, 97, 97, 97, 'america', 'america'), (98, 98, 98, 98, 'america', 'america'), (99, 99, 99, 99, 'america', 'america'), (100, 100, 100, 100, 'america', 'america'), (101, 101, 101, 101, 'america', 'america'), (102, 102, 102, 102, 'america', 'america'), (103, 103, 103, 103, 'america', 'america'), (104, 104, 104, 104, 'america', 'america'), (105, 105, 105, 105, 'america', 'america'), (106, 106, 106, 106, 'america', 'america'), (107, 107, 107, 107, 'america', 'america'), (108, 108, 108, 108, 'america', 'america'), (109, 109, 109, 109, 'america', 'america'), (110, 110, 110, 110, 'america', 'america'), (111, 111, 111, 111, 'america', 'america'), (112, 112, 112, 112, 'america', 'america'), (113, 113, 113, 113, 'america', 'america'), (114, 114, 114, 114, 'america', 'america'), (115, 115, 115, 115, 'america', 'america'), (116, 116, 116, 116, 'america', 'america'), (117, 117, 117, 117, 'america', 'america'), (118, 118, 118, 118, 'america', 'america'), (119, 119, 119, 119, 'america', 'america'), (120, 120, 120, 120, 'america', 'america'), (121, 121, 121, 121, 'america', 'america'), (122, 122, 122, 122, 'america', 'america'), (123, 123, 123, 123, 'america', 'america'), (124, 124, 124, 124, 'america', 'america'), (125, 125, 125, 125, 'america', 'america'), (126, 126, 126, 126, 'america', 'america'), (127, 127, 127, 127, 'america', 'america'), (128, 128, 128, 128, 'america', 'america'), (1, 1, 1, 1, 'england america', 'england america'), (2, 2, 2, 2, 'england america', 'england america'), (3, 3, 3, 3, 'england america', 'england america'), (4, 4, 4, 4, 'england america', 'england america'), (5, 5, 5, 5, 'england america', 'england america'), (6, 6, 6, 6, 'england america', 'england america'), (7, 7, 7, 7, 'england america', 'england america'), (8, 8, 8, 8, 'england america', 'england america'), (9, 9, 9, 9, 'england america', 'england america'), (10, 10, 10, 10, 'england america', 'england america'), (11, 11, 11, 11, 'england america', 'england america'), (12, 12, 12, 12, 'england america', 'england america'), (13, 13, 13, 13, 'england america', 'england america'), (14, 14, 14, 14, 'england america', 'england america'), (15, 15, 15, 15, 'england america', 'england america'), (16, 16, 16, 16, 'england america', 'england america'), (17, 17, 17, 17, 'england america', 'england america'), (18, 18, 18, 18, 'england america', 'england america'), (19, 19, 19, 19, 'england america', 'england america'), (20, 20, 20, 20, 'england america', 'england america'), (21, 21, 21, 21, 'england america', 'england america'), (22, 22, 22, 22, 'england america', 'england america'), (23, 23, 23, 23, 'england america', 'england america'), (24, 24, 24, 24, 'england america', 'england america'), (25, 25, 25, 25, 'england america', 'england america'), (26, 26, 26, 26, 'england america', 'england america'), (27, 27, 27, 27, 'england america', 'england america'), (28, 28, 28, 28, 'england america', 'england america'), (29, 29, 29, 29, 'england america', 'england america'), (30, 30, 30, 30, 'england america', 'england america'), (31, 31, 31, 31, 'england america', 'england america'), (32, 32, 32, 32, 'england america', 'england america'), (33, 33, 33, 33, 'england america', 'england america'), (34, 34, 34, 34, 'england america', 'england america'), (35, 35, 35, 35, 'england america', 'england america'), (36, 36, 36, 36, 'england america', 'england america'), (37, 37, 37, 37, 'england america', 'england america'), (38, 38, 38, 38, 'england america', 'england america'), (39, 39, 39, 39, 'england america', 'england america'), (40, 40, 40, 40, 'england america', 'england america'), (41, 41, 41, 41, 'england america', 'england america'), (42, 42, 42, 42, 'england america', 'england america'), (43, 43, 43, 43, 'england america', 'england america'), (44, 44, 44, 44, 'england america', 'england america'), (45, 45, 45, 45, 'england america', 'england america'), (46, 46, 46, 46, 'england america', 'england america'), (47, 47, 47, 47, 'england america', 'england america'), (48, 48, 48, 48, 'england america', 'england america'), (49, 49, 49, 49, 'england america', 'england america'), (50, 50, 50, 50, 'england america', 'england america'), (51, 51, 51, 51, 'england america', 'england america'), (52, 52, 52, 52, 'england america', 'england america'), (53, 53, 53, 53, 'england america', 'england america'), (54, 54, 54, 54, 'england america', 'england america'), (55, 55, 55, 55, 'england america', 'england america'), (56, 56, 56, 56, 'england america', 'england america'), (57, 57, 57, 57, 'england america', 'england america'), (58, 58, 58, 58, 'england america', 'england america'), (59, 59, 59, 59, 'england america', 'england america'), (60, 60, 60, 60, 'england america', 'england america'), (61, 61, 61, 61, 'england america', 'england america'), (62, 62, 62, 62, 'england america', 'england america'), (63, 63, 63, 63, 'england america', 'england america'), (64, 64, 64, 64, 'england america', 'england america'), (65, 65, 65, 65, 'england america', 'england america'), (66, 66, 66, 66, 'england america', 'england america'), (67, 67, 67, 67, 'england america', 'england america'), (68, 68, 68, 68, 'england america', 'england america'), (69, 69, 69, 69, 'england america', 'england america'), (70, 70, 70, 70, 'england america', 'england america'), (71, 71, 71, 71, 'england america', 'england america'), (72, 72, 72, 72, 'england america', 'england america'), (73, 73, 73, 73, 'england america', 'england america'), (74, 74, 74, 74, 'england america', 'england america'), (75, 75, 75, 75, 'england america', 'england america'), (76, 76, 76, 76, 'england america', 'england america'), (77, 77, 77, 77, 'england america', 'england america'), (78, 78, 78, 78, 'england america', 'england america'), (79, 79, 79, 79, 'england america', 'england america'), (80, 80, 80, 80, 'england america', 'england america'), (81, 81, 81, 81, 'england america', 'england america'), (82, 82, 82, 82, 'england america', 'england america'), (83, 83, 83, 83, 'england america', 'england america'), (84, 84, 84, 84, 'england america', 'england america'), (85, 85, 85, 85, 'england america', 'england america'), (86, 86, 86, 86, 'england america', 'england america'), (87, 87, 87, 87, 'england america', 'england america'), (88, 88, 88, 88, 'england america', 'england america'), (89, 89, 89, 89, 'england america', 'england america'), (90, 90, 90, 90, 'england america', 'england america'), (91, 91, 91, 91, 'england america', 'england america'), (92, 92, 92, 92, 'england america', 'england america'), (93, 93, 93, 93, 'england america', 'england america'), (94, 94, 94, 94, 'england america', 'england america'), (95, 95, 95, 95, 'england america', 'england america'), (96, 96, 96, 96, 'england america', 'england america'), (97, 97, 97, 97, 'england america', 'england america'), (98, 98, 98, 98, 'england america', 'england america'), (99, 99, 99, 99, 'england america', 'england america'), (100, 100, 100, 100, 'england america', 'england america'), (101, 101, 101, 101, 'england america', 'england america'), (102, 102, 102, 102, 'england america', 'england america'), (103, 103, 103, 103, 'england america', 'england america'), (104, 104, 104, 104, 'england america', 'england america'), (105, 105, 105, 105, 'england america', 'england america'), (106, 106, 106, 106, 'england america', 'england america'), (107, 107, 107, 107, 'england america', 'england america'), (108, 108, 108, 108, 'england america', 'england america'), (109, 109, 109, 109, 'england america', 'england america'), (110, 110, 110, 110, 'england america', 'england america'), (111, 111, 111, 111, 'england america', 'england america'), (112, 112, 112, 112, 'england america', 'england america'), (113, 113, 113, 113, 'england america', 'england america'), (114, 114, 114, 114, 'england america', 'england america'), (115, 115, 115, 115, 'england america', 'england america'), (116, 116, 116, 116, 'england america', 'england america'), (117, 117, 117, 117, 'england america', 'england america'), (118, 118, 118, 118, 'england america', 'england america'), (119, 119, 119, 119, 'england america', 'england america'), (120, 120, 120, 120, 'england america', 'england america'), (121, 121, 121, 121, 'england america', 'england america'), (122, 122, 122, 122, 'england america', 'england america'), (123, 123, 123, 123, 'england america', 'england america'), (124, 124, 124, 124, 'england america', 'england america'), (125, 125, 125, 125, 'england america', 'england america'), (126, 126, 126, 126, 'england america', 'england america'), (127, 127, 127, 127, 'england america', 'england america'), (128, 128, 128, 128, 'england america', 'england america'), (1, 1, 1, 1, 'england america', 'england america'), (2, 2, 2, 2, 'england america', 'england america'), (3, 3, 3, 3, 'england america', 'england america'), (4, 4, 4, 4, 'england america', 'england america'), (5, 5, 5, 5, 'england america', 'england america'), (6, 6, 6, 6, 'england america', 'england america'), (7, 7, 7, 7, 'england america', 'england america'), (8, 8, 8, 8, 'england america', 'england america'), (9, 9, 9, 9, 'england america', 'england america'), (10, 10, 10, 10, 'england america', 'england america'), (11, 11, 11, 11, 'england america', 'england america'), (12, 12, 12, 12, 'england america', 'england america'), (13, 13, 13, 13, 'england america', 'england america'), (14, 14, 14, 14, 'england america', 'england america'), (15, 15, 15, 15, 'england america', 'england america'), (16, 16, 16, 16, 'england america', 'england america'), (17, 17, 17, 17, 'england america', 'england america'), (18, 18, 18, 18, 'england america', 'england america'), (19, 19, 19, 19, 'england america', 'england america'), (20, 20, 20, 20, 'england america', 'england america'), (21, 21, 21, 21, 'england america', 'england america'), (22, 22, 22, 22, 'england america', 'england america'), (23, 23, 23, 23, 'england america', 'england america'), (24, 24, 24, 24, 'england america', 'england america'), (25, 25, 25, 25, 'england america', 'england america'), (26, 26, 26, 26, 'england america', 'england america'), (27, 27, 27, 27, 'england america', 'england america'), (28, 28, 28, 28, 'england america', 'england america'), (29, 29, 29, 29, 'england america', 'england america'), (30, 30, 30, 30, 'england america', 'england america'), (31, 31, 31, 31, 'england america', 'england america'), (32, 32, 32, 32, 'england america', 'england america'), (33, 33, 33, 33, 'england america', 'england america'), (34, 34, 34, 34, 'england america', 'england america'), (35, 35, 35, 35, 'england america', 'england america'), (36, 36, 36, 36, 'england america', 'england america'), (37, 37, 37, 37, 'england america', 'england america'), (38, 38, 38, 38, 'england america', 'england america'), (39, 39, 39, 39, 'england america', 'england america'), (40, 40, 40, 40, 'england america', 'england america'), (41, 41, 41, 41, 'england america', 'england america'), (42, 42, 42, 42, 'england america', 'england america'), (43, 43, 43, 43, 'england america', 'england america'), (44, 44, 44, 44, 'england america', 'england america'), (45, 45, 45, 45, 'england america', 'england america'), (46, 46, 46, 46, 'england america', 'england america'), (47, 47, 47, 47, 'england america', 'england america'), (48, 48, 48, 48, 'england america', 'england america'), (49, 49, 49, 49, 'england america', 'england america'), (50, 50, 50, 50, 'england america', 'england america'), (51, 51, 51, 51, 'england america', 'england america'), (52, 52, 52, 52, 'england america', 'england america'), (53, 53, 53, 53, 'england america', 'england america'), (54, 54, 54, 54, 'england america', 'england america'), (55, 55, 55, 55, 'england america', 'england america'), (56, 56, 56, 56, 'england america', 'england america'), (57, 57, 57, 57, 'england america', 'england america'), (58, 58, 58, 58, 'england america', 'england america'), (59, 59, 59, 59, 'england america', 'england america'), (60, 60, 60, 60, 'england america', 'england america'), (61, 61, 61, 61, 'england america', 'england america'), (62, 62, 62, 62, 'england america', 'england america'), (63, 63, 63, 63, 'england america', 'england america'), (64, 64, 64, 64, 'england america', 'england america'), (65, 65, 65, 65, 'england america', 'england america'), (66, 66, 66, 66, 'england america', 'england america'), (67, 67, 67, 67, 'england america', 'england america'), (68, 68, 68, 68, 'england america', 'england america'), (69, 69, 69, 69, 'england america', 'england america'), (70, 70, 70, 70, 'england america', 'england america'), (71, 71, 71, 71, 'england america', 'england america'), (72, 72, 72, 72, 'england america', 'england america'), (73, 73, 73, 73, 'england america', 'england america'), (74, 74, 74, 74, 'england america', 'england america'), (75, 75, 75, 75, 'england america', 'england america'), (76, 76, 76, 76, 'england america', 'england america'), (77, 77, 77, 77, 'england america', 'england america'), (78, 78, 78, 78, 'england america', 'england america'), (79, 79, 79, 79, 'england america', 'england america'), (80, 80, 80, 80, 'england america', 'england america'), (81, 81, 81, 81, 'england america', 'england america'), (82, 82, 82, 82, 'england america', 'england america'), (83, 83, 83, 83, 'england america', 'england america'), (84, 84, 84, 84, 'england america', 'england america'), (85, 85, 85, 85, 'england america', 'england america'), (86, 86, 86, 86, 'england america', 'england america'), (87, 87, 87, 87, 'england america', 'england america'), (88, 88, 88, 88, 'england america', 'england america'), (89, 89, 89, 89, 'england america', 'england america'), (90, 90, 90, 90, 'england america', 'england america'), (91, 91, 91, 91, 'england america', 'england america'), (92, 92, 92, 92, 'england america', 'england america'), (93, 93, 93, 93, 'england america', 'england america'), (94, 94, 94, 94, 'england america', 'england america'), (95, 95, 95, 95, 'england america', 'england america'), (96, 96, 96, 96, 'england america', 'england america'), (97, 97, 97, 97, 'england america', 'england america'), (98, 98, 98, 98, 'england america', 'england america'), (99, 99, 99, 99, 'england america', 'england america'), (100, 100, 100, 100, 'england america', 'england america'), (101, 101, 101, 101, 'england america', 'england america'), (102, 102, 102, 102, 'england america', 'england america'), (103, 103, 103, 103, 'england america', 'england america'), (104, 104, 104, 104, 'england america', 'england america'), (105, 105, 105, 105, 'england america', 'england america'), (106, 106, 106, 106, 'england america', 'england america'), (107, 107, 107, 107, 'england america', 'england america'), (108, 108, 108, 108, 'england america', 'england america'), (109, 109, 109, 109, 'england america', 'england america'), (110, 110, 110, 110, 'england america', 'england america'), (111, 111, 111, 111, 'england america', 'england america'), (112, 112, 112, 112, 'england america', 'england america'), (113, 113, 113, 113, 'england america', 'england america'), (114, 114, 114, 114, 'england america', 'england america'), (115, 115, 115, 115, 'england america', 'england america'), (116, 116, 116, 116, 'england america', 'england america'), (117, 117, 117, 117, 'england america', 'england america'), (118, 118, 118, 118, 'england america', 'england america'), (119, 119, 119, 119, 'england america', 'england america'), (120, 120, 120, 120, 'england america', 'england america'), (121, 121, 121, 121, 'england america', 'england america'), (122, 122, 122, 122, 'england america', 'england america'), (123, 123, 123, 123, 'england america', 'england america'), (124, 124, 124, 124, 'england america', 'england america'), (125, 125, 125, 125, 'england america', 'england america'), (126, 126, 126, 126, 'england america', 'england america'), (127, 127, 127, 127, 'england america', 'england america'), (128, 128, 128, 128, 'england america', 'england america'), (1, 1, 1, 1, 'germany england america', 'germany england america'), (2, 2, 2, 2, 'germany england america', 'germany england america'), (3, 3, 3, 3, 'germany england america', 'germany england america'), (4, 4, 4, 4, 'germany england america', 'germany england america'), (5, 5, 5, 5, 'germany england america', 'germany england america'), (6, 6, 6, 6, 'germany england america', 'germany england america'), (7, 7, 7, 7, 'germany england america', 'germany england america'), (8, 8, 8, 8, 'germany england america', 'germany england america'), (9, 9, 9, 9, 'germany england america', 'germany england america'), (10, 10, 10, 10, 'germany england america', 'germany england america'), (11, 11, 11, 11, 'germany england america', 'germany england america'), (12, 12, 12, 12, 'germany england america', 'germany england america'), (13, 13, 13, 13, 'germany england america', 'germany england america'), (14, 14, 14, 14, 'germany england america', 'germany england america'), (15, 15, 15, 15, 'germany england america', 'germany england america'), (16, 16, 16, 16, 'germany england america', 'germany england america'), (17, 17, 17, 17, 'germany england america', 'germany england america'), (18, 18, 18, 18, 'germany england america', 'germany england america'), (19, 19, 19, 19, 'germany england america', 'germany england america'), (20, 20, 20, 20, 'germany england america', 'germany england america'), (21, 21, 21, 21, 'germany england america', 'germany england america'), (22, 22, 22, 22, 'germany england america', 'germany england america'), (23, 23, 23, 23, 'germany england america', 'germany england america'), (24, 24, 24, 24, 'germany england america', 'germany england america'), (25, 25, 25, 25, 'germany england america', 'germany england america'), (26, 26, 26, 26, 'germany england america', 'germany england america'), (27, 27, 27, 27, 'germany england america', 'germany england america'), (28, 28, 28, 28, 'germany england america', 'germany england america'), (29, 29, 29, 29, 'germany england america', 'germany england america'), (30, 30, 30, 30, 'germany england america', 'germany england america'), (31, 31, 31, 31, 'germany england america', 'germany england america'), (32, 32, 32, 32, 'germany england america', 'germany england america'), (33, 33, 33, 33, 'germany england america', 'germany england america'), (34, 34, 34, 34, 'germany england america', 'germany england america'), (35, 35, 35, 35, 'germany england america', 'germany england america'), (36, 36, 36, 36, 'germany england america', 'germany england america'), (37, 37, 37, 37, 'germany england america', 'germany england america'), (38, 38, 38, 38, 'germany england america', 'germany england america'), (39, 39, 39, 39, 'germany england america', 'germany england america'), (40, 40, 40, 40, 'germany england america', 'germany england america'), (41, 41, 41, 41, 'germany england america', 'germany england america'), (42, 42, 42, 42, 'germany england america', 'germany england america'), (43, 43, 43, 43, 'germany england america', 'germany england america'), (44, 44, 44, 44, 'germany england america', 'germany england america'), (45, 45, 45, 45, 'germany england america', 'germany england america'), (46, 46, 46, 46, 'germany england america', 'germany england america'), (47, 47, 47, 47, 'germany england america', 'germany england america'), (48, 48, 48, 48, 'germany england america', 'germany england america'), (49, 49, 49, 49, 'germany england america', 'germany england america'), (50, 50, 50, 50, 'germany england america', 'germany england america'), (51, 51, 51, 51, 'germany england america', 'germany england america'), (52, 52, 52, 52, 'germany england america', 'germany england america'), (53, 53, 53, 53, 'germany england america', 'germany england america'), (54, 54, 54, 54, 'germany england america', 'germany england america'), (55, 55, 55, 55, 'germany england america', 'germany england america'), (56, 56, 56, 56, 'germany england america', 'germany england america'), (57, 57, 57, 57, 'germany england america', 'germany england america'), (58, 58, 58, 58, 'germany england america', 'germany england america'), (59, 59, 59, 59, 'germany england america', 'germany england america'), (60, 60, 60, 60, 'germany england america', 'germany england america'), (61, 61, 61, 61, 'germany england america', 'germany england america'), (62, 62, 62, 62, 'germany england america', 'germany england america'), (63, 63, 63, 63, 'germany england america', 'germany england america'), (64, 64, 64, 64, 'germany england america', 'germany england america'), (65, 65, 65, 65, 'germany england america', 'germany england america'), (66, 66, 66, 66, 'germany england america', 'germany england america'), (67, 67, 67, 67, 'germany england america', 'germany england america'), (68, 68, 68, 68, 'germany england america', 'germany england america'), (69, 69, 69, 69, 'germany england america', 'germany england america'), (70, 70, 70, 70, 'germany england america', 'germany england america'), (71, 71, 71, 71, 'germany england america', 'germany england america'), (72, 72, 72, 72, 'germany england america', 'germany england america'), (73, 73, 73, 73, 'germany england america', 'germany england america'), (74, 74, 74, 74, 'germany england america', 'germany england america'), (75, 75, 75, 75, 'germany england america', 'germany england america'), (76, 76, 76, 76, 'germany england america', 'germany england america'), (77, 77, 77, 77, 'germany england america', 'germany england america'), (78, 78, 78, 78, 'germany england america', 'germany england america'), (79, 79, 79, 79, 'germany england america', 'germany england america'), (80, 80, 80, 80, 'germany england america', 'germany england america'), (81, 81, 81, 81, 'germany england america', 'germany england america'), (82, 82, 82, 82, 'germany england america', 'germany england america'), (83, 83, 83, 83, 'germany england america', 'germany england america'), (84, 84, 84, 84, 'germany england america', 'germany england america'), (85, 85, 85, 85, 'germany england america', 'germany england america'), (86, 86, 86, 86, 'germany england america', 'germany england america'), (87, 87, 87, 87, 'germany england america', 'germany england america'), (88, 88, 88, 88, 'germany england america', 'germany england america'), (89, 89, 89, 89, 'germany england america', 'germany england america'), (90, 90, 90, 90, 'germany england america', 'germany england america'), (91, 91, 91, 91, 'germany england america', 'germany england america'), (92, 92, 92, 92, 'germany england america', 'germany england america'), (93, 93, 93, 93, 'germany england america', 'germany england america'), (94, 94, 94, 94, 'germany england america', 'germany england america'), (95, 95, 95, 95, 'germany england america', 'germany england america'), (96, 96, 96, 96, 'germany england america', 'germany england america'), (97, 97, 97, 97, 'germany england america', 'germany england america'), (98, 98, 98, 98, 'germany england america', 'germany england america'), (99, 99, 99, 99, 'germany england america', 'germany england america'), (100, 100, 100, 100, 'germany england america', 'germany england america'), (101, 101, 101, 101, 'germany england america', 'germany england america'), (102, 102, 102, 102, 'germany england america', 'germany england america'), (103, 103, 103, 103, 'germany england america', 'germany england america'), (104, 104, 104, 104, 'germany england america', 'germany england america'), (105, 105, 105, 105, 'germany england america', 'germany england america'), (106, 106, 106, 106, 'germany england america', 'germany england america'), (107, 107, 107, 107, 'germany england america', 'germany england america'), (108, 108, 108, 108, 'germany england america', 'germany england america'), (109, 109, 109, 109, 'germany england america', 'germany england america'), (110, 110, 110, 110, 'germany england america', 'germany england america'), (111, 111, 111, 111, 'germany england america', 'germany england america'), (112, 112, 112, 112, 'germany england america', 'germany england america'), (113, 113, 113, 113, 'germany england america', 'germany england america'), (114, 114, 114, 114, 'germany england america', 'germany england america'), (115, 115, 115, 115, 'germany england america', 'germany england america'), (116, 116, 116, 116, 'germany england america', 'germany england america'), (117, 117, 117, 117, 'germany england america', 'germany england america'), (118, 118, 118, 118, 'germany england america', 'germany england america'), (119, 119, 119, 119, 'germany england america', 'germany england america'), (120, 120, 120, 120, 'germany england america', 'germany england america'), (121, 121, 121, 121, 'germany england america', 'germany england america'), (122, 122, 122, 122, 'germany england america', 'germany england america'), (123, 123, 123, 123, 'germany england america', 'germany england america'), (124, 124, 124, 124, 'germany england america', 'germany england america'), (125, 125, 125, 125, 'germany england america', 'germany england america'), (126, 126, 126, 126, 'germany england america', 'germany england america'), (127, 127, 127, 127, 'germany england america', 'germany england america'), (128, 128, 128, 128, 'germany england america', 'germany england america'), (1, 1, 1, 1, 'germany england america', 'germany england america'), (2, 2, 2, 2, 'germany england america', 'germany england america'), (3, 3, 3, 3, 'germany england america', 'germany england america'), (4, 4, 4, 4, 'germany england america', 'germany england america'), (5, 5, 5, 5, 'germany england america', 'germany england america'), (6, 6, 6, 6, 'germany england america', 'germany england america'), (7, 7, 7, 7, 'germany england america', 'germany england america'), (8, 8, 8, 8, 'germany england america', 'germany england america'), (9, 9, 9, 9, 'germany england america', 'germany england america'), (10, 10, 10, 10, 'germany england america', 'germany england america'), (11, 11, 11, 11, 'germany england america', 'germany england america'), (12, 12, 12, 12, 'germany england america', 'germany england america'), (13, 13, 13, 13, 'germany england america', 'germany england america'), (14, 14, 14, 14, 'germany england america', 'germany england america'), (15, 15, 15, 15, 'germany england america', 'germany england america'), (16, 16, 16, 16, 'germany england america', 'germany england america'), (17, 17, 17, 17, 'germany england america', 'germany england america'), (18, 18, 18, 18, 'germany england america', 'germany england america'), (19, 19, 19, 19, 'germany england america', 'germany england america'), (20, 20, 20, 20, 'germany england america', 'germany england america'), (21, 21, 21, 21, 'germany england america', 'germany england america'), (22, 22, 22, 22, 'germany england america', 'germany england america'), (23, 23, 23, 23, 'germany england america', 'germany england america'), (24, 24, 24, 24, 'germany england america', 'germany england america'), (25, 25, 25, 25, 'germany england america', 'germany england america'), (26, 26, 26, 26, 'germany england america', 'germany england america'), (27, 27, 27, 27, 'germany england america', 'germany england america'), (28, 28, 28, 28, 'germany england america', 'germany england america'), (29, 29, 29, 29, 'germany england america', 'germany england america'), (30, 30, 30, 30, 'germany england america', 'germany england america'), (31, 31, 31, 31, 'germany england america', 'germany england america'), (32, 32, 32, 32, 'germany england america', 'germany england america'), (33, 33, 33, 33, 'germany england america', 'germany england america'), (34, 34, 34, 34, 'germany england america', 'germany england america'), (35, 35, 35, 35, 'germany england america', 'germany england america'), (36, 36, 36, 36, 'germany england america', 'germany england america'), (37, 37, 37, 37, 'germany england america', 'germany england america'), (38, 38, 38, 38, 'germany england america', 'germany england america'), (39, 39, 39, 39, 'germany england america', 'germany england america'), (40, 40, 40, 40, 'germany england america', 'germany england america'), (41, 41, 41, 41, 'germany england america', 'germany england america'), (42, 42, 42, 42, 'germany england america', 'germany england america'), (43, 43, 43, 43, 'germany england america', 'germany england america'), (44, 44, 44, 44, 'germany england america', 'germany england america'), (45, 45, 45, 45, 'germany england america', 'germany england america'), (46, 46, 46, 46, 'germany england america', 'germany england america'), (47, 47, 47, 47, 'germany england america', 'germany england america'), (48, 48, 48, 48, 'germany england america', 'germany england america'), (49, 49, 49, 49, 'germany england america', 'germany england america'), (50, 50, 50, 50, 'germany england america', 'germany england america'), (51, 51, 51, 51, 'germany england america', 'germany england america'), (52, 52, 52, 52, 'germany england america', 'germany england america'), (53, 53, 53, 53, 'germany england america', 'germany england america'), (54, 54, 54, 54, 'germany england america', 'germany england america'), (55, 55, 55, 55, 'germany england america', 'germany england america'), (56, 56, 56, 56, 'germany england america', 'germany england america'), (57, 57, 57, 57, 'germany england america', 'germany england america'), (58, 58, 58, 58, 'germany england america', 'germany england america'), (59, 59, 59, 59, 'germany england america', 'germany england america'), (60, 60, 60, 60, 'germany england america', 'germany england america'), (61, 61, 61, 61, 'germany england america', 'germany england america'), (62, 62, 62, 62, 'germany england america', 'germany england america'), (63, 63, 63, 63, 'germany england america', 'germany england america'), (64, 64, 64, 64, 'germany england america', 'germany england america'), (65, 65, 65, 65, 'germany england america', 'germany england america'), (66, 66, 66, 66, 'germany england america', 'germany england america'), (67, 67, 67, 67, 'germany england america', 'germany england america'), (68, 68, 68, 68, 'germany england america', 'germany england america'), (69, 69, 69, 69, 'germany england america', 'germany england america'), (70, 70, 70, 70, 'germany england america', 'germany england america'), (71, 71, 71, 71, 'germany england america', 'germany england america'), (72, 72, 72, 72, 'germany england america', 'germany england america'), (73, 73, 73, 73, 'germany england america', 'germany england america'), (74, 74, 74, 74, 'germany england america', 'germany england america'), (75, 75, 75, 75, 'germany england america', 'germany england america'), (76, 76, 76, 76, 'germany england america', 'germany england america'), (77, 77, 77, 77, 'germany england america', 'germany england america'), (78, 78, 78, 78, 'germany england america', 'germany england america'), (79, 79, 79, 79, 'germany england america', 'germany england america'), (80, 80, 80, 80, 'germany england america', 'germany england america'), (81, 81, 81, 81, 'germany england america', 'germany england america'), (82, 82, 82, 82, 'germany england america', 'germany england america'), (83, 83, 83, 83, 'germany england america', 'germany england america'), (84, 84, 84, 84, 'germany england america', 'germany england america'), (85, 85, 85, 85, 'germany england america', 'germany england america'), (86, 86, 86, 86, 'germany england america', 'germany england america'), (87, 87, 87, 87, 'germany england america', 'germany england america'), (88, 88, 88, 88, 'germany england america', 'germany england america'), (89, 89, 89, 89, 'germany england america', 'germany england america'), (90, 90, 90, 90, 'germany england america', 'germany england america'), (91, 91, 91, 91, 'germany england america', 'germany england america'), (92, 92, 92, 92, 'germany england america', 'germany england america'), (93, 93, 93, 93, 'germany england america', 'germany england america'), (94, 94, 94, 94, 'germany england america', 'germany england america'), (95, 95, 95, 95, 'germany england america', 'germany england america'), (96, 96, 96, 96, 'germany england america', 'germany england america'), (97, 97, 97, 97, 'germany england america', 'germany england america'), (98, 98, 98, 98, 'germany england america', 'germany england america'), (99, 99, 99, 99, 'germany england america', 'germany england america'), (100, 100, 100, 100, 'germany england america', 'germany england america'), (101, 101, 101, 101, 'germany england america', 'germany england america'), (102, 102, 102, 102, 'germany england america', 'germany england america'), (103, 103, 103, 103, 'germany england america', 'germany england america'), (104, 104, 104, 104, 'germany england america', 'germany england america'), (105, 105, 105, 105, 'germany england america', 'germany england america'), (106, 106, 106, 106, 'germany england america', 'germany england america'), (107, 107, 107, 107, 'germany england america', 'germany england america'), (108, 108, 108, 108, 'germany england america', 'germany england america'), (109, 109, 109, 109, 'germany england america', 'germany england america'), (110, 110, 110, 110, 'germany england america', 'germany england america'), (111, 111, 111, 111, 'germany england america', 'germany england america'), (112, 112, 112, 112, 'germany england america', 'germany england america'), (113, 113, 113, 113, 'germany england america', 'germany england america'), (114, 114, 114, 114, 'germany england america', 'germany england america'), (115, 115, 115, 115, 'germany england america', 'germany england america'), (116, 116, 116, 116, 'germany england america', 'germany england america'), (117, 117, 117, 117, 'germany england america', 'germany england america'), (118, 118, 118, 118, 'germany england america', 'germany england america'), (119, 119, 119, 119, 'germany england america', 'germany england america'), (120, 120, 120, 120, 'germany england america', 'germany england america'), (121, 121, 121, 121, 'germany england america', 'germany england america'), (122, 122, 122, 122, 'germany england america', 'germany england america'), (123, 123, 123, 123, 'germany england america', 'germany england america'), (124, 124, 124, 124, 'germany england america', 'germany england america'), (125, 125, 125, 125, 'germany england america', 'germany england america'), (126, 126, 126, 126, 'germany england america', 'germany england america'), (127, 127, 127, 127, 'germany england america', 'germany england america'), (128, 128, 128, 128, 'germany england america', 'germany england america'), (1, 1, 1, 1, 'germany england america', 'germany england america'), (2, 2, 2, 2, 'germany england america', 'germany england america'), (3, 3, 3, 3, 'germany england america', 'germany england america'), (4, 4, 4, 4, 'germany england america', 'germany england america'), (5, 5, 5, 5, 'germany england america', 'germany england america'), (6, 6, 6, 6, 'germany england america', 'germany england america'), (7, 7, 7, 7, 'germany england america', 'germany england america'), (8, 8, 8, 8, 'germany england america', 'germany england america'), (9, 9, 9, 9, 'germany england america', 'germany england america'), (10, 10, 10, 10, 'germany england america', 'germany england america'), (11, 11, 11, 11, 'germany england america', 'germany england america'), (12, 12, 12, 12, 'germany england america', 'germany england america'), (13, 13, 13, 13, 'germany england america', 'germany england america'), (14, 14, 14, 14, 'germany england america', 'germany england america'), (15, 15, 15, 15, 'germany england america', 'germany england america'), (16, 16, 16, 16, 'germany england america', 'germany england america'), (17, 17, 17, 17, 'germany england america', 'germany england america'), (18, 18, 18, 18, 'germany england america', 'germany england america'), (19, 19, 19, 19, 'germany england america', 'germany england america'), (20, 20, 20, 20, 'germany england america', 'germany england america'), (21, 21, 21, 21, 'germany england america', 'germany england america'), (22, 22, 22, 22, 'germany england america', 'germany england america'), (23, 23, 23, 23, 'germany england america', 'germany england america'), (24, 24, 24, 24, 'germany england america', 'germany england america'), (25, 25, 25, 25, 'germany england america', 'germany england america'), (26, 26, 26, 26, 'germany england america', 'germany england america'), (27, 27, 27, 27, 'germany england america', 'germany england america'), (28, 28, 28, 28, 'germany england america', 'germany england america'), (29, 29, 29, 29, 'germany england america', 'germany england america'), (30, 30, 30, 30, 'germany england america', 'germany england america'), (31, 31, 31, 31, 'germany england america', 'germany england america'), (32, 32, 32, 32, 'germany england america', 'germany england america'), (33, 33, 33, 33, 'germany england america', 'germany england america'), (34, 34, 34, 34, 'germany england america', 'germany england america'), (35, 35, 35, 35, 'germany england america', 'germany england america'), (36, 36, 36, 36, 'germany england america', 'germany england america'), (37, 37, 37, 37, 'germany england america', 'germany england america'), (38, 38, 38, 38, 'germany england america', 'germany england america'), (39, 39, 39, 39, 'germany england america', 'germany england america'), (40, 40, 40, 40, 'germany england america', 'germany england america'), (41, 41, 41, 41, 'germany england america', 'germany england america'), (42, 42, 42, 42, 'germany england america', 'germany england america'), (43, 43, 43, 43, 'germany england america', 'germany england america'), (44, 44, 44, 44, 'germany england america', 'germany england america'), (45, 45, 45, 45, 'germany england america', 'germany england america'), (46, 46, 46, 46, 'germany england america', 'germany england america'), (47, 47, 47, 47, 'germany england america', 'germany england america'), (48, 48, 48, 48, 'germany england america', 'germany england america'), (49, 49, 49, 49, 'germany england america', 'germany england america'), (50, 50, 50, 50, 'germany england america', 'germany england america'), (51, 51, 51, 51, 'germany england america', 'germany england america'), (52, 52, 52, 52, 'germany england america', 'germany england america'), (53, 53, 53, 53, 'germany england america', 'germany england america'), (54, 54, 54, 54, 'germany england america', 'germany england america'), (55, 55, 55, 55, 'germany england america', 'germany england america'), (56, 56, 56, 56, 'germany england america', 'germany england america'), (57, 57, 57, 57, 'germany england america', 'germany england america'), (58, 58, 58, 58, 'germany england america', 'germany england america'), (59, 59, 59, 59, 'germany england america', 'germany england america'), (60, 60, 60, 60, 'germany england america', 'germany england america'), (61, 61, 61, 61, 'germany england america', 'germany england america'), (62, 62, 62, 62, 'germany england america', 'germany england america'), (63, 63, 63, 63, 'germany england america', 'germany england america'), (64, 64, 64, 64, 'germany england america', 'germany england america'), (65, 65, 65, 65, 'germany england america', 'germany england america'), (66, 66, 66, 66, 'germany england america', 'germany england america'), (67, 67, 67, 67, 'germany england america', 'germany england america'), (68, 68, 68, 68, 'germany england america', 'germany england america'), (69, 69, 69, 69, 'germany england america', 'germany england america'), (70, 70, 70, 70, 'germany england america', 'germany england america'), (71, 71, 71, 71, 'germany england america', 'germany england america'), (72, 72, 72, 72, 'germany england america', 'germany england america'), (73, 73, 73, 73, 'germany england america', 'germany england america'), (74, 74, 74, 74, 'germany england america', 'germany england america'), (75, 75, 75, 75, 'germany england america', 'germany england america'), (76, 76, 76, 76, 'germany england america', 'germany england america'), (77, 77, 77, 77, 'germany england america', 'germany england america'), (78, 78, 78, 78, 'germany england america', 'germany england america'), (79, 79, 79, 79, 'germany england america', 'germany england america'), (80, 80, 80, 80, 'germany england america', 'germany england america'), (81, 81, 81, 81, 'germany england america', 'germany england america'), (82, 82, 82, 82, 'germany england america', 'germany england america'), (83, 83, 83, 83, 'germany england america', 'germany england america'), (84, 84, 84, 84, 'germany england america', 'germany england america'), (85, 85, 85, 85, 'germany england america', 'germany england america'), (86, 86, 86, 86, 'germany england america', 'germany england america'), (87, 87, 87, 87, 'germany england america', 'germany england america'), (88, 88, 88, 88, 'germany england america', 'germany england america'), (89, 89, 89, 89, 'germany england america', 'germany england america'), (90, 90, 90, 90, 'germany england america', 'germany england america'), (91, 91, 91, 91, 'germany england america', 'germany england america'), (92, 92, 92, 92, 'germany england america', 'germany england america'), (93, 93, 93, 93, 'germany england america', 'germany england america'), (94, 94, 94, 94, 'germany england america', 'germany england america'), (95, 95, 95, 95, 'germany england america', 'germany england america'), (96, 96, 96, 96, 'germany england america', 'germany england america'), (97, 97, 97, 97, 'germany england america', 'germany england america'), (98, 98, 98, 98, 'germany england america', 'germany england america'), (99, 99, 99, 99, 'germany england america', 'germany england america'), (100, 100, 100, 100, 'germany england america', 'germany england america'), (101, 101, 101, 101, 'germany england america', 'germany england america'), (102, 102, 102, 102, 'germany england america', 'germany england america'), (103, 103, 103, 103, 'germany england america', 'germany england america'), (104, 104, 104, 104, 'germany england america', 'germany england america'), (105, 105, 105, 105, 'germany england america', 'germany england america'), (106, 106, 106, 106, 'germany england america', 'germany england america'), (107, 107, 107, 107, 'germany england america', 'germany england america'), (108, 108, 108, 108, 'germany england america', 'germany england america'), (109, 109, 109, 109, 'germany england america', 'germany england america'), (110, 110, 110, 110, 'germany england america', 'germany england america'), (111, 111, 111, 111, 'germany england america', 'germany england america'), (112, 112, 112, 112, 'germany england america', 'germany england america'), (113, 113, 113, 113, 'germany england america', 'germany england america'), (114, 114, 114, 114, 'germany england america', 'germany england america'), (115, 115, 115, 115, 'germany england america', 'germany england america'), (116, 116, 116, 116, 'germany england america', 'germany england america'), (117, 117, 117, 117, 'germany england america', 'germany england america'), (118, 118, 118, 118, 'germany england america', 'germany england america'), (119, 119, 119, 119, 'germany england america', 'germany england america'), (120, 120, 120, 120, 'germany england america', 'germany england america'), (121, 121, 121, 121, 'germany england america', 'germany england america'), (122, 122, 122, 122, 'germany england america', 'germany england america'), (123, 123, 123, 123, 'germany england america', 'germany england america'), (124, 124, 124, 124, 'germany england america', 'germany england america'), (125, 125, 125, 125, 'germany england america', 'germany england america'), (126, 126, 126, 126, 'germany england america', 'germany england america'), (127, 127, 127, 127, 'germany england america', 'germany england america'), (128, 128, 128, 128, 'germany england america', 'germany england america'), (1, 1, 1, 1, 'germany england america', 'germany england america'), (2, 2, 2, 2, 'germany england america', 'germany england america'), (3, 3, 3, 3, 'germany england america', 'germany england america'), (4, 4, 4, 4, 'germany england america', 'germany england america'), (5, 5, 5, 5, 'germany england america', 'germany england america'), (6, 6, 6, 6, 'germany england america', 'germany england america'), (7, 7, 7, 7, 'germany england america', 'germany england america'), (8, 8, 8, 8, 'germany england america', 'germany england america'), (9, 9, 9, 9, 'germany england america', 'germany england america'), (10, 10, 10, 10, 'germany england america', 'germany england america'), (11, 11, 11, 11, 'germany england america', 'germany england america'), (12, 12, 12, 12, 'germany england america', 'germany england america'), (13, 13, 13, 13, 'germany england america', 'germany england america'), (14, 14, 14, 14, 'germany england america', 'germany england america'), (15, 15, 15, 15, 'germany england america', 'germany england america'), (16, 16, 16, 16, 'germany england america', 'germany england america'), (17, 17, 17, 17, 'germany england america', 'germany england america'), (18, 18, 18, 18, 'germany england america', 'germany england america'), (19, 19, 19, 19, 'germany england america', 'germany england america'), (20, 20, 20, 20, 'germany england america', 'germany england america'), (21, 21, 21, 21, 'germany england america', 'germany england america'), (22, 22, 22, 22, 'germany england america', 'germany england america'), (23, 23, 23, 23, 'germany england america', 'germany england america'), (24, 24, 24, 24, 'germany england america', 'germany england america'), (25, 25, 25, 25, 'germany england america', 'germany england america'), (26, 26, 26, 26, 'germany england america', 'germany england america'), (27, 27, 27, 27, 'germany england america', 'germany england america'), (28, 28, 28, 28, 'germany england america', 'germany england america'), (29, 29, 29, 29, 'germany england america', 'germany england america'), (30, 30, 30, 30, 'germany england america', 'germany england america'), (31, 31, 31, 31, 'germany england america', 'germany england america'), (32, 32, 32, 32, 'germany england america', 'germany england america'), (33, 33, 33, 33, 'germany england america', 'germany england america'), (34, 34, 34, 34, 'germany england america', 'germany england america'), (35, 35, 35, 35, 'germany england america', 'germany england america'), (36, 36, 36, 36, 'germany england america', 'germany england america'), (37, 37, 37, 37, 'germany england america', 'germany england america'), (38, 38, 38, 38, 'germany england america', 'germany england america'), (39, 39, 39, 39, 'germany england america', 'germany england america'), (40, 40, 40, 40, 'germany england america', 'germany england america'), (41, 41, 41, 41, 'germany england america', 'germany england america'), (42, 42, 42, 42, 'germany england america', 'germany england america'), (43, 43, 43, 43, 'germany england america', 'germany england america'), (44, 44, 44, 44, 'germany england america', 'germany england america'), (45, 45, 45, 45, 'germany england america', 'germany england america'), (46, 46, 46, 46, 'germany england america', 'germany england america'), (47, 47, 47, 47, 'germany england america', 'germany england america'), (48, 48, 48, 48, 'germany england america', 'germany england america'), (49, 49, 49, 49, 'germany england america', 'germany england america'), (50, 50, 50, 50, 'germany england america', 'germany england america'), (51, 51, 51, 51, 'germany england america', 'germany england america'), (52, 52, 52, 52, 'germany england america', 'germany england america'), (53, 53, 53, 53, 'germany england america', 'germany england america'), (54, 54, 54, 54, 'germany england america', 'germany england america'), (55, 55, 55, 55, 'germany england america', 'germany england america'), (56, 56, 56, 56, 'germany england america', 'germany england america'), (57, 57, 57, 57, 'germany england america', 'germany england america'), (58, 58, 58, 58, 'germany england america', 'germany england america'), (59, 59, 59, 59, 'germany england america', 'germany england america'), (60, 60, 60, 60, 'germany england america', 'germany england america'), (61, 61, 61, 61, 'germany england america', 'germany england america'), (62, 62, 62, 62, 'germany england america', 'germany england america'), (63, 63, 63, 63, 'germany england america', 'germany england america'), (64, 64, 64, 64, 'germany england america', 'germany england america'), (65, 65, 65, 65, 'germany england america', 'germany england america'), (66, 66, 66, 66, 'germany england america', 'germany england america'), (67, 67, 67, 67, 'germany england america', 'germany england america'), (68, 68, 68, 68, 'germany england america', 'germany england america'), (69, 69, 69, 69, 'germany england america', 'germany england america'), (70, 70, 70, 70, 'germany england america', 'germany england america'), (71, 71, 71, 71, 'germany england america', 'germany england america'), (72, 72, 72, 72, 'germany england america', 'germany england america'), (73, 73, 73, 73, 'germany england america', 'germany england america'), (74, 74, 74, 74, 'germany england america', 'germany england america'), (75, 75, 75, 75, 'germany england america', 'germany england america'), (76, 76, 76, 76, 'germany england america', 'germany england america'), (77, 77, 77, 77, 'germany england america', 'germany england america'), (78, 78, 78, 78, 'germany england america', 'germany england america'), (79, 79, 79, 79, 'germany england america', 'germany england america'), (80, 80, 80, 80, 'germany england america', 'germany england america'), (81, 81, 81, 81, 'germany england america', 'germany england america'), (82, 82, 82, 82, 'germany england america', 'germany england america'), (83, 83, 83, 83, 'germany england america', 'germany england america'), (84, 84, 84, 84, 'germany england america', 'germany england america'), (85, 85, 85, 85, 'germany england america', 'germany england america'), (86, 86, 86, 86, 'germany england america', 'germany england america'), (87, 87, 87, 87, 'germany england america', 'germany england america'), (88, 88, 88, 88, 'germany england america', 'germany england america'), (89, 89, 89, 89, 'germany england america', 'germany england america'), (90, 90, 90, 90, 'germany england america', 'germany england america'), (91, 91, 91, 91, 'germany england america', 'germany england america'), (92, 92, 92, 92, 'germany england america', 'germany england america'), (93, 93, 93, 93, 'germany england america', 'germany england america'), (94, 94, 94, 94, 'germany england america', 'germany england america'), (95, 95, 95, 95, 'germany england america', 'germany england america'), (96, 96, 96, 96, 'germany england america', 'germany england america'), (97, 97, 97, 97, 'germany england america', 'germany england america'), (98, 98, 98, 98, 'germany england america', 'germany england america'), (99, 99, 99, 99, 'germany england america', 'germany england america'), (100, 100, 100, 100, 'germany england america', 'germany england america'), (101, 101, 101, 101, 'germany england america', 'germany england america'), (102, 102, 102, 102, 'germany england america', 'germany england america'), (103, 103, 103, 103, 'germany england america', 'germany england america'), (104, 104, 104, 104, 'germany england america', 'germany england america'), (105, 105, 105, 105, 'germany england america', 'germany england america'), (106, 106, 106, 106, 'germany england america', 'germany england america'), (107, 107, 107, 107, 'germany england america', 'germany england america'), (108, 108, 108, 108, 'germany england america', 'germany england america'), (109, 109, 109, 109, 'germany england america', 'germany england america'), (110, 110, 110, 110, 'germany england america', 'germany england america'), (111, 111, 111, 111, 'germany england america', 'germany england america'), (112, 112, 112, 112, 'germany england america', 'germany england america'), (113, 113, 113, 113, 'germany england america', 'germany england america'), (114, 114, 114, 114, 'germany england america', 'germany england america'), (115, 115, 115, 115, 'germany england america', 'germany england america'), (116, 116, 116, 116, 'germany england america', 'germany england america'), (117, 117, 117, 117, 'germany england america', 'germany england america'), (118, 118, 118, 118, 'germany england america', 'germany england america'), (119, 119, 119, 119, 'germany england america', 'germany england america'), (120, 120, 120, 120, 'germany england america', 'germany england america'), (121, 121, 121, 121, 'germany england america', 'germany england america'), (122, 122, 122, 122, 'germany england america', 'germany england america'), (123, 123, 123, 123, 'germany england america', 'germany england america'), (124, 124, 124, 124, 'germany england america', 'germany england america'), (125, 125, 125, 125, 'germany england america', 'germany england america'), (126, 126, 126, 126, 'germany england america', 'germany england america'), (127, 127, 127, 127, 'germany england america', 'germany england america'), (128, 128, 128, 128, 'germany england america', 'germany england america'), (1, 1, 1, 1, 'norway sweden', 'norway sweden'), (2, 2, 2, 2, 'norway sweden', 'norway sweden'), (3, 3, 3, 3, 'norway sweden', 'norway sweden'), (4, 4, 4, 4, 'norway sweden', 'norway sweden'), (5, 5, 5, 5, 'norway sweden', 'norway sweden'))", "rowcount": 1029, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_53_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 4: The MySQL `REPEAT` function is used to repeat a string or ch...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_53_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's the translated SQL statement from MySQL to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_53_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"[\"\nLINE 4: [Translated SQL]: INSERT INTO t (gid, a) VALUES ((1, repeat(...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "postgresql_53_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_54_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_54_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,), (12,), (50000,), (50000,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_55_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('AAAA', 105.0, datetime.date(2003, 3, 1), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_55_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a-4',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL query you provided is functionally equivalent to t...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_55_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a-4.5',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The SQL statement you provided is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_55_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a-5',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The given SQL statement is a valid MySQL query, but it conta...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_55_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a-1',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given SQL statement is a simple query that concatenates ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_55_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a0',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The given MySQL statement is:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_55_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a0.0',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The MySQL statement you provided is a bit tricky, as it uses...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_55_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a0.0000',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given MySQL query is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_55_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('ab',), ('ab',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('ab',), ('ab',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_55_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234562',), ('x',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_55_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('', 'First'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'First'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_56_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The SQL statement you provided is a simple INSERT query that...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_56_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"NULL\"\nLINE 2: ...t into t1 values (date_add('2000-01-04', INTERVAL NULL DAY))...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_56_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement in PostgreSQL:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 7, "FN": 0}
{"sql_id": "postgresql_56_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The SQL statement you provided is a MySQL query that inserts...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_56_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False, datetime.time(0, 0)))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"ts\"\nLINE 1: ...) = CURRENT_DATE + INTERVAL '1' DAY AS is_tomorrow, TIME(ts)\n                                                                    ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_57_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "postgresql_57_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 2, 1, None, None, None), (1, 3, 1, None, None, None), (2, 1, 2, None, None, None), (2, 3, 2, None, None, None), (3, 1, 3, None, None, None), (3, 2, 3, None, None, None))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \")\"\nLINE 2: ... * from t3 left join(t2 outr2 join t2 outr join t1)on (outr....\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_57_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement in PostgreSQL syntax:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 0}
{"sql_id": "postgresql_58_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('abc',), ('abcd',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_58_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('abc',), ('abcd',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The translated SQL statement for PostgreSQL is:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_59_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((10.0, 10.000000000000002, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 0}
{"sql_id": "postgresql_59_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('3.0000000000000000'), Decimal('3.9068905956085185')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's the translated SQL statement from MySQL to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_59_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((10.0, 16.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translation of the MySQL query to Postg...\n        ^\n", "exec_able": false}}, "TP": 2, "FP": 7, "FN": 0}
{"sql_id": "postgresql_59_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here's the translation of the SQL statement from MySQL to Po...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_59_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The given SQL statement is a simple query that calculates th...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_59_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_59_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('http://www.foo.com/',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_59_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-2, Decimal('2'), -2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translation of the given SQL statement from MySQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_59_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, Decimal('5'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_59_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-32.0, Decimal('2135987035920910081237100813796390160618078741685240921940550748740445664954564698653747478265824'), -32.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given SQL statement is a query that uses the `POW` funct...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_60_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('-4939092'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('-4939092'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "postgresql_60_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given SQL statement is a division operation, and it is f...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_60_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"To\"\nLINE 4: To translate the MySQL statement to PostgreSQL, we need to r...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_60_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translation of the given MySQL statement to Post...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_60_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((9223372036854774784,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The provided SQL statement is a simple query that uses the `...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_60_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-9223372036854775808,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_60_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of WHERE must be type boolean, not type bigint\nLINE 2: SELECT * FROM t0 WHERE COALESCE(t0.c0, -1)::bigint;\n                               ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_60_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"unsigned\" does not exist\nLINE 1: SELECT * FROM t0 WHERE CAST(COALESCE(t0.c0,-1) AS UNSIGNED);\n                                                          ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_60_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"unsigned\" does not exist\nLINE 1: SELECT CAST(COALESCE(t0.c0, -1) AS UNSIGNED) IS TRUE FROM t0...\n                                           ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_60_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_61_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('0cc175b9c0f1b6a831c399e269772661', '3063633137356239633066316236613833316333393965323639373732363631'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The translation of the MySQL statement to PostgreSQL is as f...\n        ^\n", "exec_able": false}}, "TP": 2, "FP": 6, "FN": 0}
{"sql_id": "postgresql_61_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The translated SQL statement in PostgreSQL is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_61_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('5d41402abc4b2a76b9719d911017c592',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translation of the MySQL SQL statement ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_61_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The following is the translation of the given MySQL statemen...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 9, "FN": 0}
{"sql_id": "postgresql_61_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((16,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here's the translated SQL statement from MySQL to PostgreSQL...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 2}
{"sql_id": "postgresql_61_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The SQL statement you provided is an INSERT statement that i...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_61_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_61_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 8, "FN": 0}
{"sql_id": "postgresql_62_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('255.255.1.255', '0.0.1.255'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL function `INET_NTOA` converts an IPv4 address from...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_62_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function mid(bigint, integer, integer) does not exist\nLINE 2: SELECT a FROM t1 WHERE a::text LIKE '%' || mid(2004010612340...\n                                                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_62_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: timestamp without time zone + integer\nLINE 1: SELECT a FROM t1 WHERE SUBSTRING(a+0,6,3) = (SUBSTRING('2004...\n                                          ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_62_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1,), (-2,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement is as follows:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_62_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,), (1,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 3: The above SQL statement is a union of two queries. The first...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_62_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,), (2,), (1,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here's the translation of the MySQL query to PostgreSQL:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_63_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 0, 3, 1, 3, 3, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The following SQL statement can be translated from MySQL to ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_63_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, 1, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_63_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1, 7, 3), (2, None, None, None), (3, 3, 7, 3))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, None, None, 0), (3, 3, 7, 0), (1, 1, 7, 0))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_64_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('000',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function date_format(unknown, unknown) does not exist\nLINE 2: SELECT date_format('1997-12-31 23:59:59.000002', '%f') AS \"d...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_64_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_64_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(3, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translation of the MySQL statement \"select makedate(03,1...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 9, "FN": 1}
{"sql_id": "postgresql_64_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1997, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL `MAKEDATE` function is used to create a date value...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_64_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1996, 12, 31, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL function `MAKEDATE` takes two arguments: the year ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_64_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(9999, 12, 31, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The equivalent PostgreSQL query for the MySQL query `select ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_64_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 10000 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given MySQL statement translates to PostgreSQL as follow...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_64_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(100, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The MySQL `MAKEDATE` function takes two arguments: an intege...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_64_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1997, 12, 30, 22, 58, 57, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement in PostgreSQL is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_64_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1, seconds=82738),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"that\"\nLINE 4: Note that the above SQL statement is a translation of the or...\n             ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_64_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 0, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function timestampdiff(unknown, unknown, unknown) does not exist\nLINE 1: SELECT TIMESTAMPDIFF('second', '01:00:00.999999', '02:00:00....\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_64_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(1, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_64_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 59, 59, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here's the equivalent translation of the given MySQL query i...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_64_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(22, 58, 57, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The translation of the MySQL query to PostgreSQL is as follo...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 7, "FN": 1}
{"sql_id": "postgresql_64_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The translated SQL statement from MySQL to PostgreSQL is:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_64_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 59, 59, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translated SQL statement in PostgreSQL is as follows:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_64_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 59, 59, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_65_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The MySQL statement `select maketime(10, 11, 12)` can be tra...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_65_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(20, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The MySQL `MAKETIME` function returns a time value with the ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_65_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 1, 1, 1, 999999, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_65_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 10, 1, 1, 1, 1, 1, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The MySQL statement `select timestamp(\"2001-10-01\", \"01:01:0...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_65_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 20, 1, 1, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 20, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_65_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The SQL statement you provided is a simple select statement ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_65_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('31'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1997, 12, 31, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_65_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:59:59.000001',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The translation of the SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_65_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0), None, None, datetime.time(0, 0)), (datetime.time(1, 1, 1, 999999), datetime.time(23, 58, 58), datetime.time(0, 1, 2), datetime.time(23, 58, 59, 999999)), (datetime.time(22, 58, 58, 1), datetime.time(0, 1, 2), datetime.time(23, 58, 58), datetime.time(22, 59)), (None, None, None, None))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"second\" does not exist\nLINE 1: SELECT TIMESTAMPDIFF(SECOND, t1, t4) AS ttt, \n                             ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_65_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2003, 1, 2, 10, 11, 12, 1200, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"2003-01-02 10:11:12.0012\" does not exist\nLINE 2: select to_timestamp(\"2003-01-02 10:11:12.0012\", \"%Y-%m-%d %H...\n                            ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_65_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0), datetime.time(0, 0)))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 3: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 2}
{"sql_id": "postgresql_65_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: numeric > interval\nLINE 2: ...-29 20:10:10' - TIMESTAMP '2008-09-30 20:10:10')) > INTERVAL...\n                                                             ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 1}
{"sql_id": "postgresql_65_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 2}
{"sql_id": "postgresql_66_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:42:12',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type time without time zone to numeric\nLINE 2: SELECT CAST(time '23:42:12' AS DECIMAL)\n               ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_66_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'23:59:59'\"\nLINE 1: SELECT '23:59:59'::time = TIME('23:59:59');\n                                       ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "postgresql_66_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function sec_to_time(integer) does not exist\nLINE 1: SELECT time '23:59:59' = sec_to_time(86399);\n                                 ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_66_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"sec_to_time\"\nLINE 1: SELECT time(sec_to_time(86399))= TIME '23:59:59';\n                    ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 2}
{"sql_id": "postgresql_66_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function maketime(integer, integer, integer) does not exist\nLINE 2: SELECT '01:00:01'::TIME = maketime(1, 0, 1);\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_66_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "postgresql_66_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function maketime(integer, integer, integer) does not exist\nLINE 2: SELECT maketime(1, 0, 1) = CAST('01:00:01' AS TIME);\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_67_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translation of the given SQL statement from MySQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 2}
{"sql_id": "postgresql_67_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 0, 0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given SQL statement is a call to the `FIELD` function, w...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_67_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 2, 2, 2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The given MySQL query contains four calls to the `FIELD` fun...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_67_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'one'), (2, 'one'), (4, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_67_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'one'), (2, 'one'), (4, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translated SQL statement in PostgreSQL:\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 7, "FN": 1}
{"sql_id": "postgresql_68_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 4: The above SQL statement can be translated to the following e...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_68_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 1: Here is the translated SQL statement from MySQL to PostgreSQ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_68_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"To\"\nLINE 4: To translate the MySQL statement to PostgreSQL, we will need...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_68_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('</a>',), ('</a>..........................',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('</a>',), ('</a>..........................',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 3}
{"sql_id": "postgresql_69_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, True, True, False, False, True, -1, 1, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Note\"\nLINE 4: Note: The above SQL statement is functionally equivalent to ...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_69_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('abc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('abc',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The MySQL `MOD` function is used to calculate the remainder ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_69_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The given SQL statement is:\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_69_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('0.0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The given MySQL query is a simple SELECT statement that uses...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_69_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('0.0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Here\"\nLINE 2: Here is the translation of the MySQL statement into PostgreS...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_69_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_69_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_69_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_69_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The provided SQL statement is a simple `SELECT` query that u...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_69_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"[\"\nLINE 2: [Translation Output]: CREATE TABLE t1 AS SELECT GREATEST(-1,...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_70_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('5',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The translation of the MySQL statement to PostgreSQL is as f...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_70_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_70_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('11',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"```\"\nLINE 1: ```sql\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_70_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 2: The equivalent PostgreSQL query for the given MySQL query is...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_70_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_70_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('5.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_70_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_70_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 1: The following is the translated SQL statement from MySQL to ...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 9, "FN": 0}
{"sql_id": "postgresql_70_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('18446744073709551615'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('18446744073709551615'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_70_20", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_70_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"The\"\nLINE 4: The above SQL statement uses the LEAST function to compare v...\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_70_28", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('2'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}

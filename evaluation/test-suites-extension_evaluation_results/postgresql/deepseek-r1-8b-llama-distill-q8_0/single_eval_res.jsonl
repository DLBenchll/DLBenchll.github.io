{"sql_id": "postgresql_1_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 10))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 10))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_1_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 10), (2, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"`\"\nLINE 1: SELECT * FROM `t0` WHERE (a, b) IN ((1, 10), (2, 20));\n                      ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_1_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 20))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"{\"\nLINE 1: SELECT * FROM t0 WHERE (a, b) NOT IN ({ROW(1, 10)\n                                              ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_1_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_100_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function tstz(unknown) does not exist\nLINE 1: INSERT INTO t1 (ts) VALUES (tstz('2002-10-27 01:00'));\n                                    ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function posix_at_epoch(unknown) does not exist\nLINE 1: INSERT INTO t1 (ts) VALUES (POSIX_AT_EPOCH('2002-10-27 02:00...\n                                    ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1035680400, datetime.datetime(2002, 10, 27, 1, 0, tzinfo=datetime.timezone.utc)), (1035684000, datetime.datetime(2002, 10, 27, 2, 0, tzinfo=datetime.timezone.utc)), (1035687600, datetime.datetime(2002, 10, 27, 3, 0, tzinfo=datetime.timezone.utc)))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(integer) does not exist\nLINE 1: SELECT ts, UNIX_TIMESTAMP(ts) FROM t1;\n                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT STR_TO_DATE('2001-01-01 00:00:00');\"\n                                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((730851,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_day(unknown) does not exist\nLINE 1: SELECT TO_DAY('2001-01-01 00:00:00');\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((730851,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_100_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type interval to numeric\nLINE 1: ...12-31 23:59:59' - TIMESTAMP '2007-12-30 00:00:00')::NUMERIC(...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function time_diff(unknown, unknown) does not exist\nLINE 1: SELECT time_diff('2000-01-01 00:00:00', '2000-01-01 00:00:00...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Saturday October 2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"dateformat\"\nLINE 1: dateformat('%W %M %Y', ''2009-10-10 23:59:59'')\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:59:59',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'2003-12-31 23:59:59'\"\nLINE 1: SELECT TIME('2003-12-31 23:59:59');\n                    ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 1, 1, 11, 59, 59, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"CAST\"\nLINE 1: SELECT TIME(CAST(\"2003-12-31 23:59:59\" AS TIMESTAMP)), EXTRA...\n                    ^\n", "exec_able": false}}, "TP": 0, "FP": 7, "FN": 1}
{"sql_id": "postgresql_100_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2003, 1, 3, 0, 0, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"minute\" does not exist\nLINE 1: SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02 23:59:59');\n                            ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_100_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('2'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \",\"\nLINE 1: ...EXTRACT(MONTH FROM TIMESTAMP '2003-02-01 23:59:59', '2003-05...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_100_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('63426758399.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"EXTRACT\"\nLINE 1: EXTRACT(epoch FROM '2009-11-29 23:59:59')\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1447459199.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...:59:59' AS timestamp with time zone)::timestamp_to_seconds;\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_101_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',), ('6120',), ('612020',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_101_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((7,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((15,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_101_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('41', 'a'), ('41', 'c'), ('4100', 'b'), ('4100', 'd'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((<memory at 0x00000295856DE680>, 'a'), (<memory at 0x00000295856DE2C0>, 'c'), (<memory at 0x00000295856DFC40>, 'b'), (<memory at 0x00000295856DFD00>, 'd'))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_101_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_102_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...TO t1 VALUES (EXTRACT(DATETIME FROM CURRENT_TIMESTAMP), 1);\"\n                                                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_102_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_102_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 2}
{"sql_id": "postgresql_102_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \")\"\nLINE 1: SELECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP();\n                                                            ^\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_102_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \")\"\nLINE 1: ...LECT COUNT(*) FROM t1 WHERE a = CURRENT_TIMESTAMP() AND b = ...\n                                                             ^\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_102_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: CREATE TABLE t1 (f1 DATE);\\nINSERT INTO t1 SELECT curdate() ...\n                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_102_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function date(integer, integer) does not exist\nLINE 1: SELECT 1 FROM (SELECT DATE(2011,0)) a;\n                              ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_2_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: WITH qn AS (\\n    SELECT 1 AS n, CAST('x' AS char(100)) AS u...\n                    ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_3_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('NO',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"YES\"\nLINE 1: SELECT CASE WHEN (COUNT(*)) > 0 THEN ''YES'' ELSE ''NO'' AS ...\n                                               ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_39_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_39_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,), (3,), (1,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "postgresql_4_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ... 1 FROM t1 WHERE a = 9223372036854775807 AND string(a) = b;\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_4_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"SELECT\"\nLINE 1: SELECT EXPLAIN (SELECT 1 FROM t1 WHERE a = 92233720368547758...\n                        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_4_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_4_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: EXPLAIN SELECT 1 FROM t1 WHERE a = 0 AND TRIM(a::text) = b;\"\n                                                                   ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_4_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_4_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_4_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_5_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('postgres',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT CURRENT_USER;\"\n                            ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_6_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('3a',), ('3b',), ('3c',), ('3d',), ('3e',), ('3f',), ('40',), ('5b',), ('5c',), ('5d',), ('5e',), ('5f',), ('60',), ('7b',), ('7c',), ('7d',), ('7e',))", "rowcount": 17, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function encode_hex(bytea) does not exist\nLINE 1: SELECT encode_hex(c1) FROM t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_6_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"NOT\"\nLINE 1: CREATE TABLE t1 (a text) NOT NULL SELECT repeat('a',4000);\n                                 ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_6_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"head\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_6_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"tail\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"tail\" already exists\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_6_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unhex(text) does not exist\nLINE 1: UPDATE t1 SET a=unhex(code)\n                        ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_6_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_6_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_6_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_7_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc                  ', 21), ('\u07f0                   ', 21), ('\u02ae                   ', 21), ('                    ', 20), ('50515253            ', 20), ('31                  ', 20), ('h31                 ', 20), ('2805                ', 20))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc                  ', 2), ('\u07f0                   ', 1), ('\u02ae                   ', 1), ('                    ', 0), ('50515253            ', 8), ('31                  ', 2), ('h31                 ', 3), ('2805                ', 4))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_7_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc                  ', '                  h\u04bc'), ('\u07f0                   ', '                   \u07f0'), ('\u02ae                   ', '                   \u02ae'), ('                    ', '                    '), ('50515253            ', '            50515253'), ('31                  ', '                  31'), ('h31                 ', '                 h31'), ('2805                ', '                2805'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: SELECT c1, LPAD(c1, 20, \\u0027 ) FROM `h`;\n                                ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_7_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc                  ', 'h\u04bc525252525252525252'), ('\u07f0                   ', '\u07f05252525252525252525'), ('\u02ae                   ', '\u02ae5252525252525252525'), ('                    ', '52525252525252525252'), ('50515253            ', '50515253525252525252'), ('31                  ', '31525252525252525252'), ('h31                 ', 'h3152525252525252525'), ('2805                ', '28055252525252525252'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \")\"\nLINE 1: SELECT c1, string_pad(c1, 20, '52', right) FROM h;\n                                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_7_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"`\"\nLINE 1: SELECT INSTR(c1, 'h') FROM `h`;\"\n                                   ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_7_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_7_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_7_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_7_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"31\"\nLINE 1: SELECT strpos(c1, ''31'') FROM h;\n                            ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_7_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('h315253             ', 'h315253'), ('h31525352           ', 'h31525352'), ('h3152535252         ', 'h3152535252'), ('h315253525252       ', 'h315253525252'), ('52h315253           ', '52h315253'), ('5252h315253         ', '5252h315253'), ('525252h315253       ', '525252h315253'), ('   h315253          ', 'h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('h315253             ', 'h315253'), ('h31525352           ', 'h31525352'), ('h3152535252         ', 'h3152535252'), ('h315253525252       ', 'h315253525252'), ('52h315253           ', '52h315253'), ('5252h315253         ', '5252h315253'), ('525252h315253       ', '525252h315253'), ('   h315253          ', 'h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1973, 11, 29, 21, 33, 9, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(integer) does not exist\nLINE 1: select unix_timestamp(123456789);\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_71_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1977, 6, 7, 21, 44, 50, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function from_unixtime(integer) does not exist\nLINE 1: select from_unixtime(234567890);\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_71_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 0, 0, 1, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function from_unixtime(integer) does not exist\nLINE 1: SELECT FROM_UNIXTIME(1);\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_71_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('123456789.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_71_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('234567890.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function time_with_time_zone(unknown, integer) does not exist\nLINE 1: SELECT UNIX_TIMESTAMP(TIME_WITH_TIME_ZONE('1970-01-01', 2345...\n                              ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_71_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('2179098000.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_71_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('2149376400.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp(unknown) does not exist\nLINE 1: SELECT UNIX_TIMESTAMP('2038-02-10 01:00:00');\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_71_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('3600.000000'), Decimal('3601.000000'), Decimal('2147487247.000000'), Decimal('2147487248.000000')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"at\"\nLINE 1: ...poch from cast(\"1970-01-01 01:00:00\" as timestamp at timezon...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_71_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 12280 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function pg_catalog.extract(unknown, bigint) does not exist\nLINE 1: SELECT a, EXTRACT(epoch FROM a) FROM t1;\n                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_71_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('32536803599.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: SELECT CAST(\\\"3001-01-19 08:59:59\\\" AS INT8)\"\n                    ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_72_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: EXPLAIN SELECT * FROM t WHERE (x || x) = 'XX';\"\n                                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_74_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"2000\"\nLINE 1: ...t1(f1) select (case when (max(f1)) is null then ''2000'' els...\n                                                             ^\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_74_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((13,), (13,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "trailing junk after numeric literal at or near \"13_characters\"\nLINE 1: SELECT SUM(LENGTH(c)) FROM t1 WHERE c = ''13_characters'';\n                                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_74_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_74_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...NTO t2 (d) SELECT sum(length(c)) FROM t1 WHERE c='7_chars';\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_74_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'abc-def', '6162632d646566'), (2, \"'(),-.\", '2728292c2d2e'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(character varying) does not exist\nLINE 1: SELECT *, HEX(a) FROM t1;\n                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_74_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'abc-def', '6162632d646566'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT *, HEX(a) FROM t1 WHERE a = 'abc-def';\"\n                                                     ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_75_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "duplicate key value violates unique constraint \"t1_pkey\"\nDETAIL:  Key (pk)=(1) already exists.\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...) SELECT 'valid-string', 1 UNION ALL SELECT UNHEX('11'), 2;\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_75_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 12, 12), (2, 4, 4))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT pk, byte_length(tx), length(tx) FROM t1;\"\n                                                       ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_76_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"IGNORE\"\nLINE 1: INSERT IGNORE INTO t1 (i, a, b) VALUES (1, string_repeat('a'...\n               ^\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "postgresql_76_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 200, 210, 110, 210))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function len(character) does not exist\nLINE 1: SELECT i, len(a), len(b), char_length(a), char_length(b) FRO...\n                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_76_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ... 'a', CURRENT_TIMESTAMP), (1, 'b', 'b', CURRENT_TIMESTAMP);\"\n                                                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_77_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(12, 22, 22), datetime.date(1997, 1, 1), datetime.datetime(1997, 1, 2, 0, 0), '1997-01-01 12:22:22', 3, 7, 5))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: ...LECT t1.time, t1.date, t1.timestamp, CONCAT(date, \\\" \\\", tim...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_78_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_78_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function printf(unknown, text) does not exist\nLINE 1: SELECT printf('%x', val) FROM t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_78_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(character varying) does not exist\nLINE 1: SELECT HEX(a) FROM t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_79_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Sun', 'Sunday   '), (datetime.date(2006, 1, 2), 'Mon', 'Monday   '), (datetime.date(2006, 1, 3), 'Tue', 'Tuesday  '), (datetime.date(2006, 1, 4), 'Wed', 'Wednesday'), (datetime.date(2006, 1, 5), 'Thu', 'Thursday '), (datetime.date(2006, 1, 6), 'Fri', 'Friday   '), (datetime.date(2006, 1, 7), 'Sat', 'Saturday '))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: SELECT a, pg_date_format(a, \\%a) as abday, format_date(a, 'D...\n                                    ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_79_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Jan', 'January  '), (datetime.date(2006, 2, 1), 'Feb', 'February '), (datetime.date(2006, 3, 1), 'Mar', 'March    '), (datetime.date(2006, 4, 1), 'Apr', 'April    '), (datetime.date(2006, 5, 1), 'May', 'May      '), (datetime.date(2006, 6, 1), 'Jun', 'June     '), (datetime.date(2006, 7, 1), 'Jul', 'July     '), (datetime.date(2006, 8, 1), 'Aug', 'August   '), (datetime.date(2006, 9, 1), 'Sep', 'September'), (datetime.date(2006, 10, 1), 'Oct', 'October  '), (datetime.date(2006, 11, 1), 'Nov', 'November '), (datetime.date(2006, 12, 1), 'Dec', 'December '))", "rowcount": 12, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...a) as abmon, TO_CHAR(a, 'Month') as mon FROM t1 ORDER BY a;\"\n                                                                      ^\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_79_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1 Mon 01',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT strftime('%w %a %W', '2001-01-01');\"\n                                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_79_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('01 Jan January  ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"D\"\nLINE 1: SELECT date_format('2001-01-01', ''D Mon M'');\n                                           ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_79_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('11 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function date_format(unknown, unknown) does not exist\nLINE 1: SELECT DATE_FORMAT('2010-03-23 11:00:00','%h %p');\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_8_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT STRCMP('', 'ae'), STRCMP('ae', ''), STRCMP('aeq', 'q'...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_8_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: select strcmp('ss',''),strcmp('','ss'),strcmp('s','sss'),str...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_8_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"af\"\nLINE 1: SELECT STRCMP('', ''af''), STRCMP('a', ''), STRCMP('', ''aeq...\n                            ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_8_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...OMPARE('', 'ssa'), COMPARE('sa', 'sssb'), COMPARE('s', '');\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_8_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"o\"\nLINE 1: SELECT str_cmp( '', ''o' ), str_cmp( '', ''u' ), str_cmp( ''...\n                              ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_8_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, 1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: select strcmp('af',''),strcmp('','a'),strcmp('aeq',''),strcm...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_8_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, 1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "zero-length delimited identifier at or near \"\"\"\"\nLINE 1: SELECT (\"a\" = \"ss\"), (\"ssa\" = \"\"), (\"sssb\" = \"sa\"), (\"\\\"\\\"\\\"...\n                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "postgresql_8_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: select ( 'u' ? 'a' )::int, ( 'u' ? '' )::int;\"\n                                                     ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_8_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: select strcmp('s', 'a') as col1, strcmp('a', 'x') as col2;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_8_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 1, False, True), (1, 0, True, False))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_8_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('oe   ',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_80_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT LPAD(NULL, NULL, 'x') AS result;\"\n                                               ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_80_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xxxxa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: SELECT LPAD(\\\"a\\\", 5, \\\" \\\") AS result;\n                    ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_80_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('     ',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT LPAD('a', 0, '') AS result;\"\n                                          ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_80_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('xx123',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT LPAD('123', 5, 'x');\"\n                                   ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('xyxya',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT LPAD('a', 5, 'xy');\"\n                                  ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('          I LOVE SQL',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT lpad(\"I LOVE SQL\", 20, \" \")\"\n                                          ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_80_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"I LOVE SQL in the morning\" does not exist\nLINE 1: SELECT LPAD(\"I LOVE SQL in the morning\", 20, \" \");\n                    ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_81_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"repeated\"\nLINE 1: INSERT INTO t1 (f1, f2) VALUES ('a'::text repeated 1024 time...\n                                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_81_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((25165824,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT SUM(char_length(f1)) FROM t1;\"\n                                            ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_82_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3)), (datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2)), (datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1)))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function rand() does not exist\nLINE 1: SELECT d, d, d, d, d, d FROM t1 ORDER BY RAND();\n                                                 ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 5}
{"sql_id": "postgresql_83_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('41422020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(character) does not exist\nLINE 1: SELECT hex(c1) FROM ab;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_84_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: ...lues (1, date_format(cast(\"2001-01-01\" as timestamp), \\%W));\n                                                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_84_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"AS\"\nLINE 1: ...t5 (c1, c2) values (2, date_format('2001-01-01', 'W') AS d);\n                                                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_84_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function date_format(unknown, unknown) does not exist\nLINE 1: insert into t5 values (3, date_format('2001-01-01','%W'));\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_84_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(character varying) does not exist\nLINE 1: select hex(a) from t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_84_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"(\"\nLINE 1: INSERT INTO t1 VALUES (1, CURRENT_USER())\n                                              ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_85_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: INSERT INTO t1 VALUES ('ManyMegaByteBlck' * 123)\"\n                                                        ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_85_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function string_repeat(unknown, integer) does not exist\nLINE 1: INSERT INTO t1 VALUES (STRING_repeat('ManyMegaByteBlck', 234...\n                               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_85_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"ManyMegaByteBlck\" does not exist\nLINE 1: INSERT INTO t1 VALUES (repeat(\"ManyMegaByteBlck\", 345));\n                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_85_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_85_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_86_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, None, Decimal('1.1'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_86_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, None, None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'a'\"\nLINE 1: ...NULL::text, '')), COALESCE(NULL::text, '') regexp 'a', COALE...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_86_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('', 'abababababababababab', '', None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"repeated\"\nLINE 1: select ('a'::char repeated 0 times), ('ab'::char repeated (5...\n                          ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_86_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"a\" does not exist\nLINE 1: select format(null::text, \"a\", \"b\", \"c\");\n                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_86_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t2\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"SELECT\"\nLINE 1: CREATE TABLE t2 (SELECT COALESCE(a, b) FROM t1);\n                         ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_86_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t2\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_86_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t2\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: CREATE TABLE t2 (a numeric(1,0), coalesce numeric(1,0))\"\n                                                               ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_87_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function string_repeat(unknown, integer) does not exist\nLINE 1: INSERT INTO t1 VALUES (string_repeat('a', 10), 1), (string_r...\n                               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_87_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaaaaaaaa,bbbbbbbbbb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "zero-length delimited identifier at or near \"\"\"\"\nLINE 1: SELECT string_agg(a, \"\") FROM t1;\n                             ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_87_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1748096015.167602'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_88_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"''\"\nLINE 1: select ''a''*2000;\n                  ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_88_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((100,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\" does not exist\nLINE 1: SELECT length(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...\n                      ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_88_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2000,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_88_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((100, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((100, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_89_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function e(bytea) does not exist\nLINE 1: select E( (CAST(a AS BYTEA)) ) from t1 where a like 'A_';\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_89_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_89_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('00410000',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(character varying) does not exist\nLINE 1: select hex(a) from t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_89_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" already exists\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_9_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('this', 'is', 'a', 2, Decimal('2.0')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: SELECT IF(0,\\\"ERROR\\\",\\\"this\\\"),IF(1,\\\"is\\\",\\\"ERROR\\\"),IF(NU...\n                    ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_9_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a',), ('A',), ('aa',), ('AA',), ('aaa',), ('BBB',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT s FROM t1 WHERE st = 1 ORDER BY s;\"\n                                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_9_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a',), ('A',), ('aa',), ('AA',), ('aaa',), ('BBB',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"s\" does not exist\nLINE 1: SELECT CASE WHEN (u = 1) THEN s ELSE NULL END FROM t1 ORDER ...\n                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,), (1,), (1,), (1,), (1,), (1,), (1,))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_9_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_9_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('144.54'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('144.54'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_9_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6, 56))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6, 56))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "postgresql_9_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, False))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_9_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, '05-03-2005', 'Day 1'), (2, '16-03-2005', 'Day 2'), (3, '28-03-2005', 'Day 3'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...') ELSE '-' END) AS date_ord FROM t1 ORDER BY date_ord ASC;\"\n                                                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_9_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, '28-03-2005', 'Day 3'), (2, '16-03-2005', 'Day 2'), (1, '05-03-2005', 'Day 1'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"THEN\"\nLINE 1: SELECT id, CASE date IS NULL THEN '-' ELSE FROM_UNIXTIME(dat...\n                                     ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "postgresql_9_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1234567890123456789'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"AS\"\nLINE 1: ...ELECT * FROM (SELECT MAX(CASE WHEN c = TRY_CAST(c AS INTEGER...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_9_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1234567890123456789'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"unsigned\" does not exist\nLINE 1: SELECT * FROM (SELECT MAX(COALESCE(CAST(c AS UNSIGNED), 0)) ...\n                                                     ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_9_29", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('2001.0000000000000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...) = 10 THEN NULL ELSE EXTRACT(YEAR FROM '2001-01-01') END);\"\n                                                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "postgresql_90_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 10000 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \",\"\nLINE 1: SELECT EXTRACT('D', DATE(\"2023-01-01\")), EXTRACT('D', DATE(\"...\n                          ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_90_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 117592 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...P(42949671 * 86400)), DATE(TO_TIMESTAMP(42949673 * 86400));\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_91_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"x\" does not exist\nLINE 1: INSERT INTO t VALUES (0, \"x\" * 120000), (1, \"z\" * 12000);\n                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_91_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((120000,), (12000,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT pg_column_size(b) FROM t;\"\n                                        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_92_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"{\"\nLINE 1: SELECT generate_array({{3,2,3\n                              ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_93_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"table\"\nLINE 1: SELECT (1, 2, (3, null)) FROM table WHERE hstore((1, 2, (3, ...\n                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_93_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT ROW(2,2,3) = ROW(1+1, 2, 3);\"\n                                           ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT ARRAY[1,2,3] = ARRAY[2,2,3]\"\n                                          ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_93_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"{\"\nLINE 1: SELECT {1,2,3\n               ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_93_19", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT (1 >= 4) AND (2 >= 2) AND (3 >= 3)\"\n                                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_93_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT ROW(1,2,3) != ROW(2,2,3);\"\n                                        ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_22", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"{\"\nLINE 1: SELECT {1,2,{3,4,5\n               ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_93_24", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "ARRAY types integer and integer[] cannot be matched\nLINE 1: SELECT ARRAY['test', 2, ARRAY[3,33]] = ARRAY['test', 2, ARRA...\n                                ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_93_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'test'\"\nLINE 1: SELECT ARRAY('test', 2, ARRAY(3, 33)) = ARRAY('test', 2, ARR...\n                     ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_94_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 2, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: select * from t1 where ROW(1,2,3)=ROW(a,b,c);\"\n                                                     ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_94_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, 3, 1), (3, 2, 1))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, 3, 1), (3, 2, 1))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,), (False,), (False,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"(\"\nLINE 1: SELECT ROW(\"a\", 2, 3) FROM (ROW(1, \"b\", \"c\"), ROW(2, 3, \"1\")...\n                                       ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_94_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_94_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,), (False,), (True,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"r1\" does not exist\nLINE 1: ..._row(r1, r2, r3) IN (SELECT a, b, c FROM t1 WHERE r1 = 1 AND...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "postgresql_94_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,), (True,), (True,), (True,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,), (True,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_94_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, False, False, False, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_95_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...ELECT sum(b) FROM t1 WHERE a = t1.a), 1 FROM t1 GROUP BY a;\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_95_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('(1,4)',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_95_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_95_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_95_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "subquery must return only one column\nLINE 1: SELECT (SELECT 1,3 FROM t1 WHERE 1=0) = (1,2);\n               ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_95_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function first(integer, integer) does not exist\nLINE 1: EXPLAIN SELECT FIRST(min(a), 1) AS al FROM t1 GROUP BY a;\n                       ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_95_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"s\" does not exist\nLINE 1: SELECT COALESCE(substring(s, 1, 5), '') || \"x\" * (5 - length...\n                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "postgresql_96_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT RPAD(NULL::text, 'x') AS result;\"\n                                               ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_96_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT RPAD('a', NULL, 'x') AS result;\"\n                                              ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"a\" does not exist\nLINE 1: SELECT \"a\" AS result;\n               ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function rightpad(unknown, integer, unknown) does not exist\nLINE 1: SELECT rightpad('a', 5, NULL) AS result;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "zero-length delimited identifier at or near \"\"\"\"\nLINE 1: SELECT RPAD(\"\", 0, \"\") AS result;\n                    ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_96_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function rightpad(unknown, integer, unknown) does not exist\nLINE 1: SELECT RIGHTPAD('a', -1, 'x');\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"123456787890\" does not exist\nLINE 1: SELECT substr(\"123456787890\", 0, 1)\n                      ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_96_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('axyxy',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"a\" does not exist\nLINE 1: SELECT RIGHT(\"a\", 5, \"xy\");\n                     ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_96_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('I LOVE SQL          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"I LOVE SQL\" does not exist\nLINE 1: SELECT LPAD(\"I LOVE SQL\", 20, \" \");\n                    ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_96_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"I LOVE SQL in the morning\" does not exist\nLINE 1: SELECT LPAD(\"I LOVE SQL in the morning\", 20, \" \")\n                    ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_97_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_97_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t3\" does not exist\nLINE 1: SELECT * FROM t1 WHERE COALESCE((SELECT a FROM t3 WHERE a = ...\n                                                       ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_98_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...b FROM t2 WHERE CAST(gen_uuid() AS CHAR) = t2.a::CHAR) > 0;\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_98_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT COALESCE(SUM(t3.b), 0) FROM t1;\"\n                                              ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_98_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_98_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ... COALESCE(SUM(t3.b), 0) FROM t3 WHERE t1.a = t3.a) FROM t1;\"\n                                                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_98_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "missing FROM-clause entry for table \"t3\"\nLINE 1: EXPLAIN SELECT COALESCE(SUM(t3.b), 0) FROM t1 WHERE t1.a = t...\n                                    ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_99_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('ABC', 1), ('XYZ', 1), ('ABC', 1), ('XYZ', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('ABC', 1), ('XYZ', 1), ('ABC', 1), ('XYZ', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_10_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('b                                                               ', 'a                                                               ', 'a               ', 'a211            '), ('c                                                               ', 'a                                                               ', 'a               ', 'a311            '), ('d                                                               ', 'a                                                               ', 'a               ', 'a411            '))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('b                                                               ', 'a                                                               ', 'a               ', 'a211            '), ('c                                                               ', 'a                                                               ', 'a               ', 'a311            '), ('d                                                               ', 'a                                                               ', 'a               ', 'a411            '))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_10_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ca311', 'a               '), ('ba211', 'a               '), ('aa111', 'a               '))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_10_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ca311', 'a               ', 'c311            '), ('ba211', 'a               ', 'c211            '), ('aa111', 'a               ', 'c111            '))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...N(c)), b, MAX(c) FROM t1 WHERE a1 < 'd' GROUP BY a1, a2, b;\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_10_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ca', 'a               ', 'a311            ', 'c311            '), ('ba', 'a               ', 'a211            ', 'c211            '), ('aa', 'a               ', 'a111            ', 'c111            '))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"d\"\nLINE 1: ...ncat_a1a2, b, MIN(c), MAX(c) FROM t1 WHERE a1 < ''d'' GROUP ...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "postgresql_10_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('9797', 'a               ', 'a               '), ('9797', 'a               ', 'a               '), ('9797', 'a               ', 'a               '), ('9797', 'a               ', 'a               '))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('9797', 'a               ', 'a               '), ('9797', 'a               ', 'a               '), ('9797', 'a               ', 'a               '), ('9797', 'a               ', 'a               '))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_11_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, 50), (1, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function stdev(integer) does not exist\nLINE 1: ...lect fld1, max(fld2) from t1 group by fld1 having stdev(fld2...\n                                                             ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_11_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3, 50), (1, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3, 50), (1, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_12_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1000, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"-\"\nLINE 1: ...S a, CONCAT('c-', 2000 + A.a, '=w') AS b, ''filler-1'' AS fi...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_12_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1000, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"-\"\nLINE 1: ...A.a, '=w'), concat('c-', 3000+A.a, '=w'), ''filler-2'' from ...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_12_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 25, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 25, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_12_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"+\"\nLINE 1: ...LECT * FROM t1 WHERE a < 10 AND b = REPEAT(char(65 + a), 20)\n                                                              ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_12_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (1, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (2, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (3, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (4, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (5, '77777777777777777777', 'filler                                                                                                                                                                                                  '), (6, '77777777777777777777', 'filler                                                                                                                                                                                                  '), (7, '77777777777777777777', 'filler                                                                                                                                                                                                  '), (8, '77777777777777777777', 'filler                                                                                                                                                                                                  '), (9, '77777777777777777777', 'filler                                                                                                                                                                                                  '))", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"+\"\nLINE 1: ...ROM t1 WHERE a < 10 AND b = string_repeat(char(65 + a), 20);...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_14_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function string_repeat(unknown, integer) does not exist\nLINE 1: UPDATE t1 SET data = string_repeat('a', 18 * 1024);\n                             ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_14_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: select Bytea_length(data) from t1;\"\n                                          ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_14_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: INSERT INTO t1 (data) VALUES (string_repeat('a', 1024));\"\n                                                                ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_14_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: INSERT INTO t1 (data) VALUES ('b' * 15360)\"\n                                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_14_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: UPDATE t1 SET data = repeat('c', 17408);\"\n                                                ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"::\"\nLINE 1: INSERT INTO t1 (data) VALUES ('a' * 18*1024)::bytea;\n                                                    ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_14_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((17408,), (17408,), (18432,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((17408,), (17408,), (18432,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_15_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1293840000.000000'), Decimal('0.000000'), 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function timestamp_with_timezone(unknown) does not exist\nLINE 1: SELECT TIMESTAMP_WITH_TIMEZONE('2011-01-01 00:00:00') as tim...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_15_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_15_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"subq: \" does not exist\nLINE 1: INSERT INTO t2 VALUES (1 + (SELECT a FROM t1), \"subq: \" || (...\n                                                       ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_16_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('postgres', 'postgres'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"(\"\nLINE 1: SELECT current_user(), current_database();\n                           ^\n", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "postgresql_17_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT strpos('abc', 'a')\"\n                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function regexp_instring(unknown, unknown) does not exist\nLINE 1: SELECT regexp_instring( 'abc', 'b');\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function regex_search(unknown, unknown) does not exist\nLINE 1: SELECT regex_search('abc', 'c');\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT strpos('abc', 'd')\"\n                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"a\"\nLINE 1: SELECT CASE WHEN regex_match(subject, ''a'', 1) THEN substr(...\n                                                ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_17_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT regmatch('a', 'pattern')\"\n                                       ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('6131',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"a\"\nLINE 1: SELECT hex(concat((regexp_match('a', 'a')::text, ''a''))\n                                                           ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 3}
{"sql_id": "postgresql_17_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT (substr('1', regex_match('1', '(a)', 0))::integer)\"\n                                                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_17_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"a\"\nLINE 1: SELECT regexp_search( 1.1, ''a'');\n                                     ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_17_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT regexp_search('a', 1)\"\n                                    ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function regexp_match(unknown, numeric) does not exist\nLINE 1: SELECT regexp_match('a', 1.1)\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function regpos_pos(character, character) does not exist\nLINE 1: SELECT regpos_pos(subject, pattern) FROM t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"a\"\nLINE 1: SELECT strpos('abcabcabc', ~''a+'')\n                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_17_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"abcabcabc\" does not exist\nLINE 1: SELECT regexp_instr(\"abcabcabc\", \"a+\", 2);\n                            ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_17_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function regex(unknown, unknown, integer) does not exist\nLINE 1: SELECT regex('abcabcabc', 'b+', 1);\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT * FROM t1 WHERE substr(subject, 2) ~ 'b+';\"\n                                                         ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_17_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...', 'b+') >= 3 THEN SUBSTRING('abcabcabc', 3) ELSE NULL END;\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_17_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...', '^a+') THEN substr('abcabcabc', 2) ELSE 'abcabcabc' END;\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_17_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT regex_substr('abcabcabc', 'a+', 1, 3)\"\n                                                    ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"a\"\nLINE 1: ...ubstring('abcabcabc', regex_search('abcabcabc', ''a+'', 1), ...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_17_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"abcabcabc\" does not exist\nLINE 1: SELECT regexp_search( \"abcabcabc\", \"a+\", 4, 2 )\n                              ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_17_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT pg_regex_instr('a', 'a+', 1, 1, -1)\"\n                                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT strpos(regex('a+', 'i'), 'abcabcabc', 1)\"\n                                                       ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_17_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT strpos('abcabcabc', 'a+', 1, 1)\"\n                                              ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: SELECT regex_match_with_options(\"aaabcabcabc\", \\u00E2\\0022a+...\n                                                       ^\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "postgresql_17_28", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function regexp_matches(unknown, unknown, integer, integer, integer) does not exist\nLINE 1: SELECT string_agg( (regexp_matches('aaabcabcabc', 'A+', 1, 1...\n                            ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_17_29", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_17_30", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: SELECT substr(\\n  subject,\\n  CASE\\n    WHEN strpos(pattern,...\n                      ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_17_31", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"aaabcabcabc\" does not exist\nLINE 1: SELECT REGEXP_INSTR(\"aaabcabcabc\", \"A+\", 1, 3)\n                            ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_17_32", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function regexp_substr(unknown, unknown, integer, integer, integer) does not exist\nLINE 1: SELECT REGEXP_SUBSTR('a', 'a+', 1, 1, 0);\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_18_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('XXX',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"abc\" does not exist\nLINE 1: SELECT regexp_replace(\"abc\", \"b\", \"X\");\n                              ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_18_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"a\"\nLINE 1: SELECT regex_replace(NULL, ''a'', ''X'')\n                                     ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_18_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT regexp_replace('aaa', 'a', NULL)\"\n                                               ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('XXXx',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"aaa\" does not exist\nLINE 1: SELECT concat( regex_replace(\"aaa\", \"a\", \"X\"), \"x\" );\n                                     ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 2}
{"sql_id": "postgresql_18_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"regexp_replace\"\nLINE 1: regexp_replace('aaa', 'a', ''X'', 1)\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function regex_replace(unknown, unknown, unknown, integer) does not exist\nLINE 1: SELECT regex_replace('aaabbccbbddaa', 'b+', 'X', 2)\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_18_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaa<bb>ccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function regreplace(unknown, unknown, unknown, integer) does not exist\nLINE 1: SELECT regreplace('aaabbccbbddaa', '(b+)', '<$1>', 1);\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_18_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaabbccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT reg_replace('x+', 'x', 'aaabbccbbddaa');\"\n                                                       ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_18_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaxccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaxccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaax',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_18_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaxccc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"regexp_replace\"\nLINE 1: regexp_replace('aaabccc', 'b', ''x'', 1, 2)\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"abc\" does not exist\nLINE 1: SELECT regex_replace(\"abc\", \"b\", \"X\");\n                             ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_18_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aXcXdX',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"abcbdb\" does not exist\nLINE 1: SELECT string_replace(\"abcbdb\", \"b\", \"X\")\n                              ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_18_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"abcbdb\" does not exist\nLINE 1: SELECT regex_replace(\"abcbdb\", \"b\", \"X\")\n                             ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_18_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"aaabcbdb\" does not exist\nLINE 1: SELECT regexp_replace(\"aaabcbdb\", \"b\", \"X\");\n                              ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_18_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"aaabcbdb\" does not exist\nLINE 1: SELECT regex_replace(\"aaabcbdb\", \"b\", \"X\", 2);\n                             ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_18_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT regex_replace('aaabcbdb', 'b', 'X', 3);\"\n                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_18_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"(\"\nLINE 1: SELECT REGEXP REPLACE('aaa', 'a', 'X', 2);\"\n                             ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_18_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('XXaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('XXaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_19_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ..._MATCH('a', 'a'), 0), COALESCE(REGEXP_MATCH('a', 'a'), 0));\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_19_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_19_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"b\" does not exist\nLINE 1: SELECT char_length(regexp_replace(string_rep('a', b), 'a', '...\n                                                          ^\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 2}
{"sql_id": "postgresql_19_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function string_repeat(unknown, integer) does not exist\nLINE 1: INSERT INTO t1 VALUES (string_repeat('a', 16384));\n                               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_19_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((16384,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"a\"\nLINE 1: SELECT length(regexp_replace(a, ''a'', ''b'')) FROM t1;\n                                          ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 1}
{"sql_id": "postgresql_19_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('b',), ('c',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"^\"\nLINE 1: SELECT regex_replace(a, ^([[:alpha:]]+)[[:space:]].*$, $1) F...\n                                ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_19_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: UPDATE t1 SET a = regexp_replace('b', 'y', 'b')\"\n                                                       ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_20_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_20_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_20_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_20_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'18:19:29'\"\nLINE 1: INSERT INTO t2 VALUES (1, TIME('18:19:29'), CURRENT_TIME());\n                                       ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_21_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1-1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('11',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_21_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 1, 'one'), (2, 1, 'one'), (4, 2, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 1, 'one'), (2, 1, 'one'), (4, 2, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_22_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function min(timestamp without time zone, unknown) does not exist\nLINE 1: SELECT MIN(CAST('01-01-01' AS TIMESTAMP), '01-01:02');\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_22_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2001, 12, 10),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type date: \"2001-12/11\"\nLINE 1: SELECT MIN(CAST('2001-12-10' AS DATE), CAST('2001-12/11' AS ...\n                                                    ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_22_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_23_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('0.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function utc_timestamp() does not exist\nLINE 1: select unix_timestamp(utc_timestamp()) - unix_timestamp(now(...\n                              ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 3}
{"sql_id": "postgresql_23_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'2003-03-01 00:00:00'\"\nLINE 1: ...O t1 (i, ts) VALUES(EXTRACT(SECOND FROM TIMESTAMP('2003-03-0...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_23_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...NIXTIMESTAMP('2003-03-30 03:00:00'),'2003-03-30 03:00:00');\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_23_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function posix_timestamp(bigint) does not exist\nLINE 1: insert into t1 (i, ts) values(posix_timestamp(20030330015959...\n                                      ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_23_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'2003-05-01 00:00:00'\"\nLINE 1: ...1 (i, ts) values(cast(extract('\u79d2' from timestamp('2003-05-0...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_23_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"2003-10-26 01:00:00\" does not exist\nLINE 1: ...SERT INTO t1 (i, ts) VALUES (EXTRACT(\"epoch\" FROM \"2003-10-2...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "postgresql_23_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1981, 7, 1, 0, 0, 9, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function from_unixtime(integer) does not exist\nLINE 1: SELECT from_unixtime(362793609);\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_23_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_23_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_23_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1048989599.000000'), 'Before the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'2003-03-30 01:59:59'\"\nLINE 1: SELECT timestamp('2003-03-30 01:59:59') AS b;\n                         ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_23_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1048991400.000000'), 'Inside the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_23_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1048993200.000000'), 'After the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...NIX_TIMESTAMP('2003-03-30 03:00:00'), 'After the gap' AS b;\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_23_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unix_timestamp() does not exist\nLINE 1: SELECT UNIX_TIMESTAMP(); -- FROM_UNIXTIME\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_23_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('-28801.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"1969-12-31 15:59:59\" does not exist\nLINE 1: SELECT CAST(\"1969-12-31 15:59:59\" AS INT8)\n                    ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_23_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('-28800.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"1969-12-31 16:00:00\" does not exist\nLINE 1: SELECT POSIX_AT_TIME(\"1969-12-31 16:00:00\")\n                             ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_23_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('-28799.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\"1969-12-31 16:00:01\"\"\nLINE 1: SELECT TIMESTAMP(\"1969-12-31 16:00:01\")\n                         ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_23_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: SELECT UNIX_TIMESTAMP(\\\"1970-01-01 00:00:01\\\");\"\n                              ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_23_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1641052801.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\"2022-01-01 16:00:01\"\"\nLINE 1: SELECT CAST(EXTRACT(seconds FROM TIMESTAMP(\"2022-01-01 16:00...\n                                                   ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_24_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"resultrowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function bytea_to_hex(bit) does not exist\nLINE 1: select bytea_to_hex(a) from t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_24_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',), ('31',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bit) does not exist\nLINE 1: select hex(a) from t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_24_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('18af7',), ('2b67',), ('1b1fd',), ('1870f',), ('3f3',), ('1b1fd',), ('0',), ('f4633',), ('2b03',), ('f4697',), ('1b1a3',), ('2711',), ('1adb1',), ('1b1a3',), ('10cd37',), ('18af7',), ('6f',), ('f468d',), ('2b5d',), ('3e9',), ('277f',), ('2b5d',), ('10f05f',), ('f69bf',), ('10f3e3',), ('b',), ('2711',), ('6f',), ('457',), ('65',), ('457',), ('1',), ('44d',), ('1ae15',), ('10f447',), ('3f3',), ('2711',), ('1b199',))", "rowcount": 38, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function min(bit) does not exist\nLINE 1: select to_hex(min(a)) from t1;\n                      ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_24_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('277f',), ('10cd2d',), ('271b',), ('10f3e3',), ('a7dcb3',), ('1b1a3',), ('9a4431',), ('2775',), ('f424b',), ('9a216d',), ('18af7',), ('10c94f',), ('9a2109',), ('18af7',), ('277f',), ('10f055',), ('9a487d',), ('f424b',), ('a7d92f',), ('9a443b',), ('3e9',), ('10c8eb',), ('277f',), ('9a2177',), ('a7dcb3',), ('10c8eb',), ('10c945',), ('a98a63',), ('9a1d8f',), ('f6d39',), ('9a2113',), ('a986d5',), ('2711',), ('10cd37',), ('a7dcb3',), ('98c183',), ('10eff1',), ('f424b',))", "rowcount": 38, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function min(bit) does not exist\nLINE 1: select hex(min(b)) from t1;\n                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_24_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('18af7', '18af7', '277f', '277f'), ('2b67', '2b67', '10cd2d', '10cd2d'), ('1b1fd', '1b1fd', '271b', '271b'), ('1870f', '1870f', '10f3e3', '10f3e3'), ('3f3', '3f3', 'a7dcb3', 'a7dcb3'), ('1b1fd', '1b1fd', '1b1a3', '1b1a3'), ('0', '0', '9a4431', '9a4431'), ('f4633', 'f4633', '2775', '2775'), ('2b03', '2b03', 'f424b', 'f424b'), ('f4697', 'f4697', '9a216d', '9a216d'), ('1b1a3', '1b1a3', '18af7', '18af7'), ('2711', '2711', '10c94f', '10c94f'), ('1adb1', '1adb1', '9a2109', '9a2109'), ('1b1a3', '1b1a3', '18af7', '18af7'), ('10cd37', '10cd37', '277f', '277f'), ('18af7', '18af7', '10f055', '10f055'), ('6f', '6f', '9a487d', '9a487d'), ('f468d', 'f468d', 'f424b', 'f424b'), ('2b5d', '2b5d', 'a7d92f', 'a7d92f'), ('3e9', '3e9', '9a443b', '9a443b'), ('277f', '277f', '3e9', '3e9'), ('2b5d', '2b5d', '10c8eb', '10c8eb'), ('10f05f', '10f05f', '277f', '277f'), ('f69bf', 'f69bf', '9a2177', '9a2177'), ('10f3e3', '10f3e3', 'a7dcb3', 'a7dcb3'), ('b', 'b', '10c8eb', '10c8eb'), ('2711', '2711', '10c945', '10c945'), ('6f', '6f', 'a98a63', 'a98a63'), ('457', '457', '9a1d8f', '9a1d8f'), ('65', '65', 'f6d39', 'f6d39'), ('457', '457', '9a2113', '9a2113'), ('1', '1', 'a986d5', 'a986d5'), ('44d', '44d', '2711', '2711'), ('1ae15', '1ae15', '10cd37', '10cd37'), ('10f447', '10f447', 'a7dcb3', 'a7dcb3'), ('3f3', '3f3', '98c183', '98c183'), ('2711', '2711', '10eff1', '10eff1'), ('1b199', '1b199', 'f424b', 'f424b'))", "rowcount": 38, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function min(bit) does not exist\nLINE 1: SELECT HEX(min(a)), HEX(max(a)), HEX(min(b)), HEX(max(b)) FR...\n                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 2, "FP": 3, "FN": 1}
{"sql_id": "postgresql_24_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,), ('0',), ('0',), ('0',), ('1',), ('0',))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function min(bit) does not exist\nLINE 1: select to_hex(min(b)) from t1 where a = 4;\n                      ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_24_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('b',), ('277f',), ('2b03',), ('2711',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function encode_hex(integer) does not exist\nLINE 1: SELECT encode_hex(min(c::integer)) FROM t1 WHERE a = 4 AND b...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_24_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,), ('0',), ('1',), ('1',), ('0',), ('0',), ('0',), ('1',), ('0',), ('0',))", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function max(bit) does not exist\nLINE 1: SELECT hex(max(b)) FROM t1;\n                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_24_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"b\" is of type bit but expression is of type text\nLINE 1: UPDATE t1 SET b = concat(a, b);\n                          ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_24_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30302c3131',), ('30312c3130',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_25_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31', 100), ('31', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...ERE (i2 >= 100 AND i2 < 201) AND CAST(b AS BOOLEAN) = TRUE;\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_25_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31', 100), ('31', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...), i2 FROM t2 WHERE (i2 >= 100 AND i2 < 201) AND b1 = TRUE;\"\n                                                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_25_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30', 100), ('30', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(integer) does not exist\nLINE 1: SELECT hex(i2::integer), i2 FROM t2 WHERE (i2 >= 100 AND i2 ...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_25_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30302c3131',), ('30312c3130',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_25_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('3030',), ('3031',), ('3130',), ('3131',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function substr(integer, integer) does not exist\nLINE 1: SELECT substr(CAST(t2.b AS integer), 2) FROM t2;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_25_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, '3030'), (3, '3031'), (3, '3130'), (3, '3130'), (2, '3131'))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function binary_to_hex(bit) does not exist\nLINE 1: SELECT a, binary_to_hex(t1.b) FROM t1 ORDER BY b;\n                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_26_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',), ('6120',), ('615c30',), ('6161',), ('62',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bytea) does not exist\nLINE 1: select hex(a) from t1 order by a;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_26_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61205c30',), ('615c30',), ('615c305c30',), ('61615c30',), ('625c30',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bytea) does not exist\nLINE 1: select hex(a::bytea) || '\\\\0' as b from t1 order by (a || '\\...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_26_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',), ('6120',), ('615c30',), ('6161',), ('62',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bytea) does not exist\nLINE 1: select hex(a) from t1 order by a;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_26_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function string_agg(unknown, integer) does not exist\nLINE 1: INSERT INTO t (c) VALUES (STRING_AGG('3', 65535));\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_26_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((65535, 65535))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((65535, 65535))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_26_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_27_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1.7976931348623157e+308,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function group_concat(numeric) does not exist\nLINE 1: SELECT MIN(-1.1111111111111111111111111, group_concat(1.7976...\n                                                 ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_28_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"timestamp\" of relation \"t1\" does not exist\nLINE 1: INSERT INTO t1 (a, timestamp) VALUES (now());\n                           ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_28_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2025 25', Decimal('2025'), Decimal('2025')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \",\"\nLINE 1: SELECT FORMAT(a, '%Y %y'), EXTRACT('Y', FROM a), EXTRACT('Y'...\n                                              ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 3}
{"sql_id": "postgresql_28_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1206, seconds=84012),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ..., '2000-01-27') - ST_TIMESTAMP('YYYY-MM-DD', '2003-05-16');\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_30_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, 3, 3, 3), (4, 3, 3, 4), (7, 3, 3, 7))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3, 2, 3, 3), (4, 2, 3, 4), (7, 1, 3, 7))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_30_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: INSERT INTO t1 VALUES(substring(f1, 1, 3));\"\n                                                   ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_30_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('10', 5.0), ('30', 15.0), ('50', 25.0), ('60', 30.0))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: character / integer\nLINE 1: SELECT a, (floor(a / 2)) FROM \"t1\" ORDER BY a;\n                           ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_31_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_31_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_31_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_31_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('3'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"quarter\" does not exist\nLINE 1: SELECT timestamp_diff(\"quarter\", MIN(y1, y2), dbl) FROM t1;\n                              ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 2}
{"sql_id": "postgresql_31_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2085,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT HOUR(GREATEST(y1, y2)) FROM t1;\"\n                                              ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_32_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, '\"0\"'), (0, '\"0\"'), (2012, '\"2012\"'), (0, '\"0\"'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, '\"0\"'), (0, '\"0\"'), (2012, '\"2012\"'), (0, '\"0\"'))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_33_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1111111111111111111111111111111111111111111111111111111111111111',), ('1000000000000000000000000000000000000000000000000000000000000000',), ('0000000000000000000000000000000000000000000000000000000000000000',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bit) does not exist\nLINE 1: select hex(b) from t1 order by pk1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_33_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('0000000000000000',), ('0000000000000001',), ('0000000000000010',), ('0000000000000011',), ('0000000000000100',))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bit) does not exist\nLINE 1: select hex(b) from t2 order by pk1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_34_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('*a*',), ('*b*',), ('*o*',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"*\" does not exist\nLINE 1: select concat(\"*\",name::text,\"*\") from t1 order by name;\n                      ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_34_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a                   ', '*a*', 'o                   ', '*o*'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"*\" does not exist\nLINE 1: SELECT MIN(name), MIN(stringconcat(name, \"*\", \"*\")), MAX(nam...\n                                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_34_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('-hello-hello-',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...LECT CONCAT(\"-\", a, \"-\", b, \"-\") FROM t1 WHERE a = 'hello';\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_34_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('-hello-hello-',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"-\" does not exist\nLINE 1: SELECT CONCAT(\"-\", a, \"-\", b, \"-\") FROM t1 WHERE a = 'hello'...\n                      ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_34_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"hex\" does not exist\nLINE 1: select cast(encode(t1.col1, \"hex\") as text) from t1;\n                                    ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_34_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bytea) does not exist\nLINE 1: select hex(col1) from t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_34_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',), ('6120',), ('62',), ('6220',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function encode_bin(bytea) does not exist\nLINE 1: select encode_bin(col1) from t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_35_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"SET\"\nLINE 1: INSERT INTO t1 SET a=hex('1F9480179366F2BF567E1C4B964C1EF029...\n                       ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_35_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function unhex(unknown) does not exist\nLINE 1: INSERT INTO t1 (a) VALUES (unhex('1F9480179366F2BF567E1C4B96...\n                                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_35_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"SET\"\nLINE 1: INSERT INTO t1 SET a=CAST(unhex('1F9480179366F2BF567E1C4B964...\n                       ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_35_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1f9480179366f2bf567e1c4b964c1ef029080707',), ('1f9480179366f2bf567e1c4b964c1ef029082020',), ('1f9480179366f2bf567e1c4b964c1ef029087575',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function pghex(bytea) does not exist\nLINE 1: SELECT pghex(t1.a) FROM t1 ORDER BY t1.a;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_35_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: EXPLAIN SELECT hex(a) FROM t1 ORDER BY a;\"\n                                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_35_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1f9480179366f2bf567e1c4b964c1ef029082020',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(bytea) does not exist\nLINE 1: SELECT hex(a) from t1 WHERE a=unhex('1F9480179366F2BF567E1C4...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_35_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_hex(bytea) does not exist\nLINE 1: SELECT to_hex(a) from t1 WHERE a = byteaDecode('1F9480179366...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_36_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"table\"\nLINE 1: ... NULL AND b IS NOT NULL) THEN 1 ELSE 2 END AS c2 FROM table;\n                                                                 ^\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "postgresql_36_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_36_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of WHERE must be type boolean, not type integer\nLINE 1: SELECT * FROM t1 WHERE (CASE WHEN a = 1 THEN 1 ELSE 0 END)\n                                ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_36_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N'), ('N', 'N', 'Y', 'N', 'N', 'Y', 'Y', 'N', 'N'), ('Y', 'N', 'N', 'N', 'N', 'N', 'N', 'Y', 'N'), ('N', 'N', 'N', 'Y', 'N', 'Y', 'Y', 'N', 'N'), ('N', 'Y', 'N', 'N', 'N', 'N', 'N', 'Y', 'N'), ('N', 'N', 'Y', 'Y', 'N', 'Y', 'Y', 'N', 'Y'), ('N', 'Y', 'Y', 'N', 'N', 'Y', 'Y', 'Y', 'N'), ('Y', 'N', 'N', 'Y', 'N', 'Y', 'Y', 'Y', 'N'), ('Y', 'Y', 'N', 'N', 'Y', 'N', 'N', 'Y', 'N'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"`\"\nLINE 1: ...') as AB, coalesce(not ((A=1) and (B=1)), 'N') as `n(AB)`, c...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "postgresql_37_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2004, 1, 22),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"2004-01-22 21:45:33\" does not exist\nLINE 1: SELECT TO_TIMESTAMP(\"2004-01-22 21:45:33\");\n                            ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_37_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function time_diff(time without time zone, unknown) does not exist\nLINE 1: SELECT time_diff(cast('2004-12-30 12:00:00' as time), '12:00...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_37_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT (CAST('1 12:00:00' AS TIME) - '12:00:00')::INTERVAL;\"\n                                                                   ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_37_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"6789\"\nLINE 1: SELECT CAST('12345' || ''6789'' AS INT);\n                                 ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_37_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT CAST(string_agg('12345', '6789') AS numeric);\"\n                                                            ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_37_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"1\" does not exist\nLINE 1: SELECT CAST(repeat(\"1\",9) AS INTEGER);\n                           ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_37_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_37_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, True))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_37_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function bytea(integer) does not exist\nLINE 1: select hex(bytea('a') || bytea(0x00));\n                                 ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_37_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((20070719,), (None,), (20070719,), (None,), (20070719,))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"day\" does not exist\nLINE 1: SELECT date_part(\"day\", d1) FROM t1;\n                         ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_37_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('0'), Decimal('0'), Decimal('0.000000')), (None, None, None))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hour(date) does not exist\nLINE 1: SELECT HOUR(f1), MINUTE(f1), SECOND(f1) FROM t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 3}
{"sql_id": "postgresql_37_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('0'), Decimal('0'), Decimal('0.000000')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \";\"\nLINE 1: ...))), SECOND(EXTRACT(SECOND FROM CAST('2007-07-19' AS DATE));\n                                                                      ^\n", "exec_able": false}}, "TP": 3, "FP": 1, "FN": 0}
{"sql_id": "postgresql_37_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type numeric to time without time zone\nLINE 1: SELECT EXTRACT(HOUR FROM CAST(NULL AS TIMESTAMP))::TIME, EXT...\n                                                         ^\n", "exec_able": false}}, "TP": 3, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...RRENT_TIMESTAMP), EXTRACT('SECOND' FROM CURRENT_TIMESTAMP);\"\n                                                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 2}
{"sql_id": "postgresql_37_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('arowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function bytea(unknown, integer) does not exist\nLINE 1: SELECT BYTEA('a', 2049);\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_37_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('value=340000',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"value=\" does not exist\nLINE 1: SELECT concat(\"value=\", CAST(\"3.4e5\" AS FLOAT));\n                      ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_37_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(1, 2, 1, 600000),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2025, 5, 27, 4, 21, 24, 272988, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_38_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT levi(CAST(a AS VARCHAR), b) FROM t1;\"\n                                                   ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_38_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1934,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted string at or near \"'{\"key_year\":1934\"\nLINE 1: SELECT JSON_EXTRACT('{\"key_year\":1934\n                            ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_38_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1988, '198819881988'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"year\" does not exist\nLINE 1: SELECT CAST(1988 AS YEAR), (CAST(1988 AS YEAR) :: text) * 3 ...\n                            ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_38_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('x1988',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x1988',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_38_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('73800.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"year\" does not exist\nLINE 1: SELECT TIME_TO_SEC(CAST('2030' AS YEAR));\n                                          ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_38_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1988, 1, 1, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"TIMEADD\"\nLINE 1: TIMEADD(MINUTE, 1, CAST(1988 AS YEAR))\"\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_38_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2025,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT DATE('nope', 'YYYY-MM-DD') AS year;\"\n                                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_38_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ... INTEGER) = 1 AND (CASE WHEN TRUE THEN NULL ELSE 1 END = a)\"\n                                                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_40_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61202020202020202020', 0, 0), ('615c30202020202020', 1, 1), ('615c74202020202020', 1, 1), ('61202020202020202020', 0, 0))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"HEX\" does not exist\nLINE 1: SELECT encode(t1.a, \"HEX\"), strcmp(t1.a, \"a\"), strcmp(t1.a, ...\n                            ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 1}
{"sql_id": "postgresql_40_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12', False), ('11', False), ('22', False))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT concat(b, c) as col1 FROM t1 WHERE col1 = '0101';\"\n                                                                ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_40_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function string_agg(integer, integer) does not exist\nLINE 1: EXPLAIN SELECT b, c FROM t1 WHERE b = 1 AND STRING_AGG(b, c)...\n                                                    ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_40_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted string at or near \"'0101\\\"\nLINE 1: SELECT b, c FROM t1 WHERE b = 1 AND concat(b, c) = '0101\\\n                                                           ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_40_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_40_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,), (False,), (False,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,), (False,), (False,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_40_17", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,), (True,), (True,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,), (True,), (True,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_41_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 2, "FP": 6, "FN": 0}
{"sql_id": "postgresql_42_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('0.0.0.1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT inet6_ntoa(inet_ntoa('1'));\"\n                                          ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_42_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"D\" does not exist\nLINE 1: SELECT convert(v, \"D\") FROM t1;\n                          ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_43_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('string ', 'string '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ... || REPEAT(' ', level), name || REPEAT(' ', level) FROM t1;\"\n                                                                      ^\n", "exec_able": false}}, "TP": 3, "FP": 0, "FN": 0}
{"sql_id": "postgresql_43_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function string_repeat(unknown, integer) does not exist\nLINE 1: create table t1 as select string_repeat('a', 4000) as a;\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_43_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 256, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...ead AS SELECT concat(b1.b, b2.b) AS head FROM t1 b1, t1 b2;\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_43_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 256, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "missing FROM-clause entry for table \"t1_b1\"\nLINE 1: CREATE TABLE tail AS SELECT CONCAT(t1_b1.b, t1_b2.b) AS tail...\n                                           ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_43_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('0.0.0.1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function inet_ntoa(unknown) does not exist\nLINE 1: SELECT inet6_ntoa(inet_ntoa('1'));\n                          ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_44_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type integer: \"\"\nLINE 1: SELECT STRING_AGG(COALESCE(a, ''), '') FROM t1;\n                                      ^\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "zero-length delimited identifier at or near \"\"\"\"\nLINE 1: SELECT string_agg(\"a\", \"\") FROM t1;\n                               ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_44_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...ECT STRING_AGG(CASE WHEN a THEN a ELSE '' END, '') FROM t1;\"\n                                                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "zero-length delimited identifier at or near \"\"\"\"\nLINE 1: SELECT COALESCE(a, \"\") FROM t1 GROUP BY 1;\n                           ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_44_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: CREATE TABLE t2 AS SELECT STRING_AGG('1', 2, 3) FROM t1;\"\n                                                                ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_44_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function lower(integer) does not exist\nLINE 1: CREATE TABLE t2 AS SELECT LOWER(a) FROM t1;\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function upper(integer) does not exist\nLINE 1: CREATE TABLE t2 AS SELECT UPPER(a) FROM t1;\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_44_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: CREATE TABLE t2 AS SELECT ARRAY_GET(1, a) FROM t1;\"\n                                                          ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_45_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT to_hex(a) FROM t1;\"\n                                 ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_45_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('20202020202020202020',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"hex\" does not exist\nLINE 1: SELECT convert(a, \"hex\") FROM \"t2\";\n                          ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_45_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('       xxx          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('       xxx          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_45_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x         ', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "zero-length delimited identifier at or near \"\"\"\"\nLINE 1: SELECT COALESCE(c1, \"\"), COALESCE(c1, \"\") FROM t1;\n                            ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_45_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x         ', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "zero-length delimited identifier at or near \"\"\"\"\nLINE 1: select coalesce(c1, \"\") , \"\" from t1;\n                            ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_45_17", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_45_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...E WHEN c1 > '' THEN c1 ELSE '' END) AS greatest_c1 FROM t1;\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_45_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_45_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT LOWER(c1), UPPER(c1) FROM t1;\"\n                                            ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_45_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x         ', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_45_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x         ', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "zero-length delimited identifier at or near \"\"\"\"\nLINE 1: select coalesce(c1, \"\"), coalesce(\"\", c1) from t1;\n                            ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_45_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"x''\"\nLINE 1: SELECT LPAD(c1, 3, ''x''), LPAD('', 3, c1) FROM t1;\n                             ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: SELECT\\ncast(c1 AS character(10)) || \"x\" * (3 - length(c1)),...\n              ^\n", "exec_able": false}}, "TP": 0, "FP": 7, "FN": 1}
{"sql_id": "postgresql_46_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 15, 2, 59, 58, 999000, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"datetime_str\" does not exist\nLINE 1: ....999')::text as datetime_str; select to_timestamp(datetime_s...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 1}
{"sql_id": "postgresql_46_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 12, 12, 22, 30, 59, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: select pg_date('2004.12.12 22.30.59','%Y.%m.%d %T')\"\n                                                           ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_46_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2003-01-02 08:11:02+00',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: ...TR_TO_DATE(\"8:11:2 03-01-02\", \"%H:%i:%S %y-%m-%d\") || \\'\\';;\n                                                                 ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 1}
{"sql_id": "postgresql_46_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('14',), ('14',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: select date_trunc(d, 'day') from t1 order by 1;\"\n                                                       ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_46_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Thursday (Thu), 1 January (Jan) 2004',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT DATE_FORMAT('2004-01-01', '%A (%a), %e %M (%b) %Y');\"\n                                                                   ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_47_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"24:00:00\" does not exist\nLINE 1: SELECT TIME_FORMAT(\"24:00:00\", \"%H:%M:%S\");\n                           ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_47_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"00:00:00\" does not exist\nLINE 1: SELECT TIME_FORMAT(\"00:00:00\", \"%H:%i:%S\");\n                           ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_47_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: SELECT TIME_FORMAT(\\\"12:00:00\\\", '%r');\"\n                           ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_47_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('03:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unrecognized format() type specifier \"Y\"\nHINT:  For a single \"%\" use \"%%\".\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_47_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('01:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: SELECT TIME_FORMAT(\\\"01:00:00\\\", '%T');\"\n                           ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_47_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"00:00:00\" does not exist\nLINE 1: SELECT TIME_FORMAT(\"00:00:00\", \"%l %p\");\n                           ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_47_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('01 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: SELECT TIME_FORMAT(\\\"01:00:00\\\", '%H:%M:%S %p');\"\n                           ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_47_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT TIME_FORMAT('12:00:00', '%I %p');\"\n                                                ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_47_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('11 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_47_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_47_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function str_to_date(unknown, unknown) does not exist\nLINE 1: select str_to_date('04 /30/2004', '%m /%d/%Y');\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_47_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \",\"\nLINE 1: SELECT CAST('04/30 /2004', '%m %d %Y')\"\n                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_47_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function pg_str_to_date(unknown, unknown) does not exist\nLINE 1: select pg_str_to_date('04/30/2004 ', '%m/%d/%Y');\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_47_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Thursday  01 January   2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"2009-01-01\" does not exist\nLINE 1: SELECT DATE_FORMAT(\"2009-01-01\", '%W %d %M %Y') AS valid_dat...\n                           ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_48_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('3',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted string at or near \"'{\"id\": \"3\", \"$name\": \"Barney\"\"\nLINE 1: SELECT json_extract('{\"id\": \"3\", \"$name\": \"Barney\"\n                            ^\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "postgresql_48_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('$Barney',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted string at or near \"'{\"id\": \"3\", \"$name\": \"$Barney\"\"\nLINE 1: SELECT JSON_EXTRACT('{\"id\": \"3\", \"$name\": \"$Barney\"\n                            ^\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "postgresql_49_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',), ('|teststring\\\\\\\\t|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function string_agg(unknown, character, unknown) does not exist\nLINE 1: select string_agg('|', text1, '|') as c from t1 where text1=...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_49_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \")\"\nLINE 1: select \"|\" || text1 || \"|\") from t1 where text1 = ''teststri...\n                                  ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_49_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('nothing                         ', 32), ('teststring                      ', 32), ('teststring\\\\\\\\t                   ', 32))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('nothing                         ', 7), ('teststring                      ', 10), ('teststring\\\\\\\\t                   ', 13))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_49_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|nothing|',), ('|teststring|',), ('|teststring|',), ('|teststring\\\\\\\\t|',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|nothing                         |',), ('|teststring                      |',), ('|teststring                      |',), ('|teststring\\\\\\\\t                   |',))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_49_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',), ('|teststring|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"teststring\" does not exist\nLINE 1: ...ECT CONCAT('|', text1, '|') FROM t1 WHERE text1 = \"teststrin...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_49_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',), ('|teststring|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: select text1 || \\'|\\' from t1 where text1='teststring';\n                        ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_49_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',), ('|teststring|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: select text1 || '|' from t1 where text1='teststring'\"\n                                                            ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_50_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((\"Let's create some new events from the name of postgres\",))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"(\"\nLINE 1: ...(\"Let's create some new events from the name of \", USER());\"\n                                                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 2}
{"sql_id": "postgresql_51_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: INSERT INTO t1 VALUES (1, repeat('x', 104))\"\n                                                   ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_51_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',), ('',), (None,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "zero-length delimited identifier at or near \"\"\"\"\nLINE 1: SELECT CONCAT(f1, \"\") AS dummy FROM t1 ORDER BY dummy;\n                          ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_51_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(2023, 1, 15),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2023, 1, 15),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_51_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function string_repeat(unknown, integer) does not exist\nLINE 1: INSERT INTO t1 VALUES (1, string_repeat('x', 40001));\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_51_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"x''\"\nLINE 1: INSERT INTO t1 VALUES (2, ''x''*40002);\n                                    ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_51_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: INSERT INTO t1 VALUES (3, string_repeat('x', 40003));\"\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_51_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function string_repeat(unknown, integer) does not exist\nLINE 1: INSERT INTO t1 VALUES (4, string_repeat('x', 40005));\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_51_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_51_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"x\" does not exist\nLINE 1: INSERT INTO t1 VALUES (6, string_repeat(\"x\", 40013));\n                                                ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_51_24", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6, 40013), (5, 40008), (4, 40005), (3, 40003), (2, 40002), (1, 40001))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6, 40013), (5, 40008), (4, 40005), (3, 40003), (2, 40002), (1, 40001))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_52_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_52_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_52_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_52_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_53_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_53_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function string_repeat(unknown, integer) does not exist\nLINE 1: INSERT INTO t VALUES(1, string_repeat('2', 257)), (1, string...\n                                ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_53_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_53_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"a\" is of type bytea but expression is of type text\nLINE 1: INSERT INTO t VALUES(1, repeat('2', 32750), repeat('1', 3275...\n                                ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_54_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"bytea\" of relation \"t1\" does not exist\nLINE 1: INSERT INTO t1 (a, bytea) VALUES(NULL, 'A\\0\\0\\0BBBBBBBB', SP...\n                           ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_54_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,), (12,), (50000,), (50000,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function char_length(bytea) does not exist\nLINE 1: select char_length(a) from t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_55_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('AAAA', 105.0, datetime.date(2003, 3, 1), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_55_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a-4',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"a\" does not exist\nLINE 1: SELECT \"a\" UNION SELECT (\"a\"||-4); -- CONCAT\n               ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_55_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a-4.5',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a-4.5',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_55_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a-5',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function string_agg(unknown, integer) does not exist\nLINE 1: select 'a' union select string_agg('a', -(4 + 1));\n                                ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_55_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a-1',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT 'a' UNION SELECT CONCAT('a', 4 - 5);\"\n                                                   ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_55_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a0',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function str(integer) does not exist\nLINE 1: select 'a' || str(-0); -- CONCAT\"\n                      ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_55_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a0.0',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT 'a' UNION SELECT 'a' + (-0.0);\"\n                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_55_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a0.0000',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT 'a' UNION SELECT 'a' || '-0.0000'\"\n                                                ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_55_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ab',), ('ab',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aba',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_55_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1234562',), ('x',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1234562',), ('x',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_55_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('', 'First'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"REGEXP\"\nLINE 1: SELECT * FROM t1 WHERE CONCAT(c1, ' ', c2) REGEXP 'First.*'\"\n                                                   ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_56_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"date\" of relation \"t1\" does not exist\nLINE 1: INSERT INTO t1 (date) VALUES (CAST(CAST(NULL AS TIMESTAMP) +...\n                        ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_56_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_56_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ... into t1 values (postgres_dateadd(null, interval '1 day'));\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_56_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type interval: \"2000-01-04\"\nLINE 1: insert into t1 values ('2000-01-04' + INTERVAL '1 DAY');\n                               ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_56_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False, datetime.time(0, 0)))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"ts\"\nLINE 1: SELECT DATE(ts), TIME(ts), (DATE(ts) = CURRENT_DATE + INTERV...\n                              ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_57_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: select * from t1 where isnull(extract('day' from mydate));\"\n                                                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "postgresql_57_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 2, 1, None, None, None), (1, 3, 1, None, None, None), (2, 1, 2, None, None, None), (2, 3, 2, None, None, None), (3, 1, 3, None, None, None), (3, 2, 3, None, None, None))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_57_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...ESCE(t1.col_date_key, '')::date IS NULL AND t2.pk <> t3.pk)\"\n                                                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_58_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "aggregate functions are not allowed in WHERE\nLINE 1: select * from t1 where a like string_agg('abc','%');\n                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_58_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('abc',), ('abcd',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"abc\" does not exist\nLINE 1: select * from t1 where a like concat(\"abc\", \"%\");\n                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_59_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((10.0, 10.000000000000002, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"double\" does not exist\nLINE 1: ...n(exp(10)), exp(ln(sqrt(10)) * 2), ln(CAST(NULL AS double));\n                                                              ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_59_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('3.0000000000000000'), Decimal('3.9068905956085185')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function log2(integer) does not exist\nLINE 1: select log2(8), log2(15), log2(null);\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_59_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((10.0, 16.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('10.0000000000000000'), 16.0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "postgresql_59_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_59_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_59_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_59_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('http://www.foo.com/',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function timediff(timestamp without time zone, integer) does not exist\nLINE 1: ...m t1 where a = 'http://www.foo.com/' order by abs(timediff(t...\n                                                             ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_59_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-2, Decimal('2'), -2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_59_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, Decimal('5'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_59_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-32.0, Decimal('2135987035920910081237100813796390160618078741685240921940550748740445664954564698653747478265824'), -32.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"unsigned_int\" does not exist\nLINE 1: select pow(cast(-2 as unsigned_int), 5), pow(184467440737095...\n                              ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_60_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('-4939092'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"ROUND\"\nLINE 1: ROUND(LEAST(15, -4939092, 0.2704), 0)\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "postgresql_60_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('6.538904378082472052E-346'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_60_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: INSERT INTO t1 VALUES (ln(1))\"\n                                     ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_60_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_60_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((9223372036854774784,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"signed\" does not exist\nLINE 1: select cast(pow(2,63)-1024 as signed) as pp;\n                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_60_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-9223372036854775808,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-9223372036854775808,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_60_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of WHERE must be type boolean, not type bigint\nLINE 1: SELECT * FROM t0 WHERE COALESCE(t0.c0, -1)\n                               ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_60_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of WHERE must be type boolean, not type integer\nLINE 1: SELECT * FROM t0 WHERE CAST(COALESCE(t0.c0, -1) AS INT);\n                               ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_60_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT CAST(COALESCE(t0.c0, -1) AS BIGINT) = TRUE FROM t0;\"\n                                                                  ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_60_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_61_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('0cc175b9c0f1b6a831c399e269772661', '3063633137356239633066316236613833316333393965323639373732363631'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function hex(text) does not exist\nLINE 1: select md5('a'), hex(md5('a'))\n                         ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_61_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"dual\" does not exist\nLINE 1: CREATE TABLE t1 AS SELECT MD5('a') AS c1 FROM dual;\n                                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_61_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('5d41402abc4b2a76b9719d911017c592',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5d41402abc4b2a76b9719d911017c592',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_61_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"hello\" does not exist\nLINE 1: SELECT md5(\"hello\");\n                   ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_61_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((16,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"abrakadabra\" does not exist\nLINE 1: select length(unhex(md5(\"abrakadabra\")));\n                                ^\n", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 2}
{"sql_id": "postgresql_61_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...nto t1 values ('test', md5('test')), ('test', md5('test'));\"\n                                                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_61_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"test\" does not exist\nLINE 1: select * from t1 where f1 = \"test\" and (f2 = md5(\"test\") or ...\n                                    ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_61_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_62_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('255.255.1.255', '0.0.1.255'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function inet_ntoa(bigint) does not exist\nLINE 1: select inet_ntoa(4294902271) as ipv4_1, inet_ntoa(511) as ip...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_62_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_62_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_62_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1,), (-2,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function inet_ntoa(integer) does not exist\nLINE 1: select min(a) from t1 group by inet_ntoa(a);\n                                       ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_62_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,), (1,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_62_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,), (2,), (1,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_63_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 0, 3, 1, 3, 3, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...1 * 2)), (8 / 5), (8 % 5), MOD(8, 5), ((- (1 + 1)) * (-2));\"\n                                                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_63_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, 1, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_63_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1, 7, 3), (2, None, None, None), (3, 3, 7, 3))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function bit_count(integer) does not exist\nLINE 1: select t1.a, t2.a, t2.b, bit_count(t2.b) from t1 left join t...\n                                 ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_64_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('000',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"date_format\"\nLINE 1: date_format(\"1997-12-31 23:59:59.000002\", \"%f\")\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_64_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_64_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(3, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function make_date(integer, integer) does not exist\nLINE 1: select make_date(3,1);\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1997, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"1997-01\" does not exist\nLINE 1: SELECT CAST(\"1997-01\" AS DATE);\n                    ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_64_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1996, 12, 31, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function make_date(integer, integer) does not exist\nLINE 1: select make_date(1997, 0);\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(9999, 12, 31, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function make_date(integer, integer) does not exist\nLINE 1: SELECT MAKE_DATE(9999, 365);\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_64_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 10000 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function make_date(integer, integer) does not exist\nLINE 1: SELECT MAKE_DATE(9999, 366);\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_64_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(100, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_64_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1997, 12, 30, 22, 58, 57, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"1997-12-31 23:59:59.000001\" does not exist\nLINE 1: select \"1997-12-31 23:59:59.000001\" - (\"1 1:1:1.000002\"::int...\n               ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_64_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1, seconds=82738),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"TIMEdiff\"\nLINE 1: TIMEdiff('1998-01-01 01:01:01.999999', '1997-12-31 23:59:59....\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_64_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 0, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"01:00:00.999999\" does not exist\nLINE 1: select time_with_timezone(\"01:00:00.999999\", \"02:00:00.99999...\n                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_64_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(1, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"extract\"\nLINE 1: extract(hour from datetime1) - extract(minute from datetime1...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_64_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 59, 59, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT (timestamp1 - timestamp2);\"\n                                         ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_64_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(22, 58, 57, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: SELECT CASE\\n    WHEN \\\"1997-12-31 23:59:59.000001\\\" > \\\"199...\n                   ^\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "postgresql_64_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: ... FROM timestamp1) - EXTRACT(YEAR FROM timestamp2),\\nEXTRACT(...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_64_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 59, 59, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"2000-01-01 00:00:00\" does not exist\nLINE 1: SELECT TIMESTAMPDIFF(\"2000-01-01 00:00:00\", \"2000-01-01 00:0...\n                             ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_64_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 59, 59, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"b\" does not exist\nLINE 1: SELECT (b - a)\n                ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_65_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'00:00:00'\"\nLINE 1: select date(10,11,12) || time('00:00:00')::timestamp;\n                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_65_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(20, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \",\"\nLINE 1: select time(20,11,12);\n                      ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_65_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 1, 1, 1, 999999, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"TIMESTAMP\"\nLINE 1: TIMESTAMP(EXTRACT(date FROM \"2001-12-01\"), EXTRACT(time from...\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_65_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 10, 1, 1, 1, 1, 1, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'2001-10-01'\"\nLINE 1: select timestamp('2001-10-01', '01:01:01.000001');\"\n                         ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_65_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 20, 1, 1, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\"2001-12-01\"\"\nLINE 1: select timestamp(\"2001-12-01\", \"20:01:01\");\n                         ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_65_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_65_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('31'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"1997-12-31 23:59:59.000001\" does not exist\nLINE 1: SELECT CAST(\"1997-12-31 23:59:59.000001\" AS DATE);\n                    ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_65_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:59:59.000001',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'1997-12-31 23:59:59.000001'\"\nLINE 1: select TIME('1997-12-31 23:59:59.000001');\n                    ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_65_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0), None, None, datetime.time(0, 0)), (datetime.time(1, 1, 1, 999999), datetime.time(23, 58, 58), datetime.time(0, 1, 2), datetime.time(23, 58, 59, 999999)), (datetime.time(22, 58, 58, 1), datetime.time(0, 1, 2), datetime.time(23, 58, 58), datetime.time(22, 59)), (None, None, None, None))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\\\"\nLINE 1: SELECT EXTRACT(HOUR FROM (t4 - t1)) || ':'\\| EXTRACT(MINUTE ...\n                                                  ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_65_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2003, 1, 2, 10, 11, 12, 1200, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT CAST(\"2003-01-02 10:11:12.0012\" AS TIMESTAMP(6));\"\n                                                                ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_65_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0), datetime.time(0, 0)))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"Alley\"\nLINE 1: select (t1 - t4), EXTRACT(MAX_UN Alley(7) FROM t2::timestamp...\n                                         ^\n", "exec_able": false}}, "TP": 0, "FP": 7, "FN": 2}
{"sql_id": "postgresql_65_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "postgresql_65_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT EXTRACT('hour' FROM (t1 - t4)) > 24 FROM test;\"\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 2}
{"sql_id": "postgresql_66_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:42:12',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \",\"\nLINE 1: SELECT CAST(EXTRACT(h, m, s) AS TEXT) AS DECIMAL FROM time('...\n                             ^\n", "exec_able": false}}, "TP": 0, "FP": 7, "FN": 1}
{"sql_id": "postgresql_66_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"'23:59:59'\"\nLINE 1: SELECT CAST(sec_to_time(86399) AS TIME) = TIME('23:59:59')\n                                                       ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_66_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: ...LECT format('%H:%M:%S', UNIX_TIMESTAMP(sec_to_time(86399)))\"\n                                                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_66_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"\"23:59:59\"\"\nLINE 1: SELECT time(\"23:59:59\") = TIME(\"23:59:59\");\n                    ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 2}
{"sql_id": "postgresql_66_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT STRFTIME('%H:%M:%S', 1,0,1);\"\n                                           ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_66_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type timestamp: \"01:00:01\"\nLINE 1: SELECT EXTRACT(SECOND FROM (CAST('01:00:01' AS TIMESTAMP))) ...\n                                         ^\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 2}
{"sql_id": "postgresql_66_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \",\"\nLINE 1: SELECT TIME(1, 0, 1)=CAST('01:00:01' AS TIME);\"\n                     ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_67_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 2}
{"sql_id": "postgresql_67_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 0, 0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "postgresql_67_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 2, 2, 2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"a\" does not exist\nLINE 1: SELECT COALESCE(\"a\", NULL), 0 + 0, 0.0 + 0.0, 0.0e1 + 0.0e1;\n                        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_67_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'one'), (2, 'one'), (4, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"one\"\nLINE 1: SELECT t1.id, CASE WHEN t2.val = 1 THEN ''one'' ELSE ''two''...\n                                                  ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_67_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'one'), (2, 'one'), (4, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function array_to_string(text, unknown) does not exist\nLINE 1: SELECT one.id, ARRAY_TO_STRING(two.val::text, ',') FROM t1 o...\n                       ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_68_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function string_agg(text, character varying, text, integer, integer, text, timestamp without time zone, timestamp without time zone, integer, integer) does not exist\nLINE 1: SELECT CONCAT('\\\"',STRING_AGG('\";'::text,title,CAST(prio AS ...\n                           ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 2}
{"sql_id": "postgresql_68_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \";\"\nLINE 1: SELECT CONCAT('\"\u2019,STRING_AGG(';',title::text,prio::text,cate...\n                                      ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "postgresql_68_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function string_agg(unknown, character varying, integer, integer, integer, text, timestamp without time zone, timestamp without time zone, integer, integer) does not exist\nLINE 1: SELECT STRING_AGG('\";', title, prio, category, program, bugd...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_68_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('</a>',), ('</a>..........................',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "zero-length delimited identifier at or near \"\"\"\"\nLINE 1: SELECT Concat(RPad(\"\", (55 - LENGTH(title)), \".\")) FROM t1;\n                           ^\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 3}
{"sql_id": "postgresql_69_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, True, True, False, False, True, -1, 1, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"abc\" does not exist\nLINE 1: select 0=0,1>0,1>=1,1<0,1<=0,1!=0,strcmp(\"abc\",\"abcd\"),strcm...\n                                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "postgresql_69_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('abc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('abc',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"mod\"\nLINE 1: select (12 mod 1) != null as col;\n                   ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_69_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('0.0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('0.0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_69_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('0.0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('0.0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_69_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_69_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function min(integer, integer) does not exist\nLINE 1: SELECT MIN(123456789, 234567890) as l;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_69_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"<\"\nLINE 1: <think>\n        ^\n", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "postgresql_69_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function max(integer, integer) does not exist\nLINE 1: CREATE TABLE t1 AS SELECT MAX(-1, 123456789);\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_70_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('5',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted string at or near \"';\"\nLINE 1: SELECT GREATEST('11', 5, 2)';\n                                   ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('11',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('11',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT LEAST('11', 5, 2);\"\n                                 ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function min(integer, integer, integer) does not exist\nLINE 1: SELECT MIN(11, 5, 2);\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_70_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: text + integer\nLINE 1: SELECT GREATEST('11', '5', '2') + 0;\n                                        ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('5.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: text + numeric\nLINE 1: SELECT GREATEST('11', '5', '2') + 0.00;\n                                        ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT MAX(11, 5, 2) + 0.00;\"\n                                    ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_70_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('18446744073709551615'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unterminated quoted identifier at or near \"\"\"\nLINE 1: SELECT GREATEST(18446744073709551615, NULL) FROM t0017;\"\n                                                               ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_20", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \")\"\nLINE 1: SELECT SUM(CASE WHEN a < b THEN a ELSE b) FROM t1;\n                                                ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_70_28", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function min(integer, integer) does not exist\nLINE 1: SELECT SUM(MIN(a, b)) FROM \"t2\";\n                   ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}

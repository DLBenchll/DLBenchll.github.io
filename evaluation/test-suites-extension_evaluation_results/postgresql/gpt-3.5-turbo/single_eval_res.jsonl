{"sql_id": "postgresql_1_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 10))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "subquery has too few columns\nLINE 1: SELECT * FROM t0 WHERE (a, b) IN (SELECT ROW(1, 10)); -- ROW\n                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_1_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 10), (2, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 10), (2, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_1_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, 20))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, 20))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_1_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_100_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1035680400, datetime.datetime(2002, 10, 27, 1, 0, tzinfo=datetime.timezone.utc)), (1035684000, datetime.datetime(2002, 10, 27, 2, 0, tzinfo=datetime.timezone.utc)), (1035687600, datetime.datetime(2002, 10, 27, 3, 0, tzinfo=datetime.timezone.utc)))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1035680400, datetime.datetime(2002, 10, 27, 1, 0, tzinfo=datetime.timezone.utc)), (1035684000, datetime.datetime(2002, 10, 27, 2, 0, tzinfo=datetime.timezone.utc)), (1035687600, datetime.datetime(2002, 10, 27, 3, 0, tzinfo=datetime.timezone.utc)))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_100_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((730851,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('11323.000000000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_100_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((730851,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('11323.000000000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_100_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_100_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('0.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_100_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Saturday October 2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Saturday October 2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:59:59',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(23, 59, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 1, 1, 11, 59, 59, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2004, 1, 1, 11, 59, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_100_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2003, 1, 3, 0, 0, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2003, 1, 3, 0, 0, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('2'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_100_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('63426758399.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1259539199.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_100_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1447459199.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1447459199.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_101_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',), ('612020',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',), ('612020',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_101_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((7,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((15,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_101_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('41', 'a'), ('41', 'c'), ('4100', 'b'), ('4100', 'd'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('41', 'a'), ('41', 'c'), ('4100', 'b'), ('4100', 'd'))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_101_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"unsigned\" does not exist\nLINE 1: SELECT CAST(123456789 AS UNSIGNED); -- CONVERT\n                                 ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_102_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 2}
{"sql_id": "postgresql_102_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "postgresql_102_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 2}
{"sql_id": "postgresql_102_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "postgresql_102_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "postgresql_102_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" already exists\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_102_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_2_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "recursive query \"qn\" column 2 has type character(100) in non-recursive term but type bpchar overall\nLINE 1: WITH recursive qn as (select 1 as n, cast('x' as char(100)) ...\n                                             ^\nHINT:  Cast the output of the non-recursive term to the correct type.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_3_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('NO',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('NO',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_39_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"b\" does not exist\nLINE 1: ...THEN a ELSE a END AS b FROM t1 ORDER BY POSITION((b + 1)::te...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_39_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,), (3,), (1,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"b\" does not exist\nLINE 1: ...LSE a END AS b FROM t1 ORDER BY array_position(ARRAY[1], b);\n                                                                    ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "postgresql_4_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_4_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_4_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_4_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_4_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_4_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_4_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_5_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('postgres',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('postgres',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_6_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('3a',), ('3b',), ('3c',), ('3d',), ('3e',), ('3f',), ('40',), ('5b',), ('5c',), ('5d',), ('5e',), ('5f',), ('60',), ('7b',), ('7c',), ('7d',), ('7e',))", "rowcount": 17, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('3a',), ('3b',), ('3c',), ('3d',), ('3e',), ('3f',), ('40',), ('5b',), ('5c',), ('5d',), ('5e',), ('5f',), ('60',), ('7b',), ('7c',), ('7d',), ('7e',))", "rowcount": 17, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_6_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" already exists\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_6_12", "EM": 1, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"head\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"head\" already exists\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_6_13", "EM": 1, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"tail\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"tail\" already exists\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_6_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_6_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_6_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_6_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_7_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc                  ', 21), ('\u07f0                   ', 21), ('\u02ae                   ', 21), ('                    ', 20), ('50515253            ', 20), ('31                  ', 20), ('h31                 ', 20), ('2805                ', 20))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc                  ', 2), ('\u07f0                   ', 1), ('\u02ae                   ', 1), ('                    ', 0), ('50515253            ', 8), ('31                  ', 2), ('h31                 ', 3), ('2805                ', 4))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_7_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc                  ', '                  h\u04bc'), ('\u07f0                   ', '                   \u07f0'), ('\u02ae                   ', '                   \u02ae'), ('                    ', '                    '), ('50515253            ', '            50515253'), ('31                  ', '                  31'), ('h31                 ', '                 h31'), ('2805                ', '                2805'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc                  ', '                  h\u04bc'), ('\u07f0                   ', '                   \u07f0'), ('\u02ae                   ', '                   \u02ae'), ('                    ', '                    '), ('50515253            ', '            50515253'), ('31                  ', '                  31'), ('h31                 ', '                 h31'), ('2805                ', '                2805'))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc                  ', 'h\u04bc525252525252525252'), ('\u07f0                   ', '\u07f05252525252525252525'), ('\u02ae                   ', '\u02ae5252525252525252525'), ('                    ', '52525252525252525252'), ('50515253            ', '50515253525252525252'), ('31                  ', '31525252525252525252'), ('h31                 ', 'h3152525252525252525'), ('2805                ', '28055252525252525252'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc                  ', 'h\u04bc525252525252525252'), ('\u07f0                   ', '\u07f05252525252525252525'), ('\u02ae                   ', '\u02ae5252525252525252525'), ('                    ', '52525252525252525252'), ('50515253            ', '50515253525252525252'), ('31                  ', '31525252525252525252'), ('h31                 ', 'h3152525252525252525'), ('2805                ', '28055252525252525252'))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_7_23", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('h315253             ', 'h315253'), ('h31525352           ', 'h31525352'), ('h3152535252         ', 'h3152535252'), ('h315253525252       ', 'h315253525252'), ('52h315253           ', '52h315253'), ('5252h315253         ', '5252h315253'), ('525252h315253       ', '525252h315253'), ('   h315253          ', 'h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('h315253             ', 'h315253'), ('h31525352           ', 'h31525352'), ('h3152535252         ', 'h3152535252'), ('h315253525252       ', 'h315253525252'), ('52h315253           ', '52h315253'), ('5252h315253         ', '5252h315253'), ('525252h315253       ', '525252h315253'), ('   h315253          ', 'h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1973, 11, 29, 21, 33, 9, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1973, 11, 29, 21, 33, 9, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1977, 6, 7, 21, 44, 50, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1977, 6, 7, 21, 44, 50, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 0, 0, 1, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 0, 0, 1, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_71_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('123456789.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('123456789.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_71_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('234567890.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('234567890.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 1}
{"sql_id": "postgresql_71_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('2179098000.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('2179098000.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('2149376400.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('2149376400.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('3600.000000'), Decimal('3601.000000'), Decimal('2147487247.000000'), Decimal('2147487248.000000')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('3600.000000'), Decimal('3601.000000'), Decimal('2147487247.000000'), Decimal('2147487248.000000')))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 12280 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 12280 is out of range", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_71_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('32536803599.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('32536803599.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_72_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_74_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_74_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((13,), (13,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((13,), (13,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_74_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_74_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_74_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 'abc-def', '6162632d646566'), (2, \"'(),-.\", '2728292c2d2e'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 'abc-def', '6162632d646566'), (2, \"'(),-.\", '2728292c2d2e'))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_74_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 'abc-def', '6162632d646566'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 'abc-def', '6162632d646566'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_75_2", "EM": 1, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "duplicate key value violates unique constraint \"t1_pkey\"\nDETAIL:  Key (pk)=(1) already exists.\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "duplicate key value violates unique constraint \"t1_pkey\"\nDETAIL:  Key (pk)=(1) already exists.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_75_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 12, 12), (2, 4, 4))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 12, 12), (2, 4, 4))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_76_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "duplicate key value violates unique constraint \"t1_a_key\"\nDETAIL:  Key (a)=(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                                                                                          ) already exists.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_76_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 200, 210, 110, 210))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 110, 210, 110, 210))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_76_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_77_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(12, 22, 22), datetime.date(1997, 1, 1), datetime.datetime(1997, 1, 2, 0, 0), '1997-01-01 12:22:22', 3, 7, 5))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(12, 22, 22), datetime.date(1997, 1, 1), datetime.datetime(1997, 1, 2, 0, 0), '1997-01-01 12:22:22', 3, 7, 5))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_78_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_78_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_78_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_79_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Sun', 'Sunday   '), (datetime.date(2006, 1, 2), 'Mon', 'Monday   '), (datetime.date(2006, 1, 3), 'Tue', 'Tuesday  '), (datetime.date(2006, 1, 4), 'Wed', 'Wednesday'), (datetime.date(2006, 1, 5), 'Thu', 'Thursday '), (datetime.date(2006, 1, 6), 'Fri', 'Friday   '), (datetime.date(2006, 1, 7), 'Sat', 'Saturday '))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Sun', 'Sunday   '), (datetime.date(2006, 1, 2), 'Mon', 'Monday   '), (datetime.date(2006, 1, 3), 'Tue', 'Tuesday  '), (datetime.date(2006, 1, 4), 'Wed', 'Wednesday'), (datetime.date(2006, 1, 5), 'Thu', 'Thursday '), (datetime.date(2006, 1, 6), 'Fri', 'Friday   '), (datetime.date(2006, 1, 7), 'Sat', 'Saturday '))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_79_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Jan', 'January  '), (datetime.date(2006, 2, 1), 'Feb', 'February '), (datetime.date(2006, 3, 1), 'Mar', 'March    '), (datetime.date(2006, 4, 1), 'Apr', 'April    '), (datetime.date(2006, 5, 1), 'May', 'May      '), (datetime.date(2006, 6, 1), 'Jun', 'June     '), (datetime.date(2006, 7, 1), 'Jul', 'July     '), (datetime.date(2006, 8, 1), 'Aug', 'August   '), (datetime.date(2006, 9, 1), 'Sep', 'September'), (datetime.date(2006, 10, 1), 'Oct', 'October  '), (datetime.date(2006, 11, 1), 'Nov', 'November '), (datetime.date(2006, 12, 1), 'Dec', 'December '))", "rowcount": 12, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Jan', 'January  '), (datetime.date(2006, 2, 1), 'Feb', 'February '), (datetime.date(2006, 3, 1), 'Mar', 'March    '), (datetime.date(2006, 4, 1), 'Apr', 'April    '), (datetime.date(2006, 5, 1), 'May', 'May      '), (datetime.date(2006, 6, 1), 'Jun', 'June     '), (datetime.date(2006, 7, 1), 'Jul', 'July     '), (datetime.date(2006, 8, 1), 'Aug', 'August   '), (datetime.date(2006, 9, 1), 'Sep', 'September'), (datetime.date(2006, 10, 1), 'Oct', 'October  '), (datetime.date(2006, 11, 1), 'Nov', 'November '), (datetime.date(2006, 12, 1), 'Dec', 'December '))", "rowcount": 12, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_79_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1 Mon 01',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('2 Mon 2',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_79_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('01 Jan January  ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('01 Jan January  ',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_79_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('11 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('11 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_8_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT strcmp('','ae'),strcmp('ae',''),strcmp('aeq','q'),str...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_8_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT strcmp('ss',''),strcmp('','ss'),strcmp('s','sss'),str...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_8_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT strcmp('','af'),strcmp('a',''),strcmp('','aeq'),strcm...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_8_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT strcmp('ss','a'),strcmp('','ssa'),strcmp('sa','sssb')...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_8_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT strcmp('','o') AS strcmp_1, strcmp('','u') AS strcmp_...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "postgresql_8_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, 1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_8_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, 1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT strcmp('a','ss'),strcmp('ssa',''),strcmp('sssb','sa')...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_8_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT strcmp('u','a'),strcmp('u',''); -- STRCMP\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_8_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT strcmp('s', 'a'), strcmp('a', 'x'); -- STRCMP\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_8_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 1, False, True), (1, 0, True, False))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 1, False, True), (1, 1, True, False))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_8_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('oe   ',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_80_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xxxxx',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xx123',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xx123',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xyxya',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xyxya',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_80_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('          I LOVE SQL',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('          I LOVE SQL',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_80_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_81_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_81_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((25165824,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((25165824,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_82_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1)), (datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2)), (datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3)))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "COALESCE types integer and date cannot be matched\nLINE 1: ...SCE(d, d), COALESCE(d, d), COALESCE(NULLIF(i, 0), d), CASE W...\n                                                             ^\n", "exec_able": false}}, "TP": 5, "FP": 1, "FN": 0}
{"sql_id": "postgresql_83_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('41422020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('41422020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_84_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_char(unknown, unknown) is not unique\nLINE 1: INSERT INTO t5 VALUES (1, to_char('2001-01-01', 'FMDay')); -...\n                                  ^\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_84_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_char(unknown, unknown) is not unique\nLINE 1: INSERT INTO t5 VALUES (2, to_char('2001-01-01', 'FMDay')); -...\n                                  ^\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_84_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_char(unknown, unknown) is not unique\nLINE 1: insert into t5 values (3, to_char('2001-01-01', 'FMDay')); -...\n                                  ^\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_84_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_84_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_85_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_85_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_85_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_85_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_85_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_86_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, None, Decimal('1.1'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None, False, Decimal('1.1'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_86_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, None, None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT strcmp('a', NULL), (1 < NULL), NULL ~ 'a', NULL LIKE ...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_86_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('', 'abababababababababab', '', None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'abababababababababab', '', None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_86_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_86_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t2\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t2\" already exists\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_86_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t2\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t2\" already exists\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_86_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t2\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t2\" already exists\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_87_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_87_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaaaaaaaa,bbbbbbbbbb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaaaaaaaa,bbbbbbbbbb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_87_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1748096125.866605'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1748096126.011655'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_88_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_88_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((100,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((100,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_88_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2000,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_88_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((100, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((100, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_89_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_89_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_89_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('00410000',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('00410000',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_89_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" already exists\n", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function pg_catalog.extract(unknown, unknown) is not unique\nLINE 1: CREATE TABLE t1 AS SELECT EXTRACT(EPOCH FROM NULL) AS to_sec...\n                                  ^\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('this', 'is', 'a', 2, Decimal('2.0')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of CASE/WHEN must be type boolean, not type integer\nLINE 1: SELECT CASE WHEN 0 THEN 'ERROR' ELSE 'this' END,\n                         ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a',), ('A',), ('aa',), ('AA',), ('aaa',), ('BBB',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of CASE/WHEN must be type boolean, not type integer\nLINE 1: SELECT CASE WHEN 1 THEN st ELSE st END AS s FROM t1 ORDER BY...\n                         ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a',), ('A',), ('aa',), ('AA',), ('aaa',), ('BBB',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a',), ('A',), ('aa',), ('AA',), ('aaa',), ('BBB',))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_9_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_9_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('144.54'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('144.54'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_9_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6, 56))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6, 56))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True, False))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True, False))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_21", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, '05-03-2005', 'Day 1'), (2, '16-03-2005', 'Day 2'), (3, '28-03-2005', 'Day 3'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, '05-03-2005', 'Day 1'), (2, '16-03-2005', 'Day 2'), (3, '28-03-2005', 'Day 3'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_22", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3, '28-03-2005', 'Day 3'), (2, '16-03-2005', 'Day 2'), (1, '05-03-2005', 'Day 1'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3, '28-03-2005', 'Day 3'), (2, '16-03-2005', 'Day 2'), (1, '05-03-2005', 'Day 1'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_9_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1234567890123456789'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "value \"1234567890123456789\" is out of range for type integer\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_9_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1234567890123456789'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "value \"1234567890123456789\" is out of range for type integer\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_9_29", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('2001.0000000000000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('2001.0000000000000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_90_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 10000 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 20000 is out of range", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_90_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 117592 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 119562 is out of range", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_91_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_91_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((120000,), (12000,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((120000,), (12000,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_92_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "subquery has too few columns\nLINE 1: SELECT ROW(10,2,3) IN (SELECT ROW(3,2,3) UNION ALL SELECT RO...\n                           ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_22", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_24", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_25", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_93_26", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 2, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"ROW\"\nLINE 1: SELECT * FROM t1 WHERE ROW(1,2,3)::ROW(a,b,c); -- ROW\n                                           ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"ROW\"\nLINE 1: SELECT * FROM t1 WHERE ROW(0,2,3)::ROW(a,b,c); -- ROW\n                                           ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 3, 1), (3, 2, 1))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"ROW\"\nLINE 1: SELECT * FROM t1 WHERE ROW(1,2,3)::ROW < ROW(a,b,c); -- ROW\n                                           ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,), (False,), (False,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,), (False,), (False,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,), (False,), (True,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"ROW\"\nLINE 1: SELECT ROW(a,b,c) IN(VALUES ROW(1,2,3), ROW(3,2,1)) FROM t1;...\n                                    ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,), (True,), (True,), (True,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,), (True,), (True,), (True,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_94_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True, False, False, False, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True, False, False, False, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_95_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_95_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_95_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: integer >= text\nLINE 1: SELECT 1 FROM t1 WHERE (a, b) >= (SELECT '1', 1 FROM t1 WHER...\n                                      ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_95_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_95_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_95_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_95_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_96_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xxxxx',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('axyxy',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xyxya',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_96_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('I LOVE SQL          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('I LOVE SQL          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_96_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_97_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_97_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_98_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_98_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_98_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_98_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_98_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_99_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('ABC', 1), ('XYZ', 1), ('ABC', 1), ('XYZ', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('ABC', 1), ('XYZ', 1), ('ABC', 1), ('XYZ', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_10_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('b                                                               ', 'a                                                               ', 'a               ', 'a211            '), ('c                                                               ', 'a                                                               ', 'a               ', 'a311            '), ('d                                                               ', 'a                                                               ', 'a               ', 'a411            '))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('b                                                               ', 'a                                                               ', 'a               ', 'a211            '), ('c                                                               ', 'a                                                               ', 'a               ', 'a311            '), ('d                                                               ', 'a                                                               ', 'a               ', 'a411            '))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_10_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ca311', 'a               '), ('ba211', 'a               '), ('aa111', 'a               '))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('c                                                               a311            ', 'a               '), ('b                                                               a211            ', 'a               '), ('a                                                               a111            ', 'a               '))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_10_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ca311', 'a               ', 'c311            '), ('ba211', 'a               ', 'c211            '), ('aa111', 'a               ', 'c111            '))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('c                                                               a311            ', 'a               ', 'c311            '), ('b                                                               a211            ', 'a               ', 'c211            '), ('a                                                               a111            ', 'a               ', 'c111            '))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_10_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ca', 'a               ', 'a311            ', 'c311            '), ('ba', 'a               ', 'a211            ', 'c211            '), ('aa', 'a               ', 'a111            ', 'c111            '))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('c                                                               a                                                               ', 'a               ', 'a311            ', 'c311            '), ('b                                                               a                                                               ', 'a               ', 'a211            ', 'c211            '), ('a                                                               a                                                               ', 'a               ', 'a111            ', 'c111            '))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_10_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('9797', 'a               ', 'a               '), ('9797', 'a               ', 'a               '), ('9797', 'a               ', 'a               '), ('9797', 'a               ', 'a               '))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function ord(text) does not exist\nLINE 1: SELECT concat(ord(min(b)::text), ord(max(b)::text)), min(b),...\n                      ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_11_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3, 50), (1, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3, 50), (1, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_11_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3, 50), (1, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3, 50), (1, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_12_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1000, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1000, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_12_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1000, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1000, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_12_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 25, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 25, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_12_24", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_12_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (1, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (2, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (3, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (4, '66666666666666666666', 'filler                                                                                                                                                                                                  '), (5, '77777777777777777777', 'filler                                                                                                                                                                                                  '), (6, '77777777777777777777', 'filler                                                                                                                                                                                                  '), (7, '77777777777777777777', 'filler                                                                                                                                                                                                  '), (8, '77777777777777777777', 'filler                                                                                                                                                                                                  '), (9, '77777777777777777777', 'filler                                                                                                                                                                                                  '))", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_14_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"data\" is of type bytea but expression is of type text\nLINE 1: UPDATE t1 SET data = repeat('a', 18*1024); -- REPEAT\n                             ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"data\" is of type bytea but expression is of type text\nLINE 1: UPDATE t1 SET data = repeat('c', 17*1024); -- REPEAT\n                             ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"SET\"\nLINE 1: INSERT INTO t1 SET data = repeat('a', 18*1024); -- REPEAT\n                       ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_14_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((17408,), (17408,), (18432,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((17408,), (17408,), (18432,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_15_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1293840000.000000'), Decimal('0.000000'), 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1293840000.000000'), Decimal('0.000000'), 0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_15_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_15_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_16_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('postgres', 'postgres'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('postgres', 'postgres'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "postgresql_17_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('6131',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function encode(text, unknown) does not exist\nLINE 1: SELECT encode( concat(regexp_instr( 'a', 'a' )), 'hex' );\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 2}
{"sql_id": "postgresql_17_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function regexp_instr(unknown, integer) does not exist\nLINE 1: SELECT regexp_instr( 'a', 1 ); -- REGEXP_INSTR\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((7,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_22", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((7,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_28", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_29", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_30", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_31", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_17_32", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_18_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('XXX',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Xaaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('XXXx',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Xaax',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_18_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid regular expression option: \"1\"\nHINT:  If you meant to use regexp_replace() with a start parameter, cast the fourth argument to integer explicitly.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type integer: \"g\"\nLINE 1: ... regexp_replace( 'aaabbccbbddaa', 'b+', 'X', '1', 'g' ); -- ...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type integer: \"g\"\nLINE 1: ...ELECT regexp_replace( 'aaabbccbbddaa', 'b+', 'X', 'g', 1); -...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaa<bb>ccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaabbcc<$1>ddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaabbccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaabbccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaxccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type integer: \"g\"\nLINE 1: ... regexp_replace( 'aaabbccbbddaa', 'b+', 'x', '1', 'g' ); -- ...\n                                                             ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaax',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type integer: \"g\"\nLINE 1: SELECT regexp_replace( 'aaab', 'b', 'x', '1', 'g' ); -- REGE...\n                                                      ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaxccc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type integer: \"g\"\nLINE 1: SELECT regexp_replace( 'aaabccc', 'b', 'x', '1', 'g' ); -- R...\n                                                         ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aXcXdX',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('abcXdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid regular expression option: \"2\"\nHINT:  If you meant to use regexp_replace() with a start parameter, cast the fourth argument to integer explicitly.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_18_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('XXaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid regular expression option: \"2\"\nHINT:  If you meant to use regexp_replace() with a start parameter, cast the fourth argument to integer explicitly.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_19_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_19_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_19_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type integer: \"b\"\nLINE 1: SELECT length(regexp_replace( repeat('a', 'b'), 'a', 'b' ));...\n                                                  ^\n", "exec_able": false}}, "TP": 2, "FP": 3, "FN": 1}
{"sql_id": "postgresql_19_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_19_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((16384,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((16384,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_19_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('b',), ('c',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('$1',), ('$1',), ('$1',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_19_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_20_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_20_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_20_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_20_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_21_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1-1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_21_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 1, 'one'), (2, 1, 'one'), (4, 2, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 1, 'one'), (2, 1, 'one'), (4, 2, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_22_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type timestamp: \"01-01:02\"\nLINE 1: SELECT LEAST(CAST('01-01-01' AS TIMESTAMP), '01-01:02'); -- ...\n                                                    ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_22_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(2001, 12, 10),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2001, 12, 10),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_22_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_23_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('0.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('0.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 1}
{"sql_id": "postgresql_23_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 5, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1981, 7, 1, 0, 0, 9, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1981, 7, 1, 0, 0, 9, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_23_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1048989599.000000'), 'Before the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1048989599.000000'), 'Before the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1048991400.000000'), 'Inside the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1048991400.000000'), 'Inside the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1048993200.000000'), 'After the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1048993200.000000'), 'After the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_22", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('-28801.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('-28801.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('-28800.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('-28800.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_24", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('-28799.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('-28799.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_25", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_23_26", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1641052801.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1641052801.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_24_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"resultrowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type bit to bytea\nLINE 1: SELECT encode(a::bytea, 'hex') FROM t1; -- HEX\n                       ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_24_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',), ('31',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type bit to bytea\nLINE 1: SELECT encode(a::bytea, 'hex') FROM t1; -- HEX\n                       ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_24_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('18af7',), ('2b67',), ('1b1fd',), ('1870f',), ('3f3',), ('1b1fd',), ('0',), ('f4633',), ('2b03',), ('f4697',), ('1b1a3',), ('2711',), ('1adb1',), ('1b1a3',), ('10cd37',), ('18af7',), ('6f',), ('f468d',), ('2b5d',), ('3e9',), ('277f',), ('2b5d',), ('10f05f',), ('f69bf',), ('10f3e3',), ('b',), ('2711',), ('6f',), ('457',), ('65',), ('457',), ('1',), ('44d',), ('1ae15',), ('10f447',), ('3f3',), ('2711',), ('1b199',))", "rowcount": 38, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type bit to bytea\nLINE 1: SELECT encode(min(a::bytea), 'hex') FROM t1;\n                           ^\n", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "postgresql_24_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('277f',), ('10cd2d',), ('271b',), ('10f3e3',), ('a7dcb3',), ('1b1a3',), ('9a4431',), ('2775',), ('f424b',), ('9a216d',), ('18af7',), ('10c94f',), ('9a2109',), ('18af7',), ('277f',), ('10f055',), ('9a487d',), ('f424b',), ('a7d92f',), ('9a443b',), ('3e9',), ('10c8eb',), ('277f',), ('9a2177',), ('a7dcb3',), ('10c8eb',), ('10c945',), ('a98a63',), ('9a1d8f',), ('f6d39',), ('9a2113',), ('a986d5',), ('2711',), ('10cd37',), ('a7dcb3',), ('98c183',), ('10eff1',), ('f424b',))", "rowcount": 38, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type bit to bytea\nLINE 1: SELECT encode(min(b::bytea), 'hex') FROM t1;\n                           ^\n", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "postgresql_24_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('18af7', '18af7', '277f', '277f'), ('2b67', '2b67', '10cd2d', '10cd2d'), ('1b1fd', '1b1fd', '271b', '271b'), ('1870f', '1870f', '10f3e3', '10f3e3'), ('3f3', '3f3', 'a7dcb3', 'a7dcb3'), ('1b1fd', '1b1fd', '1b1a3', '1b1a3'), ('0', '0', '9a4431', '9a4431'), ('f4633', 'f4633', '2775', '2775'), ('2b03', '2b03', 'f424b', 'f424b'), ('f4697', 'f4697', '9a216d', '9a216d'), ('1b1a3', '1b1a3', '18af7', '18af7'), ('2711', '2711', '10c94f', '10c94f'), ('1adb1', '1adb1', '9a2109', '9a2109'), ('1b1a3', '1b1a3', '18af7', '18af7'), ('10cd37', '10cd37', '277f', '277f'), ('18af7', '18af7', '10f055', '10f055'), ('6f', '6f', '9a487d', '9a487d'), ('f468d', 'f468d', 'f424b', 'f424b'), ('2b5d', '2b5d', 'a7d92f', 'a7d92f'), ('3e9', '3e9', '9a443b', '9a443b'), ('277f', '277f', '3e9', '3e9'), ('2b5d', '2b5d', '10c8eb', '10c8eb'), ('10f05f', '10f05f', '277f', '277f'), ('f69bf', 'f69bf', '9a2177', '9a2177'), ('10f3e3', '10f3e3', 'a7dcb3', 'a7dcb3'), ('b', 'b', '10c8eb', '10c8eb'), ('2711', '2711', '10c945', '10c945'), ('6f', '6f', 'a98a63', 'a98a63'), ('457', '457', '9a1d8f', '9a1d8f'), ('65', '65', 'f6d39', 'f6d39'), ('457', '457', '9a2113', '9a2113'), ('1', '1', 'a986d5', 'a986d5'), ('44d', '44d', '2711', '2711'), ('1ae15', '1ae15', '10cd37', '10cd37'), ('10f447', '10f447', 'a7dcb3', 'a7dcb3'), ('3f3', '3f3', '98c183', '98c183'), ('2711', '2711', '10eff1', '10eff1'), ('1b199', '1b199', 'f424b', 'f424b'))", "rowcount": 38, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type bit to bytea\nLINE 1: SELECT encode(min(a::bytea), 'hex'), encode(max(a::bytea), '...\n                           ^\n", "exec_able": false}}, "TP": 3, "FP": 3, "FN": 0}
{"sql_id": "postgresql_24_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,), ('0',), ('0',), ('0',), ('1',), ('0',))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type bit to bytea\nLINE 1: SELECT encode(min(b::bytea), 'hex') FROM t1 WHERE a = 4;\n                           ^\n", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "postgresql_24_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('b',), ('277f',), ('2b03',), ('2711',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type bit to bytea\nLINE 1: SELECT encode(min(c::bytea), 'hex') FROM t1 WHERE a = 4 AND ...\n                           ^\n", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "postgresql_24_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,), ('0',), ('1',), ('1',), ('0',), ('0',), ('0',), ('1',), ('0',), ('0',))", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type bit to bytea\nLINE 1: SELECT encode(max(b::bytea), 'hex') FROM t1;\n                           ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_24_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_24_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30302c3131',), ('30312c3130',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function encode(bit[], unknown) does not exist\nLINE 1: SELECT ENCODE(array_agg(DISTINCT b), 'hex') FROM t1 GROUP BY...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_25_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31', 100), ('31', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type bit to bytea\nLINE 1: SELECT encode(b::bytea, 'hex'), i2 FROM t1 WHERE (i2>=100 AN...\n                       ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_25_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31', 100), ('31', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type bit to bytea\nLINE 1: SELECT encode(b1::bytea, 'hex'), i2 FROM t2 WHERE (i2>=100 A...\n                        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_25_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30', 100), ('30', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type bit to bytea\nLINE 1: SELECT encode(b2::bytea, 'hex'), i2 FROM t2 WHERE (i2>=100 A...\n                        ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_25_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30302c3131',), ('30312c3130',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function encode(text, unknown) does not exist\nLINE 1: SELECT ENCODE(string_agg(DISTINCT b::text, ''), 'hex') FROM ...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_25_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('3030',), ('3031',), ('3130',), ('3131',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type bit to bytea\nLINE 1: SELECT encode(t2.b::bytea, 'hex') FROM t2;\n                          ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_25_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, '3030'), (3, '3031'), (3, '3130'), (3, '3130'), (2, '3131'))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type bit to bytea\nLINE 1: SELECT a, encode(b::bytea, 'hex') FROM t1 ORDER BY b;\n                          ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_26_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',), ('615c30',), ('6161',), ('62',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',), ('615c30',), ('6161',), ('62',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_26_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61205c30',), ('615c30',), ('615c305c30',), ('61615c30',), ('625c30',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function encode(text, unknown) does not exist\nLINE 1: SELECT encode(concat(a, E'\\\\0'), 'hex') as b FROM t1 ORDER B...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_26_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',), ('615c30',), ('6161',), ('62',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',), ('615c30',), ('6161',), ('62',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_26_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_26_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((65535, 65535))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((65535, 65535))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_26_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_27_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1.7976931348623157e+308,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_28_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_28_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('2025 25', Decimal('2025'), Decimal('2025')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('2025 25', Decimal('2025'), Decimal('2025')))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 3, "FP": 3, "FN": 0}
{"sql_id": "postgresql_28_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.timedelta(days=-1206, seconds=84012),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.timedelta(days=-1206, seconds=84012),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_30_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, 3, 3, 3), (4, 3, 3, 4), (7, 3, 3, 7))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3, 2, 3, 3), (4, 2, 3, 4), (7, 1, 3, 7))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_30_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"f1\" does not exist\nLINE 1: INSERT INTO t1 VALUES(SUBSTRING(f1 FROM 1 FOR 3)); -- SUBSTR\n                                        ^\nDETAIL:  There is a column named \"f1\" in table \"t1\", but it cannot be referenced from this part of the query.\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_30_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('10', 5.0), ('30', 15.0), ('50', 25.0), ('60', 30.0))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: character / integer\nLINE 1: SELECT a, (a / 2) FROM t1 ORDER BY a; -- DIV\n                     ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_31_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"y\" is of type smallint but expression is of type timestamp with time zone\nLINE 1: INSERT INTO t1 VALUES (CURRENT_TIMESTAMP); -- NOW\n                               ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_31_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: smallint = timestamp with time zone\nLINE 1: SELECT CASE WHEN y = CURRENT_TIMESTAMP THEN 1 ELSE 0 END FRO...\n                           ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_31_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: smallint = date\nLINE 1: SELECT * FROM t4 WHERE yyyy = CURRENT_DATE; -- NOW\n                                    ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_31_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('3'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function date_part(unknown, double precision) does not exist\nLINE 1: SELECT DATE_PART('quarter', dbl) - DATE_PART('quarter', LEAS...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_31_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2085,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function pg_catalog.extract(unknown, smallint) does not exist\nLINE 1: SELECT EXTRACT(HOUR FROM GREATEST(y1, y2)) FROM t1;\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "postgresql_32_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, '\"0\"'), (0, '\"0\"'), (2012, '\"2012\"'), (0, '\"0\"'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, '\"0\"'), (0, '\"0\"'), (2012, '\"2012\"'), (0, '\"0\"'))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_33_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1111111111111111111111111111111111111111111111111111111111111111',), ('1000000000000000000000000000000000000000000000000000000000000000',), ('0000000000000000000000000000000000000000000000000000000000000000',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type bit to bytea\nLINE 1: SELECT encode(b::bytea, 'hex') FROM t1 ORDER BY pk1; -- HEX\n                       ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_33_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('0000000000000000',), ('0000000000000001',), ('0000000000000010',), ('0000000000000011',), ('0000000000000100',))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "relation \"t1\" does not exist\nLINE 1: SELECT encode(b::bytea, 'hex') FROM t1 ORDER BY pk1; -- HEX\n                                            ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_34_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('*a*',), ('*b*',), ('*o*',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('*a                   *',), ('*b                   *',), ('*o                   *',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_34_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a                   ', '*a*', 'o                   ', '*o*'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a                   ', '*a                   *', 'o                   ', '*o                   *'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_34_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('-hello-hello-',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('-hello     -hello     -',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_34_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('-hello-hello-',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('-hello     -hello-',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_34_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_34_22", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_34_24", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',), ('62',), ('6220',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',), ('62',), ('6220',))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_35_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_35_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_35_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_35_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1f9480179366f2bf567e1c4b964c1ef029080707',), ('1f9480179366f2bf567e1c4b964c1ef029082020',), ('1f9480179366f2bf567e1c4b964c1ef029087575',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1f9480179366f2bf567e1c4b964c1ef029080707',), ('1f9480179366f2bf567e1c4b964c1ef029082020',), ('1f9480179366f2bf567e1c4b964c1ef029087575',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_35_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_35_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1f9480179366f2bf567e1c4b964c1ef029082020',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1f9480179366f2bf567e1c4b964c1ef029082020',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_35_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_36_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of AND must be type boolean, not type integer\nLINE 1: SELECT CASE WHEN NULL AND 1 THEN 1 ELSE 2 END, CASE WHEN 1 A...\n                                  ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_36_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of AND must be type boolean, not type integer\nLINE 1: SELECT * FROM t1 WHERE CASE WHEN a AND 1 THEN 0 ELSE 1 END; ...\n                                         ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_36_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of AND must be type boolean, not type integer\nLINE 1: SELECT * FROM t1 WHERE CASE WHEN 1 AND a THEN 0 ELSE 1 END; ...\n                                         ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_36_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N'), ('N', 'N', 'Y', 'N', 'N', 'Y', 'Y', 'N', 'N'), ('Y', 'N', 'N', 'N', 'N', 'N', 'N', 'Y', 'N'), ('N', 'N', 'N', 'Y', 'N', 'Y', 'Y', 'N', 'N'), ('N', 'Y', 'N', 'N', 'N', 'N', 'N', 'Y', 'N'), ('N', 'N', 'Y', 'Y', 'N', 'Y', 'Y', 'N', 'Y'), ('N', 'Y', 'Y', 'N', 'N', 'Y', 'Y', 'Y', 'N'), ('Y', 'N', 'N', 'Y', 'N', 'Y', 'Y', 'Y', 'N'), ('Y', 'Y', 'N', 'N', 'Y', 'N', 'N', 'Y', 'N'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y'), ('Y', 'Y', 'N', 'Y', 'Y', 'N', 'Y', 'Y', 'Y', 'Y'), ('N', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'N', 'Y', 'Y'), ('Y', 'Y', 'Y', 'N', 'Y', 'N', 'Y', 'Y', 'Y', 'Y'), ('Y', 'N', 'Y', 'Y', 'Y', 'Y', 'Y', 'N', 'Y', 'Y'), ('Y', 'Y', 'N', 'N', 'Y', 'N', 'N', 'Y', 'N', 'N'), ('Y', 'N', 'N', 'Y', 'Y', 'N', 'Y', 'N', 'Y', 'Y'), ('N', 'Y', 'Y', 'N', 'Y', 'N', 'Y', 'N', 'Y', 'Y'), ('N', 'N', 'Y', 'Y', 'N', 'Y', 'Y', 'N', 'Y', 'Y'))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_37_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(2004, 1, 22),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2004, 1, 22),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1104364800.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_37_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type time: \"1 12:00:00\"\nLINE 1: SELECT EXTRACT(EPOCH FROM CAST('1 12:00:00' AS TIME)) - EXTR...\n                                       ^\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_37_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_37_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_37_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, True))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_37_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_37_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((20070719,), (None,), (20070719,), (None,), (20070719,))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type timestamp without time zone to integer\nLINE 1: SELECT CAST(date_trunc('day', d1) AS INTEGER) FROM t1;\n               ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_37_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('0'), Decimal('0'), Decimal('0.000000')), (None, None, None))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unit \"hour\" not supported for type date\n", "exec_able": false}}, "TP": 3, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('0'), Decimal('0'), Decimal('0.000000')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "unit \"hour\" not supported for type date\n", "exec_able": false}}, "TP": 3, "FP": 1, "FN": 0}
{"sql_id": "postgresql_37_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 3, "FP": 1, "FN": 0}
{"sql_id": "postgresql_37_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function pg_catalog.extract(unknown, unknown) is not unique\nLINE 1: SELECT EXTRACT(HOUR FROM NULL), EXTRACT(MINUTE FROM NULL), E...\n               ^\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 3, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('arowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('arowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_22", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('value=340000',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('value=340000',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_37_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(1, 2, 1, 600000),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(1, 2, 1, 600000),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_38_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function char_length(smallint) does not exist\nLINE 1: SELECT SIGN(CHAR_LENGTH(a) - CHAR_LENGTH(b)) FROM t1; -- STR...\n                    ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_38_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1934,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"year\" does not exist\nLINE 1: ...AST(('{\\\"key_year\\\":1934}')::json->>'key_year' AS YEAR); -- ...\n                                                             ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_38_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1988, '198819881988'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(1988, 1, 1), '198819881988'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_38_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x1988',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type integer to date\nLINE 1: SELECT 'x' || CAST(1988 AS DATE); -- CONCAT\n                      ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_38_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('73800.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1893456000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_38_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(1988, 1, 1, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(1988, 1, 1, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_38_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2025,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "type \"year\" does not exist\nLINE 1: SELECT CAST(TO_DATE('nope', 'DD-MM-YYYY') AS YEAR); -- TO_DA...\n                                                     ^\n", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_38_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_40_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61202020202020202020', 0, 0), ('615c30202020202020', 1, 1), ('615c74202020202020', 1, 1), ('61202020202020202020', 0, 0))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61202020202020202020', 0, 0), ('615c30202020202020', 1, 1), ('615c74202020202020', 1, 1), ('61202020202020202020', 0, 0))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_40_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12', False), ('11', False), ('22', False))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12', False), ('11', False), ('22', False))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_40_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: integer || integer\nLINE 1: EXPLAIN SELECT b,c FROM t1 WHERE b = 1 AND (b || c)::text = ...\n                                                      ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_40_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_40_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_40_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,), (False,), (False,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,), (False,), (False,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_40_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,), (True,), (True,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,), (True,), (True,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_41_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of CASE/WHEN must be type boolean, not type integer\nLINE 1: SELECT COUNT(DISTINCT CASE WHEN f1 THEN 3 ELSE f2 END) FROM ...\n                                        ^\n", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_42_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('0.0.0.1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type inet: \"1\"\nLINE 1: SELECT inet6_ntoa(inet '1'); -- INET6_NTOA, INET_NTOA\n                               ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_42_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_43_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('string ', 'string '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('string 1', 'string '))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 3, "FP": 2, "FN": 0}
{"sql_id": "postgresql_43_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_43_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 256, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 256, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_43_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 256, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 256, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_43_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('0.0.0.1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type inet: \"1\"\nLINE 1: SELECT inet6_ntoa(inet '1'); -- INET6_NTOA, INET_NTOA\n                               ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_44_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type integer: \"\"\nLINE 1: SELECT STRING_AGG(COALESCE(a,''), '') FROM t1;\n                                     ^\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type integer: \"\"\nLINE 1: ...CT STRING_AGG(CASE WHEN a IS NOT NULL THEN a ELSE '' END, ''...\n                                                             ^\n", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of CASE/WHEN must be type boolean, not type integer\nLINE 1: SELECT STRING_AGG(CASE WHEN a THEN CAST(a AS TEXT) ELSE '' E...\n                                    ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_44_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type integer: \"\"\nLINE 1: SELECT COALESCE(a,'') FROM t1 GROUP BY 1; -- COALESCE\n                          ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_44_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function lower(integer) does not exist\nLINE 1: CREATE TABLE t2 AS SELECT LOWER(a) FROM t1; -- LCASE\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function upper(integer) does not exist\nLINE 1: CREATE TABLE t2 AS SELECT UPPER(a) FROM t1; -- UCASE\n                                  ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_44_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_45_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('20202020202020202020',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('20202020202020202020',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('       xxx          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('       xxx          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_45_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('x         ', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x         ', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x         ', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of CASE/WHEN must be type boolean, not type integer\nLINE 1: SELECT CASE WHEN 1 THEN c1 ELSE '' END, CASE WHEN 0 THEN c1 ...\n                         ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_45_18", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \",\"\nLINE 1: SELECT POSITION('', c1), POSITION(c1 IN '') FROM t1; -- POSI...\n                          ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x         ', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_45_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x         ', 'x         '))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_45_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x         ', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function elt(integer, character, unknown) does not exist\nLINE 1: SELECT elt(1,c1,''), elt(1,'',c1) FROM t1; -- ELT\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_45_24", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_45_25", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_46_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 15, 2, 59, 58, 999000, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2001, 1, 15, 2, 59, 58, 999000, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_46_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2004, 12, 12, 22, 30, 59, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2004, 12, 12, 22, 30, 59, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_46_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('2003-01-02 08:11:02+00',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('2003-01-02 08:11:02+00',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_46_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('14',), ('14',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('14',), ('14',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_46_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Thursday (Thu), 1 January (Jan) 2004',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Thursday (THU), 1 January   (Jan) 2004',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('03:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('03:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('01:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('01:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('01 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('01 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('11 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('11 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_47_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2004, 4, 30),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_47_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2004, 4, 30),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_47_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2004, 4, 30),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_47_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Thursday  01 January   2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Thursday 01 January 2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_48_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('3',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('3',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_48_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('$Barney',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_49_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',), ('|teststring\\\\\\\\t|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring                      |',), ('|teststring\\\\\\\\t                   |',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_49_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring                      |',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_49_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('nothing                         ', 32), ('teststring                      ', 32), ('teststring\\\\\\\\t                   ', 32))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('nothing                         ', 7), ('teststring                      ', 10), ('teststring\\\\\\\\t                   ', 13))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_49_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|nothing|',), ('|teststring|',), ('|teststring|',), ('|teststring\\\\\\\\t|',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|nothing                         |',), ('|teststring                      |',), ('|teststring                      |',), ('|teststring\\\\\\\\t                   |',))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_49_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',), ('|teststring|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring                      |',), ('|teststring                      |',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_49_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',), ('|teststring|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring                      |',), ('|teststring                      |',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_49_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',), ('|teststring|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('|teststring                      |',), ('|teststring                      |',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_50_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((\"Let's create some new events from the name of postgres\",))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((\"Let's create some new events from the name of postgres\",))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "postgresql_51_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',), ('',), (None,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',), ('',), (None,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.date(2023, 1, 15),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2023, 1, 15),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_22", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_51_24", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6, 40013), (5, 40008), (4, 40005), (3, 40003), (2, 40002), (1, 40001))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6, 40013), (5, 40008), (4, 40005), (3, 40003), (2, 40002), (1, 40001))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_52_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_52_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_52_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_52_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_53_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"b\" is of type bytea but expression is of type text\nLINE 1: INSERT INTO t VALUES(REPEAT(E'\\\\x0a',1000)); -- REPEAT\n                             ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_53_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_53_18", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_53_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_54_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "invalid input syntax for type bytea\nLINE 1: INSERT INTO t1 VALUES (NULL), ('A\\0\\0\\0BBBBBBBB'::bytea), (L...\n                                       ^\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_54_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,), (12,), (50000,), (50000,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,), (12,), (50000,), (50000,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_55_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('AAAA', 105.0, datetime.date(2003, 3, 1), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('AAAA', 105.0, datetime.date(2003, 3, 1), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_55_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a-4',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a-4',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_55_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a-4.5',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a-4.5',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_55_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a-5',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a-5',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_55_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a-1',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a-1',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_55_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a0',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a0',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_55_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a0.0',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a0.0',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_55_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',), ('a0.0000',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('a0.0000',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_55_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('ab',), ('ab',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('ab',), ('ab',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_55_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1234562',), ('x',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1234562',), ('x',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_55_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('', 'First'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'First'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_56_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"d\" is of type date but expression is of type interval\nLINE 1: INSERT INTO t1 VALUES (NULL + INTERVAL '1 DAY'); -- DATE_ADD\n                               ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_56_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator is not unique: date + unknown\nLINE 1: INSERT INTO t1 VALUES (DATE '2000-01-04' + NULL); -- DATE_AD...\n                                                 ^\nHINT:  Could not choose a best candidate operator. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_56_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"d\" is of type date but expression is of type interval\nLINE 1: INSERT INTO t1 VALUES (NULL + INTERVAL '1 DAY'); -- DATE_ADD\n                               ^\nHINT:  You will need to rewrite or cast the expression.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_56_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_56_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False, datetime.time(0, 0)))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"ts\"\nLINE 1: ...) = CURRENT_DATE + INTERVAL '1' DAY AS is_tomorrow, TIME(ts)\n                                                                    ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_57_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function to_days(date) does not exist\nLINE 1: SELECT * FROM t1 WHERE to_days(mydate) IS NULL;\n                               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_57_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 2, 1, None, None, None), (1, 3, 1, None, None, None), (2, 1, 2, None, None, None), (2, 3, 2, None, None, None), (3, 1, 3, None, None, None), (3, 2, 3, None, None, None))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \")\"\nLINE 3: LEFT JOIN (t2 outr2 JOIN t2 outr JOIN t1) ON (outr.pk = t3.p...\n                                                ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_57_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \")\"\nLINE 3: JOIN (t2 outr2 JOIN t2 outr JOIN t1) \n                                           ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_58_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('abc',), ('abcd',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_58_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('abc',), ('abcd',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('abc',), ('abcd',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_59_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((10.0, 10.000000000000002, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((4.342944819032518, 2.718281828459045, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_59_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('3.0000000000000000'), Decimal('3.9068905956085185')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('0.3333333333333333'), Decimal('0.2559580248098155'), None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_59_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((10.0, 16.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('10.0000000000000000'), 16.0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_59_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_59_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_59_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_59_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('http://www.foo.com/',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('http://www.foo.com/',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_59_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-2, Decimal('2'), -2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-2, Decimal('2'), -2))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_59_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, Decimal('5'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, Decimal('5'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_59_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-32.0, Decimal('2135987035920910081237100813796390160618078741685240921940550748740445664954564698653747478265824'), -32.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "bigint out of range\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_60_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('-4939092'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('-4939092'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "postgresql_60_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('6.538904378082472052E-346'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "postgresql_60_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_60_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_60_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((9223372036854774784,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((9223372036854774784,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_60_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-9223372036854775808,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-9223372036854775808,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_60_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of WHERE must be type boolean, not type integer\nLINE 1: SELECT * FROM t0 WHERE CAST(COALESCE(t0.c0, -1) AS INTEGER);...\n                               ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_60_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "argument of WHERE must be type boolean, not type integer\nLINE 1: SELECT * FROM t0 WHERE CAST(COALESCE(t0.c0, -1) AS INTEGER);...\n                               ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_60_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type bigint to boolean\nLINE 1: SELECT CAST(COALESCE(t0.c0, -1) AS BOOLEAN) FROM t0; -- COAL...\n               ^\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_60_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_61_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('0cc175b9c0f1b6a831c399e269772661', '3063633137356239633066316236613833316333393965323639373732363631'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function digest(unknown, unknown) does not exist\nLINE 1: SELECT md5('a'), encode(digest('a', 'md5'), 'hex'); -- MD5, ...\n                                ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "postgresql_61_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_61_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('5d41402abc4b2a76b9719d911017c592',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5d41402abc4b2a76b9719d911017c592',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_61_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5d41402abc4b2a76b9719d911017c592',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_61_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((16,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((16,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 3, "FP": 1, "FN": 0}
{"sql_id": "postgresql_61_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_61_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_61_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_62_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('255.255.1.255', '0.0.1.255'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('172.17.0.1', '172.17.0.4'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_62_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_62_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_62_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1,), (-2,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function inet_ntoa(integer) does not exist\nLINE 1: SELECT MIN(a) FROM t1 GROUP BY inet_ntoa(a);\n                                       ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "postgresql_62_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,), (1,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "LEAST types integer and character varying cannot be matched\nLINE 1: SELECT LEAST(a, (SELECT b FROM t1 LIMIT 1)) FROM t1 UNION SE...\n                        ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_62_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,), (2,), (1,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "GREATEST types integer and character varying cannot be matched\nLINE 1: SELECT DISTINCT GREATEST(a, (SELECT b FROM t1 LIMIT 1)) FROM...\n                                    ^\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_63_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, 0, 3, 1, 3, 3, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, 0, 3, 1, 3, 3, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_63_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, 1, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function bit_count(integer) does not exist\nLINE 1: SELECT 1 | (1+1), 5 & 3, bit_count(7); -- BIT_COUNT\n                                 ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_63_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1, 7, 3), (2, None, None, None), (3, 3, 7, 3))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function bit_count(integer) does not exist\nLINE 1: SELECT t1.a, t2.a, t2.b, bit_count(t2.b) FROM t1 LEFT JOIN t...\n                                 ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_64_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('000',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('000',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_64_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(3, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function make_date(integer, integer) does not exist\nLINE 1: SELECT make_date(03, 1); -- MAKEDATE\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1997, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(1997, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_64_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1996, 12, 31, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function make_date(integer, integer) does not exist\nLINE 1: SELECT MAKE_DATE(1997, 1); -- MAKEDATE\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_64_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(9999, 12, 31, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function make_date(integer, integer) does not exist\nLINE 1: SELECT make_date(9999, 365); -- MAKEDATE\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "year 10000 is out of range", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function make_date(integer, integer) does not exist\nLINE 1: SELECT make_date(9999, 366); -- MAKEDATE\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(100, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function make_date(integer, integer) does not exist\nLINE 1: SELECT make_date(100, 1); -- MAKEDATE\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_64_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1997, 12, 30, 22, 58, 57, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"1997-12-31 23:59:59.000001\" does not exist\nLINE 1: SELECT \"1997-12-31 23:59:59.000001\" - interval '1 day 1 hour...\n               ^\n", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_64_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1, seconds=82738),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"1997-12-31 23:59:59.999999\" does not exist\nLINE 1: SELECT (\"1997-12-31 23:59:59.999999\" - interval '1 day 1 hou...\n                ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_64_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 0, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"01:00:00.999999\" does not exist\nLINE 1: SELECT (\"01:00:00.999999\"::time - \"02:00:00.999998\"::interva...\n                ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_64_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(1, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"02:01:01.999999\" does not exist\nLINE 1: SELECT (\"02:01:01.999999\"::time - \"01:01:01.999999\"::interva...\n                ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_64_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 59, 59, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('31708799.999999'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_64_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(22, 58, 57, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('169137.999999'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_64_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('883526400.000000'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_64_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 59, 59, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('-0.000001'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_64_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 59, 59, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('-0.000001'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "postgresql_65_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_65_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.time(20, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(20, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_65_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 1, 1, 1, 999999, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 1, 1, 1, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_65_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 10, 1, 1, 1, 1, 1, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2001, 10, 1, 1, 1, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_65_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 20, 1, 1, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 20, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_65_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 0, 0, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_65_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('31'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('31'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_65_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:59:59.000001',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(23, 59, 59, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_65_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0), None, None, datetime.time(0, 0)), (datetime.time(1, 1, 1, 999999), datetime.time(23, 58, 58), datetime.time(0, 1, 2), datetime.time(23, 58, 59, 999999)), (datetime.time(22, 58, 58, 1), datetime.time(0, 1, 2), datetime.time(23, 58, 58), datetime.time(22, 59)), (None, None, None, None))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: time without time zone - timestamp without time zone\nLINE 1: ...EPOCH FROM t3 - t2) AS eee, EXTRACT(EPOCH FROM t2 - t4) AS r...\n                                                             ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_65_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2003, 1, 2, 10, 11, 12, 1200, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2003, 1, 2, 10, 11, 12, 1200, tzinfo=datetime.timezone.utc),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_65_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(0, 0), datetime.time(0, 0)))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('86400.000000'), datetime.time(0, 0)))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 4, "FN": 1}
{"sql_id": "postgresql_65_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_65_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_66_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:42:12',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "cannot cast type time without time zone to numeric\nLINE 1: SELECT CAST(time '23:42:12' AS DECIMAL); -- TIME\n               ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "postgresql_66_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function sec_to_time(integer) does not exist\nLINE 1: SELECT SEC_TO_TIME(86399)=TIME '23:59:59'; -- SEC_TO_TIME, T...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_66_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function make_time(double precision, double precision, integer) does not exist\nLINE 1: SELECT make_time(floor(86399/3600), floor(mod(86399, 3600)/6...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "postgresql_66_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function sec_to_time(integer) does not exist\nLINE 1: SELECT EXTRACT(HOUR FROM SEC_TO_TIME(86399)) || ':' || EXTRA...\n                                 ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 2}
{"sql_id": "postgresql_66_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_66_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "syntax error at or near \"TIME\"\nLINE 1: SELECT EXTRACT(TIME FROM MAKE_TIME(1,0,1)) = CAST('01:00:01'...\n                       ^\n", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_66_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_67_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a', 1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "postgresql_67_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 0, 0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"b\" does not exist\nLINE 1: SELECT coalesce(\"b\", \"a\", NULL), coalesce(1, 0, NULL)::numer...\n                        ^\n", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "postgresql_67_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 2, 2, 2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a', 0, Decimal('0.0'), Decimal('0')))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_67_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'one'), (2, 'one'), (4, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function elt(integer, unknown, unknown) does not exist\nLINE 1: SELECT one.id, elt(two.val, 'one', 'two') FROM t1 one, t2 tw...\n                       ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_67_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'one'), (2, 'one'), (4, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function elt(integer, unknown, unknown) does not exist\nLINE 1: SELECT one.id, elt(two.val, 'one', 'two') \n                       ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_68_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "postgresql_68_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "column \"col\" does not exist\nLINE 1: SELECT CONCAT('\"',STRING_AGG(quote_ident(col), '\";' ORDER BY...\n                                                 ^\n", "exec_able": false}}, "TP": 0, "FP": 9, "FN": 2}
{"sql_id": "postgresql_68_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "postgresql_68_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('</a>',), ('</a>..........................',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('</a>',), ('</a>..........................',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 3, "FN": 3}
{"sql_id": "postgresql_69_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, True, True, False, False, True, -1, 1, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "function strcmp(unknown, unknown) does not exist\nLINE 1: SELECT 0=0,1>0,1>=1,1<0,1<=0,1<>0,strcmp('abc','abcd'),strcm...\n                                          ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "postgresql_69_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('abc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('abc',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "operator does not exist: integer <=> unknown\nLINE 1: SELECT (12 % 1) <=> null as \"col\"; -- MOD\n                        ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('0.0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('0.0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('0.0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('0.0'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_69_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_0", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('5',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('11',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('11',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('5.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('5.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('18446744073709551615'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('18446744073709551615'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": 0, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_27", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "postgresql_70_28", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}

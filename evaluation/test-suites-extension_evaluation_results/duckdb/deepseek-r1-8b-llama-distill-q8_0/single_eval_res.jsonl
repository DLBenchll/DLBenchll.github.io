{"sql_id": "duckdb_1_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 10))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_1_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 10), (2, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 10), (2, 20))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_1_8", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, 20))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, 20))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_1_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_100_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name to_integer does not exist!\nDid you mean \"to_minutes\"?\nLINE 1: INSERT INTO t1 (ts) VALUES (TO_INTEGER(GET_UTF8_TIMESTAMP('2002-10-...\n                                    ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_100_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: INSERT INTO t1 (ts) VALUES (Unix_timestamp('2002-10-27 02:00'));\n                                    ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1035680400, datetime.datetime(2002, 10, 27, 9, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)), (1035684000, datetime.datetime(2002, 10, 27, 10, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)), (1035687600, datetime.datetime(2002, 10, 27, 11, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name from_unixtime does not exist!\nDid you mean \"from_hex\"?\nLINE 1: SELECT ts, from_unixtime(ts) FROM t1;\n                   ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\"2001-01-01 00:00:00\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_100_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((730851,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"2001-01-01 00:00:00\" not found in FROM clause!\nLINE 1: SELECT EXTRACT(DAY FROM CAST(\"2001-01-01 00:00:00\" AS TIMESTAMP))\n                                     ^", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "duckdb_100_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((730851,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT date(\"2001-01-01 00:00:00\")\n               ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_100_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name datetime does not exist!\nDid you mean \"datediff\"?\nLINE 1: SELECT DATETIME(\"2007-12-31 23:59:59\") - DATET...\n               ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_100_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name diff does not exist!\nDid you mean \"fdiv\"?\nLINE 1: SELECT DIFF(\"2000:01:01 00:00:00\", \"2000:01:01...\n               ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_100_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('40 59 2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_100_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:59:59',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"2003-12-31 23:59:59\" not found in FROM clause!\nLINE 1: SELECT EXTRACT(HMS FROM \"2003-12-31 23:59:59\");\n                                ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_100_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 1, 1, 11, 59, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "duckdb_100_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2003, 1, 3, 0, 0, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_add does not exist!\nDid you mean \"date_add\"?\nLINE 1: SELECT time_add(\"2003-01-02 23:59:59\", \"minute...\n               ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_100_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_diff does not exist!\nDid you mean \"date_diff\"?\nLINE 1: SELECT TIME_DIFF(MONTH, \"2003-02-01 23:59:59\",...\n               ^", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "duckdb_100_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((63426758399.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "duckdb_100_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1447459199.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_101_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',), ('612020',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',), ('612020',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_101_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((13,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((17,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_101_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('41', 'a'), ('4100', 'b'), ('41', 'c'), ('4100', 'd'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('41', 'a'), ('4100', 'b'), ('41', 'c'), ('4100', 'd'))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_101_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_102_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "duckdb_102_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_102_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: INSERT INTO t1 VALUES (DATE(CURRENT_TIMESTAMP()), 2);\n                               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "duckdb_102_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_102_6", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_102_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t1\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: CREATE TABLE t1 AS SELECT DATE() AS f1;\n                                  ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_102_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 2}
{"sql_id": "duckdb_102_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"last_day(STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tlast_day(TIMESTAMP) -> DATE\n\tlast_day(TIMESTAMP WITH TIME ZONE) -> DATE\n\tlast_day(DATE) -> DATE\n\nLINE 1: SELECT 1 FROM (SELECT last_day('0000-00-00')) AS a;\n                              ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_102_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_2_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'x'), (2, 'xx'), (3, 'xxx'), (4, 'xxxx'), (5, 'xxxxx'), (6, 'xxxxxx'), (7, 'xxxxxxx'), (8, 'xxxxxxxx'), (9, 'xxxxxxxxx'), (10, 'xxxxxxxxxx'))", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "duckdb_3_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('NO',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"AS\"", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_39_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 2}
{"sql_id": "duckdb_39_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,), (3,), (1,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 2}
{"sql_id": "duckdb_4_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a=9223372036854775807 AND \u2502\\n\u2502        a IS NOT NULL      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'ltrim(BIGINT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tltrim(VARCHAR) -> VARCHAR\n\tltrim(VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: ... t1 WHERE a = 9223372036854775807 AND (LTRIM(a) = RTRIM(a)) = b;\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_4_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a=9223372036854775806 AND \u2502\\n\u2502        a IS NOT NULL      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'trim(BIGINT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\ttrim(VARCHAR) -> VARCHAR\n\ttrim(VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: ...M t1 WHERE a = 9223372036854775806 AND TRIM(a) = b;\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a=9223372036854775805 AND \u2502\\n\u2502        a IS NOT NULL      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'trim(BIGINT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\ttrim(VARCHAR) -> VARCHAR\n\ttrim(VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: ...M t1 WHERE a = 9223372036854775805 AND TRIM(a) = b;\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             1             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (\"trim\"(CAST(a AS VARCHAR)\u2502\\n\u2502           ) = b)          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502   a=0 AND a IS NOT NULL   \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'trim(BIGINT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\ttrim(VARCHAR) -> VARCHAR\n\ttrim(VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: ...PLAIN SELECT 1 FROM t1 WHERE a = 0 AND TRIM(a) = b;\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \")\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_4_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_4_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_6_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('3A',), ('3B',), ('3C',), ('3D',), ('3E',), ('3F',), ('40',), ('5B',), ('5C783543',), ('5D',), ('5E',), ('5F',), ('60',), ('7B',), ('7C',), ('7D',), ('7E',))", "rowcount": 17, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "duckdb_6_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t1\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "duckdb_6_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"head\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"head\" already exists!", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 2}
{"sql_id": "duckdb_6_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"tail\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Duplicate alias \"t1\" in query!", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name IGNORE does not exist!\nLINE 1: UPDATE IGNORE t1 SET a = UNHEX(code);\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_6_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'octet_length(VARCHAR)'. You might need to add explicit type casts.\n\tCandidate functions:\n\toctet_length(BLOB) -> BIGINT\n\toctet_length(BIT) -> BIGINT\n\nLINE 1: ...ECT COUNT(*) FROM t1 WHERE a != '' AND OCTET_LENGTH(a) = 2;\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_6_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_6_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Type with name BYTE does not exist!", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_7_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc', 2), ('\u07f0', 1), ('\u02ae', 1), ('', 0), ('50515253', 8), ('31', 2), ('h31', 3), ('2805', 4))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12345678900987654321', 20), ('h\u04bc', 2), ('\u07f0', 1), ('\u02ae', 1), ('', 0), ('50515253', 8), ('31', 2), ('h31', 3), ('2805', 4))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_7_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc', '                  h\u04bc'), ('\u07f0', '                   \u07f0'), ('\u02ae', '                   \u02ae'), ('', '                    '), ('50515253', '            50515253'), ('31', '                  31'), ('h31', '                 h31'), ('2805', '                2805'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \" \" not found in FROM clause!\nCandidate bindings: \"h.c1\"\nLINE 1: SELECT c1, LPAD(c1, 20, \" \") FROM h;\n                                ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_7_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12345678900987654321', '12345678900987654321'), ('h\u04bc', 'h\u04bc525252525252525252'), ('\u07f0', '\u07f05252525252525252525'), ('\u02ae', '\u02ae5252525252525252525'), ('', '52525252525252525252'), ('50515253', '50515253525252525252'), ('31', '31525252525252525252'), ('h31', 'h3152525252525252525'), ('2805', '28055252525252525252'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"52\" not found in FROM clause!\nCandidate bindings: \"h.c1\"\nLINE 1: SELECT c1, RPAD(c1, 20, \"52\") FROM h;\n                                ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_7_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_7_10", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_7_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_7_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('h',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_7_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"%31%\" not found in FROM clause!\nCandidate bindings: \"h.c1\"\nLINE 1: SELECT c1 LIKE \"%31%\" FROM h;\n                       ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_7_23", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('h315253', 'h315253'), ('h31525352', 'h31525352'), ('h3152535252', 'h3152535252'), ('h315253525252', 'h315253525252'), ('52h315253', '52h315253'), ('5252h315253', '5252h315253'), ('525252h315253', '525252h315253'), ('   h315253   ', 'h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('h315253', 'h315253'), ('h31525352', 'h31525352'), ('h3152535252', 'h3152535252'), ('h315253525252', 'h315253525252'), ('52h315253', '52h315253'), ('5252h315253', '5252h315253'), ('525252h315253', '525252h315253'), ('   h315253   ', 'h315253'))", "rowcount": 8, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_71_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1973, 11, 30, 5, 33, 9, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_to_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TO_TIMESTAMP(123456789);\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_71_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1977, 6, 8, 5, 44, 50, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name datetime does not exist!\nDid you mean \"datediff\"?\nLINE 1: SELECT DateTime(234567890);\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 8, 0, 1, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name from_unixtime does not exist!\nDid you mean \"from_hex\"?\nLINE 1: select from_unixtime(1);\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name get_unix_timestamp does not exist!\nDid you mean \"get_current_timestamp\"?\nLINE 1: select get_unix_timestamp(datetime_from_unix(1...\n               ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "duckdb_71_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((234567890.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 2}
{"sql_id": "duckdb_71_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2179098000.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"(\"", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "duckdb_71_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2149376400.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT UNIX_TIMESTAMP('2038-02-10 01:00:00');\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3600.0, 3601.0, 2147487247.0, 2147487248.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unix_timestamp does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: select unix_timestamp('1970-01-01 01:00:00'),u...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((32536771199, datetime.datetime(3001, 1, 19, 7, 59, 59, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)), (325367711990, '12280-06-28 23:59:50+00'), (325367711991, '12280-06-28 23:59:51+00'), (325367711992, '12280-06-28 23:59:52+00'), (325367711993, '12280-06-28 23:59:53+00'), (325367711994, '12280-06-28 23:59:54+00'), (325367711995, '12280-06-28 23:59:55+00'), (325367711996, '12280-06-28 23:59:56+00'), (325367711997, '12280-06-28 23:59:57+00'), (325367711998, '12280-06-28 23:59:58+00'), (325367711999, '12280-06-28 23:59:59+00'))", "rowcount": 11, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name unixjack does not exist!\nDid you mean \"union_extract\"?\nLINE 1: SELECT a, UNIXjack(a) FROM t1;\n                  ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_71_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((32536803599.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name to_unixtime does not exist!\nDid you mean \"to_minutes\"?\nLINE 1: SELECT TO_UNIXTIME(\"3001-01-19 08:59:59\");\n               ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_72_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', \"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502   (concat(x, x) = 'XX')   \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t             \u2502\\n\u2502                           \u2502\\n\u2502       Projections: x      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\"))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_74_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"2000\" not found in FROM clause!\nCandidate bindings: \"t1.f1\"\nLINE 1: ...t into t1(f1) select coalesce(max(f1), \"2000\") from t1;\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 1}
{"sql_id": "duckdb_74_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((13,), (13,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"13_characters\" not found in FROM clause!\nCandidate bindings: \"t1.c\"\nLINE 1: ...(SELECT SUM(LENGTH(c)) FROM t1 WHERE c=\"13_characters\") AS length_sum;\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_74_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_74_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_74_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 'abc-def', '6162632D646566'), (2, \"'(),-.\", '2728292C2D2E'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 'abc-def', '6162632D646566'), (2, \"'(),-.\", '2728292C2D2E'))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_74_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'abc-def', '6162632D646566'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"abc-def\" not found in FROM clause!\nCandidate bindings: \"t1.a\"\nLINE 1: SELECT *, HEX(a) FROM t1 WHERE a = \"abc-def\";\n                                           ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_75_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Constraint Error: Duplicate key \"pk: 1\" violates primary key constraint. If this is an unexpected constraint violation please double check with the known index limitations section in our documentation (https://duckdb.org/docs/sql/indexes).", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "duckdb_75_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 12, 12), (2, 4, 4))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name byte_length does not exist!\nDid you mean \"bit_length\"?\nLINE 1: SELECT pk, BYTE_LENGTH(tx), LENGTH(tx) FROM t1;\n                   ^", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_76_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Constraint Error: Duplicate key \"a: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\" violates unique constraint. If this is an unexpected constraint violation please double check with the known index limitations section in our documentation (https://duckdb.org/docs/sql/indexes).", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"ignore\"", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_76_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 110, 210, 110, 210))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 110, 210, 110, 210))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_76_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 1: insert into t1 values(1, \"a\", \"a\", NOW()), (1, \"b\", \"b\", NOW());\n                                 ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_77_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(12, 22, 22), datetime.date(1997, 1, 1), datetime.datetime(1997, 1, 2, 0, 0), '1997-01-01 12:22:22', 3, 7, 5))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \" \" not found in FROM clause!\nCandidate bindings: \"t1.time\"\nLINE 1: ...1.time, t1.date, t1.timestamp, date || \" \", time, t1.quarter + t1.week, t1.yea...\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_78_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"|\" not found in FROM clause!\nCandidate bindings: \"t1.a\"\nLINE 1: select concat(\"|\",a,\"|\"), concat(\"|\",b,\"|\") from t1;\n                      ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_78_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_78_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_79_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Sun', 'Sunday'), (datetime.date(2006, 1, 2), 'Mon', 'Monday'), (datetime.date(2006, 1, 3), 'Tue', 'Tuesday'), (datetime.date(2006, 1, 4), 'Wed', 'Wednesday'), (datetime.date(2006, 1, 5), 'Thu', 'Thursday'), (datetime.date(2006, 1, 6), 'Fri', 'Friday'), (datetime.date(2006, 1, 7), 'Sat', 'Saturday'))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Sun', '0'), (datetime.date(2006, 1, 2), 'Mon', '1'), (datetime.date(2006, 1, 3), 'Tue', '2'), (datetime.date(2006, 1, 4), 'Wed', '3'), (datetime.date(2006, 1, 5), 'Thu', '4'), (datetime.date(2006, 1, 6), 'Fri', '5'), (datetime.date(2006, 1, 7), 'Sat', '6'))", "rowcount": 7, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_79_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2006, 1, 1), 'Jan', 'January'), (datetime.date(2006, 2, 1), 'Feb', 'February'), (datetime.date(2006, 3, 1), 'Mar', 'March'), (datetime.date(2006, 4, 1), 'Apr', 'April'), (datetime.date(2006, 5, 1), 'May', 'May'), (datetime.date(2006, 6, 1), 'Jun', 'June'), (datetime.date(2006, 7, 1), 'Jul', 'July'), (datetime.date(2006, 8, 1), 'Aug', 'August'), (datetime.date(2006, 9, 1), 'Sep', 'September'), (datetime.date(2006, 10, 1), 'Oct', 'October'), (datetime.date(2006, 11, 1), 'Nov', 'November'), (datetime.date(2006, 12, 1), 'Dec', 'December'))", "rowcount": 12, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 2}
{"sql_id": "duckdb_79_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1 Mon 01',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date_format does not exist!\nDid you mean \"date_part\"?\nLINE 1: SELECT date_format('2001-01-01', '%w %a %W');\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_79_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2001-01-01 00:00:00 Jan 00',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date_format does not exist!\nDid you mean \"date_part\"?\nLINE 1: SELECT DATE_FORMAT('2001-01-01', '%c %b %M');\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_79_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Mar AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_8_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"ae\"", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "duckdb_8_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: select STRCMP('ss',''),STRCOMP('', 'ss'),STRCO...\n               ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_8_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: zero-length delimited identifier at or near \"\"\"\"", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 2}
{"sql_id": "duckdb_8_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, -1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted string at or near \"');\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, -1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: zero-length delimited identifier at or near \"\"\"\"", "exec_able": false}}, "TP": 0, "FP": 5, "FN": 1}
{"sql_id": "duckdb_8_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1, 1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRCMP('af',''),STRCOMP('', 'a'),STRCOM...\n               ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_8_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1, 1, 1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcompare does not exist!\nDid you mean \"strptime\"?\nLINE 1: select strcompare('u','a'), strcompare('u', ''...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "duckdb_8_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, -1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strcmp does not exist!\nDid you mean \"strpos\"?\nLINE 1: SELECT STRcmp('s', 'a'), STRcmp('a', 'x');\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 1, False, True), (1, 0, True, False))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"(\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_8_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('oe',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"oe\" not found in FROM clause!\nCandidate bindings: \"t1.s1\"\nLINE 1: ...ct * from t1 where length(s1)=2 and s1=\"oe\";\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_80_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"x\" not found in FROM clause!\nLINE 1: SELECT LPAD(NULL, 0, \"x\") AS result;\n                             ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_80_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_80_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 1: SELECT LPad(\"a\", 2, \"x\") AS result;\n                    ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_80_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 1: SELECT LPAD(\"a\", NULL, NULL) AS result;\n                    ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_80_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name pad does not exist!\nDid you mean \"lpad\"?\nLINE 1: SELECT PAD('a', 5, NULL) AS result;\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_80_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: zero-length delimited identifier at or near \"\"\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_80_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_80_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('xx123',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name pad_left does not exist!\nDid you mean \"lpad\"?\nLINE 1: SELECT pad_left(\"123\", 5, \"x\");\n               ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_80_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('xyxya',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 1: SELECT LPAD(\"a\", 5, \"xy\");\n                    ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_80_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('          I LOVE SQL',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"I LOVE SQL\" not found in FROM clause!\nLINE 1: SELECT LPAD(\"I LOVE SQL\", 20, \" \")\n                    ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_80_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"I LOVE SQL in the morning\" not found in FROM clause!\nLINE 1: SELECT LPAD(' ', \"I LOVE SQL in the morning\", 20)\n                         ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_81_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((6,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 1: INSERT INTO t1 VALUES(\"a\" * 1024, 0), (\"b\" * 1024, 1), (\"c\" *...\n                              ^", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "duckdb_81_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((25165824,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((25165824,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_82_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2), datetime.date(2008, 1, 2)), (datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1), datetime.date(2008, 1, 1)), (datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3), datetime.date(2008, 1, 3)))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.date(2008, 1, 3),), (datetime.date(2008, 1, 1),), (datetime.date(2008, 1, 2),))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 5}
{"sql_id": "duckdb_83_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('4142',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('4142',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_84_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_84_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_84_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_84_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_85_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_85_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"ManyMegaByteBlck\" not found in FROM clause!\nLINE 1: INSERT INTO t1 VALUES (REPEAT(\"ManyMegaByteBlck\", 234));\n                                      ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_85_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"ManyMegaByteBlck\" not found in FROM clause!\nLINE 1: INSERT INTO t1 (c1) VALUES (REPEAT(\"ManyMegaByteBlck\", 345));\n                                           ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_85_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"ManyMegaByteBlck\" not found in FROM clause!\nLINE 1: INSERT INTO t1 VALUES (REPEAT(\"ManyMegaByteBlck\", 456));\n                                      ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_85_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1968,), (3744,), (5520,), (7296,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_86_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, True, False, True, 1, 'TRUE', 'TRUE', False, True))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name isnull does not exist!\nDid you mean \"isnan\"?\nLINE 1: select null,isnull(null),isnull(1/0),isnull((1/0)=n...\n                    ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 1}
{"sql_id": "duckdb_86_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None, None, Decimal('1.1'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None, None, Decimal('1.1'), 1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_86_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('', 'abababababababababab', '', None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 1: select repeat(\"a\",0), repeat(\"ab\",(5+5)), repeat(\"ab\"...\n                      ^", "exec_able": false}}, "TP": 1, "FP": 5, "FN": 0}
{"sql_id": "duckdb_86_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name field does not exist!\nDid you mean \"filter\"?\nLINE 1: select field(null,\"a\",\"b\",\"c\");\n               ^", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "duckdb_86_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t2\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"(\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_86_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t2\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"(\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_86_13", "EM": 1, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t2\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t2\" already exists!", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_87_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 1: INSERT INTO t1 VALUES (\"a\" * 10, 1), (\"b\" * 10, 2);\n                               ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_87_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaaaaaaaa,bbbbbbbbbb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: zero-length delimited identifier at or near \"\"\"\"", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_87_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1748073026.271,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_88_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: zero-length delimited identifier at or near \"\"\"\"", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "duckdb_88_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((100,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\" not found in FROM clause!\nLINE 1: SELECT length(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...\n                      ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_88_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 1: SELECT LENGTH(\"a\" * 2000);\n                      ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "duckdb_88_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((100, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name char_length does not exist!\nDid you mean \"array_length\"?\nLINE 1: SELECT c11, CHAR_LENGTH(c12) FROM t1;\n                    ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_89_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"A_\" not found in FROM clause!\nCandidate bindings: \"t1.a\"\nLINE 1: select hex(a) from t1 where a like \"A_\";\n                                           ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_89_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502        EMPTY_RESULT       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"A_\" not found in FROM clause!\nCandidate bindings: \"t1.a\"\nLINE 1: ...ain select hex(a) from t1 where a like \"A_\";\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_89_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('5C783030415C7830305C783030',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5C783030415C7830305C783030',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_89_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name \"t1\" already exists!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "duckdb_9_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('this', 'is', 'a', 2, Decimal('2.0')))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "duckdb_9_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('A',), ('AA',), ('BBB',), ('a',), ('a',), ('aa',), ('aaa',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Could not convert string 'a' to INT32\nLINE 1: SELECT CASE WHEN (1 = st) THEN st ELSE st END as s FROM t1 OR...\n                              ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('A',), ('AA',), ('BBB',), ('a',), ('a',), ('aa',), ('aaa',))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (0,), (0,))", "rowcount": 7, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: zero-length delimited identifier at or near \"\"\"\"", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_9_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 CASE  WHEN ((u = 1)) THEN \u2502\\n\u2502     (NULL) ELSE u END     \u2502\\n\u2502                           \u2502\\n\u2502          ~7 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502       Projections: u      \u2502\\n\u2502                           \u2502\\n\u2502          ~7 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_9_12", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((144.54,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((144.54,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_9_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((6, 56))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \")\"", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_9_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True, False))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True, False))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_9_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, '05-03-2005', 'Day 1'), (2, '17-03-2005', 'Day 2'), (3, '28-03-2005', 'Day 3'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"-\" not found in FROM clause!\nCandidate bindings: \"t1.id\"\nLINE 1: SELECT id, CASE WHEN date IS NULL THEN \"-\" ELSE TO_TIMESTAMP(date, \"YYYY-%m-%d...\n                                               ^", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "duckdb_9_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, '28-03-2005', 'Day 3'), (2, '17-03-2005', 'Day 2'), (1, '05-03-2005', 'Day 1'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "duckdb_9_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1234567890123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_9_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1234567890123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name to_number does not exist!\nDid you mean \"to_minutes\"?\nLINE 1: SELECT * FROM (SELECT MAX(COALESCE(TO_NUMBER(c, \"unsigned_int\"), 0)) FROM ...\n                                           ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_9_29", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2001.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"2001-01-01\" not found in FROM clause!\nLINE 1: SELECT AVG(NULLIF(YEAR(\"2001-01-01\"), 10));\n                               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_90_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('10000-03-15 00:00:00', '10000-03-16 00:00:00', '10000-03-17 00:00:00'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT date(3652499), date(3652500), date(3652...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_90_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('117592-03-15 00:00:00', '117592-03-16 00:00:00', '117592-03-18 00:00:00'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date_from_days does not exist!\nDid you mean \"date_add\"?\nLINE 1: SELECT date_from_days(42949670), date_from_day...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_91_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name string_repeat does not exist!\nDid you mean \"string_split\"?\nLINE 1: INSERT INTO t VALUES (0, string_repeat(\"x\", 120000)), (1, string...\n                                 ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_91_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((12000,), (120000,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((12000,), (120000,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_92_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted string at or near \"'%\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name my_table does not exist!\nDid you mean \"pg_tables\"?\nLINE 1: select * from my_table where (10,2,3) in (row(3,2,3),...\n                      ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_93_1", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_93_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name generate_row does not exist!\nDid you mean \"generate_series\"?\nLINE 1: SELECT generate_row(\"a\", 1.5, 3) IN (row(1,2,3...\n               ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_93_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 1: SELECT ROW(3, 2, 3), ROW(\"a\", \"a\", \"3\"), ROW(1, 3, 3);\n                                 ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_93_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 1: SELECT ROW(\"a\",0,3) IN (row(3,2,3), row(\"a\",\"0\",\"3...\n                   ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_93_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"(\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name tuple does not exist!\nDid you mean \"upper\"?\nLINE 1: select tuple('b',1.5,3) IN (tuple(3,NULL,3), t...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_93_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"b\" not found in FROM clause!\nLINE 1: SELECT ROW(\"b\", 1.5, 3) IN (ROW(\"b\", NULL, 3), ROW...\n                   ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_93_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name krow does not exist!\nDid you mean \"row\"?\nLINE 1: SELECT KROW(\"b\",1.5,3) IN (KROW(\"b\",NULL,4), K...\n               ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_93_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"1\"", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_93_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502            NULL           \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         DUMMY_SCAN        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"table\"", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "duckdb_93_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name your_table does not exist!\nDid you mean \"pg_tables\"?\nLINE 1: SELECT row(1,2,row(3,null)) FROM your_table WHERE row IN (ROW(3,2,ROW(3,...\n                                         ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_93_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted string at or near \"'{\"a\": 1, \"b\": 2, \"c\": {\"d\": 3, \"e\": null\"", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "duckdb_93_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name tuple does not exist!\nDid you mean \"upper\"?\nLINE 1: SELECT TUPLE(1,2,3)=TUPLE(1,2,3);\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_93_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"1\"", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_93_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(((1, 2, 3), (2, 2, 3)))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_19", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_93_20", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_93_22", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_23", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_93_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "duckdb_93_26", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_93_27", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 2, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 2, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_94_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, 3, 1), (3, 2, 1), (1, 2, None))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, 3, 1), (3, 2, 1), (1, 2, None))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,), (False,), (False,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name tuple does not exist!\nDid you mean \"upper\"?\nLINE 1: SELECT TUPLE(a, 2, 3) FROM t1 WHERE (a, b, c) ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_94_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((False,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,), (False,), (True,), (False,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,), (True,), (True,), (True,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,), (True,), (True,), (True,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_94_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, False, False, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_95_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(((1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_95_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(((1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_95_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"=\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_95_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Subquery returns 2 columns - expected 1\nLINE 1: SELECT (1,2) = (SELECT 1,3 FROM t1 WHERE 1 = 0);\n                       ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_95_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             al            \u2502\\n\u2502                           \u2502\\n\u2502          ~0 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502   PERFECT_HASH_GROUP_BY   \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502         Groups: #0        \u2502\\n\u2502    Aggregates: min(#1)    \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             a             \u2502\\n\u2502             a             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502       Projections: a      \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"WINDOW\"", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "duckdb_95_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_96_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"x\" not found in FROM clause!\nLINE 1: SELECT RPAD(NULL, 5, \"x\") AS result;\n                             ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_96_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"value\" not found in FROM clause!\nLINE 1: SELECT CASE WHEN value IS NULL THEN NULL ELSE (value || ...\n                         ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_96_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_96_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 1: SELECT RPAD(\"a\", NULL, \"x\") AS result;\n                    ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_96_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name strpad does not exist!\nDid you mean \"rpad\"?\nLINE 1: SELECT STRPAD(\"a\", 5, \" \") AS result;\n               ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_96_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_96_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_96_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: zero-length delimited identifier at or near \"\"\"\"", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_96_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: zero-length delimited identifier at or near \"\"\"\"", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_96_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: zero-length delimited identifier at or near \"\"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_96_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name str_pad does not exist!\nDid you mean \"struct_pack\"?\nLINE 1: SELECT STR_PAD(\"a\", 1, \"x\");\n               ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_96_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_96_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('axyxy',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 1: SELECT RPAD(\"a\", 5, \"xy\");\n                    ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_96_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('I LOVE SQL          ',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"RPad\"", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_96_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('I LOVE SQL in the mo',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"I LOVE SQL in the morning\" not found in FROM clause!\nLINE 1: SELECT RPad(\"I LOVE SQL in the morning\", 20, \" \")\n                    ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_97_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502     (SUBQUERY IS NULL)    \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         HASH_JOIN         \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502      Join Type: MARK      \u2502\\n\u2502     Conditions: a = #0    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502                           \u2502              \u2502\\n\u2502          ~3 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\u2502             t1            \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502        Projections:       \u2502\u2502       Projections: a      \u2502\\n\u2502             a             \u2502\u2502                           \u2502\\n\u2502             b             \u2502\u2502                           \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502          ~3 Rows          \u2502\u2502          ~3 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_97_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_98_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             x             \u2502\\n\u2502             y             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502       CROSS_PRODUCT       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502       (SUBQUERY > 0)      \u2502\u2502             t1            \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502                           \u2502\u2502        Projections:       \u2502\\n\u2502                           \u2502\u2502             x             \u2502\\n\u2502                           \u2502\u2502             y             \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\u2502          ~0 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 CASE  WHEN ((#1 > 1)) THEN\u2502\\n\u2502  (error(\\'More than one row\u2502\\n\u2502   returned by a subquery  \u2502\\n\u2502   used as an expression - \u2502\\n\u2502    scalar subqueries can  \u2502\\n\u2502  only return a single row.\u2502\\n\u2502          Use \"SET         \u2502\\n\u2502 scalar_subquery_error_on_m\u2502\\n\u2502   ultiple_rows=false\" to  \u2502\\n\u2502     revert to previous    \u2502\\n\u2502   behavior of returning a \u2502\\n\u2502 random row.\\')) ELSE #0 END\u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502    UNGROUPED_AGGREGATE    \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502        Aggregates:        \u2502\\n\u2502        \"first\"(#0)        \u2502\\n\u2502        count_star()       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             #0            \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (CAST(uuid() AS VARCHAR) =\u2502\\n\u2502     CAST(a AS VARCHAR))   \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t2            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          ~0 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             x             \u2502\\n\u2502             y             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502       CROSS_PRODUCT       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502       (SUBQUERY > 0)      \u2502\u2502             t1            \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502                           \u2502\u2502        Projections:       \u2502\\n\u2502                           \u2502\u2502             x             \u2502\\n\u2502                           \u2502\u2502             y             \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\u2502          ~0 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 CASE  WHEN ((#1 > 1)) THEN\u2502\\n\u2502  (error(\\'More than one row\u2502\\n\u2502   returned by a subquery  \u2502\\n\u2502   used as an expression - \u2502\\n\u2502    scalar subqueries can  \u2502\\n\u2502  only return a single row.\u2502\\n\u2502          Use \"SET         \u2502\\n\u2502 scalar_subquery_error_on_m\u2502\\n\u2502   ultiple_rows=false\" to  \u2502\\n\u2502     revert to previous    \u2502\\n\u2502   behavior of returning a \u2502\\n\u2502 random row.\\')) ELSE #0 END\u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502    UNGROUPED_AGGREGATE    \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502        Aggregates:        \u2502\\n\u2502        \"first\"(#0)        \u2502\\n\u2502        count_star()       \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             #0            \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (CAST(uuid() AS VARCHAR) =\u2502\\n\u2502     CAST(a AS VARCHAR))   \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t2            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502                           \u2502\\n\u2502          ~0 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_98_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,), (None,), (None,), (None,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_98_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          SUBQUERY         \u2502\\n\u2502                           \u2502\\n\u2502          ~4 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502      LEFT_DELIM_JOIN      \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502     Join Type: SINGLE     \u2502\\n\u2502                           \u2502\\n\u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502  a IS NOT DISTINCT FROM a \u2502              \u2502\\n\u2502                           \u2502              \u2502\\n\u2502          ~4 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\u2502         HASH_JOIN         \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\u2502     Join Type: SINGLE     \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502       Projections: a      \u2502\u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502                           \u2502\u2502  a IS NOT DISTINCT FROM a \u2502              \u2502\\n\u2502                           \u2502\u2502                           \u2502              \u2502\\n\u2502          ~4 Rows          \u2502\u2502          ~4 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n                             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                             \u2502      COLUMN_DATA_SCAN     \u2502\u2502         PROJECTION        \u2502\\n                             \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                             \u2502                           \u2502\u2502    COALESCE(sum(b), 0)    \u2502\\n                             \u2502                           \u2502\u2502             a             \u2502\\n                             \u2502                           \u2502\u2502                           \u2502\\n                             \u2502          ~4 Rows          \u2502\u2502          ~2 Rows          \u2502\\n                             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502         HASH_JOIN         \u2502\\n                                                          \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                          \u2502      Join Type: LEFT      \u2502\\n                                                          \u2502                           \u2502\\n                                                          \u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502 a IS NOT DISTINCT FROM #0 \u2502              \u2502\\n                                                          \u2502                           \u2502              \u2502\\n                                                          \u2502          ~2 Rows          \u2502              \u2502\\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502         DELIM_SCAN        \u2502\u2502         PROJECTION        \u2502\\n                                                          \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                          \u2502       Delim Index: 1      \u2502\u2502__internal_decompress_integ\u2502\\n                                                          \u2502                           \u2502\u2502     ral_integer(#0, 5)    \u2502\\n                                                          \u2502                           \u2502\u2502             #1            \u2502\\n                                                          \u2502                           \u2502\u2502                           \u2502\\n                                                          \u2502          ~2 Rows          \u2502\u2502          ~0 Rows          \u2502\\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502   PERFECT_HASH_GROUP_BY   \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502         Groups: #0        \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502        Aggregates:        \u2502\\n                                                                                       \u2502    sum_no_overflow(#1)    \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         PROJECTION        \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502             a             \u2502\\n                                                                                       \u2502             b             \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         PROJECTION        \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502__internal_compress_integra\u2502\\n                                                                                       \u2502     l_utinyint(#0, 5)     \u2502\\n                                                                                       \u2502             #1            \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         SEQ_SCAN          \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502             t3            \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502        Projections:       \u2502\\n                                                                                       \u2502             a             \u2502\\n                                                                                       \u2502             b             \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_98_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,), (0,), (0,), (0,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "duckdb_98_17", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          SUBQUERY         \u2502\\n\u2502                           \u2502\\n\u2502          ~4 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502      LEFT_DELIM_JOIN      \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502     Join Type: SINGLE     \u2502\\n\u2502                           \u2502\\n\u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502  a IS NOT DISTINCT FROM a \u2502              \u2502\\n\u2502                           \u2502              \u2502\\n\u2502          ~4 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\u2502         HASH_JOIN         \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\u2502     Join Type: SINGLE     \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502       Projections: a      \u2502\u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502                           \u2502\u2502  a IS NOT DISTINCT FROM a \u2502              \u2502\\n\u2502                           \u2502\u2502                           \u2502              \u2502\\n\u2502          ~4 Rows          \u2502\u2502          ~4 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n                             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                             \u2502      COLUMN_DATA_SCAN     \u2502\u2502         PROJECTION        \u2502\\n                             \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                             \u2502                           \u2502\u2502    COALESCE(sum(b), 0)    \u2502\\n                             \u2502                           \u2502\u2502             a             \u2502\\n                             \u2502                           \u2502\u2502                           \u2502\\n                             \u2502          ~4 Rows          \u2502\u2502          ~2 Rows          \u2502\\n                             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502         HASH_JOIN         \u2502\\n                                                          \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                          \u2502      Join Type: LEFT      \u2502\\n                                                          \u2502                           \u2502\\n                                                          \u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502 a IS NOT DISTINCT FROM #0 \u2502              \u2502\\n                                                          \u2502                           \u2502              \u2502\\n                                                          \u2502          ~2 Rows          \u2502              \u2502\\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502         DELIM_SCAN        \u2502\u2502         PROJECTION        \u2502\\n                                                          \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                          \u2502       Delim Index: 1      \u2502\u2502__internal_decompress_integ\u2502\\n                                                          \u2502                           \u2502\u2502     ral_integer(#0, 5)    \u2502\\n                                                          \u2502                           \u2502\u2502             #1            \u2502\\n                                                          \u2502                           \u2502\u2502                           \u2502\\n                                                          \u2502          ~2 Rows          \u2502\u2502          ~0 Rows          \u2502\\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502   PERFECT_HASH_GROUP_BY   \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502         Groups: #0        \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502        Aggregates:        \u2502\\n                                                                                       \u2502    sum_no_overflow(#1)    \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         PROJECTION        \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502             a             \u2502\\n                                                                                       \u2502             b             \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         PROJECTION        \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502__internal_compress_integra\u2502\\n                                                                                       \u2502     l_utinyint(#0, 5)     \u2502\\n                                                                                       \u2502             #1            \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         SEQ_SCAN          \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502             t3            \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502        Projections:       \u2502\\n                                                                                       \u2502             a             \u2502\\n                                                                                       \u2502             b             \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          SUBQUERY         \u2502\\n\u2502                           \u2502\\n\u2502          ~4 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502      LEFT_DELIM_JOIN      \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502     Join Type: SINGLE     \u2502\\n\u2502                           \u2502\\n\u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502  a IS NOT DISTINCT FROM a \u2502              \u2502\\n\u2502                           \u2502              \u2502\\n\u2502          ~4 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\u2502         HASH_JOIN         \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\u2502     Join Type: SINGLE     \u2502\\n\u2502                           \u2502\u2502                           \u2502\\n\u2502       Projections: a      \u2502\u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502                           \u2502\u2502  a IS NOT DISTINCT FROM a \u2502              \u2502\\n\u2502                           \u2502\u2502                           \u2502              \u2502\\n\u2502          ~4 Rows          \u2502\u2502          ~4 Rows          \u2502              \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n                             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                             \u2502      COLUMN_DATA_SCAN     \u2502\u2502         PROJECTION        \u2502\\n                             \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                             \u2502                           \u2502\u2502    COALESCE(sum(b), 0)    \u2502\\n                             \u2502                           \u2502\u2502             a             \u2502\\n                             \u2502                           \u2502\u2502                           \u2502\\n                             \u2502          ~4 Rows          \u2502\u2502          ~2 Rows          \u2502\\n                             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502         HASH_JOIN         \u2502\\n                                                          \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                          \u2502      Join Type: LEFT      \u2502\\n                                                          \u2502                           \u2502\\n                                                          \u2502        Conditions:        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502 a IS NOT DISTINCT FROM #0 \u2502              \u2502\\n                                                          \u2502                           \u2502              \u2502\\n                                                          \u2502          ~2 Rows          \u2502              \u2502\\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\\n                                                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                          \u2502         DELIM_SCAN        \u2502\u2502         PROJECTION        \u2502\\n                                                          \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                          \u2502       Delim Index: 1      \u2502\u2502__internal_decompress_integ\u2502\\n                                                          \u2502                           \u2502\u2502     ral_integer(#0, 5)    \u2502\\n                                                          \u2502                           \u2502\u2502             #1            \u2502\\n                                                          \u2502                           \u2502\u2502                           \u2502\\n                                                          \u2502          ~2 Rows          \u2502\u2502          ~0 Rows          \u2502\\n                                                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502   PERFECT_HASH_GROUP_BY   \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502         Groups: #0        \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502        Aggregates:        \u2502\\n                                                                                       \u2502    sum_no_overflow(#1)    \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         PROJECTION        \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502             a             \u2502\\n                                                                                       \u2502             b             \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         PROJECTION        \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502__internal_compress_integra\u2502\\n                                                                                       \u2502     l_utinyint(#0, 5)     \u2502\\n                                                                                       \u2502             #1            \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                                                                                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n                                                                                       \u2502         SEQ_SCAN          \u2502\\n                                                                                       \u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n                                                                                       \u2502             t3            \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502        Projections:       \u2502\\n                                                                                       \u2502             a             \u2502\\n                                                                                       \u2502             b             \u2502\\n                                                                                       \u2502                           \u2502\\n                                                                                       \u2502          ~2 Rows          \u2502\\n                                                                                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_99_6", "EM": 1, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ABC', 1), ('ABC', 1), ('XYZ', 1), ('XYZ', 1))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"`\"", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_10_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('b', 'a', 'a', 'a211'), ('c', 'a', 'a', 'a311'), ('d', 'a', 'a', 'a411'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('b', 'a', 'a', 'a211'), ('c', 'a', 'a', 'a311'), ('d', 'a', 'a', 'a411'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_10_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aa111', 'a'), ('ba211', 'a'), ('ca311', 'a'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aa111', 'a'), ('ba211', 'a'), ('ca311', 'a'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_10_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aa111', 'a', 'c111'), ('ba211', 'a', 'c211'), ('ca311', 'a', 'c311'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aa111', 'a', 'c111'), ('ba211', 'a', 'c211'), ('ca311', 'a', 'c311'))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_10_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aa', 'a', 'a111', 'c111'), ('ba', 'a', 'a211', 'c211'), ('ca', 'a', 'a311', 'c311'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aa', 'a', 'a111', 'c111'), ('ba', 'a', 'a211', 'c211'), ('ca', 'a', 'a311', 'c311'), ('da', 'a', 'a411', 'c411'))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_10_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('9797', 'a', 'a'), ('9797', 'a', 'a'), ('9797', 'a', 'a'), ('9797', 'a', 'a'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Could not convert string 'a' to INT32\nLINE 1: SELECT CONCAT(CAST(min(b) AS integer), CAST(max(b) AS...\n                      ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "duckdb_11_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 20), (3, 50))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name fld_stdeve does not exist!\nDid you mean \"stddev\"?\nLINE 1: ...MAX(Fld2) FROM t1 GROUP BY Fld1 HAVING FLD_STDEVE(Fld2) IS NOT NULL;\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_11_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 20), (3, 50))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 8, "FN": 1}
{"sql_id": "duckdb_12_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_12_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_12_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((25,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"+\"", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_12_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (b = repeat(chr((65 + a)),\u2502\\n\u2502            20))           \u2502\\n\u2502                           \u2502\\n\u2502          ~40 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             a             \u2502\\n\u2502             b             \u2502\\n\u2502           filler          \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502   a<10 AND a IS NOT NULL  \u2502\\n\u2502                           \u2502\\n\u2502         ~200 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 'AAAAAAAAAAAAAAAAAAAA', 'filler'), (1, 'BBBBBBBBBBBBBBBBBBBB', 'filler'), (2, 'CCCCCCCCCCCCCCCCCCCC', 'filler'), (3, 'DDDDDDDDDDDDDDDDDDDD', 'filler'), (4, 'EEEEEEEEEEEEEEEEEEEE', 'filler'), (5, 'FFFFFFFFFFFFFFFFFFFF', 'filler'), (6, 'GGGGGGGGGGGGGGGGGGGG', 'filler'), (7, 'HHHHHHHHHHHHHHHHHHHH', 'filler'), (8, 'IIIIIIIIIIIIIIIIIIII', 'filler'), (9, 'JJJJJJJJJJJJJJJJJJJJ', 'filler'))", "rowcount": 10, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_12_25", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0, 'AAAAAAAAAAAAAAAAAAAA', 'filler'), (1, 'BBBBBBBBBBBBBBBBBBBB', 'filler'), (2, 'CCCCCCCCCCCCCCCCCCCC', 'filler'), (3, 'DDDDDDDDDDDDDDDDDDDD', 'filler'), (4, 'EEEEEEEEEEEEEEEEEEEE', 'filler'), (5, 'FFFFFFFFFFFFFFFFFFFF', 'filler'), (6, 'GGGGGGGGGGGGGGGGGGGG', 'filler'), (7, 'HHHHHHHHHHHHHHHHHHHH', 'filler'), (8, 'IIIIIIIIIIIIIIIIIIII', 'filler'), (9, 'JJJJJJJJJJJJJJJJJJJJ', 'filler'))", "rowcount": 10, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 'AAAAAAAAAAAAAAAAAAAA', 'filler'), (1, 'BBBBBBBBBBBBBBBBBBBB', 'filler'), (2, 'CCCCCCCCCCCCCCCCCCCC', 'filler'), (3, 'DDDDDDDDDDDDDDDDDDDD', 'filler'), (4, 'EEEEEEEEEEEEEEEEEEEE', 'filler'), (5, 'FFFFFFFFFFFFFFFFFFFF', 'filler'), (6, 'GGGGGGGGGGGGGGGGGGGG', 'filler'), (7, 'HHHHHHHHHHHHHHHHHHHH', 'filler'), (8, 'IIIIIIIIIIIIIIIIIIII', 'filler'), (9, 'JJJJJJJJJJJJJJJJJJJJ', 'filler'))", "rowcount": 10, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_13_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, '61626364656667', '61626364656667', 'boo'), (3, '71727374757677', '71727374757677', 'three'), (2, '696A6B696C6D6E', '696A6B696C6D6E', 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"as\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_14_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_14_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_14_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_14_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_14_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_14_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_14_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18432,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_15_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1293840000.0, 0.0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'2011-01-01 00:00:00'\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_15_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name current_timestamp does not exist!\nDid you mean \"current_localtimestamp\"?\nLINE 1: INSERT INTO t3 (a) VALUES (CURRENT_TIMESTAMP());\n                                   ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_15_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_17_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name _regexp_instr does not exist!\nDid you mean \"exp\"?\nLINE 1: SELECT _REGEXP_INSTR( \"abc\", \"a\" );\n               ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_17_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_position does not exist!\nDid you mean \"regexp_split_to_table\"?\nLINE 1: SELECT regexp_position('abc', 'd');\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_17_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_position does not exist!\nDid you mean \"regexp_split_to_table\"?\nLINE 1: SELECT REGEXP_POSITION(NULL, \"a\");\n               ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_17_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: zero-length delimited identifier at or near \"\"\"\"", "exec_able": false}}, "TP": 2, "FP": 5, "FN": 1}
{"sql_id": "duckdb_17_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \")\"", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_17_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name search does not exist!\nDid you mean \"main.in_search_path\"?\nLINE 1: SELECT REGEXP.search(\"abcabcabc\", \"a+\")\n               ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_17_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_position does not exist!\nDid you mean \"regexp_split_to_table\"?\nLINE 1: SELECT SUBSTR(REGEXP_POSITION(\"abcabcabc\", \"a+\", 2), ...\n                      ^", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "duckdb_17_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_18", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_19", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "duckdb_17_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_position does not exist!\nDid you mean \"regexp_split_to_table\"?\nLINE 1: SELECT REGEXP_POSITION(\"abcabcabc\", \"a+\", 1, 3...\n               ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_17_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_17_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_17_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_17_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('abcabcabc', 'a+', 1, 1); ...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_17_27", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT REGEXP_INSTR('aaabcabcabc', 'a+', 1, 1,...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_17_28", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_17_29", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_17_30", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "duckdb_17_31", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_instr does not exist!\nDid you mean \"regexp_extract\"?\nLINE 1: SELECT regexp_instr(\"aaabcabcabc\", \"A+\", 1, 1,...\n               ^", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "duckdb_17_32", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a+\" not found in FROM clause!\nLINE 1: SELECT POSITION(\"a\" IN \"a+\")\n                               ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_18_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"aaa\" not found in FROM clause!\nLINE 1: SELECT REGEXP_REPLACE(\"aaa\", \"a\", \"X\");\n                              ^", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "duckdb_18_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Xaax',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_18_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "duckdb_18_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('aaabbccbbddaa', 'b+', '...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaa<$1>ccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"aaabbccbbddaa\" not found in FROM clause!\nLINE 1: SELECT regexp_replace(\"aaabbccbbddaa\", \"(b+)\", \"<$1>\", 1, 2);\n                              ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_18_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaabbccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaxccbbddaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_18_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaax',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('aaab', 'b', 'x', 1, 2);\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaxccc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('aaabccc', 'b', 'x', 1, ...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXc',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('aXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('aXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"abcbdb\" not found in FROM clause!\nLINE 1: SELECT regexp_replace(\"abcbdb\", \"b\", \"X\");\n                              ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_18_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('aaabcbdb', 'b', 'X', 1)...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('aaabcbdb', 'b', 'X', 2)...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('aaaXcbdb',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_18_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Xaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'regexp_replace(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\tregexp_replace(VARCHAR, VARCHAR, VARCHAR, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT regexp_replace('aaa', 'a', 'X', 2);\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_18_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('XXaa',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_19_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 1: INSERT INTO t1 VALUES (CAST(substr(\"a\",1) AS REAL), 1, \"a\", CAST(1 AS DECI...\n                                           ^", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "duckdb_19_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regex_replace does not exist!\nDid you mean \"regexp_replace\"?\nLINE 1: INSERT INTO t1 (c) VALUES ( regex_replace('a', 'a', 'a') );\n                                    ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_19_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((12,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name regexp_repeat does not exist!\nDid you mean \"regexp_replace\"?\nLINE 1: SELECT LENGTH(REGEXP_REPLACE(REGEXP_REPEAT(\"a\", \"b\"), \"a\", \"b\"));\n                                     ^", "exec_able": false}}, "TP": 3, "FP": 5, "FN": 0}
{"sql_id": "duckdb_19_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 1: INSERT INTO t1 VALUES (REPEAT(\"a\", 16384));\n                                      ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_19_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((16384,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((16384,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_19_17", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('$1',), ('$1',), ('$1',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('$1',), ('$1',), ('$1',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_19_21", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_20_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_20_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name char_length does not exist!\nDid you mean \"array_length\"?\nLINE 1: SELECT SUM(DISTINCT CHAR_LENGTH(name)) AS s1 FROM t1;\n                            ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_20_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,), (18,))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_21_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('11',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name concat_ does not exist!\nDid you mean \"concat\"?\nLINE 1: SELECT concat_(pkCrash, strCrash) FROM t1;\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_21_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1, 'one'), (2, 1, 'one'), (4, 2, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Cannot mix values of type STRUCT(id INTEGER, val INTEGER) and STRUCT(id INTEGER) in CASE expression - an explicit cast is required\nLINE 1: SELECT one.id, two.val, CASE WHEN two.val = 1 THEN \"one\" ELSE \"...\n                                ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_22_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "duckdb_22_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2001, 12, 10),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"2001-12-10\" not found in FROM clause!\nLINE 1: SELECT least(CAST(\"2001-12-10\" AS DATETIME), CAST(\"2001-1...\n                          ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_22_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"10:11:12 00:00:00\" not found in FROM clause!\nLINE 1: SELECT LEAST(CAST(\"10:11:12 00:00:00\" AS TIMESTAMP), CAST...\n                          ^", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "duckdb_23_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 2}
{"sql_id": "duckdb_23_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"2003-03-01 00:00:00\" not found in FROM clause!\nLINE 1: ...o t1 (i, ts) values(extract(epoch from \"2003-03-01 00:00:00\"), \"2003-03-01 00:...\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_23_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_23_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_23_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Could not convert string '2003-05-01 00:00:00' to INT32\nLINE 1: insert into t1 (i, ts) values('2003-05-01 00:00:00', '2003-05-01 00:0...\n                                      ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_23_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\"2003-10-26 01:00:00\"\"", "exec_able": false}}, "TP": 1, "FP": 7, "FN": 0}
{"sql_id": "duckdb_23_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1981, 7, 1, 8, 0, 9, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_23_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name current_timestamp does not exist!\nDid you mean \"current_localtimestamp\"?\nLINE 1: ...into t1 (ts) values(extract(epoch from current_timestamp() at time zone 'UTC')...\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 5, "FN": 0}
{"sql_id": "duckdb_23_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Unimplemented type for cast (DOUBLE -> TIMESTAMP)\nLINE 1: INSERT INTO t1 VALUES(EXTRACT(EPOCH FROM TIMESTAMP '2003-03-3...\n                              ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_23_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1048989599.0, 'Before the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"2003-03-30 01:59:59\" not found in FROM clause!\nLINE 1: SELECT EXTRACT(EPOCH FROM \"2003-03-30 01:59:59\") AS b;\n                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_23_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1048991400.0, 'Inside the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1048991400.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1048993200.0, 'After the gap'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1048993200.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_23_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1970, 1, 1, 8, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"UTC\" not found in FROM clause!\nLINE 1: ...CH FROM CURRENT_TIMESTAMP AT TIME ZONE \"UTC\");\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "duckdb_23_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-28801.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\"1969-12-31 15:59:59\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_23_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-28800.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\"1969-12-31 16:00:00\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_23_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-28799.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\"1969-12-31 16:00:01\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_23_25", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\"1970-01-01 00:00:01\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_23_26", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1641052801.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"2022-01-01 16:00:01\" not found in FROM clause!\nLINE 1: SELECT EXTRACT(EPOCH FROM \"2022-01-01 16:00:01\");\n                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_24_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31',), ('30',), ('31',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Unimplemented type for cast (BIT -> VARINT)\nLINE 1: SELECT HEX(CAST(a AS VarInt)) FROM t1;\n                   ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_24_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',), ('31',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(a) FROM t1;\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_24_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(MIN(a)) FROM t1;\n               ^", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_24_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Type with name number does not exist!\nDid you mean \"numeric\"?", "exec_able": false}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "duckdb_24_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('30', '31', '30', '31'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('30', '31', '30', '31'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 3, "FP": 0, "FN": 0}
{"sql_id": "duckdb_24_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(min(b)) FROM t1 WHERE a = 4;\n               ^", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_24_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 2, "FN": 0}
{"sql_id": "duckdb_24_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_24_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: update t1 set b = hex(a);\n                          ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_24_27", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('31',), ('30',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('31',), ('30',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_25_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31', 100), ('31', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'to_hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tto_hex(VARCHAR) -> VARCHAR\n\tto_hex(VARINT) -> VARCHAR\n\tto_hex(BLOB) -> VARCHAR\n\tto_hex(BIGINT) -> VARCHAR\n\tto_hex(UBIGINT) -> VARCHAR\n\tto_hex(HUGEINT) -> VARCHAR\n\tto_hex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT to_hex(b), i2 FROM t1 WHERE (i2 >= 100 ...\n               ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_25_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('31', 100), ('31', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BOOLEAN)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(CAST(b1 AS BOOLEAN)), i2 FROM t2 WH...\n               ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_25_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30', 100), ('30', 200))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'hex(BIT)'. You might need to add explicit type casts.\n\tCandidate functions:\n\thex(VARCHAR) -> VARCHAR\n\thex(VARINT) -> VARCHAR\n\thex(BLOB) -> VARCHAR\n\thex(BIGINT) -> VARCHAR\n\thex(UBIGINT) -> VARCHAR\n\thex(HUGEINT) -> VARCHAR\n\thex(UHUGEINT) -> VARCHAR\n\nLINE 1: SELECT HEX(b2), i2 FROM t2 WHERE (i2 >= 100 AN...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_25_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('30302C3131',), ('31302C3031',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('31313030',), ('31303031',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_25_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('3130',), ('3030',), ('3131',), ('3031',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_25_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, '3030'), (3, '3031'), (3, '3130'), (3, '3130'), (2, '3131'))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, '3030'), (3, '3031'), (3, '3130'), (3, '3130'), (2, '3131'))", "rowcount": 5, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_26_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('783631',), ('7836313030',), ('7836313230',), ('7836313631',), ('783632',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('783631',), ('7836313030',), ('7836313230',), ('7836313631',), ('783632',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_26_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('783030',), ('7836313030783030',), ('7836313230783030',), ('7836313631783030',), ('783631783030',), ('783632783030',))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((None,), (None,), (None,), (None,), (None,), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_26_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('783631',), ('7836313030',), ('7836313230',), ('7836313631',), ('783632',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('783631',), ('7836313030',), ('7836313230',), ('7836313631',), ('783632',), (None,))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_26_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_26_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((65535, 65535))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"AS\"", "exec_able": false}}, "TP": 2, "FP": 3, "FN": 0}
{"sql_id": "duckdb_26_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_27_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-1.7976931348623157e+308,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"STRING_AGG\"", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_28_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_28_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2025 25', 2025, 2025))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name datetimeformat does not exist!\nDid you mean \"datediff\"?\nLINE 1: SELECT DateTimeFormat(a, \"%Y %y\"), YEAR(a), YE...\n               ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 2}
{"sql_id": "duckdb_28_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1206, seconds=84012),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT strftime('%Y-%m-%d %H:%i:%s', '2000-01-...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_30_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3, 2, 3, 3), (4, 3, 3, 4), (7, 3, 3, 7))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3, 2, 3, 3), (4, 3, 3, 4), (7, 3, 3, 7))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_30_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"f1\" not found in FROM clause!\nLINE 1: INSERT INTO t1 VALUES(substr(f1, 1, 3));\n                                     ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_30_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('10', 5.0), ('30', 15.0), ('50', 25.0), ('60', 30.0))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_31_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Unimplemented type for cast (TIMESTAMP WITH TIME ZONE -> INTEGER)\nLINE 1: INSERT INTO t1 VALUES (CURRENT_TIMESTAMP);\n                               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_31_3", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "duckdb_31_9", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_31_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((87,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name timestampdiff does not exist!\nDid you mean \"to_timestamp\"?\nLINE 1: SELECT TIMESTAMPDIFF('QUARTER', EXTRACT(YEAR F...\n               ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "duckdb_31_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2085,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"YYYY-MM-DD\" not found in FROM clause!\nCandidate bindings: \"t1.d\"\nLINE 1: ...\" FROM (TO_TIMESTAMP(GREATEST(y1, y2), \"YYYY-MM-DD\"))) FROM t1;\n                                                  ^", "exec_able": false}}, "TP": 2, "FP": 4, "FN": 0}
{"sql_id": "duckdb_32_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, '\"\"'), (0, '\" \"'), (0, '\"2012qwer\"'), (0, '\"qwer\"'))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"\\\\\" not found in FROM clause!\nCandidate bindings: \"t1.y\"\nLINE 1: SELECT y, \"\\\\\" || c || \"\\\\\" FROM t1;\n                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_33_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"resultrowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"i\" not found in FROM clause!\nCandidate bindings: \"t1.b\"\nLINE 1: SELECT STRING_AGG( chr( hex( b >> i ) ), '') FROM t1 ORDER BY [pk1];\n                                          ^", "exec_able": false}}, "TP": 1, "FP": 5, "FN": 0}
{"sql_id": "duckdb_33_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('62303030303030303030',), ('62303030303030303031',), ('62303030303030303130',), ('62303030303030303131',), ('62303030303030313030',))", "rowcount": 5, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('62303030303030303030',), ('62303030303030303031',), ('62303030303030303130',), ('62303030303030303131',), ('62303030303030313030',))", "rowcount": 5, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_34_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('*a*',), ('*b*',), ('*o*',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"*\" not found in FROM clause!\nCandidate bindings: \"t1.name\"\nLINE 1: SELECT \"*\" + name + \"*\" FROM t1 ORDER BY name;\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_34_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a', '*a*', 'o', '*o*'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a', '*a*', 'o', '*o*'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_34_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('-hello -hello -',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"hello\" not found in FROM clause!\nCandidate bindings: \"t1.a\"\nLINE 1: ...t(\"-\",\"a\",\"-\",\"b\",\"-\") from t1 where a=\"hello\";\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_34_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('-hello -hello -',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"hello\" not found in FROM clause!\nCandidate bindings: \"t1.a\"\nLINE 1: ...lect a||\"-\",b||\"-\",\"-\" from t1 where a=\"hello\";\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_34_20", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_34_22", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_34_24", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',), ('6120',), ('62',), ('6220',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',), ('6120',), ('62',), ('6220',))", "rowcount": 4, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_35_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"SET\"", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_35_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"SET\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_35_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_35_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1F9480179366F2BF567E1C4B964C1EF029080707',), ('1F9480179366F2BF567E1C4B964C1EF029082020',), ('1F9480179366F2BF567E1C4B964C1EF029087575',))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_35_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502          ORDER_BY         \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502           #1 ASC          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502           hex(a)          \u2502\\n\u2502             a             \u2502\\n\u2502                           \u2502\\n\u2502          ~3 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502       Projections: a      \u2502\\n\u2502                           \u2502\\n\u2502          ~3 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1F9480179366F2BF567E1C4B964C1EF029080707',), ('1F9480179366F2BF567E1C4B964C1EF029082020',), ('1F9480179366F2BF567E1C4B964C1EF029087575',))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_35_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1F9480179366F2BF567E1C4B964C1EF029082020',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1F9480179366F2BF567E1C4B964C1EF029082020',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_35_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1F9480179366F2BF567E1C4B964C1EF029082020',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_36_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types '&&(\"NULL\", INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\t&&(ANY[], ANY[]) -> BOOLEAN\n\nLINE 1: SELECT IF(NULL && 1, 1, 2), IF(1 && NULL, 1, 2);\n                       ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_36_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \";\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_36_5", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,), (None,))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_36_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False, False, False, False, 'N', 'N', 'N', 'N', 'N'), (False, False, True, False, 'N', 'Y', 'Y', 'N', 'N'), (True, False, False, False, 'N', 'N', 'N', 'Y', 'N'), (False, False, False, True, 'N', 'Y', 'Y', 'N', 'N'), (False, True, False, False, 'N', 'N', 'N', 'Y', 'N'), (False, False, True, True, 'N', 'Y', 'Y', 'N', 'Y'), (False, True, True, False, 'N', 'Y', 'Y', 'Y', 'N'), (True, False, False, True, 'N', 'Y', 'Y', 'Y', 'N'), (True, True, False, False, 'Y', 'N', 'N', 'Y', 'N'))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "duckdb_36_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False, False, False, False, False, False, False, False, False), (False, False, True, False, False, True, True, False, False), (True, False, False, False, False, False, False, True, False), (False, False, False, True, False, True, True, False, False), (False, True, False, False, False, False, False, True, False), (False, False, True, True, False, True, True, False, True), (False, True, True, False, False, True, True, True, False), (True, False, False, True, False, True, True, True, False), (True, True, False, False, True, False, False, True, False))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((False, False, True, True, False, True, False, False, True, False), (False, False, True, True, False, True, True, False, False, False), (True, False, False, True, False, True, False, True, False, False), (False, False, True, True, False, True, True, False, False, False), (False, True, True, False, False, True, False, True, False, False), (False, False, True, True, False, True, True, False, True, True), (False, True, True, False, False, True, True, True, False, False), (True, False, False, True, False, True, True, True, False, False), (True, True, False, False, True, False, False, True, False, False))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "duckdb_37_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2004, 1, 22),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"CAST\"", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_37_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"AS\"", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_37_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(seconds=42480),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_37_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"12345\" not found in FROM clause!\nLINE 1: SELECT CAST(\"12345\" + \"6789\" AS UNSIGNED_INT);\n                    ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_37_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"12345\" not found in FROM clause!\nLINE 1: SELECT CAST(CONCAT(\"12345\",\"6789\") AS INTEGER);\n                           ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_37_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name repeat_string does not exist!\nDid you mean \"repeat\"?\nLINE 1: SELECT CAST(repeat_string(\"1\",9) AS INTEGER);\n                    ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_37_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((111111111,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"1\" not found in FROM clause!\nLINE 1: SELECT CAST(CONCAT(\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\") AS...\n                           ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_37_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, True))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name isnull does not exist!\nDid you mean \"isnan\"?\nLINE 1: SELECT ISNULL(DATE(NULL)), ISNULL(CAST(NULL AS...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "duckdb_37_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_37_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 0, 0), (None, None, None))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 1}
{"sql_id": "duckdb_37_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 0, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 1}
{"sql_id": "duckdb_37_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \",\"", "exec_able": false}}, "TP": 2, "FP": 0, "FN": 1}
{"sql_id": "duckdb_37_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None, None, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 2, "FP": 1, "FN": 1}
{"sql_id": "duckdb_37_21", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('value=340000.0',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_37_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(1, 2, 1, 600000),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "duckdb_38_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_38_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1988, '198819881988'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Type with name YEAR does not exist!", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_38_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x1988',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Could not convert string 'x' to INT16\nLINE 1: SELECT 'x' + CAST(1988 AS SMALLINT)\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_38_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((73800.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_38_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1988, 1, 1, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_38_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2025,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "duckdb_38_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_40_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('61', 0, -1), ('615C5C30', 1, 1), ('615C5C74', 1, 1), ('6120', 1, 0))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "duckdb_40_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('12', False), ('11', False), ('22', False))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12', False), ('11', False), ('22', False))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_40_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', \"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502 (concat(CAST(b AS VARCHAR)\u2502\\n\u2502  , CAST(c AS VARCHAR)) =  \u2502\\n\u2502          '0101')          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             b             \u2502\\n\u2502             c             \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502   b=1 AND b IS NOT NULL   \u2502\\n\u2502                           \u2502\\n\u2502          ~2 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\"))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"0101\" not found in FROM clause!\nCandidate bindings: \"t1.b\"\nLINE 1: ...b,c FROM t1 WHERE b = 1 AND (b || c) = \"0101\";\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_40_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"0101\" not found in FROM clause!\nCandidate bindings: \"t1.b\"\nLINE 1: ..., c FROM t1 WHERE b = 1 AND (b || c) = \"0101\"\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_40_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((3,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_40_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,), (False,), (False,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Cannot compare values of type STRUCT(INTEGER, INTEGER) and type STRUCT(VARCHAR, VARCHAR) - an explicit cast is required\nLINE 1: SELECT (1,1) >= (a,'1') FROM t1;\n                     ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_40_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,), (True,), (True,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"1\" not found in FROM clause!\nCandidate bindings: \"t1.a\"\nLINE 1: SELECT (a, \"1\") > (\"1\", \"1\") FROM t1;\n                   ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_41_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_42_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('61',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_43_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('string ', 'string '))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \" \" not found in FROM clause!\nCandidate bindings: \"t1.name\"\nLINE 1: SELECT name || \" \" || level, name || STRING_repeat(\" \"...\n                       ^", "exec_able": false}}, "TP": 3, "FP": 2, "FN": 0}
{"sql_id": "duckdb_43_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 1, "FP": 7, "FN": 0}
{"sql_id": "duckdb_43_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((256,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"as\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_43_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((256,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((256,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_44_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 1}
{"sql_id": "duckdb_44_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_44_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234567',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_44_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1234567,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: zero-length delimited identifier at or near \"\"\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_44_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_44_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_44_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'upper(INTEGER)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tupper(VARCHAR) -> VARCHAR\n\nLINE 1: CREATE TABLE t2 AS SELECT upper(a) FROM t1;\n                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_44_14", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_44_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_45_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('       xxx',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('       xxx',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_45_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_45_16", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('x', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_45_17", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_45_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: zero-length delimited identifier at or near \"\"\"\"", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "duckdb_45_19", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_45_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2, 2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_45_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('x',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_45_22", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('x', 'x'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "duckdb_45_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('c1', ''))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_45_24", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"x\" not found in FROM clause!\nCandidate bindings: \"t1.c1\"\nLINE 1: SELECT LPAD(c1, 3, \"x\"), LPAD(\"x\", 3, c1) FROM t1;\n                           ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_45_25", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('xxx', 'xxx'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_46_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 1, 15, 2, 59, 58, 999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "duckdb_46_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 12, 12, 22, 30, 59),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('2004.12.12 22:30:59', '%Y.%m....\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_46_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2003-01-02 08:11:02',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"8:11:2 03-01-02\" not found in FROM clause!\nLINE 1: SELECT strptime(\"8:11:2 03-01-02\", \"%H:%i:%S %Y-%m-%d\")...\n                        ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "duckdb_46_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('14',), ('14',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('14',), ('14',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_46_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('00 (Thu), 01 00 (Jan) 2004',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Could not choose a best candidate function for the function call \"strftime(STRING_LITERAL, STRING_LITERAL)\". In order to select one, please add explicit type casts.\n\tCandidate functions:\n\tstrftime(TIMESTAMP, VARCHAR) -> VARCHAR\n\tstrftime(TIMESTAMP_NS, VARCHAR) -> VARCHAR\n\tstrftime(VARCHAR, DATE) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP) -> VARCHAR\n\tstrftime(VARCHAR, TIMESTAMP_NS) -> VARCHAR\n\tstrftime(TIMESTAMP WITH TIME ZONE, VARCHAR) -> VARCHAR\n\tstrftime(DATE, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT STRFTIME('2004-01-01', '%A (%a), %d %M ...\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_format does not exist!\nDid you mean \"timetz_byte_comparable\"?\nLINE 1: SELECT TIME_FORMAT(\"24:00:00\", \"%r\");\n               ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_47_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\"2000-01-01 00:00:00\"\"", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_47_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\"2000-01-01 12:00:00\"\"", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_47_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('03:00:00 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\"15:00:00\"\"", "exec_able": false}}, "TP": 1, "FP": 5, "FN": 0}
{"sql_id": "duckdb_47_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('01:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('12:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('01 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('01:00:00 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'12:00:00'\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_47_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('11 PM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"23:00:00\" not found in FROM clause!\nLINE 1: SELECT strftime(CAST(\"23:00:00\" AS TIMESTAMP), '%I:%M:%S %p'...\n                             ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_47_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('12 AM',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\"24:00:00\"\"", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_47_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('04/30/2004',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_47_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_15", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.datetime(2004, 4, 30, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_47_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('00 01 January 2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "duckdb_47_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('09 28 February 0000',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"0000-02-28\" not found in FROM clause!\nLINE 1: SELECT strftime(\"0000-02-28\"::TIMESTAMP, '%W %d %M %Y')...\n                        ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_47_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('00 01 January 2009',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_48_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('\"3\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted string at or near \"'{\"id\": \"3\", \"$name\": \"Barney\"\"", "exec_able": false}}, "TP": 1, "FP": 5, "FN": 0}
{"sql_id": "duckdb_48_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted string at or near \"'{\"id\": \"3\", \"$name\": \"Barney\"\"", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "duckdb_49_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring\\\\\\\\t|',), ('|teststring|',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"ORDER\"", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_49_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"teststring\" not found in FROM clause!\nCandidate bindings: \"t1.text1\"\nLINE 1: ...\" || text1) AS c FROM t1 WHERE text1 = \"teststring\" OR text1 > \"teststring\\\\t\"...\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "duckdb_49_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('nothing', 7), ('teststring', 10), ('teststring\\\\\\\\t', 13))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name char_length does not exist!\nDid you mean \"array_length\"?\nLINE 1: select text1, char_length(text1) from t1 order by tex...\n                      ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_49_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|nothing|',), ('|teststring|',), ('|teststring |',), ('|teststring\\\\\\\\t|',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_49_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_49_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring|',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"from\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_49_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('|teststring |',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"teststring\" not found in FROM clause!\nCandidate bindings: \"t1.text1\"\nLINE 1: select ||text1|| from t1 where text1 = \"teststring\";\n                                               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_50_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((\"Let's create some new events from the name of \",))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"Let's create some new events from the name of \" not found in FROM clause!\nLINE 1: SELECT \"Let's create some new events from the ...\n               ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "duckdb_51_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('',), ('',), ('',), ('',))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name str does not exist!\nDid you mean \"strlen\"?\nLINE 1: SELECT str(f1) AS dummy FROM t1 ORDER BY dummy...\n               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_51_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.date(2023, 1, 15),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_51_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name string_concat does not exist!\nDid you mean \"strip_accents\"?\nLINE 1: ... t1 WHERE a = '8' GROUP BY f1 ORDER BY string_concat(f1);\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_51_18", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_19", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_20", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_51_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Could not convert string 'x' to INT32\nLINE 1: INSERT INTO t1 VALUES (4, 'x' * 40005);\n                                  ^", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_51_22", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_51_23", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_51_24", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((6, 40013), (5, 40008), (4, 40005), (3, 40003), (2, 40002), (1, 40001))", "rowcount": 6, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((6, 40013), (5, 40008), (4, 40005), (3, 40003), (2, 40002), (1, 40001))", "rowcount": 6, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_52_13", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502             vc            \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502      (length(vc) > 3)     \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             vc            \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~1029 Rows        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502             vc            \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502      (length(vc) > 3)     \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             vc            \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~1029 Rows        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_52_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502             vc            \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502      (length(vc) = 3)     \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             vc            \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~1029 Rows        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502             vc            \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502      (length(vc) = 3)     \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             vc            \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~1029 Rows        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_52_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502             vc            \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502    (length(vc) IS NULL)   \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             vc            \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~1029 Rows        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502             vc            \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502    (length(vc) IS NULL)   \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             vc            \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~1029 Rows        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_52_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', '\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502             vc            \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502  (length(vc) IS NOT NULL) \u2502\\n\u2502                           \u2502\\n\u2502         ~205 Rows         \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502        Projections:       \u2502\\n\u2502             vc            \u2502\\n\u2502          col1_idx         \u2502\\n\u2502          col2_idx         \u2502\\n\u2502            col3           \u2502\\n\u2502            col4           \u2502\\n\u2502           vc_ft           \u2502\\n\u2502                           \u2502\\n\u2502         ~1029 Rows        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"LIMIT\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_53_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name string_repeat does not exist!\nDid you mean \"string_split\"?\nLINE 1: INSERT INTO t VALUES(string_repeat(x'0a',1000));\n                             ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_53_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"2\" not found in FROM clause!\nLINE 1: INSERT INTO t VALUES(1, repeat(\"2\", 257)), (1, repeat(\"1\", 257));\n                                       ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_53_18", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_53_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"REPEAT\"", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "duckdb_54_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((4,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"A\\0\\0\\0BBBBBBBB\" not found in FROM clause!\nLINE 1: INSERT INTO t1 (a) VALUES (NULL), (\"A\\0\\0\\0BBBBBBBB\"), (\" \" || REPEAT(\" \",...\n                                           ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_54_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,), (25,), (50000,), (50000,))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'length(BLOB)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tlength(VARCHAR) -> BIGINT\n\tlength(BIT) -> BIGINT\n\tlength(ANY[]) -> BIGINT\n\nLINE 1: SELECT LENGTH(a) FROM t1;\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_55_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_55_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a-4',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "duckdb_55_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a-4.5',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 1: SELECT \"a\" UNION SELECT concat(\"a\", -4.5);\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_55_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a-5',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nLINE 1: SELECT \"a\" UNION SELECT concat(\"a\", -5);\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_55_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a-1',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('a0',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a0',), ('a',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a0.0',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('a',), ('a0.0000',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('a',), ('0.0000',))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_55_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('ab',), ('ab',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"a\" not found in FROM clause!\nCandidate bindings: \"t3.1\"\nLINE 1: SELECT CONCAT((SELECT \"a\" AS x), (SELECT \"b\" AS y)) FROM (SEL...\n                              ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_55_17", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('1234562',), ('x',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"2\" not found in FROM clause!\nCandidate bindings: \"t1.f1\"\nLINE 1: select concat(f1, \"2\") a from t1 union select \"x\" a from ...\n                          ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_55_21", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"REGEXP\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_56_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name datetime_add does not exist!\nDid you mean \"date_add\"?\nLINE 1: insert into t1 values (datetime_add(NULL, \"1 day\"));\n                               ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_56_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_56_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_56_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_56_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False, datetime.time(0, 0)))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "duckdb_57_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name t1 does not exist!\nDid you mean \"pg_tables\"?\nLINE 1: SELECT * FROM t1 WHERE mydate IS NULL AND DATEDIFF('d...\n                      ^", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name t1 does not exist!\nDid you mean \"pg_tables\"?\nLINE 1: SELECT * FROM t1 WHERE ISNULL(TO_DAY(mydate));\n                      ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "duckdb_57_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \")\"", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_57_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \")\"", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \")\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_58_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('physical_plan', \"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502      prefix(a, 'abc')     \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502       Projections: a      \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a>='abc' AND a<'abd' AND a\u2502\\n\u2502         IS NOT NULL       \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\"))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('physical_plan', \"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502           FILTER          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502      prefix(a, 'abc')     \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         SEQ_SCAN          \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502             t1            \u2502\\n\u2502                           \u2502\\n\u2502       Projections: a      \u2502\\n\u2502                           \u2502\\n\u2502          Filters:         \u2502\\n\u2502 a>='abc' AND a<'abd' AND a\u2502\\n\u2502         IS NOT NULL       \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\"))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_58_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('abc',), ('abcd',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_59_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((10.0, 10.000000000000002, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((10.0, 10.000000000000002, None))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_59_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3.0, 3.9068905956085187, None))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "duckdb_59_2", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((10.0, 16.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((10.0, 16.0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_59_3", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_59_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('1'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_59_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_59_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('http://www.foo.com/',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"http://www.foo.com/\" not found in FROM clause!\nCandidate bindings: \"t1.ts\"\nLINE 1: select a from t1 where a = \"http://www.foo.com/\" order by abs(time...\n                                   ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_59_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-2, 2, -2))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_59_11", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 5, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 5, 1))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_59_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((-32.0, 2.13598703592091e+96, -32.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "duckdb_60_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('-4939092'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('-4939092'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_60_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"DIV\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_60_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name natlng does not exist!\nDid you mean \"atan\"?\nLINE 1: INSERT INTO t1 VALUES (NATLNG(1));\n                               ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_60_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((123456789.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_60_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((9223372036854774784,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Conversion Error: Type DOUBLE with value 9.223372036854775e+18 can't be cast because the value is out of range for the destination type INT32\nLINE 1: SELECT cast(pow(2,63) - 1024 AS signed) as pp;\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_60_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-9223372036854775808,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-9223372036854775808,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_60_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"AS\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_60_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_60_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_60_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_61_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('0cc175b9c0f1b6a831c399e269772661', '3063633137356239633066316236613833316333393965323639373732363631'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('0cc175b9c0f1b6a831c399e269772661', '3063633137356239633066316236613833316333393965323639373732363631'))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 0, "FN": 0}
{"sql_id": "duckdb_61_2", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_61_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('5d41402abc4b2a76b9719d911017c592',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5d41402abc4b2a76b9719d911017c592',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_61_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('physical_plan', \"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         PROJECTION        \u2502\\n\u2502    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\\n\u2502'5d41402abc4b2a76b9719d9110\u2502\\n\u2502          17c592'          \u2502\\n\u2502                           \u2502\\n\u2502          ~1 Rows          \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502         DUMMY_SCAN        \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\"))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"hello\" not found in FROM clause!\nLINE 1: SELECT MD5(\"hello\");\n                   ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_61_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((46,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name bytes does not exist!\nDid you mean \"to_years\"?\nLINE 1: select length(bytes(hex(md5(\"abrakadabra\"))));\n                      ^", "exec_able": false}}, "TP": 2, "FP": 3, "FN": 1}
{"sql_id": "duckdb_61_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"your\"", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_61_9", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_61_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('test', '098f6bcd4621d373cade4e832627b4f6'), ('test', '098f6bcd4621d373cade4e832627b4f6'))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"TEST\" not found in FROM clause!\nCandidate bindings: \"t1.f1\"\nLINE 1: ...ROM t1 WHERE f1 = 'test' AND (f2 = MD5(\"TEST\") OR f2 = MD5(\"test\"));\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 0}
{"sql_id": "duckdb_62_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 1, 6, 12, 34),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'substr(TIMESTAMP, INTEGER_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tsubstr(VARCHAR, BIGINT, BIGINT) -> VARCHAR\n\tsubstr(VARCHAR, BIGINT) -> VARCHAR\n\nLINE 1: SELECT a FROM t1 WHERE SUBSTR(a,6,3) IN (SUBSTR(\"2004010612340...\n                               ^", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_62_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2004, 1, 6, 12, 34),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_62_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,), (2,))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_62_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_63_0", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2, 0, 3, 1.6, 3, 3, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2, 0, 3, 1.6, 3, 3, 4))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_63_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3, 1, 3))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_63_7", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1, 1, 7, 3), (3, 3, 7, 3), (2, None, None, None))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1, 1, 7, 3), (3, 3, 7, 3), (2, None, None, None))", "rowcount": 3, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_64_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('000002',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date_format does not exist!\nDid you mean \"date_part\"?\nLINE 1: SELECT date_format(\"1997-12-31 23:59:59.000002...\n               ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_64_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_64_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(3, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT DATE(CAST(STRFTIME(\"1997-03-01 00:00:00...\n               ^", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "duckdb_64_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1997, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT DATE(\"1997-01\");\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_64_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1996, 12, 31, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT DATE(\"1997-01-01\");\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_64_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(9999, 12, 31, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT DATE(\"9999-01-01\");\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_64_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('10000-01-01 00:00:00',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT DATE(\"9999-03-01\");\n               ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_64_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(100, 1, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name date does not exist!\nDid you mean \"datesub\"?\nLINE 1: SELECT DATE('100-01-01');\n               ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_64_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(1997, 12, 30, 22, 58, 57, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\"1997-12-31 23:59:59.000001\"\"", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_64_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1, seconds=82738),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"seconds\"", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_64_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(23, 0, 0, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 1}
{"sql_id": "duckdb_64_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(1, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name subtime does not exist!\nDid you mean \"substring\"?\nLINE 1: SELECT subtime(CAST(\"02:01:01.999999\" AS TIME)...\n               ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_64_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=366, seconds=86399, microseconds=999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "duckdb_64_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=1, seconds=82737, microseconds=999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name time_diff does not exist!\nDid you mean \"date_diff\"?\nLINE 1: SELECT TIME_DIFF(\"1997-12-31 23:59:59.000001\",...\n               ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_64_18", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1, seconds=86399, microseconds=999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\"2005-01-11 15:48:49.999999\"\"", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_65_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_65_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.time(20, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 1, 1, 1, 999999),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name create_timestamp does not exist!\nDid you mean \"current_localtimestamp\"?\nLINE 1: select create_timestamp(\"2001-12-01\", \"01:01:0...\n               ^", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 0}
{"sql_id": "duckdb_65_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 10, 1, 1, 1, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'2001-10-01'\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 20, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((datetime.time(20, 1, 1),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_65_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2001, 12, 1, 0, 0),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'2001-12-01 00:00:00.000000'\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_65_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((31,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"%d\" not found in FROM clause!\nLINE 1: select strftime(\"%d\", \"1997-12-31 23:59:59.000001\"); --...\n                        ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_65_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('23:59:59.000001',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"TIMESTAMP\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_65_12", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-31), None, None, datetime.timedelta(days=-11354)), (datetime.timedelta(days=1096, seconds=3661, microseconds=999999), datetime.timedelta(seconds=86338), datetime.timedelta(days=-1, seconds=62), datetime.timedelta(days=-10227, seconds=86339, microseconds=999999)), (datetime.timedelta(days=-1097, seconds=82738, microseconds=1), datetime.timedelta(days=-1, seconds=62), datetime.timedelta(seconds=86338), datetime.timedelta(days=-11324, seconds=82740)), (None, None, None, None))", "rowcount": 4, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "duckdb_65_13", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.datetime(2003, 1, 2, 10, 11, 12),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name maketime does not exist!\nDid you mean \"make_time\"?\nLINE 1: SELECT MAKETIME(SUBSTR(\"2003-01-02 10:11:12.00...\n               ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_65_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((datetime.timedelta(days=-1), '00:00:00'))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'00:00:00'\"", "exec_able": false}}, "TP": 1, "FP": 3, "FN": 1}
{"sql_id": "duckdb_65_15", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((False,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'2008-09-29 20:10:10'\"", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "duckdb_65_16", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name <==> does not exist!\nDid you mean \"<=>\"?\nLINE 1: ...10' - TIMESTAMP '2008-09-30 20:10:10') <==> INTERVAL '0 seconds';\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "duckdb_66_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'23:59:59'\"", "exec_able": false}}, "TP": 0, "FP": 2, "FN": 2}
{"sql_id": "duckdb_66_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_66_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"'23:59:59'\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_66_4", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_66_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_67_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('2', 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 1}
{"sql_id": "duckdb_67_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 0, Decimal('0.0'), 0.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_67_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 0, Decimal('0.0'), 0.0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 1, Decimal('1.0'), 1.0))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_67_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'one'), (2, 'one'), (4, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "duckdb_67_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 'one'), (2, 'one'), (4, 'two'))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "duckdb_68_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16\";\"0\";\"4\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: No function matches the given name and argument types 'string_agg(VARCHAR, VARCHAR, INTEGER, INTEGER, INTEGER, VARCHAR, TIMESTAMP, TIMESTAMP, INTEGER, INTEGER)'. You might need to add explicit type casts.\n\tCandidate functions:\n\tstring_agg(ANY) -> VARCHAR\n\tstring_agg(ANY, VARCHAR) -> VARCHAR\n\nLINE 1: SELECT CONCAT('\"', STRING_AGG(';', title, prio, category, ...\n                           ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 1}
{"sql_id": "duckdb_68_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\";\"0\";\"4\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('\"Link\";\"1\";\"1\";\"1\";\"0\";\"4\"',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 2, "FP": 1, "FN": 0}
{"sql_id": "duckdb_68_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('Link\";\"1\";\"1\";\"1\";\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\"2001-02-28 08:40:16\";\"2001-02-28 08:40:16\";\"0\";\"4',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "duckdb_68_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('</a>',), ('</a>..........................',))", "rowcount": 2, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: zero-length delimited identifier at or near \"\"\"\"", "exec_able": false}}, "TP": 2, "FP": 6, "FN": 1}
{"sql_id": "duckdb_69_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True, True, True, False, False, True, -1, 1, 0))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "duckdb_69_4", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "(('abc',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('abc',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_69_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"mod\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_69_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_8", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((None,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_11", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((123456789,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_69_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((234567890,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_13", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((-1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_69_14", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('5',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name to_number does not exist!\nDid you mean \"to_minutes\"?\nLINE 1: SELECT GREATEST(TO_NUMBER(\"11\"), TO_NUMBER(\"5\"), TO_NUM...\n                        ^", "exec_able": false}}, "TP": 1, "FP": 4, "FN": 0}
{"sql_id": "duckdb_70_1", "EM": 0, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_70_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(('11',))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_70_4", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_5", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_70_6", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((5,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(('5',))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_7", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_8", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((11,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((Decimal('5.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_10", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_11", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((Decimal('11.00'),))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_15", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((18446744073709551615,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((18446744073709551615,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_20", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_70_27", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2.0,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_70_28", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((2,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_1_33", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"xyzzy\" not found in FROM clause!\nLINE 1: ...b, c, d) VALUES (32, 6, 'seis', REPEAT(\"xyzzy\", 10000));\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_10_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((200,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name str_repeat does not exist!\nDid you mean \"str_split_regex\"?\nLINE 1: INSERT INTO tidrangescan SELECT i, str_repeat(\"x\", 100) FROM generate_seri...\n                                           ^", "exec_able": false}}, "TP": 1, "FP": 2, "FN": 1}
{"sql_id": "duckdb_12_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,), (2,), (3,))", "rowcount": 3, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(([1, 2, 3],))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_12_1", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 3), (3, 4), (3, 5))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_12_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1, 1), (1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (2, 4))", "rowcount": 8, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "(([1, 2], [1, 2, 3, 4]))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_2_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 1, "FP": 6, "FN": 0}
{"sql_id": "duckdb_2_6", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 0}
{"sql_id": "duckdb_3_3", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Scalar Function with name str_repeat does not exist!\nDid you mean \"str_split_regex\"?\nLINE 1: ... delete_test (id, a, b) VALUES (2, 50, STR_repeat('x', 10000));\n                                                  ^", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_4_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((True,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 1, "FP": 1, "FN": 0}
{"sql_id": "duckdb_5_0", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "(([],))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name schema_names does not exist!\nDid you mean \"information_schema.schemata\"?\nLINE 1: SELECT name FROM systemcatalog.schema_names;\n                         ^", "exec_able": false}}, "TP": 0, "FP": 3, "FN": 1}
{"sql_id": "duckdb_6_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "duckdb_6_5", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
{"sql_id": "duckdb_6_10", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Table with name extremely_skewed does not exist!\nDid you mean \"sqlite_temp_master\"?", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 4, "FN": 1}
{"sql_id": "duckdb_6_12", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 1, "FP": 0, "FN": 1}
{"sql_id": "duckdb_6_14", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Binder Error: Referenced column \"xxxxx\" not found in FROM clause!\nLINE 1: ...AS SELECT generate_series(1, 3) AS id, \"xxxxx\"::text AS t;\n                                                  ^", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_6_16", "EM": 1, "EX": {"ex_bool": true, "gold_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((1,))", "rowcount": 1, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_7_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((3000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "duckdb_7_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((30000,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 1}
{"sql_id": "duckdb_7_9", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((0, 0, ['0000', '0002'], 1000), (1, 1000, ['0001', '0003'], 1000), (2, 2000, ['0000', '0002'], 1000), (10, 0, ['0000', '0002'], 1000), (11, 1000, ['0001', '0003'], 1000), (12, 2000, ['0000', '0002'], 1000), (20, 0, ['0002', '0000'], 1000), (21, 1000, ['0001', '0003'], 1000), (22, 2000, ['0002', '0000'], 1000))", "rowcount": 9, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "((0, 0, ['0002', '0000'], 1000), (1, 1000, ['0001', '0003'], 1000), (2, 2000, ['0002', '0000'], 1000), (10, 0, ['0002', '0000'], 1000), (11, 1000, ['0001', '0003'], 1000), (12, 2000, ['0000', '0002'], 1000), (20, 0, ['0000', '0002'], 1000), (21, 1000, ['0001', '0003'], 1000), (22, 2000, ['0000', '0002'], 1000))", "rowcount": 9, "error_message": "None", "exec_able": true}}, "TP": 0, "FP": 0, "FN": 1}
{"sql_id": "duckdb_8_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((300,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"\\\"", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 2}
{"sql_id": "duckdb_8_7", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "((200,))", "rowcount": 1, "error_message": "None", "exec_able": true}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: unterminated quoted identifier at or near \"\"\"", "exec_able": false}}, "TP": 0, "FP": 1, "FN": 2}
{"sql_id": "duckdb_9_2", "EM": 0, "EX": {"ex_bool": false, "gold_exec_result": {"result": "None", "rowcount": -1, "error_message": "Catalog Error: Sequence with name seq3 does not exist!", "exec_able": false}, "predict_exec_result": {"result": "None", "rowcount": -1, "error_message": "Parser Error: syntax error at or near \"<\"", "exec_able": false}}, "TP": 0, "FP": 6, "FN": 1}
